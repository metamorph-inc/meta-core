#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Thu Jul 17 14:07:58 2014 by generateDS.py version 2.12d.
#
# Command line options:
#   ('-o', 'aa')
#
# Command line arguments:
#   ..\..\META\generated\CAD\generated\CADMetrics.xsd
#
# Command line:
#   C:\Users\snyako.ISIS\Desktop\generateDS-2.12d\generateDS.py -o "aa" ..\..\META\generated\CAD\generated\CADMetrics.xsd
#
# Current working directory (os.getcwd()):
#   multibody
#

import sys
import getopt
import re as re_
import base64
import datetime as datetime_
import six

etree_ = None
Verbose_import_ = False
(
    XMLParser_import_none, XMLParser_import_lxml,
    XMLParser_import_elementtree
) = list(range(3))
XMLParser_import_library = None
try:
    # lxml
    from lxml import etree as etree_
    XMLParser_import_library = XMLParser_import_lxml
    if Verbose_import_:
        print("running with lxml.etree")
except ImportError:
    try:
        # cElementTree from Python 2.5+
        import xml.etree.cElementTree as etree_
        XMLParser_import_library = XMLParser_import_elementtree
        if Verbose_import_:
            print("running with cElementTree on Python 2.5+")
    except ImportError:
        try:
            # ElementTree from Python 2.5+
            import xml.etree.ElementTree as etree_
            XMLParser_import_library = XMLParser_import_elementtree
            if Verbose_import_:
                print("running with ElementTree on Python 2.5+")
        except ImportError:
            try:
                # normal cElementTree install
                import cElementTree as etree_
                XMLParser_import_library = XMLParser_import_elementtree
                if Verbose_import_:
                    print("running with cElementTree")
            except ImportError:
                try:
                    # normal ElementTree install
                    import elementtree.ElementTree as etree_
                    XMLParser_import_library = XMLParser_import_elementtree
                    if Verbose_import_:
                        print("running with ElementTree")
                except ImportError:
                    raise ImportError(
                        "Failed to import ElementTree from any known place")


def parsexml_(*args, **kwargs):
    if (XMLParser_import_library == XMLParser_import_lxml and
            'parser' not in kwargs):
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        kwargs['parser'] = etree_.ETCompatXMLParser()
    doc = etree_.parse(*args, **kwargs)
    return doc

#
# User methods
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError as exp:

    class GeneratedsSuper(object):
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_integer_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integers')
            return input_data
        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')
        def gds_validate_float(self, input_data, node, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_float_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of floats')
            return input_data
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_double_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of doubles')
            return input_data
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_validate_boolean(self, input_data, node, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_boolean_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(
                        node,
                        'Requires sequence of booleans '
                        '("true", "1", "false", "0")')
            return input_data
        def gds_validate_datetime(self, input_data, node, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in six.iteritems(mapping)))


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'ascii'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    if not inStr:
        return ''
    s1 = (isinstance(inStr, six.string_types) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, six.string_types) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    if XMLParser_import_library == XMLParser_import_lxml:
        msg = '%s (element %s/line %d)' % (
            msg, node.tag, node.sourceline, )
    else:
        msg = '%s (element %s)' % (msg, node.tag, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace, pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(outfile, level, namespace, name, pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name, base64.b64encode(self.value), self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type, self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type, self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0):
        self.name = name
        self.data_type = data_type
        self.container = container
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class ComponentInstanceDataType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, _derived=None, _real_archetype=None, _desynched_atts=None, ComponentInstanceID=None, Primary=None, _subtype=None, _instances=None, _archetype=None, _id=None, Secondary=None):
        self.original_tagname_ = None
        self._derived = _cast(None, _derived)
        self._real_archetype = _cast(bool, _real_archetype)
        self._desynched_atts = _cast(None, _desynched_atts)
        self.ComponentInstanceID = _cast(None, ComponentInstanceID)
        self.Primary = _cast(None, Primary)
        self._subtype = _cast(bool, _subtype)
        self._instances = _cast(None, _instances)
        self._archetype = _cast(None, _archetype)
        self._id = _cast(None, _id)
        self.Secondary = _cast(None, Secondary)
    def factory(*args_, **kwargs_):
        if ComponentInstanceDataType.subclass:
            return ComponentInstanceDataType.subclass(*args_, **kwargs_)
        else:
            return ComponentInstanceDataType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get__derived(self): return self._derived
    def set__derived(self, _derived): self._derived = _derived
    def get__real_archetype(self): return self._real_archetype
    def set__real_archetype(self, _real_archetype): self._real_archetype = _real_archetype
    def get__desynched_atts(self): return self._desynched_atts
    def set__desynched_atts(self, _desynched_atts): self._desynched_atts = _desynched_atts
    def get_ComponentInstanceID(self): return self.ComponentInstanceID
    def set_ComponentInstanceID(self, ComponentInstanceID): self.ComponentInstanceID = ComponentInstanceID
    def get_Primary(self): return self.Primary
    def set_Primary(self, Primary): self.Primary = Primary
    def get__subtype(self): return self._subtype
    def set__subtype(self, _subtype): self._subtype = _subtype
    def get__instances(self): return self._instances
    def set__instances(self, _instances): self._instances = _instances
    def get__archetype(self): return self._archetype
    def set__archetype(self, _archetype): self._archetype = _archetype
    def get__id(self): return self._id
    def set__id(self, _id): self._id = _id
    def get_Secondary(self): return self.Secondary
    def set_Secondary(self, Secondary): self.Secondary = Secondary
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ComponentInstanceDataType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ComponentInstanceDataType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ComponentInstanceDataType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ComponentInstanceDataType'):
        if self._derived is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            outfile.write(' _derived=%s' % (self.gds_format_string(quote_attrib(self._derived).encode(ExternalEncoding), input_name='_derived'), ))
        if self._real_archetype is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            outfile.write(' _real_archetype="%s"' % self.gds_format_boolean(self._real_archetype, input_name='_real_archetype'))
        if self._desynched_atts is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            outfile.write(' _desynched_atts=%s' % (self.gds_format_string(quote_attrib(self._desynched_atts).encode(ExternalEncoding), input_name='_desynched_atts'), ))
        if self.ComponentInstanceID is not None and 'ComponentInstanceID' not in already_processed:
            already_processed.add('ComponentInstanceID')
            outfile.write(' ComponentInstanceID=%s' % (self.gds_format_string(quote_attrib(self.ComponentInstanceID).encode(ExternalEncoding), input_name='ComponentInstanceID'), ))
        if self.Primary is not None and 'Primary' not in already_processed:
            already_processed.add('Primary')
            outfile.write(' Primary=%s' % (self.gds_format_string(quote_attrib(self.Primary).encode(ExternalEncoding), input_name='Primary'), ))
        if self._subtype is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            outfile.write(' _subtype="%s"' % self.gds_format_boolean(self._subtype, input_name='_subtype'))
        if self._instances is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            outfile.write(' _instances=%s' % (self.gds_format_string(quote_attrib(self._instances).encode(ExternalEncoding), input_name='_instances'), ))
        if self._archetype is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            outfile.write(' _archetype=%s' % (self.gds_format_string(quote_attrib(self._archetype).encode(ExternalEncoding), input_name='_archetype'), ))
        if self._id is not None and '_id' not in already_processed:
            already_processed.add('_id')
            outfile.write(' _id=%s' % (self.gds_format_string(quote_attrib(self._id).encode(ExternalEncoding), input_name='_id'), ))
        if self.Secondary is not None and 'Secondary' not in already_processed:
            already_processed.add('Secondary')
            outfile.write(' Secondary=%s' % (self.gds_format_string(quote_attrib(self.Secondary).encode(ExternalEncoding), input_name='Secondary'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='ComponentInstanceDataType', fromsubclass_=False, pretty_print=True):
        pass
    def exportLiteral(self, outfile, level, name_='ComponentInstanceDataType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self._derived is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            showIndent(outfile, level)
            outfile.write('_derived="%s",\n' % (self._derived,))
        if self._real_archetype is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            showIndent(outfile, level)
            outfile.write('_real_archetype=%s,\n' % (self._real_archetype,))
        if self._desynched_atts is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            showIndent(outfile, level)
            outfile.write('_desynched_atts="%s",\n' % (self._desynched_atts,))
        if self.ComponentInstanceID is not None and 'ComponentInstanceID' not in already_processed:
            already_processed.add('ComponentInstanceID')
            showIndent(outfile, level)
            outfile.write('ComponentInstanceID="%s",\n' % (self.ComponentInstanceID,))
        if self.Primary is not None and 'Primary' not in already_processed:
            already_processed.add('Primary')
            showIndent(outfile, level)
            outfile.write('Primary="%s",\n' % (self.Primary,))
        if self._subtype is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            showIndent(outfile, level)
            outfile.write('_subtype=%s,\n' % (self._subtype,))
        if self._instances is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            showIndent(outfile, level)
            outfile.write('_instances="%s",\n' % (self._instances,))
        if self._archetype is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            showIndent(outfile, level)
            outfile.write('_archetype="%s",\n' % (self._archetype,))
        if self._id is not None and '_id' not in already_processed:
            already_processed.add('_id')
            showIndent(outfile, level)
            outfile.write('_id="%s",\n' % (self._id,))
        if self.Secondary is not None and 'Secondary' not in already_processed:
            already_processed.add('Secondary')
            showIndent(outfile, level)
            outfile.write('Secondary="%s",\n' % (self.Secondary,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('_derived', node)
        if value is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            self._derived = value
        value = find_attr_value_('_real_archetype', node)
        if value is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            if value in ('true', '1'):
                self._real_archetype = True
            elif value in ('false', '0'):
                self._real_archetype = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('_desynched_atts', node)
        if value is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            self._desynched_atts = value
        value = find_attr_value_('ComponentInstanceID', node)
        if value is not None and 'ComponentInstanceID' not in already_processed:
            already_processed.add('ComponentInstanceID')
            self.ComponentInstanceID = value
        value = find_attr_value_('Primary', node)
        if value is not None and 'Primary' not in already_processed:
            already_processed.add('Primary')
            self.Primary = value
        value = find_attr_value_('_subtype', node)
        if value is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            if value in ('true', '1'):
                self._subtype = True
            elif value in ('false', '0'):
                self._subtype = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('_instances', node)
        if value is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            self._instances = value
        value = find_attr_value_('_archetype', node)
        if value is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            self._archetype = value
        value = find_attr_value_('_id', node)
        if value is not None and '_id' not in already_processed:
            already_processed.add('_id')
            self._id = value
        value = find_attr_value_('Secondary', node)
        if value is not None and 'Secondary' not in already_processed:
            already_processed.add('Secondary')
            self.Secondary = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class ComponentInstanceDataType


class JointsMetaDataType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, _derived=None, _real_archetype=None, _archetype=None, _subtype=None, _instances=None, _desynched_atts=None, _id=None, ComponentInstanceData=None):
        self.original_tagname_ = None
        self._derived = _cast(None, _derived)
        self._real_archetype = _cast(bool, _real_archetype)
        self._archetype = _cast(None, _archetype)
        self._subtype = _cast(bool, _subtype)
        self._instances = _cast(None, _instances)
        self._desynched_atts = _cast(None, _desynched_atts)
        self._id = _cast(None, _id)
        if ComponentInstanceData is None:
            self.ComponentInstanceData = []
        else:
            self.ComponentInstanceData = ComponentInstanceData
    def factory(*args_, **kwargs_):
        if JointsMetaDataType.subclass:
            return JointsMetaDataType.subclass(*args_, **kwargs_)
        else:
            return JointsMetaDataType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ComponentInstanceData(self): return self.ComponentInstanceData
    def set_ComponentInstanceData(self, ComponentInstanceData): self.ComponentInstanceData = ComponentInstanceData
    def add_ComponentInstanceData(self, value): self.ComponentInstanceData.append(value)
    def insert_ComponentInstanceData(self, index, value): self.ComponentInstanceData[index] = value
    def get__derived(self): return self._derived
    def set__derived(self, _derived): self._derived = _derived
    def get__real_archetype(self): return self._real_archetype
    def set__real_archetype(self, _real_archetype): self._real_archetype = _real_archetype
    def get__archetype(self): return self._archetype
    def set__archetype(self, _archetype): self._archetype = _archetype
    def get__subtype(self): return self._subtype
    def set__subtype(self, _subtype): self._subtype = _subtype
    def get__instances(self): return self._instances
    def set__instances(self, _instances): self._instances = _instances
    def get__desynched_atts(self): return self._desynched_atts
    def set__desynched_atts(self, _desynched_atts): self._desynched_atts = _desynched_atts
    def get__id(self): return self._id
    def set__id(self, _id): self._id = _id
    def hasContent_(self):
        if (
            self.ComponentInstanceData
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='JointsMetaDataType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='JointsMetaDataType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='JointsMetaDataType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='JointsMetaDataType'):
        if self._derived is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            outfile.write(' _derived=%s' % (self.gds_format_string(quote_attrib(self._derived).encode(ExternalEncoding), input_name='_derived'), ))
        if self._real_archetype is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            outfile.write(' _real_archetype="%s"' % self.gds_format_boolean(self._real_archetype, input_name='_real_archetype'))
        if self._archetype is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            outfile.write(' _archetype=%s' % (self.gds_format_string(quote_attrib(self._archetype).encode(ExternalEncoding), input_name='_archetype'), ))
        if self._subtype is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            outfile.write(' _subtype="%s"' % self.gds_format_boolean(self._subtype, input_name='_subtype'))
        if self._instances is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            outfile.write(' _instances=%s' % (self.gds_format_string(quote_attrib(self._instances).encode(ExternalEncoding), input_name='_instances'), ))
        if self._desynched_atts is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            outfile.write(' _desynched_atts=%s' % (self.gds_format_string(quote_attrib(self._desynched_atts).encode(ExternalEncoding), input_name='_desynched_atts'), ))
        if self._id is not None and '_id' not in already_processed:
            already_processed.add('_id')
            outfile.write(' _id=%s' % (self.gds_format_string(quote_attrib(self._id).encode(ExternalEncoding), input_name='_id'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='JointsMetaDataType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for ComponentInstanceData_ in self.ComponentInstanceData:
            ComponentInstanceData_.export(outfile, level, namespace_, name_='ComponentInstanceData', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='JointsMetaDataType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self._derived is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            showIndent(outfile, level)
            outfile.write('_derived="%s",\n' % (self._derived,))
        if self._real_archetype is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            showIndent(outfile, level)
            outfile.write('_real_archetype=%s,\n' % (self._real_archetype,))
        if self._archetype is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            showIndent(outfile, level)
            outfile.write('_archetype="%s",\n' % (self._archetype,))
        if self._subtype is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            showIndent(outfile, level)
            outfile.write('_subtype=%s,\n' % (self._subtype,))
        if self._instances is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            showIndent(outfile, level)
            outfile.write('_instances="%s",\n' % (self._instances,))
        if self._desynched_atts is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            showIndent(outfile, level)
            outfile.write('_desynched_atts="%s",\n' % (self._desynched_atts,))
        if self._id is not None and '_id' not in already_processed:
            already_processed.add('_id')
            showIndent(outfile, level)
            outfile.write('_id="%s",\n' % (self._id,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('ComponentInstanceData=[\n')
        level += 1
        for ComponentInstanceData_ in self.ComponentInstanceData:
            showIndent(outfile, level)
            outfile.write('model_.ComponentInstanceDataType(\n')
            ComponentInstanceData_.exportLiteral(outfile, level, name_='ComponentInstanceDataType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('_derived', node)
        if value is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            self._derived = value
        value = find_attr_value_('_real_archetype', node)
        if value is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            if value in ('true', '1'):
                self._real_archetype = True
            elif value in ('false', '0'):
                self._real_archetype = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('_archetype', node)
        if value is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            self._archetype = value
        value = find_attr_value_('_subtype', node)
        if value is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            if value in ('true', '1'):
                self._subtype = True
            elif value in ('false', '0'):
                self._subtype = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('_instances', node)
        if value is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            self._instances = value
        value = find_attr_value_('_desynched_atts', node)
        if value is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            self._desynched_atts = value
        value = find_attr_value_('_id', node)
        if value is not None and '_id' not in already_processed:
            already_processed.add('_id')
            self._id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ComponentInstanceData':
            obj_ = ComponentInstanceDataType.factory()
            obj_.build(child_)
            self.ComponentInstanceData.append(obj_)
            obj_.original_tagname_ = 'ComponentInstanceData'
# end class JointsMetaDataType


class ConstrainedToComponentsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, _derived=None, _real_archetype=None, _archetype=None, _subtype=None, _instances=None, _desynched_atts=None, _id=None, ConstrainedToComponent=None):
        self.original_tagname_ = None
        self._derived = _cast(None, _derived)
        self._real_archetype = _cast(bool, _real_archetype)
        self._archetype = _cast(None, _archetype)
        self._subtype = _cast(bool, _subtype)
        self._instances = _cast(None, _instances)
        self._desynched_atts = _cast(None, _desynched_atts)
        self._id = _cast(None, _id)
        if ConstrainedToComponent is None:
            self.ConstrainedToComponent = []
        else:
            self.ConstrainedToComponent = ConstrainedToComponent
    def factory(*args_, **kwargs_):
        if ConstrainedToComponentsType.subclass:
            return ConstrainedToComponentsType.subclass(*args_, **kwargs_)
        else:
            return ConstrainedToComponentsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ConstrainedToComponent(self): return self.ConstrainedToComponent
    def set_ConstrainedToComponent(self, ConstrainedToComponent): self.ConstrainedToComponent = ConstrainedToComponent
    def add_ConstrainedToComponent(self, value): self.ConstrainedToComponent.append(value)
    def insert_ConstrainedToComponent(self, index, value): self.ConstrainedToComponent[index] = value
    def get__derived(self): return self._derived
    def set__derived(self, _derived): self._derived = _derived
    def get__real_archetype(self): return self._real_archetype
    def set__real_archetype(self, _real_archetype): self._real_archetype = _real_archetype
    def get__archetype(self): return self._archetype
    def set__archetype(self, _archetype): self._archetype = _archetype
    def get__subtype(self): return self._subtype
    def set__subtype(self, _subtype): self._subtype = _subtype
    def get__instances(self): return self._instances
    def set__instances(self, _instances): self._instances = _instances
    def get__desynched_atts(self): return self._desynched_atts
    def set__desynched_atts(self, _desynched_atts): self._desynched_atts = _desynched_atts
    def get__id(self): return self._id
    def set__id(self, _id): self._id = _id
    def hasContent_(self):
        if (
            self.ConstrainedToComponent
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ConstrainedToComponentsType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ConstrainedToComponentsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ConstrainedToComponentsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ConstrainedToComponentsType'):
        if self._derived is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            outfile.write(' _derived=%s' % (self.gds_format_string(quote_attrib(self._derived).encode(ExternalEncoding), input_name='_derived'), ))
        if self._real_archetype is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            outfile.write(' _real_archetype="%s"' % self.gds_format_boolean(self._real_archetype, input_name='_real_archetype'))
        if self._archetype is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            outfile.write(' _archetype=%s' % (self.gds_format_string(quote_attrib(self._archetype).encode(ExternalEncoding), input_name='_archetype'), ))
        if self._subtype is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            outfile.write(' _subtype="%s"' % self.gds_format_boolean(self._subtype, input_name='_subtype'))
        if self._instances is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            outfile.write(' _instances=%s' % (self.gds_format_string(quote_attrib(self._instances).encode(ExternalEncoding), input_name='_instances'), ))
        if self._desynched_atts is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            outfile.write(' _desynched_atts=%s' % (self.gds_format_string(quote_attrib(self._desynched_atts).encode(ExternalEncoding), input_name='_desynched_atts'), ))
        if self._id is not None and '_id' not in already_processed:
            already_processed.add('_id')
            outfile.write(' _id=%s' % (self.gds_format_string(quote_attrib(self._id).encode(ExternalEncoding), input_name='_id'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='ConstrainedToComponentsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for ConstrainedToComponent_ in self.ConstrainedToComponent:
            ConstrainedToComponent_.export(outfile, level, namespace_, name_='ConstrainedToComponent', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='ConstrainedToComponentsType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self._derived is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            showIndent(outfile, level)
            outfile.write('_derived="%s",\n' % (self._derived,))
        if self._real_archetype is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            showIndent(outfile, level)
            outfile.write('_real_archetype=%s,\n' % (self._real_archetype,))
        if self._archetype is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            showIndent(outfile, level)
            outfile.write('_archetype="%s",\n' % (self._archetype,))
        if self._subtype is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            showIndent(outfile, level)
            outfile.write('_subtype=%s,\n' % (self._subtype,))
        if self._instances is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            showIndent(outfile, level)
            outfile.write('_instances="%s",\n' % (self._instances,))
        if self._desynched_atts is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            showIndent(outfile, level)
            outfile.write('_desynched_atts="%s",\n' % (self._desynched_atts,))
        if self._id is not None and '_id' not in already_processed:
            already_processed.add('_id')
            showIndent(outfile, level)
            outfile.write('_id="%s",\n' % (self._id,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('ConstrainedToComponent=[\n')
        level += 1
        for ConstrainedToComponent_ in self.ConstrainedToComponent:
            showIndent(outfile, level)
            outfile.write('model_.ConstrainedToComponentType(\n')
            ConstrainedToComponent_.exportLiteral(outfile, level, name_='ConstrainedToComponentType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('_derived', node)
        if value is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            self._derived = value
        value = find_attr_value_('_real_archetype', node)
        if value is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            if value in ('true', '1'):
                self._real_archetype = True
            elif value in ('false', '0'):
                self._real_archetype = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('_archetype', node)
        if value is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            self._archetype = value
        value = find_attr_value_('_subtype', node)
        if value is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            if value in ('true', '1'):
                self._subtype = True
            elif value in ('false', '0'):
                self._subtype = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('_instances', node)
        if value is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            self._instances = value
        value = find_attr_value_('_desynched_atts', node)
        if value is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            self._desynched_atts = value
        value = find_attr_value_('_id', node)
        if value is not None and '_id' not in already_processed:
            already_processed.add('_id')
            self._id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ConstrainedToComponent':
            obj_ = ConstrainedToComponentType.factory()
            obj_.build(child_)
            self.ConstrainedToComponent.append(obj_)
            obj_.original_tagname_ = 'ConstrainedToComponent'
# end class ConstrainedToComponentsType


class ConstrainedToComponentType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, _derived=None, _real_archetype=None, _archetype=None, ComponentInstanceID=None, _subtype=None, _instances=None, _desynched_atts=None, _id=None):
        self.original_tagname_ = None
        self._derived = _cast(None, _derived)
        self._real_archetype = _cast(bool, _real_archetype)
        self._archetype = _cast(None, _archetype)
        self.ComponentInstanceID = _cast(None, ComponentInstanceID)
        self._subtype = _cast(bool, _subtype)
        self._instances = _cast(None, _instances)
        self._desynched_atts = _cast(None, _desynched_atts)
        self._id = _cast(None, _id)
    def factory(*args_, **kwargs_):
        if ConstrainedToComponentType.subclass:
            return ConstrainedToComponentType.subclass(*args_, **kwargs_)
        else:
            return ConstrainedToComponentType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get__derived(self): return self._derived
    def set__derived(self, _derived): self._derived = _derived
    def get__real_archetype(self): return self._real_archetype
    def set__real_archetype(self, _real_archetype): self._real_archetype = _real_archetype
    def get__archetype(self): return self._archetype
    def set__archetype(self, _archetype): self._archetype = _archetype
    def get_ComponentInstanceID(self): return self.ComponentInstanceID
    def set_ComponentInstanceID(self, ComponentInstanceID): self.ComponentInstanceID = ComponentInstanceID
    def get__subtype(self): return self._subtype
    def set__subtype(self, _subtype): self._subtype = _subtype
    def get__instances(self): return self._instances
    def set__instances(self, _instances): self._instances = _instances
    def get__desynched_atts(self): return self._desynched_atts
    def set__desynched_atts(self, _desynched_atts): self._desynched_atts = _desynched_atts
    def get__id(self): return self._id
    def set__id(self, _id): self._id = _id
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ConstrainedToComponentType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ConstrainedToComponentType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ConstrainedToComponentType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ConstrainedToComponentType'):
        if self._derived is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            outfile.write(' _derived=%s' % (self.gds_format_string(quote_attrib(self._derived).encode(ExternalEncoding), input_name='_derived'), ))
        if self._real_archetype is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            outfile.write(' _real_archetype="%s"' % self.gds_format_boolean(self._real_archetype, input_name='_real_archetype'))
        if self._archetype is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            outfile.write(' _archetype=%s' % (self.gds_format_string(quote_attrib(self._archetype).encode(ExternalEncoding), input_name='_archetype'), ))
        if self.ComponentInstanceID is not None and 'ComponentInstanceID' not in already_processed:
            already_processed.add('ComponentInstanceID')
            outfile.write(' ComponentInstanceID=%s' % (self.gds_format_string(quote_attrib(self.ComponentInstanceID).encode(ExternalEncoding), input_name='ComponentInstanceID'), ))
        if self._subtype is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            outfile.write(' _subtype="%s"' % self.gds_format_boolean(self._subtype, input_name='_subtype'))
        if self._instances is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            outfile.write(' _instances=%s' % (self.gds_format_string(quote_attrib(self._instances).encode(ExternalEncoding), input_name='_instances'), ))
        if self._desynched_atts is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            outfile.write(' _desynched_atts=%s' % (self.gds_format_string(quote_attrib(self._desynched_atts).encode(ExternalEncoding), input_name='_desynched_atts'), ))
        if self._id is not None and '_id' not in already_processed:
            already_processed.add('_id')
            outfile.write(' _id=%s' % (self.gds_format_string(quote_attrib(self._id).encode(ExternalEncoding), input_name='_id'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='ConstrainedToComponentType', fromsubclass_=False, pretty_print=True):
        pass
    def exportLiteral(self, outfile, level, name_='ConstrainedToComponentType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self._derived is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            showIndent(outfile, level)
            outfile.write('_derived="%s",\n' % (self._derived,))
        if self._real_archetype is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            showIndent(outfile, level)
            outfile.write('_real_archetype=%s,\n' % (self._real_archetype,))
        if self._archetype is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            showIndent(outfile, level)
            outfile.write('_archetype="%s",\n' % (self._archetype,))
        if self.ComponentInstanceID is not None and 'ComponentInstanceID' not in already_processed:
            already_processed.add('ComponentInstanceID')
            showIndent(outfile, level)
            outfile.write('ComponentInstanceID="%s",\n' % (self.ComponentInstanceID,))
        if self._subtype is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            showIndent(outfile, level)
            outfile.write('_subtype=%s,\n' % (self._subtype,))
        if self._instances is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            showIndent(outfile, level)
            outfile.write('_instances="%s",\n' % (self._instances,))
        if self._desynched_atts is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            showIndent(outfile, level)
            outfile.write('_desynched_atts="%s",\n' % (self._desynched_atts,))
        if self._id is not None and '_id' not in already_processed:
            already_processed.add('_id')
            showIndent(outfile, level)
            outfile.write('_id="%s",\n' % (self._id,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('_derived', node)
        if value is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            self._derived = value
        value = find_attr_value_('_real_archetype', node)
        if value is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            if value in ('true', '1'):
                self._real_archetype = True
            elif value in ('false', '0'):
                self._real_archetype = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('_archetype', node)
        if value is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            self._archetype = value
        value = find_attr_value_('ComponentInstanceID', node)
        if value is not None and 'ComponentInstanceID' not in already_processed:
            already_processed.add('ComponentInstanceID')
            self.ComponentInstanceID = value
        value = find_attr_value_('_subtype', node)
        if value is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            if value in ('true', '1'):
                self._subtype = True
            elif value in ('false', '0'):
                self._subtype = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('_instances', node)
        if value is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            self._instances = value
        value = find_attr_value_('_desynched_atts', node)
        if value is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            self._desynched_atts = value
        value = find_attr_value_('_id', node)
        if value is not None and '_id' not in already_processed:
            already_processed.add('_id')
            self._id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class ConstrainedToComponentType


class CADJointComponentType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, _derived=None, _real_archetype=None, _archetype=None, ComponentInstanceID=None, _subtype=None, _instances=None, _desynched_atts=None, _id=None):
        self.original_tagname_ = None
        self._derived = _cast(None, _derived)
        self._real_archetype = _cast(bool, _real_archetype)
        self._archetype = _cast(None, _archetype)
        self.ComponentInstanceID = _cast(None, ComponentInstanceID)
        self._subtype = _cast(bool, _subtype)
        self._instances = _cast(None, _instances)
        self._desynched_atts = _cast(None, _desynched_atts)
        self._id = _cast(None, _id)
    def factory(*args_, **kwargs_):
        if CADJointComponentType.subclass:
            return CADJointComponentType.subclass(*args_, **kwargs_)
        else:
            return CADJointComponentType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get__derived(self): return self._derived
    def set__derived(self, _derived): self._derived = _derived
    def get__real_archetype(self): return self._real_archetype
    def set__real_archetype(self, _real_archetype): self._real_archetype = _real_archetype
    def get__archetype(self): return self._archetype
    def set__archetype(self, _archetype): self._archetype = _archetype
    def get_ComponentInstanceID(self): return self.ComponentInstanceID
    def set_ComponentInstanceID(self, ComponentInstanceID): self.ComponentInstanceID = ComponentInstanceID
    def get__subtype(self): return self._subtype
    def set__subtype(self, _subtype): self._subtype = _subtype
    def get__instances(self): return self._instances
    def set__instances(self, _instances): self._instances = _instances
    def get__desynched_atts(self): return self._desynched_atts
    def set__desynched_atts(self, _desynched_atts): self._desynched_atts = _desynched_atts
    def get__id(self): return self._id
    def set__id(self, _id): self._id = _id
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CADJointComponentType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CADJointComponentType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CADJointComponentType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CADJointComponentType'):
        if self._derived is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            outfile.write(' _derived=%s' % (self.gds_format_string(quote_attrib(self._derived).encode(ExternalEncoding), input_name='_derived'), ))
        if self._real_archetype is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            outfile.write(' _real_archetype="%s"' % self.gds_format_boolean(self._real_archetype, input_name='_real_archetype'))
        if self._archetype is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            outfile.write(' _archetype=%s' % (self.gds_format_string(quote_attrib(self._archetype).encode(ExternalEncoding), input_name='_archetype'), ))
        if self.ComponentInstanceID is not None and 'ComponentInstanceID' not in already_processed:
            already_processed.add('ComponentInstanceID')
            outfile.write(' ComponentInstanceID=%s' % (self.gds_format_string(quote_attrib(self.ComponentInstanceID).encode(ExternalEncoding), input_name='ComponentInstanceID'), ))
        if self._subtype is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            outfile.write(' _subtype="%s"' % self.gds_format_boolean(self._subtype, input_name='_subtype'))
        if self._instances is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            outfile.write(' _instances=%s' % (self.gds_format_string(quote_attrib(self._instances).encode(ExternalEncoding), input_name='_instances'), ))
        if self._desynched_atts is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            outfile.write(' _desynched_atts=%s' % (self.gds_format_string(quote_attrib(self._desynched_atts).encode(ExternalEncoding), input_name='_desynched_atts'), ))
        if self._id is not None and '_id' not in already_processed:
            already_processed.add('_id')
            outfile.write(' _id=%s' % (self.gds_format_string(quote_attrib(self._id).encode(ExternalEncoding), input_name='_id'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='CADJointComponentType', fromsubclass_=False, pretty_print=True):
        pass
    def exportLiteral(self, outfile, level, name_='CADJointComponentType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self._derived is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            showIndent(outfile, level)
            outfile.write('_derived="%s",\n' % (self._derived,))
        if self._real_archetype is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            showIndent(outfile, level)
            outfile.write('_real_archetype=%s,\n' % (self._real_archetype,))
        if self._archetype is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            showIndent(outfile, level)
            outfile.write('_archetype="%s",\n' % (self._archetype,))
        if self.ComponentInstanceID is not None and 'ComponentInstanceID' not in already_processed:
            already_processed.add('ComponentInstanceID')
            showIndent(outfile, level)
            outfile.write('ComponentInstanceID="%s",\n' % (self.ComponentInstanceID,))
        if self._subtype is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            showIndent(outfile, level)
            outfile.write('_subtype=%s,\n' % (self._subtype,))
        if self._instances is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            showIndent(outfile, level)
            outfile.write('_instances="%s",\n' % (self._instances,))
        if self._desynched_atts is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            showIndent(outfile, level)
            outfile.write('_desynched_atts="%s",\n' % (self._desynched_atts,))
        if self._id is not None and '_id' not in already_processed:
            already_processed.add('_id')
            showIndent(outfile, level)
            outfile.write('_id="%s",\n' % (self._id,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('_derived', node)
        if value is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            self._derived = value
        value = find_attr_value_('_real_archetype', node)
        if value is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            if value in ('true', '1'):
                self._real_archetype = True
            elif value in ('false', '0'):
                self._real_archetype = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('_archetype', node)
        if value is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            self._archetype = value
        value = find_attr_value_('ComponentInstanceID', node)
        if value is not None and 'ComponentInstanceID' not in already_processed:
            already_processed.add('ComponentInstanceID')
            self.ComponentInstanceID = value
        value = find_attr_value_('_subtype', node)
        if value is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            if value in ('true', '1'):
                self._subtype = True
            elif value in ('false', '0'):
                self._subtype = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('_instances', node)
        if value is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            self._instances = value
        value = find_attr_value_('_desynched_atts', node)
        if value is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            self._desynched_atts = value
        value = find_attr_value_('_id', node)
        if value is not None and '_id' not in already_processed:
            already_processed.add('_id')
            self._id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class CADJointComponentType


class ComponentCoordinateSystemType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, _derived=None, _real_archetype=None, _archetype=None, _subtype=None, _instances=None, _desynched_atts=None, _id=None, CADJointComponent=None):
        self.original_tagname_ = None
        self._derived = _cast(None, _derived)
        self._real_archetype = _cast(bool, _real_archetype)
        self._archetype = _cast(None, _archetype)
        self._subtype = _cast(bool, _subtype)
        self._instances = _cast(None, _instances)
        self._desynched_atts = _cast(None, _desynched_atts)
        self._id = _cast(None, _id)
        if CADJointComponent is None:
            self.CADJointComponent = []
        else:
            self.CADJointComponent = CADJointComponent
    def factory(*args_, **kwargs_):
        if ComponentCoordinateSystemType.subclass:
            return ComponentCoordinateSystemType.subclass(*args_, **kwargs_)
        else:
            return ComponentCoordinateSystemType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CADJointComponent(self): return self.CADJointComponent
    def set_CADJointComponent(self, CADJointComponent): self.CADJointComponent = CADJointComponent
    def add_CADJointComponent(self, value): self.CADJointComponent.append(value)
    def insert_CADJointComponent(self, index, value): self.CADJointComponent[index] = value
    def get__derived(self): return self._derived
    def set__derived(self, _derived): self._derived = _derived
    def get__real_archetype(self): return self._real_archetype
    def set__real_archetype(self, _real_archetype): self._real_archetype = _real_archetype
    def get__archetype(self): return self._archetype
    def set__archetype(self, _archetype): self._archetype = _archetype
    def get__subtype(self): return self._subtype
    def set__subtype(self, _subtype): self._subtype = _subtype
    def get__instances(self): return self._instances
    def set__instances(self, _instances): self._instances = _instances
    def get__desynched_atts(self): return self._desynched_atts
    def set__desynched_atts(self, _desynched_atts): self._desynched_atts = _desynched_atts
    def get__id(self): return self._id
    def set__id(self, _id): self._id = _id
    def hasContent_(self):
        if (
            self.CADJointComponent
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ComponentCoordinateSystemType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ComponentCoordinateSystemType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ComponentCoordinateSystemType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ComponentCoordinateSystemType'):
        if self._derived is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            outfile.write(' _derived=%s' % (self.gds_format_string(quote_attrib(self._derived).encode(ExternalEncoding), input_name='_derived'), ))
        if self._real_archetype is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            outfile.write(' _real_archetype="%s"' % self.gds_format_boolean(self._real_archetype, input_name='_real_archetype'))
        if self._archetype is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            outfile.write(' _archetype=%s' % (self.gds_format_string(quote_attrib(self._archetype).encode(ExternalEncoding), input_name='_archetype'), ))
        if self._subtype is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            outfile.write(' _subtype="%s"' % self.gds_format_boolean(self._subtype, input_name='_subtype'))
        if self._instances is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            outfile.write(' _instances=%s' % (self.gds_format_string(quote_attrib(self._instances).encode(ExternalEncoding), input_name='_instances'), ))
        if self._desynched_atts is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            outfile.write(' _desynched_atts=%s' % (self.gds_format_string(quote_attrib(self._desynched_atts).encode(ExternalEncoding), input_name='_desynched_atts'), ))
        if self._id is not None and '_id' not in already_processed:
            already_processed.add('_id')
            outfile.write(' _id=%s' % (self.gds_format_string(quote_attrib(self._id).encode(ExternalEncoding), input_name='_id'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='ComponentCoordinateSystemType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for CADJointComponent_ in self.CADJointComponent:
            CADJointComponent_.export(outfile, level, namespace_, name_='CADJointComponent', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='ComponentCoordinateSystemType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self._derived is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            showIndent(outfile, level)
            outfile.write('_derived="%s",\n' % (self._derived,))
        if self._real_archetype is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            showIndent(outfile, level)
            outfile.write('_real_archetype=%s,\n' % (self._real_archetype,))
        if self._archetype is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            showIndent(outfile, level)
            outfile.write('_archetype="%s",\n' % (self._archetype,))
        if self._subtype is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            showIndent(outfile, level)
            outfile.write('_subtype=%s,\n' % (self._subtype,))
        if self._instances is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            showIndent(outfile, level)
            outfile.write('_instances="%s",\n' % (self._instances,))
        if self._desynched_atts is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            showIndent(outfile, level)
            outfile.write('_desynched_atts="%s",\n' % (self._desynched_atts,))
        if self._id is not None and '_id' not in already_processed:
            already_processed.add('_id')
            showIndent(outfile, level)
            outfile.write('_id="%s",\n' % (self._id,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('CADJointComponent=[\n')
        level += 1
        for CADJointComponent_ in self.CADJointComponent:
            showIndent(outfile, level)
            outfile.write('model_.CADJointComponentType(\n')
            CADJointComponent_.exportLiteral(outfile, level, name_='CADJointComponentType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('_derived', node)
        if value is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            self._derived = value
        value = find_attr_value_('_real_archetype', node)
        if value is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            if value in ('true', '1'):
                self._real_archetype = True
            elif value in ('false', '0'):
                self._real_archetype = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('_archetype', node)
        if value is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            self._archetype = value
        value = find_attr_value_('_subtype', node)
        if value is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            if value in ('true', '1'):
                self._subtype = True
            elif value in ('false', '0'):
                self._subtype = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('_instances', node)
        if value is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            self._instances = value
        value = find_attr_value_('_desynched_atts', node)
        if value is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            self._desynched_atts = value
        value = find_attr_value_('_id', node)
        if value is not None and '_id' not in already_processed:
            already_processed.add('_id')
            self._id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CADJointComponent':
            obj_ = CADJointComponentType.factory()
            obj_.build(child_)
            self.CADJointComponent.append(obj_)
            obj_.original_tagname_ = 'CADJointComponent'
# end class ComponentCoordinateSystemType


class RotationType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, _derived=None, _real_archetype=None, _desynched_atts=None, Value=None, _subtype=None, _instances=None, _archetype=None, Units=None, _id=None):
        self.original_tagname_ = None
        self._derived = _cast(None, _derived)
        self._real_archetype = _cast(bool, _real_archetype)
        self._desynched_atts = _cast(None, _desynched_atts)
        self.Value = _cast(float, Value)
        self._subtype = _cast(bool, _subtype)
        self._instances = _cast(None, _instances)
        self._archetype = _cast(None, _archetype)
        self.Units = _cast(None, Units)
        self._id = _cast(None, _id)
    def factory(*args_, **kwargs_):
        if RotationType.subclass:
            return RotationType.subclass(*args_, **kwargs_)
        else:
            return RotationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get__derived(self): return self._derived
    def set__derived(self, _derived): self._derived = _derived
    def get__real_archetype(self): return self._real_archetype
    def set__real_archetype(self, _real_archetype): self._real_archetype = _real_archetype
    def get__desynched_atts(self): return self._desynched_atts
    def set__desynched_atts(self, _desynched_atts): self._desynched_atts = _desynched_atts
    def get_Value(self): return self.Value
    def set_Value(self, Value): self.Value = Value
    def get__subtype(self): return self._subtype
    def set__subtype(self, _subtype): self._subtype = _subtype
    def get__instances(self): return self._instances
    def set__instances(self, _instances): self._instances = _instances
    def get__archetype(self): return self._archetype
    def set__archetype(self, _archetype): self._archetype = _archetype
    def get_Units(self): return self.Units
    def set_Units(self, Units): self.Units = Units
    def get__id(self): return self._id
    def set__id(self, _id): self._id = _id
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='RotationType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='RotationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='RotationType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='RotationType'):
        if self._derived is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            outfile.write(' _derived=%s' % (self.gds_format_string(quote_attrib(self._derived).encode(ExternalEncoding), input_name='_derived'), ))
        if self._real_archetype is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            outfile.write(' _real_archetype="%s"' % self.gds_format_boolean(self._real_archetype, input_name='_real_archetype'))
        if self._desynched_atts is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            outfile.write(' _desynched_atts=%s' % (self.gds_format_string(quote_attrib(self._desynched_atts).encode(ExternalEncoding), input_name='_desynched_atts'), ))
        if self.Value is not None and 'Value' not in already_processed:
            already_processed.add('Value')
            outfile.write(' Value="%s"' % self.gds_format_double(self.Value, input_name='Value'))
        if self._subtype is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            outfile.write(' _subtype="%s"' % self.gds_format_boolean(self._subtype, input_name='_subtype'))
        if self._instances is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            outfile.write(' _instances=%s' % (self.gds_format_string(quote_attrib(self._instances).encode(ExternalEncoding), input_name='_instances'), ))
        if self._archetype is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            outfile.write(' _archetype=%s' % (self.gds_format_string(quote_attrib(self._archetype).encode(ExternalEncoding), input_name='_archetype'), ))
        if self.Units is not None and 'Units' not in already_processed:
            already_processed.add('Units')
            outfile.write(' Units=%s' % (self.gds_format_string(quote_attrib(self.Units).encode(ExternalEncoding), input_name='Units'), ))
        if self._id is not None and '_id' not in already_processed:
            already_processed.add('_id')
            outfile.write(' _id=%s' % (self.gds_format_string(quote_attrib(self._id).encode(ExternalEncoding), input_name='_id'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='RotationType', fromsubclass_=False, pretty_print=True):
        pass
    def exportLiteral(self, outfile, level, name_='RotationType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self._derived is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            showIndent(outfile, level)
            outfile.write('_derived="%s",\n' % (self._derived,))
        if self._real_archetype is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            showIndent(outfile, level)
            outfile.write('_real_archetype=%s,\n' % (self._real_archetype,))
        if self._desynched_atts is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            showIndent(outfile, level)
            outfile.write('_desynched_atts="%s",\n' % (self._desynched_atts,))
        if self.Value is not None and 'Value' not in already_processed:
            already_processed.add('Value')
            showIndent(outfile, level)
            outfile.write('Value=%e,\n' % (self.Value,))
        if self._subtype is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            showIndent(outfile, level)
            outfile.write('_subtype=%s,\n' % (self._subtype,))
        if self._instances is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            showIndent(outfile, level)
            outfile.write('_instances="%s",\n' % (self._instances,))
        if self._archetype is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            showIndent(outfile, level)
            outfile.write('_archetype="%s",\n' % (self._archetype,))
        if self.Units is not None and 'Units' not in already_processed:
            already_processed.add('Units')
            showIndent(outfile, level)
            outfile.write('Units="%s",\n' % (self.Units,))
        if self._id is not None and '_id' not in already_processed:
            already_processed.add('_id')
            showIndent(outfile, level)
            outfile.write('_id="%s",\n' % (self._id,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('_derived', node)
        if value is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            self._derived = value
        value = find_attr_value_('_real_archetype', node)
        if value is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            if value in ('true', '1'):
                self._real_archetype = True
            elif value in ('false', '0'):
                self._real_archetype = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('_desynched_atts', node)
        if value is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            self._desynched_atts = value
        value = find_attr_value_('Value', node)
        if value is not None and 'Value' not in already_processed:
            already_processed.add('Value')
            try:
                self.Value = float(value)
            except ValueError as exp:
                raise ValueError('Bad float/double attribute (Value): %s' % exp)
        value = find_attr_value_('_subtype', node)
        if value is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            if value in ('true', '1'):
                self._subtype = True
            elif value in ('false', '0'):
                self._subtype = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('_instances', node)
        if value is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            self._instances = value
        value = find_attr_value_('_archetype', node)
        if value is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            self._archetype = value
        value = find_attr_value_('Units', node)
        if value is not None and 'Units' not in already_processed:
            already_processed.add('Units')
            self.Units = value
        value = find_attr_value_('_id', node)
        if value is not None and '_id' not in already_processed:
            already_processed.add('_id')
            self._id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class RotationType


class LocationType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, _derived=None, _real_archetype=None, _desynched_atts=None, _subtype=None, _instances=None, _archetype=None, Units=None, _id=None, ArrayValue=None):
        self.original_tagname_ = None
        self._derived = _cast(None, _derived)
        self._real_archetype = _cast(bool, _real_archetype)
        self._desynched_atts = _cast(None, _desynched_atts)
        self._subtype = _cast(bool, _subtype)
        self._instances = _cast(None, _instances)
        self._archetype = _cast(None, _archetype)
        self.Units = _cast(None, Units)
        self._id = _cast(None, _id)
        self.ArrayValue = _cast(None, ArrayValue)
    def factory(*args_, **kwargs_):
        if LocationType.subclass:
            return LocationType.subclass(*args_, **kwargs_)
        else:
            return LocationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get__derived(self): return self._derived
    def set__derived(self, _derived): self._derived = _derived
    def get__real_archetype(self): return self._real_archetype
    def set__real_archetype(self, _real_archetype): self._real_archetype = _real_archetype
    def get__desynched_atts(self): return self._desynched_atts
    def set__desynched_atts(self, _desynched_atts): self._desynched_atts = _desynched_atts
    def get__subtype(self): return self._subtype
    def set__subtype(self, _subtype): self._subtype = _subtype
    def get__instances(self): return self._instances
    def set__instances(self, _instances): self._instances = _instances
    def get__archetype(self): return self._archetype
    def set__archetype(self, _archetype): self._archetype = _archetype
    def get_Units(self): return self.Units
    def set_Units(self, Units): self.Units = Units
    def get__id(self): return self._id
    def set__id(self, _id): self._id = _id
    def get_ArrayValue(self): return self.ArrayValue
    def set_ArrayValue(self, ArrayValue): self.ArrayValue = ArrayValue
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='LocationType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='LocationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='LocationType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='LocationType'):
        if self._derived is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            outfile.write(' _derived=%s' % (self.gds_format_string(quote_attrib(self._derived).encode(ExternalEncoding), input_name='_derived'), ))
        if self._real_archetype is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            outfile.write(' _real_archetype="%s"' % self.gds_format_boolean(self._real_archetype, input_name='_real_archetype'))
        if self._desynched_atts is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            outfile.write(' _desynched_atts=%s' % (self.gds_format_string(quote_attrib(self._desynched_atts).encode(ExternalEncoding), input_name='_desynched_atts'), ))
        if self._subtype is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            outfile.write(' _subtype="%s"' % self.gds_format_boolean(self._subtype, input_name='_subtype'))
        if self._instances is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            outfile.write(' _instances=%s' % (self.gds_format_string(quote_attrib(self._instances).encode(ExternalEncoding), input_name='_instances'), ))
        if self._archetype is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            outfile.write(' _archetype=%s' % (self.gds_format_string(quote_attrib(self._archetype).encode(ExternalEncoding), input_name='_archetype'), ))
        if self.Units is not None and 'Units' not in already_processed:
            already_processed.add('Units')
            outfile.write(' Units=%s' % (self.gds_format_string(quote_attrib(self.Units).encode(ExternalEncoding), input_name='Units'), ))
        if self._id is not None and '_id' not in already_processed:
            already_processed.add('_id')
            outfile.write(' _id=%s' % (self.gds_format_string(quote_attrib(self._id).encode(ExternalEncoding), input_name='_id'), ))
        if self.ArrayValue is not None and 'ArrayValue' not in already_processed:
            already_processed.add('ArrayValue')
            outfile.write(' ArrayValue=%s' % (self.gds_format_string(quote_attrib(self.ArrayValue).encode(ExternalEncoding), input_name='ArrayValue'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='LocationType', fromsubclass_=False, pretty_print=True):
        pass
    def exportLiteral(self, outfile, level, name_='LocationType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self._derived is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            showIndent(outfile, level)
            outfile.write('_derived="%s",\n' % (self._derived,))
        if self._real_archetype is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            showIndent(outfile, level)
            outfile.write('_real_archetype=%s,\n' % (self._real_archetype,))
        if self._desynched_atts is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            showIndent(outfile, level)
            outfile.write('_desynched_atts="%s",\n' % (self._desynched_atts,))
        if self._subtype is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            showIndent(outfile, level)
            outfile.write('_subtype=%s,\n' % (self._subtype,))
        if self._instances is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            showIndent(outfile, level)
            outfile.write('_instances="%s",\n' % (self._instances,))
        if self._archetype is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            showIndent(outfile, level)
            outfile.write('_archetype="%s",\n' % (self._archetype,))
        if self.Units is not None and 'Units' not in already_processed:
            already_processed.add('Units')
            showIndent(outfile, level)
            outfile.write('Units="%s",\n' % (self.Units,))
        if self._id is not None and '_id' not in already_processed:
            already_processed.add('_id')
            showIndent(outfile, level)
            outfile.write('_id="%s",\n' % (self._id,))
        if self.ArrayValue is not None and 'ArrayValue' not in already_processed:
            already_processed.add('ArrayValue')
            showIndent(outfile, level)
            outfile.write('ArrayValue="%s",\n' % (self.ArrayValue,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('_derived', node)
        if value is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            self._derived = value
        value = find_attr_value_('_real_archetype', node)
        if value is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            if value in ('true', '1'):
                self._real_archetype = True
            elif value in ('false', '0'):
                self._real_archetype = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('_desynched_atts', node)
        if value is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            self._desynched_atts = value
        value = find_attr_value_('_subtype', node)
        if value is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            if value in ('true', '1'):
                self._subtype = True
            elif value in ('false', '0'):
                self._subtype = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('_instances', node)
        if value is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            self._instances = value
        value = find_attr_value_('_archetype', node)
        if value is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            self._archetype = value
        value = find_attr_value_('Units', node)
        if value is not None and 'Units' not in already_processed:
            already_processed.add('Units')
            self.Units = value
        value = find_attr_value_('_id', node)
        if value is not None and '_id' not in already_processed:
            already_processed.add('_id')
            self._id = value
        value = find_attr_value_('ArrayValue', node)
        if value is not None and 'ArrayValue' not in already_processed:
            already_processed.add('ArrayValue')
            self.ArrayValue = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class LocationType


class OrientationType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, _derived=None, _real_archetype=None, _desynched_atts=None, _subtype=None, _instances=None, _archetype=None, Units=None, _id=None, ArrayValue=None):
        self.original_tagname_ = None
        self._derived = _cast(None, _derived)
        self._real_archetype = _cast(bool, _real_archetype)
        self._desynched_atts = _cast(None, _desynched_atts)
        self._subtype = _cast(bool, _subtype)
        self._instances = _cast(None, _instances)
        self._archetype = _cast(None, _archetype)
        self.Units = _cast(None, Units)
        self._id = _cast(None, _id)
        self.ArrayValue = _cast(None, ArrayValue)
    def factory(*args_, **kwargs_):
        if OrientationType.subclass:
            return OrientationType.subclass(*args_, **kwargs_)
        else:
            return OrientationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get__derived(self): return self._derived
    def set__derived(self, _derived): self._derived = _derived
    def get__real_archetype(self): return self._real_archetype
    def set__real_archetype(self, _real_archetype): self._real_archetype = _real_archetype
    def get__desynched_atts(self): return self._desynched_atts
    def set__desynched_atts(self, _desynched_atts): self._desynched_atts = _desynched_atts
    def get__subtype(self): return self._subtype
    def set__subtype(self, _subtype): self._subtype = _subtype
    def get__instances(self): return self._instances
    def set__instances(self, _instances): self._instances = _instances
    def get__archetype(self): return self._archetype
    def set__archetype(self, _archetype): self._archetype = _archetype
    def get_Units(self): return self.Units
    def set_Units(self, Units): self.Units = Units
    def get__id(self): return self._id
    def set__id(self, _id): self._id = _id
    def get_ArrayValue(self): return self.ArrayValue
    def set_ArrayValue(self, ArrayValue): self.ArrayValue = ArrayValue
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OrientationType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OrientationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OrientationType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OrientationType'):
        if self._derived is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            outfile.write(' _derived=%s' % (self.gds_format_string(quote_attrib(self._derived).encode(ExternalEncoding), input_name='_derived'), ))
        if self._real_archetype is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            outfile.write(' _real_archetype="%s"' % self.gds_format_boolean(self._real_archetype, input_name='_real_archetype'))
        if self._desynched_atts is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            outfile.write(' _desynched_atts=%s' % (self.gds_format_string(quote_attrib(self._desynched_atts).encode(ExternalEncoding), input_name='_desynched_atts'), ))
        if self._subtype is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            outfile.write(' _subtype="%s"' % self.gds_format_boolean(self._subtype, input_name='_subtype'))
        if self._instances is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            outfile.write(' _instances=%s' % (self.gds_format_string(quote_attrib(self._instances).encode(ExternalEncoding), input_name='_instances'), ))
        if self._archetype is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            outfile.write(' _archetype=%s' % (self.gds_format_string(quote_attrib(self._archetype).encode(ExternalEncoding), input_name='_archetype'), ))
        if self.Units is not None and 'Units' not in already_processed:
            already_processed.add('Units')
            outfile.write(' Units=%s' % (self.gds_format_string(quote_attrib(self.Units).encode(ExternalEncoding), input_name='Units'), ))
        if self._id is not None and '_id' not in already_processed:
            already_processed.add('_id')
            outfile.write(' _id=%s' % (self.gds_format_string(quote_attrib(self._id).encode(ExternalEncoding), input_name='_id'), ))
        if self.ArrayValue is not None and 'ArrayValue' not in already_processed:
            already_processed.add('ArrayValue')
            outfile.write(' ArrayValue=%s' % (self.gds_format_string(quote_attrib(self.ArrayValue).encode(ExternalEncoding), input_name='ArrayValue'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OrientationType', fromsubclass_=False, pretty_print=True):
        pass
    def exportLiteral(self, outfile, level, name_='OrientationType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self._derived is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            showIndent(outfile, level)
            outfile.write('_derived="%s",\n' % (self._derived,))
        if self._real_archetype is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            showIndent(outfile, level)
            outfile.write('_real_archetype=%s,\n' % (self._real_archetype,))
        if self._desynched_atts is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            showIndent(outfile, level)
            outfile.write('_desynched_atts="%s",\n' % (self._desynched_atts,))
        if self._subtype is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            showIndent(outfile, level)
            outfile.write('_subtype=%s,\n' % (self._subtype,))
        if self._instances is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            showIndent(outfile, level)
            outfile.write('_instances="%s",\n' % (self._instances,))
        if self._archetype is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            showIndent(outfile, level)
            outfile.write('_archetype="%s",\n' % (self._archetype,))
        if self.Units is not None and 'Units' not in already_processed:
            already_processed.add('Units')
            showIndent(outfile, level)
            outfile.write('Units="%s",\n' % (self.Units,))
        if self._id is not None and '_id' not in already_processed:
            already_processed.add('_id')
            showIndent(outfile, level)
            outfile.write('_id="%s",\n' % (self._id,))
        if self.ArrayValue is not None and 'ArrayValue' not in already_processed:
            already_processed.add('ArrayValue')
            showIndent(outfile, level)
            outfile.write('ArrayValue="%s",\n' % (self.ArrayValue,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('_derived', node)
        if value is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            self._derived = value
        value = find_attr_value_('_real_archetype', node)
        if value is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            if value in ('true', '1'):
                self._real_archetype = True
            elif value in ('false', '0'):
                self._real_archetype = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('_desynched_atts', node)
        if value is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            self._desynched_atts = value
        value = find_attr_value_('_subtype', node)
        if value is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            if value in ('true', '1'):
                self._subtype = True
            elif value in ('false', '0'):
                self._subtype = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('_instances', node)
        if value is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            self._instances = value
        value = find_attr_value_('_archetype', node)
        if value is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            self._archetype = value
        value = find_attr_value_('Units', node)
        if value is not None and 'Units' not in already_processed:
            already_processed.add('Units')
            self.Units = value
        value = find_attr_value_('_id', node)
        if value is not None and '_id' not in already_processed:
            already_processed.add('_id')
            self._id = value
        value = find_attr_value_('ArrayValue', node)
        if value is not None and 'ArrayValue' not in already_processed:
            already_processed.add('ArrayValue')
            self.ArrayValue = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class OrientationType


class GlobalCoordinateSystemType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, _derived=None, _real_archetype=None, _archetype=None, _subtype=None, _instances=None, _desynched_atts=None, _id=None, Location=None, Orientation=None, Rotation=None):
        self.original_tagname_ = None
        self._derived = _cast(None, _derived)
        self._real_archetype = _cast(bool, _real_archetype)
        self._archetype = _cast(None, _archetype)
        self._subtype = _cast(bool, _subtype)
        self._instances = _cast(None, _instances)
        self._desynched_atts = _cast(None, _desynched_atts)
        self._id = _cast(None, _id)
        self.Location = Location
        self.Orientation = Orientation
        self.Rotation = Rotation
    def factory(*args_, **kwargs_):
        if GlobalCoordinateSystemType.subclass:
            return GlobalCoordinateSystemType.subclass(*args_, **kwargs_)
        else:
            return GlobalCoordinateSystemType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Location(self): return self.Location
    def set_Location(self, Location): self.Location = Location
    def get_Orientation(self): return self.Orientation
    def set_Orientation(self, Orientation): self.Orientation = Orientation
    def get_Rotation(self): return self.Rotation
    def set_Rotation(self, Rotation): self.Rotation = Rotation
    def get__derived(self): return self._derived
    def set__derived(self, _derived): self._derived = _derived
    def get__real_archetype(self): return self._real_archetype
    def set__real_archetype(self, _real_archetype): self._real_archetype = _real_archetype
    def get__archetype(self): return self._archetype
    def set__archetype(self, _archetype): self._archetype = _archetype
    def get__subtype(self): return self._subtype
    def set__subtype(self, _subtype): self._subtype = _subtype
    def get__instances(self): return self._instances
    def set__instances(self, _instances): self._instances = _instances
    def get__desynched_atts(self): return self._desynched_atts
    def set__desynched_atts(self, _desynched_atts): self._desynched_atts = _desynched_atts
    def get__id(self): return self._id
    def set__id(self, _id): self._id = _id
    def hasContent_(self):
        if (
            self.Location is not None or
            self.Orientation is not None or
            self.Rotation is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='GlobalCoordinateSystemType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='GlobalCoordinateSystemType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='GlobalCoordinateSystemType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='GlobalCoordinateSystemType'):
        if self._derived is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            outfile.write(' _derived=%s' % (self.gds_format_string(quote_attrib(self._derived).encode(ExternalEncoding), input_name='_derived'), ))
        if self._real_archetype is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            outfile.write(' _real_archetype="%s"' % self.gds_format_boolean(self._real_archetype, input_name='_real_archetype'))
        if self._archetype is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            outfile.write(' _archetype=%s' % (self.gds_format_string(quote_attrib(self._archetype).encode(ExternalEncoding), input_name='_archetype'), ))
        if self._subtype is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            outfile.write(' _subtype="%s"' % self.gds_format_boolean(self._subtype, input_name='_subtype'))
        if self._instances is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            outfile.write(' _instances=%s' % (self.gds_format_string(quote_attrib(self._instances).encode(ExternalEncoding), input_name='_instances'), ))
        if self._desynched_atts is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            outfile.write(' _desynched_atts=%s' % (self.gds_format_string(quote_attrib(self._desynched_atts).encode(ExternalEncoding), input_name='_desynched_atts'), ))
        if self._id is not None and '_id' not in already_processed:
            already_processed.add('_id')
            outfile.write(' _id=%s' % (self.gds_format_string(quote_attrib(self._id).encode(ExternalEncoding), input_name='_id'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='GlobalCoordinateSystemType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Location is not None:
            self.Location.export(outfile, level, namespace_, name_='Location', pretty_print=pretty_print)
        if self.Orientation is not None:
            self.Orientation.export(outfile, level, namespace_, name_='Orientation', pretty_print=pretty_print)
        if self.Rotation is not None:
            self.Rotation.export(outfile, level, namespace_, name_='Rotation', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='GlobalCoordinateSystemType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self._derived is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            showIndent(outfile, level)
            outfile.write('_derived="%s",\n' % (self._derived,))
        if self._real_archetype is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            showIndent(outfile, level)
            outfile.write('_real_archetype=%s,\n' % (self._real_archetype,))
        if self._archetype is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            showIndent(outfile, level)
            outfile.write('_archetype="%s",\n' % (self._archetype,))
        if self._subtype is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            showIndent(outfile, level)
            outfile.write('_subtype=%s,\n' % (self._subtype,))
        if self._instances is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            showIndent(outfile, level)
            outfile.write('_instances="%s",\n' % (self._instances,))
        if self._desynched_atts is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            showIndent(outfile, level)
            outfile.write('_desynched_atts="%s",\n' % (self._desynched_atts,))
        if self._id is not None and '_id' not in already_processed:
            already_processed.add('_id')
            showIndent(outfile, level)
            outfile.write('_id="%s",\n' % (self._id,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Location is not None:
            showIndent(outfile, level)
            outfile.write('Location=model_.LocationType(\n')
            self.Location.exportLiteral(outfile, level, name_='Location')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Orientation is not None:
            showIndent(outfile, level)
            outfile.write('Orientation=model_.OrientationType(\n')
            self.Orientation.exportLiteral(outfile, level, name_='Orientation')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Rotation is not None:
            showIndent(outfile, level)
            outfile.write('Rotation=model_.RotationType(\n')
            self.Rotation.exportLiteral(outfile, level, name_='Rotation')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('_derived', node)
        if value is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            self._derived = value
        value = find_attr_value_('_real_archetype', node)
        if value is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            if value in ('true', '1'):
                self._real_archetype = True
            elif value in ('false', '0'):
                self._real_archetype = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('_archetype', node)
        if value is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            self._archetype = value
        value = find_attr_value_('_subtype', node)
        if value is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            if value in ('true', '1'):
                self._subtype = True
            elif value in ('false', '0'):
                self._subtype = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('_instances', node)
        if value is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            self._instances = value
        value = find_attr_value_('_desynched_atts', node)
        if value is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            self._desynched_atts = value
        value = find_attr_value_('_id', node)
        if value is not None and '_id' not in already_processed:
            already_processed.add('_id')
            self._id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Location':
            obj_ = LocationType.factory()
            obj_.build(child_)
            self.Location = obj_
            obj_.original_tagname_ = 'Location'
        elif nodeName_ == 'Orientation':
            obj_ = OrientationType.factory()
            obj_.build(child_)
            self.Orientation = obj_
            obj_.original_tagname_ = 'Orientation'
        elif nodeName_ == 'Rotation':
            obj_ = RotationType.factory()
            obj_.build(child_)
            self.Rotation = obj_
            obj_.original_tagname_ = 'Rotation'
# end class GlobalCoordinateSystemType


class JointType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, _derived=None, _real_archetype=None, _desynched_atts=None, AssembledComponentInstanceID=None, _subtype=None, _instances=None, _archetype=None, _id=None, Type=None, ID=None, ComponentCoordinateSystem=None, ConstrainedToComponents=None, GlobalCoordinateSystem=None):
        self.original_tagname_ = None
        self._derived = _cast(None, _derived)
        self._real_archetype = _cast(bool, _real_archetype)
        self._desynched_atts = _cast(None, _desynched_atts)
        self.AssembledComponentInstanceID = _cast(None, AssembledComponentInstanceID)
        self._subtype = _cast(bool, _subtype)
        self._instances = _cast(None, _instances)
        self._archetype = _cast(None, _archetype)
        self._id = _cast(None, _id)
        self.Type = _cast(None, Type)
        self.ID = _cast(None, ID)
        self.ComponentCoordinateSystem = ComponentCoordinateSystem
        self.ConstrainedToComponents = ConstrainedToComponents
        self.GlobalCoordinateSystem = GlobalCoordinateSystem
    def factory(*args_, **kwargs_):
        if JointType.subclass:
            return JointType.subclass(*args_, **kwargs_)
        else:
            return JointType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ComponentCoordinateSystem(self): return self.ComponentCoordinateSystem
    def set_ComponentCoordinateSystem(self, ComponentCoordinateSystem): self.ComponentCoordinateSystem = ComponentCoordinateSystem
    def get_ConstrainedToComponents(self): return self.ConstrainedToComponents
    def set_ConstrainedToComponents(self, ConstrainedToComponents): self.ConstrainedToComponents = ConstrainedToComponents
    def get_GlobalCoordinateSystem(self): return self.GlobalCoordinateSystem
    def set_GlobalCoordinateSystem(self, GlobalCoordinateSystem): self.GlobalCoordinateSystem = GlobalCoordinateSystem
    def get__derived(self): return self._derived
    def set__derived(self, _derived): self._derived = _derived
    def get__real_archetype(self): return self._real_archetype
    def set__real_archetype(self, _real_archetype): self._real_archetype = _real_archetype
    def get__desynched_atts(self): return self._desynched_atts
    def set__desynched_atts(self, _desynched_atts): self._desynched_atts = _desynched_atts
    def get_AssembledComponentInstanceID(self): return self.AssembledComponentInstanceID
    def set_AssembledComponentInstanceID(self, AssembledComponentInstanceID): self.AssembledComponentInstanceID = AssembledComponentInstanceID
    def get__subtype(self): return self._subtype
    def set__subtype(self, _subtype): self._subtype = _subtype
    def get__instances(self): return self._instances
    def set__instances(self, _instances): self._instances = _instances
    def get__archetype(self): return self._archetype
    def set__archetype(self, _archetype): self._archetype = _archetype
    def get__id(self): return self._id
    def set__id(self, _id): self._id = _id
    def get_Type(self): return self.Type
    def set_Type(self, Type): self.Type = Type
    def get_ID(self): return self.ID
    def set_ID(self, ID): self.ID = ID
    def hasContent_(self):
        if (
            self.ComponentCoordinateSystem is not None or
            self.ConstrainedToComponents is not None or
            self.GlobalCoordinateSystem is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='JointType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='JointType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='JointType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='JointType'):
        if self._derived is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            outfile.write(' _derived=%s' % (self.gds_format_string(quote_attrib(self._derived).encode(ExternalEncoding), input_name='_derived'), ))
        if self._real_archetype is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            outfile.write(' _real_archetype="%s"' % self.gds_format_boolean(self._real_archetype, input_name='_real_archetype'))
        if self._desynched_atts is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            outfile.write(' _desynched_atts=%s' % (self.gds_format_string(quote_attrib(self._desynched_atts).encode(ExternalEncoding), input_name='_desynched_atts'), ))
        if self.AssembledComponentInstanceID is not None and 'AssembledComponentInstanceID' not in already_processed:
            already_processed.add('AssembledComponentInstanceID')
            outfile.write(' AssembledComponentInstanceID=%s' % (self.gds_format_string(quote_attrib(self.AssembledComponentInstanceID).encode(ExternalEncoding), input_name='AssembledComponentInstanceID'), ))
        if self._subtype is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            outfile.write(' _subtype="%s"' % self.gds_format_boolean(self._subtype, input_name='_subtype'))
        if self._instances is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            outfile.write(' _instances=%s' % (self.gds_format_string(quote_attrib(self._instances).encode(ExternalEncoding), input_name='_instances'), ))
        if self._archetype is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            outfile.write(' _archetype=%s' % (self.gds_format_string(quote_attrib(self._archetype).encode(ExternalEncoding), input_name='_archetype'), ))
        if self._id is not None and '_id' not in already_processed:
            already_processed.add('_id')
            outfile.write(' _id=%s' % (self.gds_format_string(quote_attrib(self._id).encode(ExternalEncoding), input_name='_id'), ))
        if self.Type is not None and 'Type' not in already_processed:
            already_processed.add('Type')
            outfile.write(' Type=%s' % (self.gds_format_string(quote_attrib(self.Type).encode(ExternalEncoding), input_name='Type'), ))
        if self.ID is not None and 'ID' not in already_processed:
            already_processed.add('ID')
            outfile.write(' ID=%s' % (self.gds_format_string(quote_attrib(self.ID).encode(ExternalEncoding), input_name='ID'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='JointType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ComponentCoordinateSystem is not None:
            self.ComponentCoordinateSystem.export(outfile, level, namespace_, name_='ComponentCoordinateSystem', pretty_print=pretty_print)
        if self.ConstrainedToComponents is not None:
            self.ConstrainedToComponents.export(outfile, level, namespace_, name_='ConstrainedToComponents', pretty_print=pretty_print)
        if self.GlobalCoordinateSystem is not None:
            self.GlobalCoordinateSystem.export(outfile, level, namespace_, name_='GlobalCoordinateSystem', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='JointType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self._derived is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            showIndent(outfile, level)
            outfile.write('_derived="%s",\n' % (self._derived,))
        if self._real_archetype is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            showIndent(outfile, level)
            outfile.write('_real_archetype=%s,\n' % (self._real_archetype,))
        if self._desynched_atts is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            showIndent(outfile, level)
            outfile.write('_desynched_atts="%s",\n' % (self._desynched_atts,))
        if self.AssembledComponentInstanceID is not None and 'AssembledComponentInstanceID' not in already_processed:
            already_processed.add('AssembledComponentInstanceID')
            showIndent(outfile, level)
            outfile.write('AssembledComponentInstanceID="%s",\n' % (self.AssembledComponentInstanceID,))
        if self._subtype is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            showIndent(outfile, level)
            outfile.write('_subtype=%s,\n' % (self._subtype,))
        if self._instances is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            showIndent(outfile, level)
            outfile.write('_instances="%s",\n' % (self._instances,))
        if self._archetype is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            showIndent(outfile, level)
            outfile.write('_archetype="%s",\n' % (self._archetype,))
        if self._id is not None and '_id' not in already_processed:
            already_processed.add('_id')
            showIndent(outfile, level)
            outfile.write('_id="%s",\n' % (self._id,))
        if self.Type is not None and 'Type' not in already_processed:
            already_processed.add('Type')
            showIndent(outfile, level)
            outfile.write('Type="%s",\n' % (self.Type,))
        if self.ID is not None and 'ID' not in already_processed:
            already_processed.add('ID')
            showIndent(outfile, level)
            outfile.write('ID="%s",\n' % (self.ID,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.ComponentCoordinateSystem is not None:
            showIndent(outfile, level)
            outfile.write('ComponentCoordinateSystem=model_.ComponentCoordinateSystemType(\n')
            self.ComponentCoordinateSystem.exportLiteral(outfile, level, name_='ComponentCoordinateSystem')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ConstrainedToComponents is not None:
            showIndent(outfile, level)
            outfile.write('ConstrainedToComponents=model_.ConstrainedToComponentsType(\n')
            self.ConstrainedToComponents.exportLiteral(outfile, level, name_='ConstrainedToComponents')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.GlobalCoordinateSystem is not None:
            showIndent(outfile, level)
            outfile.write('GlobalCoordinateSystem=model_.GlobalCoordinateSystemType(\n')
            self.GlobalCoordinateSystem.exportLiteral(outfile, level, name_='GlobalCoordinateSystem')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('_derived', node)
        if value is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            self._derived = value
        value = find_attr_value_('_real_archetype', node)
        if value is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            if value in ('true', '1'):
                self._real_archetype = True
            elif value in ('false', '0'):
                self._real_archetype = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('_desynched_atts', node)
        if value is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            self._desynched_atts = value
        value = find_attr_value_('AssembledComponentInstanceID', node)
        if value is not None and 'AssembledComponentInstanceID' not in already_processed:
            already_processed.add('AssembledComponentInstanceID')
            self.AssembledComponentInstanceID = value
        value = find_attr_value_('_subtype', node)
        if value is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            if value in ('true', '1'):
                self._subtype = True
            elif value in ('false', '0'):
                self._subtype = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('_instances', node)
        if value is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            self._instances = value
        value = find_attr_value_('_archetype', node)
        if value is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            self._archetype = value
        value = find_attr_value_('_id', node)
        if value is not None and '_id' not in already_processed:
            already_processed.add('_id')
            self._id = value
        value = find_attr_value_('Type', node)
        if value is not None and 'Type' not in already_processed:
            already_processed.add('Type')
            self.Type = value
        value = find_attr_value_('ID', node)
        if value is not None and 'ID' not in already_processed:
            already_processed.add('ID')
            self.ID = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ComponentCoordinateSystem':
            obj_ = ComponentCoordinateSystemType.factory()
            obj_.build(child_)
            self.ComponentCoordinateSystem = obj_
            obj_.original_tagname_ = 'ComponentCoordinateSystem'
        elif nodeName_ == 'ConstrainedToComponents':
            obj_ = ConstrainedToComponentsType.factory()
            obj_.build(child_)
            self.ConstrainedToComponents = obj_
            obj_.original_tagname_ = 'ConstrainedToComponents'
        elif nodeName_ == 'GlobalCoordinateSystem':
            obj_ = GlobalCoordinateSystemType.factory()
            obj_.build(child_)
            self.GlobalCoordinateSystem = obj_
            obj_.original_tagname_ = 'GlobalCoordinateSystem'
# end class JointType


class JointsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, _derived=None, _real_archetype=None, _archetype=None, _subtype=None, _instances=None, _desynched_atts=None, _id=None, Joint=None, JointsMetaData=None):
        self.original_tagname_ = None
        self._derived = _cast(None, _derived)
        self._real_archetype = _cast(bool, _real_archetype)
        self._archetype = _cast(None, _archetype)
        self._subtype = _cast(bool, _subtype)
        self._instances = _cast(None, _instances)
        self._desynched_atts = _cast(None, _desynched_atts)
        self._id = _cast(None, _id)
        if Joint is None:
            self.Joint = []
        else:
            self.Joint = Joint
        if JointsMetaData is None:
            self.JointsMetaData = []
        else:
            self.JointsMetaData = JointsMetaData
    def factory(*args_, **kwargs_):
        if JointsType.subclass:
            return JointsType.subclass(*args_, **kwargs_)
        else:
            return JointsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Joint(self): return self.Joint
    def set_Joint(self, Joint): self.Joint = Joint
    def add_Joint(self, value): self.Joint.append(value)
    def insert_Joint(self, index, value): self.Joint[index] = value
    def get_JointsMetaData(self): return self.JointsMetaData
    def set_JointsMetaData(self, JointsMetaData): self.JointsMetaData = JointsMetaData
    def add_JointsMetaData(self, value): self.JointsMetaData.append(value)
    def insert_JointsMetaData(self, index, value): self.JointsMetaData[index] = value
    def get__derived(self): return self._derived
    def set__derived(self, _derived): self._derived = _derived
    def get__real_archetype(self): return self._real_archetype
    def set__real_archetype(self, _real_archetype): self._real_archetype = _real_archetype
    def get__archetype(self): return self._archetype
    def set__archetype(self, _archetype): self._archetype = _archetype
    def get__subtype(self): return self._subtype
    def set__subtype(self, _subtype): self._subtype = _subtype
    def get__instances(self): return self._instances
    def set__instances(self, _instances): self._instances = _instances
    def get__desynched_atts(self): return self._desynched_atts
    def set__desynched_atts(self, _desynched_atts): self._desynched_atts = _desynched_atts
    def get__id(self): return self._id
    def set__id(self, _id): self._id = _id
    def hasContent_(self):
        if (
            self.Joint or
            self.JointsMetaData
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='JointsType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='JointsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='JointsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='JointsType'):
        if self._derived is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            outfile.write(' _derived=%s' % (self.gds_format_string(quote_attrib(self._derived).encode(ExternalEncoding), input_name='_derived'), ))
        if self._real_archetype is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            outfile.write(' _real_archetype="%s"' % self.gds_format_boolean(self._real_archetype, input_name='_real_archetype'))
        if self._archetype is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            outfile.write(' _archetype=%s' % (self.gds_format_string(quote_attrib(self._archetype).encode(ExternalEncoding), input_name='_archetype'), ))
        if self._subtype is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            outfile.write(' _subtype="%s"' % self.gds_format_boolean(self._subtype, input_name='_subtype'))
        if self._instances is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            outfile.write(' _instances=%s' % (self.gds_format_string(quote_attrib(self._instances).encode(ExternalEncoding), input_name='_instances'), ))
        if self._desynched_atts is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            outfile.write(' _desynched_atts=%s' % (self.gds_format_string(quote_attrib(self._desynched_atts).encode(ExternalEncoding), input_name='_desynched_atts'), ))
        if self._id is not None and '_id' not in already_processed:
            already_processed.add('_id')
            outfile.write(' _id=%s' % (self.gds_format_string(quote_attrib(self._id).encode(ExternalEncoding), input_name='_id'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='JointsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Joint_ in self.Joint:
            Joint_.export(outfile, level, namespace_, name_='Joint', pretty_print=pretty_print)
        for JointsMetaData_ in self.JointsMetaData:
            JointsMetaData_.export(outfile, level, namespace_, name_='JointsMetaData', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='JointsType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self._derived is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            showIndent(outfile, level)
            outfile.write('_derived="%s",\n' % (self._derived,))
        if self._real_archetype is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            showIndent(outfile, level)
            outfile.write('_real_archetype=%s,\n' % (self._real_archetype,))
        if self._archetype is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            showIndent(outfile, level)
            outfile.write('_archetype="%s",\n' % (self._archetype,))
        if self._subtype is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            showIndent(outfile, level)
            outfile.write('_subtype=%s,\n' % (self._subtype,))
        if self._instances is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            showIndent(outfile, level)
            outfile.write('_instances="%s",\n' % (self._instances,))
        if self._desynched_atts is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            showIndent(outfile, level)
            outfile.write('_desynched_atts="%s",\n' % (self._desynched_atts,))
        if self._id is not None and '_id' not in already_processed:
            already_processed.add('_id')
            showIndent(outfile, level)
            outfile.write('_id="%s",\n' % (self._id,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('Joint=[\n')
        level += 1
        for Joint_ in self.Joint:
            showIndent(outfile, level)
            outfile.write('model_.JointType(\n')
            Joint_.exportLiteral(outfile, level, name_='JointType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('JointsMetaData=[\n')
        level += 1
        for JointsMetaData_ in self.JointsMetaData:
            showIndent(outfile, level)
            outfile.write('model_.JointsMetaDataType(\n')
            JointsMetaData_.exportLiteral(outfile, level, name_='JointsMetaDataType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('_derived', node)
        if value is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            self._derived = value
        value = find_attr_value_('_real_archetype', node)
        if value is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            if value in ('true', '1'):
                self._real_archetype = True
            elif value in ('false', '0'):
                self._real_archetype = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('_archetype', node)
        if value is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            self._archetype = value
        value = find_attr_value_('_subtype', node)
        if value is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            if value in ('true', '1'):
                self._subtype = True
            elif value in ('false', '0'):
                self._subtype = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('_instances', node)
        if value is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            self._instances = value
        value = find_attr_value_('_desynched_atts', node)
        if value is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            self._desynched_atts = value
        value = find_attr_value_('_id', node)
        if value is not None and '_id' not in already_processed:
            already_processed.add('_id')
            self._id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Joint':
            obj_ = JointType.factory()
            obj_.build(child_)
            self.Joint.append(obj_)
            obj_.original_tagname_ = 'Joint'
        elif nodeName_ == 'JointsMetaData':
            obj_ = JointsMetaDataType.factory()
            obj_.build(child_)
            self.JointsMetaData.append(obj_)
            obj_.original_tagname_ = 'JointsMetaData'
# end class JointsType


class BoundingBoxType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, _derived=None, _id=None, _real_archetype=None, _desynched_atts=None, _subtype=None, _instances=None, _archetype=None, Y=None, X=None, Z=None, OutlinePoints=None):
        self.original_tagname_ = None
        self._derived = _cast(None, _derived)
        self._id = _cast(None, _id)
        self._real_archetype = _cast(bool, _real_archetype)
        self._desynched_atts = _cast(None, _desynched_atts)
        self._subtype = _cast(bool, _subtype)
        self._instances = _cast(None, _instances)
        self._archetype = _cast(None, _archetype)
        self.Y = _cast(float, Y)
        self.X = _cast(float, X)
        self.Z = _cast(float, Z)
        self.OutlinePoints = OutlinePoints
    def factory(*args_, **kwargs_):
        if BoundingBoxType.subclass:
            return BoundingBoxType.subclass(*args_, **kwargs_)
        else:
            return BoundingBoxType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_OutlinePoints(self): return self.OutlinePoints
    def set_OutlinePoints(self, OutlinePoints): self.OutlinePoints = OutlinePoints
    def get__derived(self): return self._derived
    def set__derived(self, _derived): self._derived = _derived
    def get__id(self): return self._id
    def set__id(self, _id): self._id = _id
    def get__real_archetype(self): return self._real_archetype
    def set__real_archetype(self, _real_archetype): self._real_archetype = _real_archetype
    def get__desynched_atts(self): return self._desynched_atts
    def set__desynched_atts(self, _desynched_atts): self._desynched_atts = _desynched_atts
    def get__subtype(self): return self._subtype
    def set__subtype(self, _subtype): self._subtype = _subtype
    def get__instances(self): return self._instances
    def set__instances(self, _instances): self._instances = _instances
    def get__archetype(self): return self._archetype
    def set__archetype(self, _archetype): self._archetype = _archetype
    def get_Y(self): return self.Y
    def set_Y(self, Y): self.Y = Y
    def get_X(self): return self.X
    def set_X(self, X): self.X = X
    def get_Z(self): return self.Z
    def set_Z(self, Z): self.Z = Z
    def hasContent_(self):
        if (
            self.OutlinePoints is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='BoundingBoxType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='BoundingBoxType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='BoundingBoxType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='BoundingBoxType'):
        if self._derived is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            outfile.write(' _derived=%s' % (self.gds_format_string(quote_attrib(self._derived).encode(ExternalEncoding), input_name='_derived'), ))
        if self._id is not None and '_id' not in already_processed:
            already_processed.add('_id')
            outfile.write(' _id=%s' % (self.gds_format_string(quote_attrib(self._id).encode(ExternalEncoding), input_name='_id'), ))
        if self._real_archetype is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            outfile.write(' _real_archetype="%s"' % self.gds_format_boolean(self._real_archetype, input_name='_real_archetype'))
        if self._desynched_atts is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            outfile.write(' _desynched_atts=%s' % (self.gds_format_string(quote_attrib(self._desynched_atts).encode(ExternalEncoding), input_name='_desynched_atts'), ))
        if self._subtype is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            outfile.write(' _subtype="%s"' % self.gds_format_boolean(self._subtype, input_name='_subtype'))
        if self._instances is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            outfile.write(' _instances=%s' % (self.gds_format_string(quote_attrib(self._instances).encode(ExternalEncoding), input_name='_instances'), ))
        if self._archetype is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            outfile.write(' _archetype=%s' % (self.gds_format_string(quote_attrib(self._archetype).encode(ExternalEncoding), input_name='_archetype'), ))
        if self.Y is not None and 'Y' not in already_processed:
            already_processed.add('Y')
            outfile.write(' Y="%s"' % self.gds_format_double(self.Y, input_name='Y'))
        if self.X is not None and 'X' not in already_processed:
            already_processed.add('X')
            outfile.write(' X="%s"' % self.gds_format_double(self.X, input_name='X'))
        if self.Z is not None and 'Z' not in already_processed:
            already_processed.add('Z')
            outfile.write(' Z="%s"' % self.gds_format_double(self.Z, input_name='Z'))
    def exportChildren(self, outfile, level, namespace_='', name_='BoundingBoxType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.OutlinePoints is not None:
            self.OutlinePoints.export(outfile, level, namespace_, name_='OutlinePoints', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='BoundingBoxType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self._derived is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            showIndent(outfile, level)
            outfile.write('_derived="%s",\n' % (self._derived,))
        if self._id is not None and '_id' not in already_processed:
            already_processed.add('_id')
            showIndent(outfile, level)
            outfile.write('_id="%s",\n' % (self._id,))
        if self._real_archetype is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            showIndent(outfile, level)
            outfile.write('_real_archetype=%s,\n' % (self._real_archetype,))
        if self._desynched_atts is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            showIndent(outfile, level)
            outfile.write('_desynched_atts="%s",\n' % (self._desynched_atts,))
        if self._subtype is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            showIndent(outfile, level)
            outfile.write('_subtype=%s,\n' % (self._subtype,))
        if self._instances is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            showIndent(outfile, level)
            outfile.write('_instances="%s",\n' % (self._instances,))
        if self._archetype is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            showIndent(outfile, level)
            outfile.write('_archetype="%s",\n' % (self._archetype,))
        if self.Y is not None and 'Y' not in already_processed:
            already_processed.add('Y')
            showIndent(outfile, level)
            outfile.write('Y=%e,\n' % (self.Y,))
        if self.X is not None and 'X' not in already_processed:
            already_processed.add('X')
            showIndent(outfile, level)
            outfile.write('X=%e,\n' % (self.X,))
        if self.Z is not None and 'Z' not in already_processed:
            already_processed.add('Z')
            showIndent(outfile, level)
            outfile.write('Z=%e,\n' % (self.Z,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.OutlinePoints is not None:
            showIndent(outfile, level)
            outfile.write('OutlinePoints=model_.OutlinePointsType(\n')
            self.OutlinePoints.exportLiteral(outfile, level, name_='OutlinePoints')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('_derived', node)
        if value is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            self._derived = value
        value = find_attr_value_('_id', node)
        if value is not None and '_id' not in already_processed:
            already_processed.add('_id')
            self._id = value
        value = find_attr_value_('_real_archetype', node)
        if value is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            if value in ('true', '1'):
                self._real_archetype = True
            elif value in ('false', '0'):
                self._real_archetype = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('_desynched_atts', node)
        if value is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            self._desynched_atts = value
        value = find_attr_value_('_subtype', node)
        if value is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            if value in ('true', '1'):
                self._subtype = True
            elif value in ('false', '0'):
                self._subtype = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('_instances', node)
        if value is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            self._instances = value
        value = find_attr_value_('_archetype', node)
        if value is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            self._archetype = value
        value = find_attr_value_('Y', node)
        if value is not None and 'Y' not in already_processed:
            already_processed.add('Y')
            try:
                self.Y = float(value)
            except ValueError as exp:
                raise ValueError('Bad float/double attribute (Y): %s' % exp)
        value = find_attr_value_('X', node)
        if value is not None and 'X' not in already_processed:
            already_processed.add('X')
            try:
                self.X = float(value)
            except ValueError as exp:
                raise ValueError('Bad float/double attribute (X): %s' % exp)
        value = find_attr_value_('Z', node)
        if value is not None and 'Z' not in already_processed:
            already_processed.add('Z')
            try:
                self.Z = float(value)
            except ValueError as exp:
                raise ValueError('Bad float/double attribute (Z): %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'OutlinePoints':
            obj_ = OutlinePointsType.factory()
            obj_.build(child_)
            self.OutlinePoints = obj_
            obj_.original_tagname_ = 'OutlinePoints'
# end class BoundingBoxType


class PointType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, _derived=None, _id=None, _real_archetype=None, _desynched_atts=None, _subtype=None, _instances=None, _archetype=None, Y=None, X=None, Z=None):
        self.original_tagname_ = None
        self._derived = _cast(None, _derived)
        self._id = _cast(None, _id)
        self._real_archetype = _cast(bool, _real_archetype)
        self._desynched_atts = _cast(None, _desynched_atts)
        self._subtype = _cast(bool, _subtype)
        self._instances = _cast(None, _instances)
        self._archetype = _cast(None, _archetype)
        self.Y = _cast(float, Y)
        self.X = _cast(float, X)
        self.Z = _cast(float, Z)
    def factory(*args_, **kwargs_):
        if PointType.subclass:
            return PointType.subclass(*args_, **kwargs_)
        else:
            return PointType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get__derived(self): return self._derived
    def set__derived(self, _derived): self._derived = _derived
    def get__id(self): return self._id
    def set__id(self, _id): self._id = _id
    def get__real_archetype(self): return self._real_archetype
    def set__real_archetype(self, _real_archetype): self._real_archetype = _real_archetype
    def get__desynched_atts(self): return self._desynched_atts
    def set__desynched_atts(self, _desynched_atts): self._desynched_atts = _desynched_atts
    def get__subtype(self): return self._subtype
    def set__subtype(self, _subtype): self._subtype = _subtype
    def get__instances(self): return self._instances
    def set__instances(self, _instances): self._instances = _instances
    def get__archetype(self): return self._archetype
    def set__archetype(self, _archetype): self._archetype = _archetype
    def get_Y(self): return self.Y
    def set_Y(self, Y): self.Y = Y
    def get_X(self): return self.X
    def set_X(self, X): self.X = X
    def get_Z(self): return self.Z
    def set_Z(self, Z): self.Z = Z
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PointType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PointType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PointType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PointType'):
        if self._derived is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            outfile.write(' _derived=%s' % (self.gds_format_string(quote_attrib(self._derived).encode(ExternalEncoding), input_name='_derived'), ))
        if self._id is not None and '_id' not in already_processed:
            already_processed.add('_id')
            outfile.write(' _id=%s' % (self.gds_format_string(quote_attrib(self._id).encode(ExternalEncoding), input_name='_id'), ))
        if self._real_archetype is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            outfile.write(' _real_archetype="%s"' % self.gds_format_boolean(self._real_archetype, input_name='_real_archetype'))
        if self._desynched_atts is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            outfile.write(' _desynched_atts=%s' % (self.gds_format_string(quote_attrib(self._desynched_atts).encode(ExternalEncoding), input_name='_desynched_atts'), ))
        if self._subtype is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            outfile.write(' _subtype="%s"' % self.gds_format_boolean(self._subtype, input_name='_subtype'))
        if self._instances is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            outfile.write(' _instances=%s' % (self.gds_format_string(quote_attrib(self._instances).encode(ExternalEncoding), input_name='_instances'), ))
        if self._archetype is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            outfile.write(' _archetype=%s' % (self.gds_format_string(quote_attrib(self._archetype).encode(ExternalEncoding), input_name='_archetype'), ))
        if self.Y is not None and 'Y' not in already_processed:
            already_processed.add('Y')
            outfile.write(' Y="%s"' % self.gds_format_double(self.Y, input_name='Y'))
        if self.X is not None and 'X' not in already_processed:
            already_processed.add('X')
            outfile.write(' X="%s"' % self.gds_format_double(self.X, input_name='X'))
        if self.Z is not None and 'Z' not in already_processed:
            already_processed.add('Z')
            outfile.write(' Z="%s"' % self.gds_format_double(self.Z, input_name='Z'))
    def exportChildren(self, outfile, level, namespace_='', name_='PointType', fromsubclass_=False, pretty_print=True):
        pass
    def exportLiteral(self, outfile, level, name_='PointType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self._derived is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            showIndent(outfile, level)
            outfile.write('_derived="%s",\n' % (self._derived,))
        if self._id is not None and '_id' not in already_processed:
            already_processed.add('_id')
            showIndent(outfile, level)
            outfile.write('_id="%s",\n' % (self._id,))
        if self._real_archetype is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            showIndent(outfile, level)
            outfile.write('_real_archetype=%s,\n' % (self._real_archetype,))
        if self._desynched_atts is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            showIndent(outfile, level)
            outfile.write('_desynched_atts="%s",\n' % (self._desynched_atts,))
        if self._subtype is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            showIndent(outfile, level)
            outfile.write('_subtype=%s,\n' % (self._subtype,))
        if self._instances is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            showIndent(outfile, level)
            outfile.write('_instances="%s",\n' % (self._instances,))
        if self._archetype is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            showIndent(outfile, level)
            outfile.write('_archetype="%s",\n' % (self._archetype,))
        if self.Y is not None and 'Y' not in already_processed:
            already_processed.add('Y')
            showIndent(outfile, level)
            outfile.write('Y=%e,\n' % (self.Y,))
        if self.X is not None and 'X' not in already_processed:
            already_processed.add('X')
            showIndent(outfile, level)
            outfile.write('X=%e,\n' % (self.X,))
        if self.Z is not None and 'Z' not in already_processed:
            already_processed.add('Z')
            showIndent(outfile, level)
            outfile.write('Z=%e,\n' % (self.Z,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('_derived', node)
        if value is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            self._derived = value
        value = find_attr_value_('_id', node)
        if value is not None and '_id' not in already_processed:
            already_processed.add('_id')
            self._id = value
        value = find_attr_value_('_real_archetype', node)
        if value is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            if value in ('true', '1'):
                self._real_archetype = True
            elif value in ('false', '0'):
                self._real_archetype = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('_desynched_atts', node)
        if value is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            self._desynched_atts = value
        value = find_attr_value_('_subtype', node)
        if value is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            if value in ('true', '1'):
                self._subtype = True
            elif value in ('false', '0'):
                self._subtype = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('_instances', node)
        if value is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            self._instances = value
        value = find_attr_value_('_archetype', node)
        if value is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            self._archetype = value
        value = find_attr_value_('Y', node)
        if value is not None and 'Y' not in already_processed:
            already_processed.add('Y')
            try:
                self.Y = float(value)
            except ValueError as exp:
                raise ValueError('Bad float/double attribute (Y): %s' % exp)
        value = find_attr_value_('X', node)
        if value is not None and 'X' not in already_processed:
            already_processed.add('X')
            try:
                self.X = float(value)
            except ValueError as exp:
                raise ValueError('Bad float/double attribute (X): %s' % exp)
        value = find_attr_value_('Z', node)
        if value is not None and 'Z' not in already_processed:
            already_processed.add('Z')
            try:
                self.Z = float(value)
            except ValueError as exp:
                raise ValueError('Bad float/double attribute (Z): %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class PointType


class TranslationType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, _derived=None, _id=None, _real_archetype=None, _desynched_atts=None, _subtype=None, _instances=None, _archetype=None, Y=None, X=None, Z=None):
        self.original_tagname_ = None
        self._derived = _cast(None, _derived)
        self._id = _cast(None, _id)
        self._real_archetype = _cast(bool, _real_archetype)
        self._desynched_atts = _cast(None, _desynched_atts)
        self._subtype = _cast(bool, _subtype)
        self._instances = _cast(None, _instances)
        self._archetype = _cast(None, _archetype)
        self.Y = _cast(float, Y)
        self.X = _cast(float, X)
        self.Z = _cast(float, Z)
    def factory(*args_, **kwargs_):
        if TranslationType.subclass:
            return TranslationType.subclass(*args_, **kwargs_)
        else:
            return TranslationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get__derived(self): return self._derived
    def set__derived(self, _derived): self._derived = _derived
    def get__id(self): return self._id
    def set__id(self, _id): self._id = _id
    def get__real_archetype(self): return self._real_archetype
    def set__real_archetype(self, _real_archetype): self._real_archetype = _real_archetype
    def get__desynched_atts(self): return self._desynched_atts
    def set__desynched_atts(self, _desynched_atts): self._desynched_atts = _desynched_atts
    def get__subtype(self): return self._subtype
    def set__subtype(self, _subtype): self._subtype = _subtype
    def get__instances(self): return self._instances
    def set__instances(self, _instances): self._instances = _instances
    def get__archetype(self): return self._archetype
    def set__archetype(self, _archetype): self._archetype = _archetype
    def get_Y(self): return self.Y
    def set_Y(self, Y): self.Y = Y
    def get_X(self): return self.X
    def set_X(self, X): self.X = X
    def get_Z(self): return self.Z
    def set_Z(self, Z): self.Z = Z
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='TranslationType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TranslationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='TranslationType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TranslationType'):
        if self._derived is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            outfile.write(' _derived=%s' % (self.gds_format_string(quote_attrib(self._derived).encode(ExternalEncoding), input_name='_derived'), ))
        if self._id is not None and '_id' not in already_processed:
            already_processed.add('_id')
            outfile.write(' _id=%s' % (self.gds_format_string(quote_attrib(self._id).encode(ExternalEncoding), input_name='_id'), ))
        if self._real_archetype is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            outfile.write(' _real_archetype="%s"' % self.gds_format_boolean(self._real_archetype, input_name='_real_archetype'))
        if self._desynched_atts is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            outfile.write(' _desynched_atts=%s' % (self.gds_format_string(quote_attrib(self._desynched_atts).encode(ExternalEncoding), input_name='_desynched_atts'), ))
        if self._subtype is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            outfile.write(' _subtype="%s"' % self.gds_format_boolean(self._subtype, input_name='_subtype'))
        if self._instances is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            outfile.write(' _instances=%s' % (self.gds_format_string(quote_attrib(self._instances).encode(ExternalEncoding), input_name='_instances'), ))
        if self._archetype is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            outfile.write(' _archetype=%s' % (self.gds_format_string(quote_attrib(self._archetype).encode(ExternalEncoding), input_name='_archetype'), ))
        if self.Y is not None and 'Y' not in already_processed:
            already_processed.add('Y')
            outfile.write(' Y="%s"' % self.gds_format_double(self.Y, input_name='Y'))
        if self.X is not None and 'X' not in already_processed:
            already_processed.add('X')
            outfile.write(' X="%s"' % self.gds_format_double(self.X, input_name='X'))
        if self.Z is not None and 'Z' not in already_processed:
            already_processed.add('Z')
            outfile.write(' Z="%s"' % self.gds_format_double(self.Z, input_name='Z'))
    def exportChildren(self, outfile, level, namespace_='', name_='TranslationType', fromsubclass_=False, pretty_print=True):
        pass
    def exportLiteral(self, outfile, level, name_='TranslationType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self._derived is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            showIndent(outfile, level)
            outfile.write('_derived="%s",\n' % (self._derived,))
        if self._id is not None and '_id' not in already_processed:
            already_processed.add('_id')
            showIndent(outfile, level)
            outfile.write('_id="%s",\n' % (self._id,))
        if self._real_archetype is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            showIndent(outfile, level)
            outfile.write('_real_archetype=%s,\n' % (self._real_archetype,))
        if self._desynched_atts is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            showIndent(outfile, level)
            outfile.write('_desynched_atts="%s",\n' % (self._desynched_atts,))
        if self._subtype is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            showIndent(outfile, level)
            outfile.write('_subtype=%s,\n' % (self._subtype,))
        if self._instances is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            showIndent(outfile, level)
            outfile.write('_instances="%s",\n' % (self._instances,))
        if self._archetype is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            showIndent(outfile, level)
            outfile.write('_archetype="%s",\n' % (self._archetype,))
        if self.Y is not None and 'Y' not in already_processed:
            already_processed.add('Y')
            showIndent(outfile, level)
            outfile.write('Y=%e,\n' % (self.Y,))
        if self.X is not None and 'X' not in already_processed:
            already_processed.add('X')
            showIndent(outfile, level)
            outfile.write('X=%e,\n' % (self.X,))
        if self.Z is not None and 'Z' not in already_processed:
            already_processed.add('Z')
            showIndent(outfile, level)
            outfile.write('Z=%e,\n' % (self.Z,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('_derived', node)
        if value is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            self._derived = value
        value = find_attr_value_('_id', node)
        if value is not None and '_id' not in already_processed:
            already_processed.add('_id')
            self._id = value
        value = find_attr_value_('_real_archetype', node)
        if value is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            if value in ('true', '1'):
                self._real_archetype = True
            elif value in ('false', '0'):
                self._real_archetype = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('_desynched_atts', node)
        if value is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            self._desynched_atts = value
        value = find_attr_value_('_subtype', node)
        if value is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            if value in ('true', '1'):
                self._subtype = True
            elif value in ('false', '0'):
                self._subtype = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('_instances', node)
        if value is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            self._instances = value
        value = find_attr_value_('_archetype', node)
        if value is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            self._archetype = value
        value = find_attr_value_('Y', node)
        if value is not None and 'Y' not in already_processed:
            already_processed.add('Y')
            try:
                self.Y = float(value)
            except ValueError as exp:
                raise ValueError('Bad float/double attribute (Y): %s' % exp)
        value = find_attr_value_('X', node)
        if value is not None and 'X' not in already_processed:
            already_processed.add('X')
            try:
                self.X = float(value)
            except ValueError as exp:
                raise ValueError('Bad float/double attribute (X): %s' % exp)
        value = find_attr_value_('Z', node)
        if value is not None and 'Z' not in already_processed:
            already_processed.add('Z')
            try:
                self.Z = float(value)
            except ValueError as exp:
                raise ValueError('Bad float/double attribute (Z): %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class TranslationType


class CGType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, _derived=None, _id=None, _real_archetype=None, _desynched_atts=None, _subtype=None, _instances=None, _archetype=None, Y=None, X=None, Z=None):
        self.original_tagname_ = None
        self._derived = _cast(None, _derived)
        self._id = _cast(None, _id)
        self._real_archetype = _cast(bool, _real_archetype)
        self._desynched_atts = _cast(None, _desynched_atts)
        self._subtype = _cast(bool, _subtype)
        self._instances = _cast(None, _instances)
        self._archetype = _cast(None, _archetype)
        self.Y = _cast(float, Y)
        self.X = _cast(float, X)
        self.Z = _cast(float, Z)
    def factory(*args_, **kwargs_):
        if CGType.subclass:
            return CGType.subclass(*args_, **kwargs_)
        else:
            return CGType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get__derived(self): return self._derived
    def set__derived(self, _derived): self._derived = _derived
    def get__id(self): return self._id
    def set__id(self, _id): self._id = _id
    def get__real_archetype(self): return self._real_archetype
    def set__real_archetype(self, _real_archetype): self._real_archetype = _real_archetype
    def get__desynched_atts(self): return self._desynched_atts
    def set__desynched_atts(self, _desynched_atts): self._desynched_atts = _desynched_atts
    def get__subtype(self): return self._subtype
    def set__subtype(self, _subtype): self._subtype = _subtype
    def get__instances(self): return self._instances
    def set__instances(self, _instances): self._instances = _instances
    def get__archetype(self): return self._archetype
    def set__archetype(self, _archetype): self._archetype = _archetype
    def get_Y(self): return self.Y
    def set_Y(self, Y): self.Y = Y
    def get_X(self): return self.X
    def set_X(self, X): self.X = X
    def get_Z(self): return self.Z
    def set_Z(self, Z): self.Z = Z
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CGType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CGType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CGType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CGType'):
        if self._derived is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            outfile.write(' _derived=%s' % (self.gds_format_string(quote_attrib(self._derived).encode(ExternalEncoding), input_name='_derived'), ))
        if self._id is not None and '_id' not in already_processed:
            already_processed.add('_id')
            outfile.write(' _id=%s' % (self.gds_format_string(quote_attrib(self._id).encode(ExternalEncoding), input_name='_id'), ))
        if self._real_archetype is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            outfile.write(' _real_archetype="%s"' % self.gds_format_boolean(self._real_archetype, input_name='_real_archetype'))
        if self._desynched_atts is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            outfile.write(' _desynched_atts=%s' % (self.gds_format_string(quote_attrib(self._desynched_atts).encode(ExternalEncoding), input_name='_desynched_atts'), ))
        if self._subtype is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            outfile.write(' _subtype="%s"' % self.gds_format_boolean(self._subtype, input_name='_subtype'))
        if self._instances is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            outfile.write(' _instances=%s' % (self.gds_format_string(quote_attrib(self._instances).encode(ExternalEncoding), input_name='_instances'), ))
        if self._archetype is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            outfile.write(' _archetype=%s' % (self.gds_format_string(quote_attrib(self._archetype).encode(ExternalEncoding), input_name='_archetype'), ))
        if self.Y is not None and 'Y' not in already_processed:
            already_processed.add('Y')
            outfile.write(' Y="%s"' % self.gds_format_double(self.Y, input_name='Y'))
        if self.X is not None and 'X' not in already_processed:
            already_processed.add('X')
            outfile.write(' X="%s"' % self.gds_format_double(self.X, input_name='X'))
        if self.Z is not None and 'Z' not in already_processed:
            already_processed.add('Z')
            outfile.write(' Z="%s"' % self.gds_format_double(self.Z, input_name='Z'))
    def exportChildren(self, outfile, level, namespace_='', name_='CGType', fromsubclass_=False, pretty_print=True):
        pass
    def exportLiteral(self, outfile, level, name_='CGType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self._derived is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            showIndent(outfile, level)
            outfile.write('_derived="%s",\n' % (self._derived,))
        if self._id is not None and '_id' not in already_processed:
            already_processed.add('_id')
            showIndent(outfile, level)
            outfile.write('_id="%s",\n' % (self._id,))
        if self._real_archetype is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            showIndent(outfile, level)
            outfile.write('_real_archetype=%s,\n' % (self._real_archetype,))
        if self._desynched_atts is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            showIndent(outfile, level)
            outfile.write('_desynched_atts="%s",\n' % (self._desynched_atts,))
        if self._subtype is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            showIndent(outfile, level)
            outfile.write('_subtype=%s,\n' % (self._subtype,))
        if self._instances is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            showIndent(outfile, level)
            outfile.write('_instances="%s",\n' % (self._instances,))
        if self._archetype is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            showIndent(outfile, level)
            outfile.write('_archetype="%s",\n' % (self._archetype,))
        if self.Y is not None and 'Y' not in already_processed:
            already_processed.add('Y')
            showIndent(outfile, level)
            outfile.write('Y=%e,\n' % (self.Y,))
        if self.X is not None and 'X' not in already_processed:
            already_processed.add('X')
            showIndent(outfile, level)
            outfile.write('X=%e,\n' % (self.X,))
        if self.Z is not None and 'Z' not in already_processed:
            already_processed.add('Z')
            showIndent(outfile, level)
            outfile.write('Z=%e,\n' % (self.Z,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('_derived', node)
        if value is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            self._derived = value
        value = find_attr_value_('_id', node)
        if value is not None and '_id' not in already_processed:
            already_processed.add('_id')
            self._id = value
        value = find_attr_value_('_real_archetype', node)
        if value is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            if value in ('true', '1'):
                self._real_archetype = True
            elif value in ('false', '0'):
                self._real_archetype = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('_desynched_atts', node)
        if value is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            self._desynched_atts = value
        value = find_attr_value_('_subtype', node)
        if value is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            if value in ('true', '1'):
                self._subtype = True
            elif value in ('false', '0'):
                self._subtype = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('_instances', node)
        if value is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            self._instances = value
        value = find_attr_value_('_archetype', node)
        if value is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            self._archetype = value
        value = find_attr_value_('Y', node)
        if value is not None and 'Y' not in already_processed:
            already_processed.add('Y')
            try:
                self.Y = float(value)
            except ValueError as exp:
                raise ValueError('Bad float/double attribute (Y): %s' % exp)
        value = find_attr_value_('X', node)
        if value is not None and 'X' not in already_processed:
            already_processed.add('X')
            try:
                self.X = float(value)
            except ValueError as exp:
                raise ValueError('Bad float/double attribute (X): %s' % exp)
        value = find_attr_value_('Z', node)
        if value is not None and 'Z' not in already_processed:
            already_processed.add('Z')
            try:
                self.Z = float(value)
            except ValueError as exp:
                raise ValueError('Bad float/double attribute (Z): %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class CGType


class RotationMatrixType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, _derived=None, _real_archetype=None, _archetype=None, _subtype=None, _instances=None, _desynched_atts=None, _id=None, Rows=None):
        self.original_tagname_ = None
        self._derived = _cast(None, _derived)
        self._real_archetype = _cast(bool, _real_archetype)
        self._archetype = _cast(None, _archetype)
        self._subtype = _cast(bool, _subtype)
        self._instances = _cast(None, _instances)
        self._desynched_atts = _cast(None, _desynched_atts)
        self._id = _cast(None, _id)
        self.Rows = Rows
    def factory(*args_, **kwargs_):
        if RotationMatrixType.subclass:
            return RotationMatrixType.subclass(*args_, **kwargs_)
        else:
            return RotationMatrixType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Rows(self): return self.Rows
    def set_Rows(self, Rows): self.Rows = Rows
    def get__derived(self): return self._derived
    def set__derived(self, _derived): self._derived = _derived
    def get__real_archetype(self): return self._real_archetype
    def set__real_archetype(self, _real_archetype): self._real_archetype = _real_archetype
    def get__archetype(self): return self._archetype
    def set__archetype(self, _archetype): self._archetype = _archetype
    def get__subtype(self): return self._subtype
    def set__subtype(self, _subtype): self._subtype = _subtype
    def get__instances(self): return self._instances
    def set__instances(self, _instances): self._instances = _instances
    def get__desynched_atts(self): return self._desynched_atts
    def set__desynched_atts(self, _desynched_atts): self._desynched_atts = _desynched_atts
    def get__id(self): return self._id
    def set__id(self, _id): self._id = _id
    def hasContent_(self):
        if (
            self.Rows is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='RotationMatrixType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='RotationMatrixType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='RotationMatrixType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='RotationMatrixType'):
        if self._derived is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            outfile.write(' _derived=%s' % (self.gds_format_string(quote_attrib(self._derived).encode(ExternalEncoding), input_name='_derived'), ))
        if self._real_archetype is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            outfile.write(' _real_archetype="%s"' % self.gds_format_boolean(self._real_archetype, input_name='_real_archetype'))
        if self._archetype is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            outfile.write(' _archetype=%s' % (self.gds_format_string(quote_attrib(self._archetype).encode(ExternalEncoding), input_name='_archetype'), ))
        if self._subtype is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            outfile.write(' _subtype="%s"' % self.gds_format_boolean(self._subtype, input_name='_subtype'))
        if self._instances is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            outfile.write(' _instances=%s' % (self.gds_format_string(quote_attrib(self._instances).encode(ExternalEncoding), input_name='_instances'), ))
        if self._desynched_atts is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            outfile.write(' _desynched_atts=%s' % (self.gds_format_string(quote_attrib(self._desynched_atts).encode(ExternalEncoding), input_name='_desynched_atts'), ))
        if self._id is not None and '_id' not in already_processed:
            already_processed.add('_id')
            outfile.write(' _id=%s' % (self.gds_format_string(quote_attrib(self._id).encode(ExternalEncoding), input_name='_id'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='RotationMatrixType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Rows is not None:
            self.Rows.export(outfile, level, namespace_, name_='Rows', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='RotationMatrixType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self._derived is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            showIndent(outfile, level)
            outfile.write('_derived="%s",\n' % (self._derived,))
        if self._real_archetype is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            showIndent(outfile, level)
            outfile.write('_real_archetype=%s,\n' % (self._real_archetype,))
        if self._archetype is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            showIndent(outfile, level)
            outfile.write('_archetype="%s",\n' % (self._archetype,))
        if self._subtype is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            showIndent(outfile, level)
            outfile.write('_subtype=%s,\n' % (self._subtype,))
        if self._instances is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            showIndent(outfile, level)
            outfile.write('_instances="%s",\n' % (self._instances,))
        if self._desynched_atts is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            showIndent(outfile, level)
            outfile.write('_desynched_atts="%s",\n' % (self._desynched_atts,))
        if self._id is not None and '_id' not in already_processed:
            already_processed.add('_id')
            showIndent(outfile, level)
            outfile.write('_id="%s",\n' % (self._id,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Rows is not None:
            showIndent(outfile, level)
            outfile.write('Rows=model_.RowsType(\n')
            self.Rows.exportLiteral(outfile, level, name_='Rows')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('_derived', node)
        if value is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            self._derived = value
        value = find_attr_value_('_real_archetype', node)
        if value is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            if value in ('true', '1'):
                self._real_archetype = True
            elif value in ('false', '0'):
                self._real_archetype = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('_archetype', node)
        if value is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            self._archetype = value
        value = find_attr_value_('_subtype', node)
        if value is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            if value in ('true', '1'):
                self._subtype = True
            elif value in ('false', '0'):
                self._subtype = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('_instances', node)
        if value is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            self._instances = value
        value = find_attr_value_('_desynched_atts', node)
        if value is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            self._desynched_atts = value
        value = find_attr_value_('_id', node)
        if value is not None and '_id' not in already_processed:
            already_processed.add('_id')
            self._id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Rows':
            obj_ = RowsType.factory()
            obj_.build(child_)
            self.Rows = obj_
            obj_.original_tagname_ = 'Rows'
# end class RotationMatrixType


class PrincipleMomentsOfInertiaType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, _derived=None, _real_archetype=None, _archetype=None, _subtype=None, _instances=None, _desynched_atts=None, _id=None, RotationMatrix=None, Rows=None):
        self.original_tagname_ = None
        self._derived = _cast(None, _derived)
        self._real_archetype = _cast(bool, _real_archetype)
        self._archetype = _cast(None, _archetype)
        self._subtype = _cast(bool, _subtype)
        self._instances = _cast(None, _instances)
        self._desynched_atts = _cast(None, _desynched_atts)
        self._id = _cast(None, _id)
        self.RotationMatrix = RotationMatrix
        self.Rows = Rows
    def factory(*args_, **kwargs_):
        if PrincipleMomentsOfInertiaType.subclass:
            return PrincipleMomentsOfInertiaType.subclass(*args_, **kwargs_)
        else:
            return PrincipleMomentsOfInertiaType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_RotationMatrix(self): return self.RotationMatrix
    def set_RotationMatrix(self, RotationMatrix): self.RotationMatrix = RotationMatrix
    def get_Rows(self): return self.Rows
    def set_Rows(self, Rows): self.Rows = Rows
    def get__derived(self): return self._derived
    def set__derived(self, _derived): self._derived = _derived
    def get__real_archetype(self): return self._real_archetype
    def set__real_archetype(self, _real_archetype): self._real_archetype = _real_archetype
    def get__archetype(self): return self._archetype
    def set__archetype(self, _archetype): self._archetype = _archetype
    def get__subtype(self): return self._subtype
    def set__subtype(self, _subtype): self._subtype = _subtype
    def get__instances(self): return self._instances
    def set__instances(self, _instances): self._instances = _instances
    def get__desynched_atts(self): return self._desynched_atts
    def set__desynched_atts(self, _desynched_atts): self._desynched_atts = _desynched_atts
    def get__id(self): return self._id
    def set__id(self, _id): self._id = _id
    def hasContent_(self):
        if (
            self.RotationMatrix is not None or
            self.Rows is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PrincipleMomentsOfInertiaType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PrincipleMomentsOfInertiaType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PrincipleMomentsOfInertiaType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PrincipleMomentsOfInertiaType'):
        if self._derived is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            outfile.write(' _derived=%s' % (self.gds_format_string(quote_attrib(self._derived).encode(ExternalEncoding), input_name='_derived'), ))
        if self._real_archetype is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            outfile.write(' _real_archetype="%s"' % self.gds_format_boolean(self._real_archetype, input_name='_real_archetype'))
        if self._archetype is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            outfile.write(' _archetype=%s' % (self.gds_format_string(quote_attrib(self._archetype).encode(ExternalEncoding), input_name='_archetype'), ))
        if self._subtype is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            outfile.write(' _subtype="%s"' % self.gds_format_boolean(self._subtype, input_name='_subtype'))
        if self._instances is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            outfile.write(' _instances=%s' % (self.gds_format_string(quote_attrib(self._instances).encode(ExternalEncoding), input_name='_instances'), ))
        if self._desynched_atts is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            outfile.write(' _desynched_atts=%s' % (self.gds_format_string(quote_attrib(self._desynched_atts).encode(ExternalEncoding), input_name='_desynched_atts'), ))
        if self._id is not None and '_id' not in already_processed:
            already_processed.add('_id')
            outfile.write(' _id=%s' % (self.gds_format_string(quote_attrib(self._id).encode(ExternalEncoding), input_name='_id'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='PrincipleMomentsOfInertiaType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.RotationMatrix is not None:
            self.RotationMatrix.export(outfile, level, namespace_, name_='RotationMatrix', pretty_print=pretty_print)
        if self.Rows is not None:
            self.Rows.export(outfile, level, namespace_, name_='Rows', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='PrincipleMomentsOfInertiaType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self._derived is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            showIndent(outfile, level)
            outfile.write('_derived="%s",\n' % (self._derived,))
        if self._real_archetype is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            showIndent(outfile, level)
            outfile.write('_real_archetype=%s,\n' % (self._real_archetype,))
        if self._archetype is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            showIndent(outfile, level)
            outfile.write('_archetype="%s",\n' % (self._archetype,))
        if self._subtype is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            showIndent(outfile, level)
            outfile.write('_subtype=%s,\n' % (self._subtype,))
        if self._instances is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            showIndent(outfile, level)
            outfile.write('_instances="%s",\n' % (self._instances,))
        if self._desynched_atts is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            showIndent(outfile, level)
            outfile.write('_desynched_atts="%s",\n' % (self._desynched_atts,))
        if self._id is not None and '_id' not in already_processed:
            already_processed.add('_id')
            showIndent(outfile, level)
            outfile.write('_id="%s",\n' % (self._id,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.RotationMatrix is not None:
            showIndent(outfile, level)
            outfile.write('RotationMatrix=model_.RotationMatrixType(\n')
            self.RotationMatrix.exportLiteral(outfile, level, name_='RotationMatrix')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Rows is not None:
            showIndent(outfile, level)
            outfile.write('Rows=model_.RowsType(\n')
            self.Rows.exportLiteral(outfile, level, name_='Rows')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('_derived', node)
        if value is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            self._derived = value
        value = find_attr_value_('_real_archetype', node)
        if value is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            if value in ('true', '1'):
                self._real_archetype = True
            elif value in ('false', '0'):
                self._real_archetype = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('_archetype', node)
        if value is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            self._archetype = value
        value = find_attr_value_('_subtype', node)
        if value is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            if value in ('true', '1'):
                self._subtype = True
            elif value in ('false', '0'):
                self._subtype = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('_instances', node)
        if value is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            self._instances = value
        value = find_attr_value_('_desynched_atts', node)
        if value is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            self._desynched_atts = value
        value = find_attr_value_('_id', node)
        if value is not None and '_id' not in already_processed:
            already_processed.add('_id')
            self._id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'RotationMatrix':
            obj_ = RotationMatrixType.factory()
            obj_.build(child_)
            self.RotationMatrix = obj_
            obj_.original_tagname_ = 'RotationMatrix'
        elif nodeName_ == 'Rows':
            obj_ = RowsType.factory()
            obj_.build(child_)
            self.Rows = obj_
            obj_.original_tagname_ = 'Rows'
# end class PrincipleMomentsOfInertiaType


class InertiaTensorType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, _derived=None, _real_archetype=None, _archetype=None, _subtype=None, _instances=None, At=None, _desynched_atts=None, _id=None, Rows=None):
        self.original_tagname_ = None
        self._derived = _cast(None, _derived)
        self._real_archetype = _cast(bool, _real_archetype)
        self._archetype = _cast(None, _archetype)
        self._subtype = _cast(bool, _subtype)
        self._instances = _cast(None, _instances)
        self.At = _cast(None, At)
        self._desynched_atts = _cast(None, _desynched_atts)
        self._id = _cast(None, _id)
        self.Rows = Rows
    def factory(*args_, **kwargs_):
        if InertiaTensorType.subclass:
            return InertiaTensorType.subclass(*args_, **kwargs_)
        else:
            return InertiaTensorType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Rows(self): return self.Rows
    def set_Rows(self, Rows): self.Rows = Rows
    def get__derived(self): return self._derived
    def set__derived(self, _derived): self._derived = _derived
    def get__real_archetype(self): return self._real_archetype
    def set__real_archetype(self, _real_archetype): self._real_archetype = _real_archetype
    def get__archetype(self): return self._archetype
    def set__archetype(self, _archetype): self._archetype = _archetype
    def get__subtype(self): return self._subtype
    def set__subtype(self, _subtype): self._subtype = _subtype
    def get__instances(self): return self._instances
    def set__instances(self, _instances): self._instances = _instances
    def get_At(self): return self.At
    def set_At(self, At): self.At = At
    def get__desynched_atts(self): return self._desynched_atts
    def set__desynched_atts(self, _desynched_atts): self._desynched_atts = _desynched_atts
    def get__id(self): return self._id
    def set__id(self, _id): self._id = _id
    def hasContent_(self):
        if (
            self.Rows is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='InertiaTensorType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='InertiaTensorType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='InertiaTensorType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='InertiaTensorType'):
        if self._derived is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            outfile.write(' _derived=%s' % (self.gds_format_string(quote_attrib(self._derived).encode(ExternalEncoding), input_name='_derived'), ))
        if self._real_archetype is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            outfile.write(' _real_archetype="%s"' % self.gds_format_boolean(self._real_archetype, input_name='_real_archetype'))
        if self._archetype is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            outfile.write(' _archetype=%s' % (self.gds_format_string(quote_attrib(self._archetype).encode(ExternalEncoding), input_name='_archetype'), ))
        if self._subtype is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            outfile.write(' _subtype="%s"' % self.gds_format_boolean(self._subtype, input_name='_subtype'))
        if self._instances is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            outfile.write(' _instances=%s' % (self.gds_format_string(quote_attrib(self._instances).encode(ExternalEncoding), input_name='_instances'), ))
        if self.At is not None and 'At' not in already_processed:
            already_processed.add('At')
            outfile.write(' At=%s' % (self.gds_format_string(quote_attrib(self.At).encode(ExternalEncoding), input_name='At'), ))
        if self._desynched_atts is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            outfile.write(' _desynched_atts=%s' % (self.gds_format_string(quote_attrib(self._desynched_atts).encode(ExternalEncoding), input_name='_desynched_atts'), ))
        if self._id is not None and '_id' not in already_processed:
            already_processed.add('_id')
            outfile.write(' _id=%s' % (self.gds_format_string(quote_attrib(self._id).encode(ExternalEncoding), input_name='_id'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='InertiaTensorType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Rows is not None:
            self.Rows.export(outfile, level, namespace_, name_='Rows', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='InertiaTensorType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self._derived is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            showIndent(outfile, level)
            outfile.write('_derived="%s",\n' % (self._derived,))
        if self._real_archetype is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            showIndent(outfile, level)
            outfile.write('_real_archetype=%s,\n' % (self._real_archetype,))
        if self._archetype is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            showIndent(outfile, level)
            outfile.write('_archetype="%s",\n' % (self._archetype,))
        if self._subtype is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            showIndent(outfile, level)
            outfile.write('_subtype=%s,\n' % (self._subtype,))
        if self._instances is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            showIndent(outfile, level)
            outfile.write('_instances="%s",\n' % (self._instances,))
        if self.At is not None and 'At' not in already_processed:
            already_processed.add('At')
            showIndent(outfile, level)
            outfile.write('At="%s",\n' % (self.At,))
        if self._desynched_atts is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            showIndent(outfile, level)
            outfile.write('_desynched_atts="%s",\n' % (self._desynched_atts,))
        if self._id is not None and '_id' not in already_processed:
            already_processed.add('_id')
            showIndent(outfile, level)
            outfile.write('_id="%s",\n' % (self._id,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Rows is not None:
            showIndent(outfile, level)
            outfile.write('Rows=model_.RowsType(\n')
            self.Rows.exportLiteral(outfile, level, name_='Rows')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('_derived', node)
        if value is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            self._derived = value
        value = find_attr_value_('_real_archetype', node)
        if value is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            if value in ('true', '1'):
                self._real_archetype = True
            elif value in ('false', '0'):
                self._real_archetype = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('_archetype', node)
        if value is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            self._archetype = value
        value = find_attr_value_('_subtype', node)
        if value is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            if value in ('true', '1'):
                self._subtype = True
            elif value in ('false', '0'):
                self._subtype = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('_instances', node)
        if value is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            self._instances = value
        value = find_attr_value_('At', node)
        if value is not None and 'At' not in already_processed:
            already_processed.add('At')
            self.At = value
        value = find_attr_value_('_desynched_atts', node)
        if value is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            self._desynched_atts = value
        value = find_attr_value_('_id', node)
        if value is not None and '_id' not in already_processed:
            already_processed.add('_id')
            self._id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Rows':
            obj_ = RowsType.factory()
            obj_.build(child_)
            self.Rows = obj_
            obj_.original_tagname_ = 'Rows'
# end class InertiaTensorType


class RowsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, _derived=None, _real_archetype=None, _archetype=None, _subtype=None, _instances=None, _desynched_atts=None, _id=None, Row=None):
        self.original_tagname_ = None
        self._derived = _cast(None, _derived)
        self._real_archetype = _cast(bool, _real_archetype)
        self._archetype = _cast(None, _archetype)
        self._subtype = _cast(bool, _subtype)
        self._instances = _cast(None, _instances)
        self._desynched_atts = _cast(None, _desynched_atts)
        self._id = _cast(None, _id)
        if Row is None:
            self.Row = []
        else:
            self.Row = Row
    def factory(*args_, **kwargs_):
        if RowsType.subclass:
            return RowsType.subclass(*args_, **kwargs_)
        else:
            return RowsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Row(self): return self.Row
    def set_Row(self, Row): self.Row = Row
    def add_Row(self, value): self.Row.append(value)
    def insert_Row(self, index, value): self.Row[index] = value
    def get__derived(self): return self._derived
    def set__derived(self, _derived): self._derived = _derived
    def get__real_archetype(self): return self._real_archetype
    def set__real_archetype(self, _real_archetype): self._real_archetype = _real_archetype
    def get__archetype(self): return self._archetype
    def set__archetype(self, _archetype): self._archetype = _archetype
    def get__subtype(self): return self._subtype
    def set__subtype(self, _subtype): self._subtype = _subtype
    def get__instances(self): return self._instances
    def set__instances(self, _instances): self._instances = _instances
    def get__desynched_atts(self): return self._desynched_atts
    def set__desynched_atts(self, _desynched_atts): self._desynched_atts = _desynched_atts
    def get__id(self): return self._id
    def set__id(self, _id): self._id = _id
    def hasContent_(self):
        if (
            self.Row
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='RowsType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='RowsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='RowsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='RowsType'):
        if self._derived is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            outfile.write(' _derived=%s' % (self.gds_format_string(quote_attrib(self._derived).encode(ExternalEncoding), input_name='_derived'), ))
        if self._real_archetype is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            outfile.write(' _real_archetype="%s"' % self.gds_format_boolean(self._real_archetype, input_name='_real_archetype'))
        if self._archetype is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            outfile.write(' _archetype=%s' % (self.gds_format_string(quote_attrib(self._archetype).encode(ExternalEncoding), input_name='_archetype'), ))
        if self._subtype is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            outfile.write(' _subtype="%s"' % self.gds_format_boolean(self._subtype, input_name='_subtype'))
        if self._instances is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            outfile.write(' _instances=%s' % (self.gds_format_string(quote_attrib(self._instances).encode(ExternalEncoding), input_name='_instances'), ))
        if self._desynched_atts is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            outfile.write(' _desynched_atts=%s' % (self.gds_format_string(quote_attrib(self._desynched_atts).encode(ExternalEncoding), input_name='_desynched_atts'), ))
        if self._id is not None and '_id' not in already_processed:
            already_processed.add('_id')
            outfile.write(' _id=%s' % (self.gds_format_string(quote_attrib(self._id).encode(ExternalEncoding), input_name='_id'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='RowsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Row_ in self.Row:
            Row_.export(outfile, level, namespace_, name_='Row', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='RowsType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self._derived is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            showIndent(outfile, level)
            outfile.write('_derived="%s",\n' % (self._derived,))
        if self._real_archetype is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            showIndent(outfile, level)
            outfile.write('_real_archetype=%s,\n' % (self._real_archetype,))
        if self._archetype is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            showIndent(outfile, level)
            outfile.write('_archetype="%s",\n' % (self._archetype,))
        if self._subtype is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            showIndent(outfile, level)
            outfile.write('_subtype=%s,\n' % (self._subtype,))
        if self._instances is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            showIndent(outfile, level)
            outfile.write('_instances="%s",\n' % (self._instances,))
        if self._desynched_atts is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            showIndent(outfile, level)
            outfile.write('_desynched_atts="%s",\n' % (self._desynched_atts,))
        if self._id is not None and '_id' not in already_processed:
            already_processed.add('_id')
            showIndent(outfile, level)
            outfile.write('_id="%s",\n' % (self._id,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('Row=[\n')
        level += 1
        for Row_ in self.Row:
            showIndent(outfile, level)
            outfile.write('model_.RowType(\n')
            Row_.exportLiteral(outfile, level, name_='RowType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('_derived', node)
        if value is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            self._derived = value
        value = find_attr_value_('_real_archetype', node)
        if value is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            if value in ('true', '1'):
                self._real_archetype = True
            elif value in ('false', '0'):
                self._real_archetype = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('_archetype', node)
        if value is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            self._archetype = value
        value = find_attr_value_('_subtype', node)
        if value is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            if value in ('true', '1'):
                self._subtype = True
            elif value in ('false', '0'):
                self._subtype = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('_instances', node)
        if value is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            self._instances = value
        value = find_attr_value_('_desynched_atts', node)
        if value is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            self._desynched_atts = value
        value = find_attr_value_('_id', node)
        if value is not None and '_id' not in already_processed:
            already_processed.add('_id')
            self._id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Row':
            obj_ = RowType.factory()
            obj_.build(child_)
            self.Row.append(obj_)
            obj_.original_tagname_ = 'Row'
# end class RowsType


class RowType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, _derived=None, _real_archetype=None, _archetype=None, _subtype=None, _instances=None, _desynched_atts=None, _id=None, Column=None):
        self.original_tagname_ = None
        self._derived = _cast(None, _derived)
        self._real_archetype = _cast(bool, _real_archetype)
        self._archetype = _cast(None, _archetype)
        self._subtype = _cast(bool, _subtype)
        self._instances = _cast(None, _instances)
        self._desynched_atts = _cast(None, _desynched_atts)
        self._id = _cast(None, _id)
        if Column is None:
            self.Column = []
        else:
            self.Column = Column
    def factory(*args_, **kwargs_):
        if RowType.subclass:
            return RowType.subclass(*args_, **kwargs_)
        else:
            return RowType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Column(self): return self.Column
    def set_Column(self, Column): self.Column = Column
    def add_Column(self, value): self.Column.append(value)
    def insert_Column(self, index, value): self.Column[index] = value
    def get__derived(self): return self._derived
    def set__derived(self, _derived): self._derived = _derived
    def get__real_archetype(self): return self._real_archetype
    def set__real_archetype(self, _real_archetype): self._real_archetype = _real_archetype
    def get__archetype(self): return self._archetype
    def set__archetype(self, _archetype): self._archetype = _archetype
    def get__subtype(self): return self._subtype
    def set__subtype(self, _subtype): self._subtype = _subtype
    def get__instances(self): return self._instances
    def set__instances(self, _instances): self._instances = _instances
    def get__desynched_atts(self): return self._desynched_atts
    def set__desynched_atts(self, _desynched_atts): self._desynched_atts = _desynched_atts
    def get__id(self): return self._id
    def set__id(self, _id): self._id = _id
    def hasContent_(self):
        if (
            self.Column
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='RowType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='RowType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='RowType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='RowType'):
        if self._derived is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            outfile.write(' _derived=%s' % (self.gds_format_string(quote_attrib(self._derived).encode(ExternalEncoding), input_name='_derived'), ))
        if self._real_archetype is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            outfile.write(' _real_archetype="%s"' % self.gds_format_boolean(self._real_archetype, input_name='_real_archetype'))
        if self._archetype is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            outfile.write(' _archetype=%s' % (self.gds_format_string(quote_attrib(self._archetype).encode(ExternalEncoding), input_name='_archetype'), ))
        if self._subtype is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            outfile.write(' _subtype="%s"' % self.gds_format_boolean(self._subtype, input_name='_subtype'))
        if self._instances is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            outfile.write(' _instances=%s' % (self.gds_format_string(quote_attrib(self._instances).encode(ExternalEncoding), input_name='_instances'), ))
        if self._desynched_atts is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            outfile.write(' _desynched_atts=%s' % (self.gds_format_string(quote_attrib(self._desynched_atts).encode(ExternalEncoding), input_name='_desynched_atts'), ))
        if self._id is not None and '_id' not in already_processed:
            already_processed.add('_id')
            outfile.write(' _id=%s' % (self.gds_format_string(quote_attrib(self._id).encode(ExternalEncoding), input_name='_id'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='RowType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Column_ in self.Column:
            Column_.export(outfile, level, namespace_, name_='Column', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='RowType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self._derived is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            showIndent(outfile, level)
            outfile.write('_derived="%s",\n' % (self._derived,))
        if self._real_archetype is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            showIndent(outfile, level)
            outfile.write('_real_archetype=%s,\n' % (self._real_archetype,))
        if self._archetype is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            showIndent(outfile, level)
            outfile.write('_archetype="%s",\n' % (self._archetype,))
        if self._subtype is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            showIndent(outfile, level)
            outfile.write('_subtype=%s,\n' % (self._subtype,))
        if self._instances is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            showIndent(outfile, level)
            outfile.write('_instances="%s",\n' % (self._instances,))
        if self._desynched_atts is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            showIndent(outfile, level)
            outfile.write('_desynched_atts="%s",\n' % (self._desynched_atts,))
        if self._id is not None and '_id' not in already_processed:
            already_processed.add('_id')
            showIndent(outfile, level)
            outfile.write('_id="%s",\n' % (self._id,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('Column=[\n')
        level += 1
        for Column_ in self.Column:
            showIndent(outfile, level)
            outfile.write('model_.ColumnType(\n')
            Column_.exportLiteral(outfile, level, name_='ColumnType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('_derived', node)
        if value is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            self._derived = value
        value = find_attr_value_('_real_archetype', node)
        if value is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            if value in ('true', '1'):
                self._real_archetype = True
            elif value in ('false', '0'):
                self._real_archetype = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('_archetype', node)
        if value is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            self._archetype = value
        value = find_attr_value_('_subtype', node)
        if value is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            if value in ('true', '1'):
                self._subtype = True
            elif value in ('false', '0'):
                self._subtype = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('_instances', node)
        if value is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            self._instances = value
        value = find_attr_value_('_desynched_atts', node)
        if value is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            self._desynched_atts = value
        value = find_attr_value_('_id', node)
        if value is not None and '_id' not in already_processed:
            already_processed.add('_id')
            self._id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Column':
            obj_ = ColumnType.factory()
            obj_.build(child_)
            self.Column.append(obj_)
            obj_.original_tagname_ = 'Column'
# end class RowType


class ColumnType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, _derived=None, _real_archetype=None, _archetype=None, Value=None, _subtype=None, _instances=None, _desynched_atts=None, _id=None):
        self.original_tagname_ = None
        self._derived = _cast(None, _derived)
        self._real_archetype = _cast(bool, _real_archetype)
        self._archetype = _cast(None, _archetype)
        self.Value = _cast(float, Value)
        self._subtype = _cast(bool, _subtype)
        self._instances = _cast(None, _instances)
        self._desynched_atts = _cast(None, _desynched_atts)
        self._id = _cast(None, _id)
    def factory(*args_, **kwargs_):
        if ColumnType.subclass:
            return ColumnType.subclass(*args_, **kwargs_)
        else:
            return ColumnType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get__derived(self): return self._derived
    def set__derived(self, _derived): self._derived = _derived
    def get__real_archetype(self): return self._real_archetype
    def set__real_archetype(self, _real_archetype): self._real_archetype = _real_archetype
    def get__archetype(self): return self._archetype
    def set__archetype(self, _archetype): self._archetype = _archetype
    def get_Value(self): return self.Value
    def set_Value(self, Value): self.Value = Value
    def get__subtype(self): return self._subtype
    def set__subtype(self, _subtype): self._subtype = _subtype
    def get__instances(self): return self._instances
    def set__instances(self, _instances): self._instances = _instances
    def get__desynched_atts(self): return self._desynched_atts
    def set__desynched_atts(self, _desynched_atts): self._desynched_atts = _desynched_atts
    def get__id(self): return self._id
    def set__id(self, _id): self._id = _id
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ColumnType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ColumnType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ColumnType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ColumnType'):
        if self._derived is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            outfile.write(' _derived=%s' % (self.gds_format_string(quote_attrib(self._derived).encode(ExternalEncoding), input_name='_derived'), ))
        if self._real_archetype is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            outfile.write(' _real_archetype="%s"' % self.gds_format_boolean(self._real_archetype, input_name='_real_archetype'))
        if self._archetype is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            outfile.write(' _archetype=%s' % (self.gds_format_string(quote_attrib(self._archetype).encode(ExternalEncoding), input_name='_archetype'), ))
        if self.Value is not None and 'Value' not in already_processed:
            already_processed.add('Value')
            outfile.write(' Value="%s"' % self.gds_format_double(self.Value, input_name='Value'))
        if self._subtype is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            outfile.write(' _subtype="%s"' % self.gds_format_boolean(self._subtype, input_name='_subtype'))
        if self._instances is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            outfile.write(' _instances=%s' % (self.gds_format_string(quote_attrib(self._instances).encode(ExternalEncoding), input_name='_instances'), ))
        if self._desynched_atts is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            outfile.write(' _desynched_atts=%s' % (self.gds_format_string(quote_attrib(self._desynched_atts).encode(ExternalEncoding), input_name='_desynched_atts'), ))
        if self._id is not None and '_id' not in already_processed:
            already_processed.add('_id')
            outfile.write(' _id=%s' % (self.gds_format_string(quote_attrib(self._id).encode(ExternalEncoding), input_name='_id'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='ColumnType', fromsubclass_=False, pretty_print=True):
        pass
    def exportLiteral(self, outfile, level, name_='ColumnType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self._derived is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            showIndent(outfile, level)
            outfile.write('_derived="%s",\n' % (self._derived,))
        if self._real_archetype is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            showIndent(outfile, level)
            outfile.write('_real_archetype=%s,\n' % (self._real_archetype,))
        if self._archetype is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            showIndent(outfile, level)
            outfile.write('_archetype="%s",\n' % (self._archetype,))
        if self.Value is not None and 'Value' not in already_processed:
            already_processed.add('Value')
            showIndent(outfile, level)
            outfile.write('Value=%e,\n' % (self.Value,))
        if self._subtype is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            showIndent(outfile, level)
            outfile.write('_subtype=%s,\n' % (self._subtype,))
        if self._instances is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            showIndent(outfile, level)
            outfile.write('_instances="%s",\n' % (self._instances,))
        if self._desynched_atts is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            showIndent(outfile, level)
            outfile.write('_desynched_atts="%s",\n' % (self._desynched_atts,))
        if self._id is not None and '_id' not in already_processed:
            already_processed.add('_id')
            showIndent(outfile, level)
            outfile.write('_id="%s",\n' % (self._id,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('_derived', node)
        if value is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            self._derived = value
        value = find_attr_value_('_real_archetype', node)
        if value is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            if value in ('true', '1'):
                self._real_archetype = True
            elif value in ('false', '0'):
                self._real_archetype = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('_archetype', node)
        if value is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            self._archetype = value
        value = find_attr_value_('Value', node)
        if value is not None and 'Value' not in already_processed:
            already_processed.add('Value')
            try:
                self.Value = float(value)
            except ValueError as exp:
                raise ValueError('Bad float/double attribute (Value): %s' % exp)
        value = find_attr_value_('_subtype', node)
        if value is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            if value in ('true', '1'):
                self._subtype = True
            elif value in ('false', '0'):
                self._subtype = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('_instances', node)
        if value is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            self._instances = value
        value = find_attr_value_('_desynched_atts', node)
        if value is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            self._desynched_atts = value
        value = find_attr_value_('_id', node)
        if value is not None and '_id' not in already_processed:
            already_processed.add('_id')
            self._id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class ColumnType


class OutlinePointsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, _derived=None, _real_archetype=None, _archetype=None, _subtype=None, _instances=None, _desynched_atts=None, _id=None, Point=None):
        self.original_tagname_ = None
        self._derived = _cast(None, _derived)
        self._real_archetype = _cast(bool, _real_archetype)
        self._archetype = _cast(None, _archetype)
        self._subtype = _cast(bool, _subtype)
        self._instances = _cast(None, _instances)
        self._desynched_atts = _cast(None, _desynched_atts)
        self._id = _cast(None, _id)
        if Point is None:
            self.Point = []
        else:
            self.Point = Point
    def factory(*args_, **kwargs_):
        if OutlinePointsType.subclass:
            return OutlinePointsType.subclass(*args_, **kwargs_)
        else:
            return OutlinePointsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Point(self): return self.Point
    def set_Point(self, Point): self.Point = Point
    def add_Point(self, value): self.Point.append(value)
    def insert_Point(self, index, value): self.Point[index] = value
    def get__derived(self): return self._derived
    def set__derived(self, _derived): self._derived = _derived
    def get__real_archetype(self): return self._real_archetype
    def set__real_archetype(self, _real_archetype): self._real_archetype = _real_archetype
    def get__archetype(self): return self._archetype
    def set__archetype(self, _archetype): self._archetype = _archetype
    def get__subtype(self): return self._subtype
    def set__subtype(self, _subtype): self._subtype = _subtype
    def get__instances(self): return self._instances
    def set__instances(self, _instances): self._instances = _instances
    def get__desynched_atts(self): return self._desynched_atts
    def set__desynched_atts(self, _desynched_atts): self._desynched_atts = _desynched_atts
    def get__id(self): return self._id
    def set__id(self, _id): self._id = _id
    def hasContent_(self):
        if (
            self.Point
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OutlinePointsType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OutlinePointsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OutlinePointsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OutlinePointsType'):
        if self._derived is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            outfile.write(' _derived=%s' % (self.gds_format_string(quote_attrib(self._derived).encode(ExternalEncoding), input_name='_derived'), ))
        if self._real_archetype is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            outfile.write(' _real_archetype="%s"' % self.gds_format_boolean(self._real_archetype, input_name='_real_archetype'))
        if self._archetype is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            outfile.write(' _archetype=%s' % (self.gds_format_string(quote_attrib(self._archetype).encode(ExternalEncoding), input_name='_archetype'), ))
        if self._subtype is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            outfile.write(' _subtype="%s"' % self.gds_format_boolean(self._subtype, input_name='_subtype'))
        if self._instances is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            outfile.write(' _instances=%s' % (self.gds_format_string(quote_attrib(self._instances).encode(ExternalEncoding), input_name='_instances'), ))
        if self._desynched_atts is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            outfile.write(' _desynched_atts=%s' % (self.gds_format_string(quote_attrib(self._desynched_atts).encode(ExternalEncoding), input_name='_desynched_atts'), ))
        if self._id is not None and '_id' not in already_processed:
            already_processed.add('_id')
            outfile.write(' _id=%s' % (self.gds_format_string(quote_attrib(self._id).encode(ExternalEncoding), input_name='_id'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='OutlinePointsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Point_ in self.Point:
            Point_.export(outfile, level, namespace_, name_='Point', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='OutlinePointsType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self._derived is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            showIndent(outfile, level)
            outfile.write('_derived="%s",\n' % (self._derived,))
        if self._real_archetype is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            showIndent(outfile, level)
            outfile.write('_real_archetype=%s,\n' % (self._real_archetype,))
        if self._archetype is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            showIndent(outfile, level)
            outfile.write('_archetype="%s",\n' % (self._archetype,))
        if self._subtype is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            showIndent(outfile, level)
            outfile.write('_subtype=%s,\n' % (self._subtype,))
        if self._instances is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            showIndent(outfile, level)
            outfile.write('_instances="%s",\n' % (self._instances,))
        if self._desynched_atts is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            showIndent(outfile, level)
            outfile.write('_desynched_atts="%s",\n' % (self._desynched_atts,))
        if self._id is not None and '_id' not in already_processed:
            already_processed.add('_id')
            showIndent(outfile, level)
            outfile.write('_id="%s",\n' % (self._id,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('Point=[\n')
        level += 1
        for Point_ in self.Point:
            showIndent(outfile, level)
            outfile.write('model_.PointType(\n')
            Point_.exportLiteral(outfile, level, name_='PointType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('_derived', node)
        if value is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            self._derived = value
        value = find_attr_value_('_real_archetype', node)
        if value is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            if value in ('true', '1'):
                self._real_archetype = True
            elif value in ('false', '0'):
                self._real_archetype = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('_archetype', node)
        if value is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            self._archetype = value
        value = find_attr_value_('_subtype', node)
        if value is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            if value in ('true', '1'):
                self._subtype = True
            elif value in ('false', '0'):
                self._subtype = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('_instances', node)
        if value is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            self._instances = value
        value = find_attr_value_('_desynched_atts', node)
        if value is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            self._desynched_atts = value
        value = find_attr_value_('_id', node)
        if value is not None and '_id' not in already_processed:
            already_processed.add('_id')
            self._id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Point':
            obj_ = PointType.factory()
            obj_.build(child_)
            self.Point.append(obj_)
            obj_.original_tagname_ = 'Point'
# end class OutlinePointsType


class ScalarType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, _desynched_atts=None, _derived=None, _real_archetype=None, Name=None, Value=None, _subtype=None, _instances=None, _archetype=None, _id=None, Unit=None):
        self.original_tagname_ = None
        self._desynched_atts = _cast(None, _desynched_atts)
        self._derived = _cast(None, _derived)
        self._real_archetype = _cast(bool, _real_archetype)
        self.Name = _cast(None, Name)
        self.Value = _cast(float, Value)
        self._subtype = _cast(bool, _subtype)
        self._instances = _cast(None, _instances)
        self._archetype = _cast(None, _archetype)
        self._id = _cast(None, _id)
        self.Unit = _cast(None, Unit)
    def factory(*args_, **kwargs_):
        if ScalarType.subclass:
            return ScalarType.subclass(*args_, **kwargs_)
        else:
            return ScalarType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get__desynched_atts(self): return self._desynched_atts
    def set__desynched_atts(self, _desynched_atts): self._desynched_atts = _desynched_atts
    def get__derived(self): return self._derived
    def set__derived(self, _derived): self._derived = _derived
    def get__real_archetype(self): return self._real_archetype
    def set__real_archetype(self, _real_archetype): self._real_archetype = _real_archetype
    def get_Name(self): return self.Name
    def set_Name(self, Name): self.Name = Name
    def get_Value(self): return self.Value
    def set_Value(self, Value): self.Value = Value
    def get__subtype(self): return self._subtype
    def set__subtype(self, _subtype): self._subtype = _subtype
    def get__instances(self): return self._instances
    def set__instances(self, _instances): self._instances = _instances
    def get__archetype(self): return self._archetype
    def set__archetype(self, _archetype): self._archetype = _archetype
    def get__id(self): return self._id
    def set__id(self, _id): self._id = _id
    def get_Unit(self): return self.Unit
    def set_Unit(self, Unit): self.Unit = Unit
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ScalarType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ScalarType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ScalarType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ScalarType'):
        if self._desynched_atts is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            outfile.write(' _desynched_atts=%s' % (self.gds_format_string(quote_attrib(self._desynched_atts).encode(ExternalEncoding), input_name='_desynched_atts'), ))
        if self._derived is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            outfile.write(' _derived=%s' % (self.gds_format_string(quote_attrib(self._derived).encode(ExternalEncoding), input_name='_derived'), ))
        if self._real_archetype is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            outfile.write(' _real_archetype="%s"' % self.gds_format_boolean(self._real_archetype, input_name='_real_archetype'))
        if self.Name is not None and 'Name' not in already_processed:
            already_processed.add('Name')
            outfile.write(' Name=%s' % (self.gds_format_string(quote_attrib(self.Name).encode(ExternalEncoding), input_name='Name'), ))
        if self.Value is not None and 'Value' not in already_processed:
            already_processed.add('Value')
            outfile.write(' Value="%s"' % self.gds_format_double(self.Value, input_name='Value'))
        if self._subtype is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            outfile.write(' _subtype="%s"' % self.gds_format_boolean(self._subtype, input_name='_subtype'))
        if self._instances is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            outfile.write(' _instances=%s' % (self.gds_format_string(quote_attrib(self._instances).encode(ExternalEncoding), input_name='_instances'), ))
        if self._archetype is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            outfile.write(' _archetype=%s' % (self.gds_format_string(quote_attrib(self._archetype).encode(ExternalEncoding), input_name='_archetype'), ))
        if self._id is not None and '_id' not in already_processed:
            already_processed.add('_id')
            outfile.write(' _id=%s' % (self.gds_format_string(quote_attrib(self._id).encode(ExternalEncoding), input_name='_id'), ))
        if self.Unit is not None and 'Unit' not in already_processed:
            already_processed.add('Unit')
            outfile.write(' Unit=%s' % (self.gds_format_string(quote_attrib(self.Unit).encode(ExternalEncoding), input_name='Unit'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='ScalarType', fromsubclass_=False, pretty_print=True):
        pass
    def exportLiteral(self, outfile, level, name_='ScalarType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self._desynched_atts is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            showIndent(outfile, level)
            outfile.write('_desynched_atts="%s",\n' % (self._desynched_atts,))
        if self._derived is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            showIndent(outfile, level)
            outfile.write('_derived="%s",\n' % (self._derived,))
        if self._real_archetype is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            showIndent(outfile, level)
            outfile.write('_real_archetype=%s,\n' % (self._real_archetype,))
        if self.Name is not None and 'Name' not in already_processed:
            already_processed.add('Name')
            showIndent(outfile, level)
            outfile.write('Name="%s",\n' % (self.Name,))
        if self.Value is not None and 'Value' not in already_processed:
            already_processed.add('Value')
            showIndent(outfile, level)
            outfile.write('Value=%e,\n' % (self.Value,))
        if self._subtype is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            showIndent(outfile, level)
            outfile.write('_subtype=%s,\n' % (self._subtype,))
        if self._instances is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            showIndent(outfile, level)
            outfile.write('_instances="%s",\n' % (self._instances,))
        if self._archetype is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            showIndent(outfile, level)
            outfile.write('_archetype="%s",\n' % (self._archetype,))
        if self._id is not None and '_id' not in already_processed:
            already_processed.add('_id')
            showIndent(outfile, level)
            outfile.write('_id="%s",\n' % (self._id,))
        if self.Unit is not None and 'Unit' not in already_processed:
            already_processed.add('Unit')
            showIndent(outfile, level)
            outfile.write('Unit="%s",\n' % (self.Unit,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('_desynched_atts', node)
        if value is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            self._desynched_atts = value
        value = find_attr_value_('_derived', node)
        if value is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            self._derived = value
        value = find_attr_value_('_real_archetype', node)
        if value is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            if value in ('true', '1'):
                self._real_archetype = True
            elif value in ('false', '0'):
                self._real_archetype = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('Name', node)
        if value is not None and 'Name' not in already_processed:
            already_processed.add('Name')
            self.Name = value
        value = find_attr_value_('Value', node)
        if value is not None and 'Value' not in already_processed:
            already_processed.add('Value')
            try:
                self.Value = float(value)
            except ValueError as exp:
                raise ValueError('Bad float/double attribute (Value): %s' % exp)
        value = find_attr_value_('_subtype', node)
        if value is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            if value in ('true', '1'):
                self._subtype = True
            elif value in ('false', '0'):
                self._subtype = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('_instances', node)
        if value is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            self._instances = value
        value = find_attr_value_('_archetype', node)
        if value is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            self._archetype = value
        value = find_attr_value_('_id', node)
        if value is not None and '_id' not in already_processed:
            already_processed.add('_id')
            self._id = value
        value = find_attr_value_('Unit', node)
        if value is not None and 'Unit' not in already_processed:
            already_processed.add('Unit')
            self.Unit = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class ScalarType


class MaterialType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, _derived=None, _real_archetype=None, _archetype=None, _subtype=None, _instances=None, _desynched_atts=None, _id=None, Type=None):
        self.original_tagname_ = None
        self._derived = _cast(None, _derived)
        self._real_archetype = _cast(bool, _real_archetype)
        self._archetype = _cast(None, _archetype)
        self._subtype = _cast(bool, _subtype)
        self._instances = _cast(None, _instances)
        self._desynched_atts = _cast(None, _desynched_atts)
        self._id = _cast(None, _id)
        self.Type = _cast(None, Type)
    def factory(*args_, **kwargs_):
        if MaterialType.subclass:
            return MaterialType.subclass(*args_, **kwargs_)
        else:
            return MaterialType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get__derived(self): return self._derived
    def set__derived(self, _derived): self._derived = _derived
    def get__real_archetype(self): return self._real_archetype
    def set__real_archetype(self, _real_archetype): self._real_archetype = _real_archetype
    def get__archetype(self): return self._archetype
    def set__archetype(self, _archetype): self._archetype = _archetype
    def get__subtype(self): return self._subtype
    def set__subtype(self, _subtype): self._subtype = _subtype
    def get__instances(self): return self._instances
    def set__instances(self, _instances): self._instances = _instances
    def get__desynched_atts(self): return self._desynched_atts
    def set__desynched_atts(self, _desynched_atts): self._desynched_atts = _desynched_atts
    def get__id(self): return self._id
    def set__id(self, _id): self._id = _id
    def get_Type(self): return self.Type
    def set_Type(self, Type): self.Type = Type
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='MaterialType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='MaterialType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='MaterialType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='MaterialType'):
        if self._derived is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            outfile.write(' _derived=%s' % (self.gds_format_string(quote_attrib(self._derived).encode(ExternalEncoding), input_name='_derived'), ))
        if self._real_archetype is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            outfile.write(' _real_archetype="%s"' % self.gds_format_boolean(self._real_archetype, input_name='_real_archetype'))
        if self._archetype is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            outfile.write(' _archetype=%s' % (self.gds_format_string(quote_attrib(self._archetype).encode(ExternalEncoding), input_name='_archetype'), ))
        if self._subtype is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            outfile.write(' _subtype="%s"' % self.gds_format_boolean(self._subtype, input_name='_subtype'))
        if self._instances is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            outfile.write(' _instances=%s' % (self.gds_format_string(quote_attrib(self._instances).encode(ExternalEncoding), input_name='_instances'), ))
        if self._desynched_atts is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            outfile.write(' _desynched_atts=%s' % (self.gds_format_string(quote_attrib(self._desynched_atts).encode(ExternalEncoding), input_name='_desynched_atts'), ))
        if self._id is not None and '_id' not in already_processed:
            already_processed.add('_id')
            outfile.write(' _id=%s' % (self.gds_format_string(quote_attrib(self._id).encode(ExternalEncoding), input_name='_id'), ))
        if self.Type is not None and 'Type' not in already_processed:
            already_processed.add('Type')
            outfile.write(' Type=%s' % (self.gds_format_string(quote_attrib(self.Type).encode(ExternalEncoding), input_name='Type'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='MaterialType', fromsubclass_=False, pretty_print=True):
        pass
    def exportLiteral(self, outfile, level, name_='MaterialType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self._derived is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            showIndent(outfile, level)
            outfile.write('_derived="%s",\n' % (self._derived,))
        if self._real_archetype is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            showIndent(outfile, level)
            outfile.write('_real_archetype=%s,\n' % (self._real_archetype,))
        if self._archetype is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            showIndent(outfile, level)
            outfile.write('_archetype="%s",\n' % (self._archetype,))
        if self._subtype is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            showIndent(outfile, level)
            outfile.write('_subtype=%s,\n' % (self._subtype,))
        if self._instances is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            showIndent(outfile, level)
            outfile.write('_instances="%s",\n' % (self._instances,))
        if self._desynched_atts is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            showIndent(outfile, level)
            outfile.write('_desynched_atts="%s",\n' % (self._desynched_atts,))
        if self._id is not None and '_id' not in already_processed:
            already_processed.add('_id')
            showIndent(outfile, level)
            outfile.write('_id="%s",\n' % (self._id,))
        if self.Type is not None and 'Type' not in already_processed:
            already_processed.add('Type')
            showIndent(outfile, level)
            outfile.write('Type="%s",\n' % (self.Type,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('_derived', node)
        if value is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            self._derived = value
        value = find_attr_value_('_real_archetype', node)
        if value is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            if value in ('true', '1'):
                self._real_archetype = True
            elif value in ('false', '0'):
                self._real_archetype = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('_archetype', node)
        if value is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            self._archetype = value
        value = find_attr_value_('_subtype', node)
        if value is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            if value in ('true', '1'):
                self._subtype = True
            elif value in ('false', '0'):
                self._subtype = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('_instances', node)
        if value is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            self._instances = value
        value = find_attr_value_('_desynched_atts', node)
        if value is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            self._desynched_atts = value
        value = find_attr_value_('_id', node)
        if value is not None and '_id' not in already_processed:
            already_processed.add('_id')
            self._id = value
        value = find_attr_value_('Type', node)
        if value is not None and 'Type' not in already_processed:
            already_processed.add('Type')
            self.Type = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class MaterialType


class UnitsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Distance=None, _derived=None, Force=None, Temperature=None, _desynched_atts=None, _subtype=None, _instances=None, Mass=None, _archetype=None, Time=None, _real_archetype=None, _id=None):
        self.original_tagname_ = None
        self.Distance = _cast(None, Distance)
        self._derived = _cast(None, _derived)
        self.Force = _cast(None, Force)
        self.Temperature = _cast(None, Temperature)
        self._desynched_atts = _cast(None, _desynched_atts)
        self._subtype = _cast(bool, _subtype)
        self._instances = _cast(None, _instances)
        self.Mass = _cast(None, Mass)
        self._archetype = _cast(None, _archetype)
        self.Time = _cast(None, Time)
        self._real_archetype = _cast(bool, _real_archetype)
        self._id = _cast(None, _id)
    def factory(*args_, **kwargs_):
        if UnitsType.subclass:
            return UnitsType.subclass(*args_, **kwargs_)
        else:
            return UnitsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Distance(self): return self.Distance
    def set_Distance(self, Distance): self.Distance = Distance
    def get__derived(self): return self._derived
    def set__derived(self, _derived): self._derived = _derived
    def get_Force(self): return self.Force
    def set_Force(self, Force): self.Force = Force
    def get_Temperature(self): return self.Temperature
    def set_Temperature(self, Temperature): self.Temperature = Temperature
    def get__desynched_atts(self): return self._desynched_atts
    def set__desynched_atts(self, _desynched_atts): self._desynched_atts = _desynched_atts
    def get__subtype(self): return self._subtype
    def set__subtype(self, _subtype): self._subtype = _subtype
    def get__instances(self): return self._instances
    def set__instances(self, _instances): self._instances = _instances
    def get_Mass(self): return self.Mass
    def set_Mass(self, Mass): self.Mass = Mass
    def get__archetype(self): return self._archetype
    def set__archetype(self, _archetype): self._archetype = _archetype
    def get_Time(self): return self.Time
    def set_Time(self, Time): self.Time = Time
    def get__real_archetype(self): return self._real_archetype
    def set__real_archetype(self, _real_archetype): self._real_archetype = _real_archetype
    def get__id(self): return self._id
    def set__id(self, _id): self._id = _id
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='UnitsType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='UnitsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='UnitsType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='UnitsType'):
        if self.Distance is not None and 'Distance' not in already_processed:
            already_processed.add('Distance')
            outfile.write(' Distance=%s' % (self.gds_format_string(quote_attrib(self.Distance).encode(ExternalEncoding), input_name='Distance'), ))
        if self._derived is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            outfile.write(' _derived=%s' % (self.gds_format_string(quote_attrib(self._derived).encode(ExternalEncoding), input_name='_derived'), ))
        if self.Force is not None and 'Force' not in already_processed:
            already_processed.add('Force')
            outfile.write(' Force=%s' % (self.gds_format_string(quote_attrib(self.Force).encode(ExternalEncoding), input_name='Force'), ))
        if self.Temperature is not None and 'Temperature' not in already_processed:
            already_processed.add('Temperature')
            outfile.write(' Temperature=%s' % (self.gds_format_string(quote_attrib(self.Temperature).encode(ExternalEncoding), input_name='Temperature'), ))
        if self._desynched_atts is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            outfile.write(' _desynched_atts=%s' % (self.gds_format_string(quote_attrib(self._desynched_atts).encode(ExternalEncoding), input_name='_desynched_atts'), ))
        if self._subtype is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            outfile.write(' _subtype="%s"' % self.gds_format_boolean(self._subtype, input_name='_subtype'))
        if self._instances is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            outfile.write(' _instances=%s' % (self.gds_format_string(quote_attrib(self._instances).encode(ExternalEncoding), input_name='_instances'), ))
        if self.Mass is not None and 'Mass' not in already_processed:
            already_processed.add('Mass')
            outfile.write(' Mass=%s' % (self.gds_format_string(quote_attrib(self.Mass).encode(ExternalEncoding), input_name='Mass'), ))
        if self._archetype is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            outfile.write(' _archetype=%s' % (self.gds_format_string(quote_attrib(self._archetype).encode(ExternalEncoding), input_name='_archetype'), ))
        if self.Time is not None and 'Time' not in already_processed:
            already_processed.add('Time')
            outfile.write(' Time=%s' % (self.gds_format_string(quote_attrib(self.Time).encode(ExternalEncoding), input_name='Time'), ))
        if self._real_archetype is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            outfile.write(' _real_archetype="%s"' % self.gds_format_boolean(self._real_archetype, input_name='_real_archetype'))
        if self._id is not None and '_id' not in already_processed:
            already_processed.add('_id')
            outfile.write(' _id=%s' % (self.gds_format_string(quote_attrib(self._id).encode(ExternalEncoding), input_name='_id'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='UnitsType', fromsubclass_=False, pretty_print=True):
        pass
    def exportLiteral(self, outfile, level, name_='UnitsType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.Distance is not None and 'Distance' not in already_processed:
            already_processed.add('Distance')
            showIndent(outfile, level)
            outfile.write('Distance="%s",\n' % (self.Distance,))
        if self._derived is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            showIndent(outfile, level)
            outfile.write('_derived="%s",\n' % (self._derived,))
        if self.Force is not None and 'Force' not in already_processed:
            already_processed.add('Force')
            showIndent(outfile, level)
            outfile.write('Force="%s",\n' % (self.Force,))
        if self.Temperature is not None and 'Temperature' not in already_processed:
            already_processed.add('Temperature')
            showIndent(outfile, level)
            outfile.write('Temperature="%s",\n' % (self.Temperature,))
        if self._desynched_atts is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            showIndent(outfile, level)
            outfile.write('_desynched_atts="%s",\n' % (self._desynched_atts,))
        if self._subtype is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            showIndent(outfile, level)
            outfile.write('_subtype=%s,\n' % (self._subtype,))
        if self._instances is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            showIndent(outfile, level)
            outfile.write('_instances="%s",\n' % (self._instances,))
        if self.Mass is not None and 'Mass' not in already_processed:
            already_processed.add('Mass')
            showIndent(outfile, level)
            outfile.write('Mass="%s",\n' % (self.Mass,))
        if self._archetype is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            showIndent(outfile, level)
            outfile.write('_archetype="%s",\n' % (self._archetype,))
        if self.Time is not None and 'Time' not in already_processed:
            already_processed.add('Time')
            showIndent(outfile, level)
            outfile.write('Time="%s",\n' % (self.Time,))
        if self._real_archetype is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            showIndent(outfile, level)
            outfile.write('_real_archetype=%s,\n' % (self._real_archetype,))
        if self._id is not None and '_id' not in already_processed:
            already_processed.add('_id')
            showIndent(outfile, level)
            outfile.write('_id="%s",\n' % (self._id,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Distance', node)
        if value is not None and 'Distance' not in already_processed:
            already_processed.add('Distance')
            self.Distance = value
        value = find_attr_value_('_derived', node)
        if value is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            self._derived = value
        value = find_attr_value_('Force', node)
        if value is not None and 'Force' not in already_processed:
            already_processed.add('Force')
            self.Force = value
        value = find_attr_value_('Temperature', node)
        if value is not None and 'Temperature' not in already_processed:
            already_processed.add('Temperature')
            self.Temperature = value
        value = find_attr_value_('_desynched_atts', node)
        if value is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            self._desynched_atts = value
        value = find_attr_value_('_subtype', node)
        if value is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            if value in ('true', '1'):
                self._subtype = True
            elif value in ('false', '0'):
                self._subtype = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('_instances', node)
        if value is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            self._instances = value
        value = find_attr_value_('Mass', node)
        if value is not None and 'Mass' not in already_processed:
            already_processed.add('Mass')
            self.Mass = value
        value = find_attr_value_('_archetype', node)
        if value is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            self._archetype = value
        value = find_attr_value_('Time', node)
        if value is not None and 'Time' not in already_processed:
            already_processed.add('Time')
            self.Time = value
        value = find_attr_value_('_real_archetype', node)
        if value is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            if value in ('true', '1'):
                self._real_archetype = True
            elif value in ('false', '0'):
                self._real_archetype = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('_id', node)
        if value is not None and '_id' not in already_processed:
            already_processed.add('_id')
            self._id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class UnitsType


class MetricComponentType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, _derived=None, _real_archetype=None, Name=None, MetricID=None, ComponentDefinitionSource=None, CoordinateSystem=None, _desynched_atts=None, _subtype=None, _instances=None, _archetype=None, SpecialInstruction=None, _id=None, Type=None, BoundingBox=None, CG=None, Children=None, InertiaTensor=None, Material=None, PrincipleMomentsOfInertia=None, Scalars=None, Units=None):
        self.original_tagname_ = None
        self._derived = _cast(None, _derived)
        self._real_archetype = _cast(bool, _real_archetype)
        self.Name = _cast(None, Name)
        self.MetricID = _cast(int, MetricID)
        self.ComponentDefinitionSource = _cast(None, ComponentDefinitionSource)
        self.CoordinateSystem = _cast(None, CoordinateSystem)
        self._desynched_atts = _cast(None, _desynched_atts)
        self._subtype = _cast(bool, _subtype)
        self._instances = _cast(None, _instances)
        self._archetype = _cast(None, _archetype)
        self.SpecialInstruction = _cast(None, SpecialInstruction)
        self._id = _cast(None, _id)
        self.Type = _cast(None, Type)
        self.BoundingBox = BoundingBox
        self.CG = CG
        self.Children = Children
        if InertiaTensor is None:
            self.InertiaTensor = []
        else:
            self.InertiaTensor = InertiaTensor
        self.Material = Material
        self.PrincipleMomentsOfInertia = PrincipleMomentsOfInertia
        self.Scalars = Scalars
        self.Units = Units
    def factory(*args_, **kwargs_):
        if MetricComponentType.subclass:
            return MetricComponentType.subclass(*args_, **kwargs_)
        else:
            return MetricComponentType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_BoundingBox(self): return self.BoundingBox
    def set_BoundingBox(self, BoundingBox): self.BoundingBox = BoundingBox
    def get_CG(self): return self.CG
    def set_CG(self, CG): self.CG = CG
    def get_Children(self): return self.Children
    def set_Children(self, Children): self.Children = Children
    def get_InertiaTensor(self): return self.InertiaTensor
    def set_InertiaTensor(self, InertiaTensor): self.InertiaTensor = InertiaTensor
    def add_InertiaTensor(self, value): self.InertiaTensor.append(value)
    def insert_InertiaTensor(self, index, value): self.InertiaTensor[index] = value
    def get_Material(self): return self.Material
    def set_Material(self, Material): self.Material = Material
    def get_PrincipleMomentsOfInertia(self): return self.PrincipleMomentsOfInertia
    def set_PrincipleMomentsOfInertia(self, PrincipleMomentsOfInertia): self.PrincipleMomentsOfInertia = PrincipleMomentsOfInertia
    def get_Scalars(self): return self.Scalars
    def set_Scalars(self, Scalars): self.Scalars = Scalars
    def get_Units(self): return self.Units
    def set_Units(self, Units): self.Units = Units
    def get__derived(self): return self._derived
    def set__derived(self, _derived): self._derived = _derived
    def get__real_archetype(self): return self._real_archetype
    def set__real_archetype(self, _real_archetype): self._real_archetype = _real_archetype
    def get_Name(self): return self.Name
    def set_Name(self, Name): self.Name = Name
    def get_MetricID(self): return self.MetricID
    def set_MetricID(self, MetricID): self.MetricID = MetricID
    def get_ComponentDefinitionSource(self): return self.ComponentDefinitionSource
    def set_ComponentDefinitionSource(self, ComponentDefinitionSource): self.ComponentDefinitionSource = ComponentDefinitionSource
    def get_CoordinateSystem(self): return self.CoordinateSystem
    def set_CoordinateSystem(self, CoordinateSystem): self.CoordinateSystem = CoordinateSystem
    def get__desynched_atts(self): return self._desynched_atts
    def set__desynched_atts(self, _desynched_atts): self._desynched_atts = _desynched_atts
    def get__subtype(self): return self._subtype
    def set__subtype(self, _subtype): self._subtype = _subtype
    def get__instances(self): return self._instances
    def set__instances(self, _instances): self._instances = _instances
    def get__archetype(self): return self._archetype
    def set__archetype(self, _archetype): self._archetype = _archetype
    def get_SpecialInstruction(self): return self.SpecialInstruction
    def set_SpecialInstruction(self, SpecialInstruction): self.SpecialInstruction = SpecialInstruction
    def get__id(self): return self._id
    def set__id(self, _id): self._id = _id
    def get_Type(self): return self.Type
    def set_Type(self, Type): self.Type = Type
    def hasContent_(self):
        if (
            self.BoundingBox is not None or
            self.CG is not None or
            self.Children is not None or
            self.InertiaTensor or
            self.Material is not None or
            self.PrincipleMomentsOfInertia is not None or
            self.Scalars is not None or
            self.Units is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='MetricComponentType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='MetricComponentType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='MetricComponentType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='MetricComponentType'):
        if self._derived is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            outfile.write(' _derived=%s' % (self.gds_format_string(quote_attrib(self._derived).encode(ExternalEncoding), input_name='_derived'), ))
        if self._real_archetype is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            outfile.write(' _real_archetype="%s"' % self.gds_format_boolean(self._real_archetype, input_name='_real_archetype'))
        if self.Name is not None and 'Name' not in already_processed:
            already_processed.add('Name')
            outfile.write(' Name=%s' % (self.gds_format_string(quote_attrib(self.Name).encode(ExternalEncoding), input_name='Name'), ))
        if self.MetricID is not None and 'MetricID' not in already_processed:
            already_processed.add('MetricID')
            outfile.write(' MetricID="%s"' % self.gds_format_integer(self.MetricID, input_name='MetricID'))
        if self.ComponentDefinitionSource is not None and 'ComponentDefinitionSource' not in already_processed:
            already_processed.add('ComponentDefinitionSource')
            outfile.write(' ComponentDefinitionSource=%s' % (self.gds_format_string(quote_attrib(self.ComponentDefinitionSource).encode(ExternalEncoding), input_name='ComponentDefinitionSource'), ))
        if self.CoordinateSystem is not None and 'CoordinateSystem' not in already_processed:
            already_processed.add('CoordinateSystem')
            outfile.write(' CoordinateSystem=%s' % (self.gds_format_string(quote_attrib(self.CoordinateSystem).encode(ExternalEncoding), input_name='CoordinateSystem'), ))
        if self._desynched_atts is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            outfile.write(' _desynched_atts=%s' % (self.gds_format_string(quote_attrib(self._desynched_atts).encode(ExternalEncoding), input_name='_desynched_atts'), ))
        if self._subtype is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            outfile.write(' _subtype="%s"' % self.gds_format_boolean(self._subtype, input_name='_subtype'))
        if self._instances is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            outfile.write(' _instances=%s' % (self.gds_format_string(quote_attrib(self._instances).encode(ExternalEncoding), input_name='_instances'), ))
        if self._archetype is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            outfile.write(' _archetype=%s' % (self.gds_format_string(quote_attrib(self._archetype).encode(ExternalEncoding), input_name='_archetype'), ))
        if self.SpecialInstruction is not None and 'SpecialInstruction' not in already_processed:
            already_processed.add('SpecialInstruction')
            outfile.write(' SpecialInstruction=%s' % (self.gds_format_string(quote_attrib(self.SpecialInstruction).encode(ExternalEncoding), input_name='SpecialInstruction'), ))
        if self._id is not None and '_id' not in already_processed:
            already_processed.add('_id')
            outfile.write(' _id=%s' % (self.gds_format_string(quote_attrib(self._id).encode(ExternalEncoding), input_name='_id'), ))
        if self.Type is not None and 'Type' not in already_processed:
            already_processed.add('Type')
            outfile.write(' Type=%s' % (self.gds_format_string(quote_attrib(self.Type).encode(ExternalEncoding), input_name='Type'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='MetricComponentType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.BoundingBox is not None:
            self.BoundingBox.export(outfile, level, namespace_, name_='BoundingBox', pretty_print=pretty_print)
        if self.CG is not None:
            self.CG.export(outfile, level, namespace_, name_='CG', pretty_print=pretty_print)
        if self.Children is not None:
            self.Children.export(outfile, level, namespace_, name_='Children', pretty_print=pretty_print)
        for InertiaTensor_ in self.InertiaTensor:
            InertiaTensor_.export(outfile, level, namespace_, name_='InertiaTensor', pretty_print=pretty_print)
        if self.Material is not None:
            self.Material.export(outfile, level, namespace_, name_='Material', pretty_print=pretty_print)
        if self.PrincipleMomentsOfInertia is not None:
            self.PrincipleMomentsOfInertia.export(outfile, level, namespace_, name_='PrincipleMomentsOfInertia', pretty_print=pretty_print)
        if self.Scalars is not None:
            self.Scalars.export(outfile, level, namespace_, name_='Scalars', pretty_print=pretty_print)
        if self.Units is not None:
            self.Units.export(outfile, level, namespace_, name_='Units', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='MetricComponentType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self._derived is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            showIndent(outfile, level)
            outfile.write('_derived="%s",\n' % (self._derived,))
        if self._real_archetype is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            showIndent(outfile, level)
            outfile.write('_real_archetype=%s,\n' % (self._real_archetype,))
        if self.Name is not None and 'Name' not in already_processed:
            already_processed.add('Name')
            showIndent(outfile, level)
            outfile.write('Name="%s",\n' % (self.Name,))
        if self.MetricID is not None and 'MetricID' not in already_processed:
            already_processed.add('MetricID')
            showIndent(outfile, level)
            outfile.write('MetricID=%d,\n' % (self.MetricID,))
        if self.ComponentDefinitionSource is not None and 'ComponentDefinitionSource' not in already_processed:
            already_processed.add('ComponentDefinitionSource')
            showIndent(outfile, level)
            outfile.write('ComponentDefinitionSource="%s",\n' % (self.ComponentDefinitionSource,))
        if self.CoordinateSystem is not None and 'CoordinateSystem' not in already_processed:
            already_processed.add('CoordinateSystem')
            showIndent(outfile, level)
            outfile.write('CoordinateSystem="%s",\n' % (self.CoordinateSystem,))
        if self._desynched_atts is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            showIndent(outfile, level)
            outfile.write('_desynched_atts="%s",\n' % (self._desynched_atts,))
        if self._subtype is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            showIndent(outfile, level)
            outfile.write('_subtype=%s,\n' % (self._subtype,))
        if self._instances is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            showIndent(outfile, level)
            outfile.write('_instances="%s",\n' % (self._instances,))
        if self._archetype is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            showIndent(outfile, level)
            outfile.write('_archetype="%s",\n' % (self._archetype,))
        if self.SpecialInstruction is not None and 'SpecialInstruction' not in already_processed:
            already_processed.add('SpecialInstruction')
            showIndent(outfile, level)
            outfile.write('SpecialInstruction="%s",\n' % (self.SpecialInstruction,))
        if self._id is not None and '_id' not in already_processed:
            already_processed.add('_id')
            showIndent(outfile, level)
            outfile.write('_id="%s",\n' % (self._id,))
        if self.Type is not None and 'Type' not in already_processed:
            already_processed.add('Type')
            showIndent(outfile, level)
            outfile.write('Type="%s",\n' % (self.Type,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.BoundingBox is not None:
            showIndent(outfile, level)
            outfile.write('BoundingBox=model_.BoundingBoxType(\n')
            self.BoundingBox.exportLiteral(outfile, level, name_='BoundingBox')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.CG is not None:
            showIndent(outfile, level)
            outfile.write('CG=model_.CGType(\n')
            self.CG.exportLiteral(outfile, level, name_='CG')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Children is not None:
            showIndent(outfile, level)
            outfile.write('Children=model_.ChildrenType(\n')
            self.Children.exportLiteral(outfile, level, name_='Children')
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('InertiaTensor=[\n')
        level += 1
        for InertiaTensor_ in self.InertiaTensor:
            showIndent(outfile, level)
            outfile.write('model_.InertiaTensorType(\n')
            InertiaTensor_.exportLiteral(outfile, level, name_='InertiaTensorType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.Material is not None:
            showIndent(outfile, level)
            outfile.write('Material=model_.MaterialType(\n')
            self.Material.exportLiteral(outfile, level, name_='Material')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.PrincipleMomentsOfInertia is not None:
            showIndent(outfile, level)
            outfile.write('PrincipleMomentsOfInertia=model_.PrincipleMomentsOfInertiaType(\n')
            self.PrincipleMomentsOfInertia.exportLiteral(outfile, level, name_='PrincipleMomentsOfInertia')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Scalars is not None:
            showIndent(outfile, level)
            outfile.write('Scalars=model_.ScalarsType(\n')
            self.Scalars.exportLiteral(outfile, level, name_='Scalars')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Units is not None:
            showIndent(outfile, level)
            outfile.write('Units=model_.UnitsType(\n')
            self.Units.exportLiteral(outfile, level, name_='Units')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('_derived', node)
        if value is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            self._derived = value
        value = find_attr_value_('_real_archetype', node)
        if value is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            if value in ('true', '1'):
                self._real_archetype = True
            elif value in ('false', '0'):
                self._real_archetype = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('Name', node)
        if value is not None and 'Name' not in already_processed:
            already_processed.add('Name')
            self.Name = value
        value = find_attr_value_('MetricID', node)
        if value is not None and 'MetricID' not in already_processed:
            already_processed.add('MetricID')
            try:
                self.MetricID = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('ComponentDefinitionSource', node)
        if value is not None and 'ComponentDefinitionSource' not in already_processed:
            already_processed.add('ComponentDefinitionSource')
            self.ComponentDefinitionSource = value
        value = find_attr_value_('CoordinateSystem', node)
        if value is not None and 'CoordinateSystem' not in already_processed:
            already_processed.add('CoordinateSystem')
            self.CoordinateSystem = value
        value = find_attr_value_('_desynched_atts', node)
        if value is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            self._desynched_atts = value
        value = find_attr_value_('_subtype', node)
        if value is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            if value in ('true', '1'):
                self._subtype = True
            elif value in ('false', '0'):
                self._subtype = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('_instances', node)
        if value is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            self._instances = value
        value = find_attr_value_('_archetype', node)
        if value is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            self._archetype = value
        value = find_attr_value_('SpecialInstruction', node)
        if value is not None and 'SpecialInstruction' not in already_processed:
            already_processed.add('SpecialInstruction')
            self.SpecialInstruction = value
        value = find_attr_value_('_id', node)
        if value is not None and '_id' not in already_processed:
            already_processed.add('_id')
            self._id = value
        value = find_attr_value_('Type', node)
        if value is not None and 'Type' not in already_processed:
            already_processed.add('Type')
            self.Type = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'BoundingBox':
            obj_ = BoundingBoxType.factory()
            obj_.build(child_)
            self.BoundingBox = obj_
            obj_.original_tagname_ = 'BoundingBox'
        elif nodeName_ == 'CG':
            obj_ = CGType.factory()
            obj_.build(child_)
            self.CG = obj_
            obj_.original_tagname_ = 'CG'
        elif nodeName_ == 'Children':
            obj_ = ChildrenType.factory()
            obj_.build(child_)
            self.Children = obj_
            obj_.original_tagname_ = 'Children'
        elif nodeName_ == 'InertiaTensor':
            obj_ = InertiaTensorType.factory()
            obj_.build(child_)
            self.InertiaTensor.append(obj_)
            obj_.original_tagname_ = 'InertiaTensor'
        elif nodeName_ == 'Material':
            obj_ = MaterialType.factory()
            obj_.build(child_)
            self.Material = obj_
            obj_.original_tagname_ = 'Material'
        elif nodeName_ == 'PrincipleMomentsOfInertia':
            obj_ = PrincipleMomentsOfInertiaType.factory()
            obj_.build(child_)
            self.PrincipleMomentsOfInertia = obj_
            obj_.original_tagname_ = 'PrincipleMomentsOfInertia'
        elif nodeName_ == 'Scalars':
            obj_ = ScalarsType.factory()
            obj_.build(child_)
            self.Scalars = obj_
            obj_.original_tagname_ = 'Scalars'
        elif nodeName_ == 'Units':
            obj_ = UnitsType.factory()
            obj_.build(child_)
            self.Units = obj_
            obj_.original_tagname_ = 'Units'
# end class MetricComponentType


class ChildMetricType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, _derived=None, _real_archetype=None, _desynched_atts=None, ComponentInstanceID=None, MetricID=None, _subtype=None, _instances=None, _archetype=None, _id=None, RotationMatrix=None, Translation=None):
        self.original_tagname_ = None
        self._derived = _cast(None, _derived)
        self._real_archetype = _cast(bool, _real_archetype)
        self._desynched_atts = _cast(None, _desynched_atts)
        self.ComponentInstanceID = _cast(None, ComponentInstanceID)
        self.MetricID = _cast(int, MetricID)
        self._subtype = _cast(bool, _subtype)
        self._instances = _cast(None, _instances)
        self._archetype = _cast(None, _archetype)
        self._id = _cast(None, _id)
        self.RotationMatrix = RotationMatrix
        self.Translation = Translation
    def factory(*args_, **kwargs_):
        if ChildMetricType.subclass:
            return ChildMetricType.subclass(*args_, **kwargs_)
        else:
            return ChildMetricType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_RotationMatrix(self): return self.RotationMatrix
    def set_RotationMatrix(self, RotationMatrix): self.RotationMatrix = RotationMatrix
    def get_Translation(self): return self.Translation
    def set_Translation(self, Translation): self.Translation = Translation
    def get__derived(self): return self._derived
    def set__derived(self, _derived): self._derived = _derived
    def get__real_archetype(self): return self._real_archetype
    def set__real_archetype(self, _real_archetype): self._real_archetype = _real_archetype
    def get__desynched_atts(self): return self._desynched_atts
    def set__desynched_atts(self, _desynched_atts): self._desynched_atts = _desynched_atts
    def get_ComponentInstanceID(self): return self.ComponentInstanceID
    def set_ComponentInstanceID(self, ComponentInstanceID): self.ComponentInstanceID = ComponentInstanceID
    def get_MetricID(self): return self.MetricID
    def set_MetricID(self, MetricID): self.MetricID = MetricID
    def get__subtype(self): return self._subtype
    def set__subtype(self, _subtype): self._subtype = _subtype
    def get__instances(self): return self._instances
    def set__instances(self, _instances): self._instances = _instances
    def get__archetype(self): return self._archetype
    def set__archetype(self, _archetype): self._archetype = _archetype
    def get__id(self): return self._id
    def set__id(self, _id): self._id = _id
    def hasContent_(self):
        if (
            self.RotationMatrix is not None or
            self.Translation is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ChildMetricType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ChildMetricType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ChildMetricType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ChildMetricType'):
        if self._derived is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            outfile.write(' _derived=%s' % (self.gds_format_string(quote_attrib(self._derived).encode(ExternalEncoding), input_name='_derived'), ))
        if self._real_archetype is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            outfile.write(' _real_archetype="%s"' % self.gds_format_boolean(self._real_archetype, input_name='_real_archetype'))
        if self._desynched_atts is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            outfile.write(' _desynched_atts=%s' % (self.gds_format_string(quote_attrib(self._desynched_atts).encode(ExternalEncoding), input_name='_desynched_atts'), ))
        if self.ComponentInstanceID is not None and 'ComponentInstanceID' not in already_processed:
            already_processed.add('ComponentInstanceID')
            outfile.write(' ComponentInstanceID=%s' % (self.gds_format_string(quote_attrib(self.ComponentInstanceID).encode(ExternalEncoding), input_name='ComponentInstanceID'), ))
        if self.MetricID is not None and 'MetricID' not in already_processed:
            already_processed.add('MetricID')
            outfile.write(' MetricID="%s"' % self.gds_format_integer(self.MetricID, input_name='MetricID'))
        if self._subtype is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            outfile.write(' _subtype="%s"' % self.gds_format_boolean(self._subtype, input_name='_subtype'))
        if self._instances is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            outfile.write(' _instances=%s' % (self.gds_format_string(quote_attrib(self._instances).encode(ExternalEncoding), input_name='_instances'), ))
        if self._archetype is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            outfile.write(' _archetype=%s' % (self.gds_format_string(quote_attrib(self._archetype).encode(ExternalEncoding), input_name='_archetype'), ))
        if self._id is not None and '_id' not in already_processed:
            already_processed.add('_id')
            outfile.write(' _id=%s' % (self.gds_format_string(quote_attrib(self._id).encode(ExternalEncoding), input_name='_id'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='ChildMetricType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.RotationMatrix is not None:
            self.RotationMatrix.export(outfile, level, namespace_, name_='RotationMatrix', pretty_print=pretty_print)
        if self.Translation is not None:
            self.Translation.export(outfile, level, namespace_, name_='Translation', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='ChildMetricType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self._derived is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            showIndent(outfile, level)
            outfile.write('_derived="%s",\n' % (self._derived,))
        if self._real_archetype is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            showIndent(outfile, level)
            outfile.write('_real_archetype=%s,\n' % (self._real_archetype,))
        if self._desynched_atts is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            showIndent(outfile, level)
            outfile.write('_desynched_atts="%s",\n' % (self._desynched_atts,))
        if self.ComponentInstanceID is not None and 'ComponentInstanceID' not in already_processed:
            already_processed.add('ComponentInstanceID')
            showIndent(outfile, level)
            outfile.write('ComponentInstanceID="%s",\n' % (self.ComponentInstanceID,))
        if self.MetricID is not None and 'MetricID' not in already_processed:
            already_processed.add('MetricID')
            showIndent(outfile, level)
            outfile.write('MetricID=%d,\n' % (self.MetricID,))
        if self._subtype is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            showIndent(outfile, level)
            outfile.write('_subtype=%s,\n' % (self._subtype,))
        if self._instances is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            showIndent(outfile, level)
            outfile.write('_instances="%s",\n' % (self._instances,))
        if self._archetype is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            showIndent(outfile, level)
            outfile.write('_archetype="%s",\n' % (self._archetype,))
        if self._id is not None and '_id' not in already_processed:
            already_processed.add('_id')
            showIndent(outfile, level)
            outfile.write('_id="%s",\n' % (self._id,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.RotationMatrix is not None:
            showIndent(outfile, level)
            outfile.write('RotationMatrix=model_.RotationMatrixType(\n')
            self.RotationMatrix.exportLiteral(outfile, level, name_='RotationMatrix')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Translation is not None:
            showIndent(outfile, level)
            outfile.write('Translation=model_.TranslationType(\n')
            self.Translation.exportLiteral(outfile, level, name_='Translation')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('_derived', node)
        if value is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            self._derived = value
        value = find_attr_value_('_real_archetype', node)
        if value is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            if value in ('true', '1'):
                self._real_archetype = True
            elif value in ('false', '0'):
                self._real_archetype = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('_desynched_atts', node)
        if value is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            self._desynched_atts = value
        value = find_attr_value_('ComponentInstanceID', node)
        if value is not None and 'ComponentInstanceID' not in already_processed:
            already_processed.add('ComponentInstanceID')
            self.ComponentInstanceID = value
        value = find_attr_value_('MetricID', node)
        if value is not None and 'MetricID' not in already_processed:
            already_processed.add('MetricID')
            try:
                self.MetricID = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('_subtype', node)
        if value is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            if value in ('true', '1'):
                self._subtype = True
            elif value in ('false', '0'):
                self._subtype = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('_instances', node)
        if value is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            self._instances = value
        value = find_attr_value_('_archetype', node)
        if value is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            self._archetype = value
        value = find_attr_value_('_id', node)
        if value is not None and '_id' not in already_processed:
            already_processed.add('_id')
            self._id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'RotationMatrix':
            obj_ = RotationMatrixType.factory()
            obj_.build(child_)
            self.RotationMatrix = obj_
            obj_.original_tagname_ = 'RotationMatrix'
        elif nodeName_ == 'Translation':
            obj_ = TranslationType.factory()
            obj_.build(child_)
            self.Translation = obj_
            obj_.original_tagname_ = 'Translation'
# end class ChildMetricType


class ScalarsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, _derived=None, _real_archetype=None, _archetype=None, _subtype=None, _instances=None, _desynched_atts=None, _id=None, Scalar=None):
        self.original_tagname_ = None
        self._derived = _cast(None, _derived)
        self._real_archetype = _cast(bool, _real_archetype)
        self._archetype = _cast(None, _archetype)
        self._subtype = _cast(bool, _subtype)
        self._instances = _cast(None, _instances)
        self._desynched_atts = _cast(None, _desynched_atts)
        self._id = _cast(None, _id)
        if Scalar is None:
            self.Scalar = []
        else:
            self.Scalar = Scalar
    def factory(*args_, **kwargs_):
        if ScalarsType.subclass:
            return ScalarsType.subclass(*args_, **kwargs_)
        else:
            return ScalarsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Scalar(self): return self.Scalar
    def set_Scalar(self, Scalar): self.Scalar = Scalar
    def add_Scalar(self, value): self.Scalar.append(value)
    def insert_Scalar(self, index, value): self.Scalar[index] = value
    def get__derived(self): return self._derived
    def set__derived(self, _derived): self._derived = _derived
    def get__real_archetype(self): return self._real_archetype
    def set__real_archetype(self, _real_archetype): self._real_archetype = _real_archetype
    def get__archetype(self): return self._archetype
    def set__archetype(self, _archetype): self._archetype = _archetype
    def get__subtype(self): return self._subtype
    def set__subtype(self, _subtype): self._subtype = _subtype
    def get__instances(self): return self._instances
    def set__instances(self, _instances): self._instances = _instances
    def get__desynched_atts(self): return self._desynched_atts
    def set__desynched_atts(self, _desynched_atts): self._desynched_atts = _desynched_atts
    def get__id(self): return self._id
    def set__id(self, _id): self._id = _id
    def hasContent_(self):
        if (
            self.Scalar
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ScalarsType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ScalarsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ScalarsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ScalarsType'):
        if self._derived is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            outfile.write(' _derived=%s' % (self.gds_format_string(quote_attrib(self._derived).encode(ExternalEncoding), input_name='_derived'), ))
        if self._real_archetype is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            outfile.write(' _real_archetype="%s"' % self.gds_format_boolean(self._real_archetype, input_name='_real_archetype'))
        if self._archetype is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            outfile.write(' _archetype=%s' % (self.gds_format_string(quote_attrib(self._archetype).encode(ExternalEncoding), input_name='_archetype'), ))
        if self._subtype is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            outfile.write(' _subtype="%s"' % self.gds_format_boolean(self._subtype, input_name='_subtype'))
        if self._instances is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            outfile.write(' _instances=%s' % (self.gds_format_string(quote_attrib(self._instances).encode(ExternalEncoding), input_name='_instances'), ))
        if self._desynched_atts is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            outfile.write(' _desynched_atts=%s' % (self.gds_format_string(quote_attrib(self._desynched_atts).encode(ExternalEncoding), input_name='_desynched_atts'), ))
        if self._id is not None and '_id' not in already_processed:
            already_processed.add('_id')
            outfile.write(' _id=%s' % (self.gds_format_string(quote_attrib(self._id).encode(ExternalEncoding), input_name='_id'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='ScalarsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Scalar_ in self.Scalar:
            Scalar_.export(outfile, level, namespace_, name_='Scalar', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='ScalarsType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self._derived is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            showIndent(outfile, level)
            outfile.write('_derived="%s",\n' % (self._derived,))
        if self._real_archetype is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            showIndent(outfile, level)
            outfile.write('_real_archetype=%s,\n' % (self._real_archetype,))
        if self._archetype is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            showIndent(outfile, level)
            outfile.write('_archetype="%s",\n' % (self._archetype,))
        if self._subtype is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            showIndent(outfile, level)
            outfile.write('_subtype=%s,\n' % (self._subtype,))
        if self._instances is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            showIndent(outfile, level)
            outfile.write('_instances="%s",\n' % (self._instances,))
        if self._desynched_atts is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            showIndent(outfile, level)
            outfile.write('_desynched_atts="%s",\n' % (self._desynched_atts,))
        if self._id is not None and '_id' not in already_processed:
            already_processed.add('_id')
            showIndent(outfile, level)
            outfile.write('_id="%s",\n' % (self._id,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('Scalar=[\n')
        level += 1
        for Scalar_ in self.Scalar:
            showIndent(outfile, level)
            outfile.write('model_.ScalarType(\n')
            Scalar_.exportLiteral(outfile, level, name_='ScalarType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('_derived', node)
        if value is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            self._derived = value
        value = find_attr_value_('_real_archetype', node)
        if value is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            if value in ('true', '1'):
                self._real_archetype = True
            elif value in ('false', '0'):
                self._real_archetype = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('_archetype', node)
        if value is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            self._archetype = value
        value = find_attr_value_('_subtype', node)
        if value is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            if value in ('true', '1'):
                self._subtype = True
            elif value in ('false', '0'):
                self._subtype = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('_instances', node)
        if value is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            self._instances = value
        value = find_attr_value_('_desynched_atts', node)
        if value is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            self._desynched_atts = value
        value = find_attr_value_('_id', node)
        if value is not None and '_id' not in already_processed:
            already_processed.add('_id')
            self._id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Scalar':
            obj_ = ScalarType.factory()
            obj_.build(child_)
            self.Scalar.append(obj_)
            obj_.original_tagname_ = 'Scalar'
# end class ScalarsType


class AnomalyType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, _derived=None, _real_archetype=None, _desynched_atts=None, MetricID=None, _subtype=None, _instances=None, _archetype=None, Error=None, _id=None):
        self.original_tagname_ = None
        self._derived = _cast(None, _derived)
        self._real_archetype = _cast(bool, _real_archetype)
        self._desynched_atts = _cast(None, _desynched_atts)
        self.MetricID = _cast(None, MetricID)
        self._subtype = _cast(bool, _subtype)
        self._instances = _cast(None, _instances)
        self._archetype = _cast(None, _archetype)
        self.Error = _cast(None, Error)
        self._id = _cast(None, _id)
    def factory(*args_, **kwargs_):
        if AnomalyType.subclass:
            return AnomalyType.subclass(*args_, **kwargs_)
        else:
            return AnomalyType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get__derived(self): return self._derived
    def set__derived(self, _derived): self._derived = _derived
    def get__real_archetype(self): return self._real_archetype
    def set__real_archetype(self, _real_archetype): self._real_archetype = _real_archetype
    def get__desynched_atts(self): return self._desynched_atts
    def set__desynched_atts(self, _desynched_atts): self._desynched_atts = _desynched_atts
    def get_MetricID(self): return self.MetricID
    def set_MetricID(self, MetricID): self.MetricID = MetricID
    def get__subtype(self): return self._subtype
    def set__subtype(self, _subtype): self._subtype = _subtype
    def get__instances(self): return self._instances
    def set__instances(self, _instances): self._instances = _instances
    def get__archetype(self): return self._archetype
    def set__archetype(self, _archetype): self._archetype = _archetype
    def get_Error(self): return self.Error
    def set_Error(self, Error): self.Error = Error
    def get__id(self): return self._id
    def set__id(self, _id): self._id = _id
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AnomalyType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AnomalyType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AnomalyType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AnomalyType'):
        if self._derived is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            outfile.write(' _derived=%s' % (self.gds_format_string(quote_attrib(self._derived).encode(ExternalEncoding), input_name='_derived'), ))
        if self._real_archetype is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            outfile.write(' _real_archetype="%s"' % self.gds_format_boolean(self._real_archetype, input_name='_real_archetype'))
        if self._desynched_atts is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            outfile.write(' _desynched_atts=%s' % (self.gds_format_string(quote_attrib(self._desynched_atts).encode(ExternalEncoding), input_name='_desynched_atts'), ))
        if self.MetricID is not None and 'MetricID' not in already_processed:
            already_processed.add('MetricID')
            outfile.write(' MetricID=%s' % (self.gds_format_string(quote_attrib(self.MetricID).encode(ExternalEncoding), input_name='MetricID'), ))
        if self._subtype is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            outfile.write(' _subtype="%s"' % self.gds_format_boolean(self._subtype, input_name='_subtype'))
        if self._instances is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            outfile.write(' _instances=%s' % (self.gds_format_string(quote_attrib(self._instances).encode(ExternalEncoding), input_name='_instances'), ))
        if self._archetype is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            outfile.write(' _archetype=%s' % (self.gds_format_string(quote_attrib(self._archetype).encode(ExternalEncoding), input_name='_archetype'), ))
        if self.Error is not None and 'Error' not in already_processed:
            already_processed.add('Error')
            outfile.write(' Error=%s' % (self.gds_format_string(quote_attrib(self.Error).encode(ExternalEncoding), input_name='Error'), ))
        if self._id is not None and '_id' not in already_processed:
            already_processed.add('_id')
            outfile.write(' _id=%s' % (self.gds_format_string(quote_attrib(self._id).encode(ExternalEncoding), input_name='_id'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='AnomalyType', fromsubclass_=False, pretty_print=True):
        pass
    def exportLiteral(self, outfile, level, name_='AnomalyType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self._derived is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            showIndent(outfile, level)
            outfile.write('_derived="%s",\n' % (self._derived,))
        if self._real_archetype is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            showIndent(outfile, level)
            outfile.write('_real_archetype=%s,\n' % (self._real_archetype,))
        if self._desynched_atts is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            showIndent(outfile, level)
            outfile.write('_desynched_atts="%s",\n' % (self._desynched_atts,))
        if self.MetricID is not None and 'MetricID' not in already_processed:
            already_processed.add('MetricID')
            showIndent(outfile, level)
            outfile.write('MetricID="%s",\n' % (self.MetricID,))
        if self._subtype is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            showIndent(outfile, level)
            outfile.write('_subtype=%s,\n' % (self._subtype,))
        if self._instances is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            showIndent(outfile, level)
            outfile.write('_instances="%s",\n' % (self._instances,))
        if self._archetype is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            showIndent(outfile, level)
            outfile.write('_archetype="%s",\n' % (self._archetype,))
        if self.Error is not None and 'Error' not in already_processed:
            already_processed.add('Error')
            showIndent(outfile, level)
            outfile.write('Error="%s",\n' % (self.Error,))
        if self._id is not None and '_id' not in already_processed:
            already_processed.add('_id')
            showIndent(outfile, level)
            outfile.write('_id="%s",\n' % (self._id,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('_derived', node)
        if value is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            self._derived = value
        value = find_attr_value_('_real_archetype', node)
        if value is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            if value in ('true', '1'):
                self._real_archetype = True
            elif value in ('false', '0'):
                self._real_archetype = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('_desynched_atts', node)
        if value is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            self._desynched_atts = value
        value = find_attr_value_('MetricID', node)
        if value is not None and 'MetricID' not in already_processed:
            already_processed.add('MetricID')
            self.MetricID = value
        value = find_attr_value_('_subtype', node)
        if value is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            if value in ('true', '1'):
                self._subtype = True
            elif value in ('false', '0'):
                self._subtype = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('_instances', node)
        if value is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            self._instances = value
        value = find_attr_value_('_archetype', node)
        if value is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            self._archetype = value
        value = find_attr_value_('Error', node)
        if value is not None and 'Error' not in already_processed:
            already_processed.add('Error')
            self.Error = value
        value = find_attr_value_('_id', node)
        if value is not None and '_id' not in already_processed:
            already_processed.add('_id')
            self._id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class AnomalyType


class AnomaliesType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, _derived=None, _real_archetype=None, _archetype=None, _subtype=None, _instances=None, _desynched_atts=None, _id=None, Anomaly=None):
        self.original_tagname_ = None
        self._derived = _cast(None, _derived)
        self._real_archetype = _cast(bool, _real_archetype)
        self._archetype = _cast(None, _archetype)
        self._subtype = _cast(bool, _subtype)
        self._instances = _cast(None, _instances)
        self._desynched_atts = _cast(None, _desynched_atts)
        self._id = _cast(None, _id)
        if Anomaly is None:
            self.Anomaly = []
        else:
            self.Anomaly = Anomaly
    def factory(*args_, **kwargs_):
        if AnomaliesType.subclass:
            return AnomaliesType.subclass(*args_, **kwargs_)
        else:
            return AnomaliesType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Anomaly(self): return self.Anomaly
    def set_Anomaly(self, Anomaly): self.Anomaly = Anomaly
    def add_Anomaly(self, value): self.Anomaly.append(value)
    def insert_Anomaly(self, index, value): self.Anomaly[index] = value
    def get__derived(self): return self._derived
    def set__derived(self, _derived): self._derived = _derived
    def get__real_archetype(self): return self._real_archetype
    def set__real_archetype(self, _real_archetype): self._real_archetype = _real_archetype
    def get__archetype(self): return self._archetype
    def set__archetype(self, _archetype): self._archetype = _archetype
    def get__subtype(self): return self._subtype
    def set__subtype(self, _subtype): self._subtype = _subtype
    def get__instances(self): return self._instances
    def set__instances(self, _instances): self._instances = _instances
    def get__desynched_atts(self): return self._desynched_atts
    def set__desynched_atts(self, _desynched_atts): self._desynched_atts = _desynched_atts
    def get__id(self): return self._id
    def set__id(self, _id): self._id = _id
    def hasContent_(self):
        if (
            self.Anomaly
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AnomaliesType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AnomaliesType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AnomaliesType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AnomaliesType'):
        if self._derived is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            outfile.write(' _derived=%s' % (self.gds_format_string(quote_attrib(self._derived).encode(ExternalEncoding), input_name='_derived'), ))
        if self._real_archetype is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            outfile.write(' _real_archetype="%s"' % self.gds_format_boolean(self._real_archetype, input_name='_real_archetype'))
        if self._archetype is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            outfile.write(' _archetype=%s' % (self.gds_format_string(quote_attrib(self._archetype).encode(ExternalEncoding), input_name='_archetype'), ))
        if self._subtype is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            outfile.write(' _subtype="%s"' % self.gds_format_boolean(self._subtype, input_name='_subtype'))
        if self._instances is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            outfile.write(' _instances=%s' % (self.gds_format_string(quote_attrib(self._instances).encode(ExternalEncoding), input_name='_instances'), ))
        if self._desynched_atts is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            outfile.write(' _desynched_atts=%s' % (self.gds_format_string(quote_attrib(self._desynched_atts).encode(ExternalEncoding), input_name='_desynched_atts'), ))
        if self._id is not None and '_id' not in already_processed:
            already_processed.add('_id')
            outfile.write(' _id=%s' % (self.gds_format_string(quote_attrib(self._id).encode(ExternalEncoding), input_name='_id'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='AnomaliesType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Anomaly_ in self.Anomaly:
            Anomaly_.export(outfile, level, namespace_, name_='Anomaly', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='AnomaliesType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self._derived is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            showIndent(outfile, level)
            outfile.write('_derived="%s",\n' % (self._derived,))
        if self._real_archetype is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            showIndent(outfile, level)
            outfile.write('_real_archetype=%s,\n' % (self._real_archetype,))
        if self._archetype is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            showIndent(outfile, level)
            outfile.write('_archetype="%s",\n' % (self._archetype,))
        if self._subtype is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            showIndent(outfile, level)
            outfile.write('_subtype=%s,\n' % (self._subtype,))
        if self._instances is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            showIndent(outfile, level)
            outfile.write('_instances="%s",\n' % (self._instances,))
        if self._desynched_atts is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            showIndent(outfile, level)
            outfile.write('_desynched_atts="%s",\n' % (self._desynched_atts,))
        if self._id is not None and '_id' not in already_processed:
            already_processed.add('_id')
            showIndent(outfile, level)
            outfile.write('_id="%s",\n' % (self._id,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('Anomaly=[\n')
        level += 1
        for Anomaly_ in self.Anomaly:
            showIndent(outfile, level)
            outfile.write('model_.AnomalyType(\n')
            Anomaly_.exportLiteral(outfile, level, name_='AnomalyType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('_derived', node)
        if value is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            self._derived = value
        value = find_attr_value_('_real_archetype', node)
        if value is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            if value in ('true', '1'):
                self._real_archetype = True
            elif value in ('false', '0'):
                self._real_archetype = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('_archetype', node)
        if value is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            self._archetype = value
        value = find_attr_value_('_subtype', node)
        if value is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            if value in ('true', '1'):
                self._subtype = True
            elif value in ('false', '0'):
                self._subtype = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('_instances', node)
        if value is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            self._instances = value
        value = find_attr_value_('_desynched_atts', node)
        if value is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            self._desynched_atts = value
        value = find_attr_value_('_id', node)
        if value is not None and '_id' not in already_processed:
            already_processed.add('_id')
            self._id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Anomaly':
            obj_ = AnomalyType.factory()
            obj_.build(child_)
            self.Anomaly.append(obj_)
            obj_.original_tagname_ = 'Anomaly'
# end class AnomaliesType


class AssemblyType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, _derived=None, _real_archetype=None, _archetype=None, ConfigurationID=None, _subtype=None, _instances=None, _desynched_atts=None, _id=None, CADComponent=None):
        self.original_tagname_ = None
        self._derived = _cast(None, _derived)
        self._real_archetype = _cast(bool, _real_archetype)
        self._archetype = _cast(None, _archetype)
        self.ConfigurationID = _cast(None, ConfigurationID)
        self._subtype = _cast(bool, _subtype)
        self._instances = _cast(None, _instances)
        self._desynched_atts = _cast(None, _desynched_atts)
        self._id = _cast(None, _id)
        self.CADComponent = CADComponent
    def factory(*args_, **kwargs_):
        if AssemblyType.subclass:
            return AssemblyType.subclass(*args_, **kwargs_)
        else:
            return AssemblyType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CADComponent(self): return self.CADComponent
    def set_CADComponent(self, CADComponent): self.CADComponent = CADComponent
    def get__derived(self): return self._derived
    def set__derived(self, _derived): self._derived = _derived
    def get__real_archetype(self): return self._real_archetype
    def set__real_archetype(self, _real_archetype): self._real_archetype = _real_archetype
    def get__archetype(self): return self._archetype
    def set__archetype(self, _archetype): self._archetype = _archetype
    def get_ConfigurationID(self): return self.ConfigurationID
    def set_ConfigurationID(self, ConfigurationID): self.ConfigurationID = ConfigurationID
    def get__subtype(self): return self._subtype
    def set__subtype(self, _subtype): self._subtype = _subtype
    def get__instances(self): return self._instances
    def set__instances(self, _instances): self._instances = _instances
    def get__desynched_atts(self): return self._desynched_atts
    def set__desynched_atts(self, _desynched_atts): self._desynched_atts = _desynched_atts
    def get__id(self): return self._id
    def set__id(self, _id): self._id = _id
    def hasContent_(self):
        if (
            self.CADComponent is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AssemblyType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AssemblyType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AssemblyType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AssemblyType'):
        if self._derived is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            outfile.write(' _derived=%s' % (self.gds_format_string(quote_attrib(self._derived).encode(ExternalEncoding), input_name='_derived'), ))
        if self._real_archetype is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            outfile.write(' _real_archetype="%s"' % self.gds_format_boolean(self._real_archetype, input_name='_real_archetype'))
        if self._archetype is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            outfile.write(' _archetype=%s' % (self.gds_format_string(quote_attrib(self._archetype).encode(ExternalEncoding), input_name='_archetype'), ))
        if self.ConfigurationID is not None and 'ConfigurationID' not in already_processed:
            already_processed.add('ConfigurationID')
            outfile.write(' ConfigurationID=%s' % (self.gds_format_string(quote_attrib(self.ConfigurationID).encode(ExternalEncoding), input_name='ConfigurationID'), ))
        if self._subtype is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            outfile.write(' _subtype="%s"' % self.gds_format_boolean(self._subtype, input_name='_subtype'))
        if self._instances is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            outfile.write(' _instances=%s' % (self.gds_format_string(quote_attrib(self._instances).encode(ExternalEncoding), input_name='_instances'), ))
        if self._desynched_atts is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            outfile.write(' _desynched_atts=%s' % (self.gds_format_string(quote_attrib(self._desynched_atts).encode(ExternalEncoding), input_name='_desynched_atts'), ))
        if self._id is not None and '_id' not in already_processed:
            already_processed.add('_id')
            outfile.write(' _id=%s' % (self.gds_format_string(quote_attrib(self._id).encode(ExternalEncoding), input_name='_id'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='AssemblyType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CADComponent is not None:
            self.CADComponent.export(outfile, level, namespace_, name_='CADComponent', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='AssemblyType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self._derived is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            showIndent(outfile, level)
            outfile.write('_derived="%s",\n' % (self._derived,))
        if self._real_archetype is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            showIndent(outfile, level)
            outfile.write('_real_archetype=%s,\n' % (self._real_archetype,))
        if self._archetype is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            showIndent(outfile, level)
            outfile.write('_archetype="%s",\n' % (self._archetype,))
        if self.ConfigurationID is not None and 'ConfigurationID' not in already_processed:
            already_processed.add('ConfigurationID')
            showIndent(outfile, level)
            outfile.write('ConfigurationID="%s",\n' % (self.ConfigurationID,))
        if self._subtype is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            showIndent(outfile, level)
            outfile.write('_subtype=%s,\n' % (self._subtype,))
        if self._instances is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            showIndent(outfile, level)
            outfile.write('_instances="%s",\n' % (self._instances,))
        if self._desynched_atts is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            showIndent(outfile, level)
            outfile.write('_desynched_atts="%s",\n' % (self._desynched_atts,))
        if self._id is not None and '_id' not in already_processed:
            already_processed.add('_id')
            showIndent(outfile, level)
            outfile.write('_id="%s",\n' % (self._id,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.CADComponent is not None:
            showIndent(outfile, level)
            outfile.write('CADComponent=model_.CADComponentType(\n')
            self.CADComponent.exportLiteral(outfile, level, name_='CADComponent')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('_derived', node)
        if value is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            self._derived = value
        value = find_attr_value_('_real_archetype', node)
        if value is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            if value in ('true', '1'):
                self._real_archetype = True
            elif value in ('false', '0'):
                self._real_archetype = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('_archetype', node)
        if value is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            self._archetype = value
        value = find_attr_value_('ConfigurationID', node)
        if value is not None and 'ConfigurationID' not in already_processed:
            already_processed.add('ConfigurationID')
            self.ConfigurationID = value
        value = find_attr_value_('_subtype', node)
        if value is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            if value in ('true', '1'):
                self._subtype = True
            elif value in ('false', '0'):
                self._subtype = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('_instances', node)
        if value is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            self._instances = value
        value = find_attr_value_('_desynched_atts', node)
        if value is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            self._desynched_atts = value
        value = find_attr_value_('_id', node)
        if value is not None and '_id' not in already_processed:
            already_processed.add('_id')
            self._id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CADComponent':
            obj_ = CADComponentType.factory()
            obj_.build(child_)
            self.CADComponent = obj_
            obj_.original_tagname_ = 'CADComponent'
# end class AssemblyType


class ChildrenType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, _derived=None, _real_archetype=None, _archetype=None, _subtype=None, _instances=None, _desynched_atts=None, _id=None, ChildMetric=None):
        self.original_tagname_ = None
        self._derived = _cast(None, _derived)
        self._real_archetype = _cast(bool, _real_archetype)
        self._archetype = _cast(None, _archetype)
        self._subtype = _cast(bool, _subtype)
        self._instances = _cast(None, _instances)
        self._desynched_atts = _cast(None, _desynched_atts)
        self._id = _cast(None, _id)
        if ChildMetric is None:
            self.ChildMetric = []
        else:
            self.ChildMetric = ChildMetric
    def factory(*args_, **kwargs_):
        if ChildrenType.subclass:
            return ChildrenType.subclass(*args_, **kwargs_)
        else:
            return ChildrenType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ChildMetric(self): return self.ChildMetric
    def set_ChildMetric(self, ChildMetric): self.ChildMetric = ChildMetric
    def add_ChildMetric(self, value): self.ChildMetric.append(value)
    def insert_ChildMetric(self, index, value): self.ChildMetric[index] = value
    def get__derived(self): return self._derived
    def set__derived(self, _derived): self._derived = _derived
    def get__real_archetype(self): return self._real_archetype
    def set__real_archetype(self, _real_archetype): self._real_archetype = _real_archetype
    def get__archetype(self): return self._archetype
    def set__archetype(self, _archetype): self._archetype = _archetype
    def get__subtype(self): return self._subtype
    def set__subtype(self, _subtype): self._subtype = _subtype
    def get__instances(self): return self._instances
    def set__instances(self, _instances): self._instances = _instances
    def get__desynched_atts(self): return self._desynched_atts
    def set__desynched_atts(self, _desynched_atts): self._desynched_atts = _desynched_atts
    def get__id(self): return self._id
    def set__id(self, _id): self._id = _id
    def hasContent_(self):
        if (
            self.ChildMetric
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ChildrenType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ChildrenType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ChildrenType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ChildrenType'):
        if self._derived is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            outfile.write(' _derived=%s' % (self.gds_format_string(quote_attrib(self._derived).encode(ExternalEncoding), input_name='_derived'), ))
        if self._real_archetype is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            outfile.write(' _real_archetype="%s"' % self.gds_format_boolean(self._real_archetype, input_name='_real_archetype'))
        if self._archetype is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            outfile.write(' _archetype=%s' % (self.gds_format_string(quote_attrib(self._archetype).encode(ExternalEncoding), input_name='_archetype'), ))
        if self._subtype is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            outfile.write(' _subtype="%s"' % self.gds_format_boolean(self._subtype, input_name='_subtype'))
        if self._instances is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            outfile.write(' _instances=%s' % (self.gds_format_string(quote_attrib(self._instances).encode(ExternalEncoding), input_name='_instances'), ))
        if self._desynched_atts is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            outfile.write(' _desynched_atts=%s' % (self.gds_format_string(quote_attrib(self._desynched_atts).encode(ExternalEncoding), input_name='_desynched_atts'), ))
        if self._id is not None and '_id' not in already_processed:
            already_processed.add('_id')
            outfile.write(' _id=%s' % (self.gds_format_string(quote_attrib(self._id).encode(ExternalEncoding), input_name='_id'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='ChildrenType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for ChildMetric_ in self.ChildMetric:
            ChildMetric_.export(outfile, level, namespace_, name_='ChildMetric', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='ChildrenType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self._derived is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            showIndent(outfile, level)
            outfile.write('_derived="%s",\n' % (self._derived,))
        if self._real_archetype is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            showIndent(outfile, level)
            outfile.write('_real_archetype=%s,\n' % (self._real_archetype,))
        if self._archetype is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            showIndent(outfile, level)
            outfile.write('_archetype="%s",\n' % (self._archetype,))
        if self._subtype is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            showIndent(outfile, level)
            outfile.write('_subtype=%s,\n' % (self._subtype,))
        if self._instances is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            showIndent(outfile, level)
            outfile.write('_instances="%s",\n' % (self._instances,))
        if self._desynched_atts is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            showIndent(outfile, level)
            outfile.write('_desynched_atts="%s",\n' % (self._desynched_atts,))
        if self._id is not None and '_id' not in already_processed:
            already_processed.add('_id')
            showIndent(outfile, level)
            outfile.write('_id="%s",\n' % (self._id,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('ChildMetric=[\n')
        level += 1
        for ChildMetric_ in self.ChildMetric:
            showIndent(outfile, level)
            outfile.write('model_.ChildMetricType(\n')
            ChildMetric_.exportLiteral(outfile, level, name_='ChildMetricType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('_derived', node)
        if value is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            self._derived = value
        value = find_attr_value_('_real_archetype', node)
        if value is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            if value in ('true', '1'):
                self._real_archetype = True
            elif value in ('false', '0'):
                self._real_archetype = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('_archetype', node)
        if value is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            self._archetype = value
        value = find_attr_value_('_subtype', node)
        if value is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            if value in ('true', '1'):
                self._subtype = True
            elif value in ('false', '0'):
                self._subtype = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('_instances', node)
        if value is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            self._instances = value
        value = find_attr_value_('_desynched_atts', node)
        if value is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            self._desynched_atts = value
        value = find_attr_value_('_id', node)
        if value is not None and '_id' not in already_processed:
            already_processed.add('_id')
            self._id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ChildMetric':
            obj_ = ChildMetricType.factory()
            obj_.build(child_)
            self.ChildMetric.append(obj_)
            obj_.original_tagname_ = 'ChildMetric'
# end class ChildrenType


class MetricComponentsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, _derived=None, _real_archetype=None, _archetype=None, _subtype=None, _instances=None, _desynched_atts=None, _id=None, MetricComponent=None):
        self.original_tagname_ = None
        self._derived = _cast(None, _derived)
        self._real_archetype = _cast(bool, _real_archetype)
        self._archetype = _cast(None, _archetype)
        self._subtype = _cast(bool, _subtype)
        self._instances = _cast(None, _instances)
        self._desynched_atts = _cast(None, _desynched_atts)
        self._id = _cast(None, _id)
        if MetricComponent is None:
            self.MetricComponent = []
        else:
            self.MetricComponent = MetricComponent
    def factory(*args_, **kwargs_):
        if MetricComponentsType.subclass:
            return MetricComponentsType.subclass(*args_, **kwargs_)
        else:
            return MetricComponentsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_MetricComponent(self): return self.MetricComponent
    def set_MetricComponent(self, MetricComponent): self.MetricComponent = MetricComponent
    def add_MetricComponent(self, value): self.MetricComponent.append(value)
    def insert_MetricComponent(self, index, value): self.MetricComponent[index] = value
    def get__derived(self): return self._derived
    def set__derived(self, _derived): self._derived = _derived
    def get__real_archetype(self): return self._real_archetype
    def set__real_archetype(self, _real_archetype): self._real_archetype = _real_archetype
    def get__archetype(self): return self._archetype
    def set__archetype(self, _archetype): self._archetype = _archetype
    def get__subtype(self): return self._subtype
    def set__subtype(self, _subtype): self._subtype = _subtype
    def get__instances(self): return self._instances
    def set__instances(self, _instances): self._instances = _instances
    def get__desynched_atts(self): return self._desynched_atts
    def set__desynched_atts(self, _desynched_atts): self._desynched_atts = _desynched_atts
    def get__id(self): return self._id
    def set__id(self, _id): self._id = _id
    def hasContent_(self):
        if (
            self.MetricComponent
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='MetricComponentsType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='MetricComponentsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='MetricComponentsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='MetricComponentsType'):
        if self._derived is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            outfile.write(' _derived=%s' % (self.gds_format_string(quote_attrib(self._derived).encode(ExternalEncoding), input_name='_derived'), ))
        if self._real_archetype is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            outfile.write(' _real_archetype="%s"' % self.gds_format_boolean(self._real_archetype, input_name='_real_archetype'))
        if self._archetype is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            outfile.write(' _archetype=%s' % (self.gds_format_string(quote_attrib(self._archetype).encode(ExternalEncoding), input_name='_archetype'), ))
        if self._subtype is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            outfile.write(' _subtype="%s"' % self.gds_format_boolean(self._subtype, input_name='_subtype'))
        if self._instances is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            outfile.write(' _instances=%s' % (self.gds_format_string(quote_attrib(self._instances).encode(ExternalEncoding), input_name='_instances'), ))
        if self._desynched_atts is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            outfile.write(' _desynched_atts=%s' % (self.gds_format_string(quote_attrib(self._desynched_atts).encode(ExternalEncoding), input_name='_desynched_atts'), ))
        if self._id is not None and '_id' not in already_processed:
            already_processed.add('_id')
            outfile.write(' _id=%s' % (self.gds_format_string(quote_attrib(self._id).encode(ExternalEncoding), input_name='_id'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='MetricComponentsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for MetricComponent_ in self.MetricComponent:
            MetricComponent_.export(outfile, level, namespace_, name_='MetricComponent', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='MetricComponentsType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self._derived is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            showIndent(outfile, level)
            outfile.write('_derived="%s",\n' % (self._derived,))
        if self._real_archetype is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            showIndent(outfile, level)
            outfile.write('_real_archetype=%s,\n' % (self._real_archetype,))
        if self._archetype is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            showIndent(outfile, level)
            outfile.write('_archetype="%s",\n' % (self._archetype,))
        if self._subtype is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            showIndent(outfile, level)
            outfile.write('_subtype=%s,\n' % (self._subtype,))
        if self._instances is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            showIndent(outfile, level)
            outfile.write('_instances="%s",\n' % (self._instances,))
        if self._desynched_atts is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            showIndent(outfile, level)
            outfile.write('_desynched_atts="%s",\n' % (self._desynched_atts,))
        if self._id is not None and '_id' not in already_processed:
            already_processed.add('_id')
            showIndent(outfile, level)
            outfile.write('_id="%s",\n' % (self._id,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('MetricComponent=[\n')
        level += 1
        for MetricComponent_ in self.MetricComponent:
            showIndent(outfile, level)
            outfile.write('model_.MetricComponentType(\n')
            MetricComponent_.exportLiteral(outfile, level, name_='MetricComponentType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('_derived', node)
        if value is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            self._derived = value
        value = find_attr_value_('_real_archetype', node)
        if value is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            if value in ('true', '1'):
                self._real_archetype = True
            elif value in ('false', '0'):
                self._real_archetype = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('_archetype', node)
        if value is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            self._archetype = value
        value = find_attr_value_('_subtype', node)
        if value is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            if value in ('true', '1'):
                self._subtype = True
            elif value in ('false', '0'):
                self._subtype = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('_instances', node)
        if value is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            self._instances = value
        value = find_attr_value_('_desynched_atts', node)
        if value is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            self._desynched_atts = value
        value = find_attr_value_('_id', node)
        if value is not None and '_id' not in already_processed:
            already_processed.add('_id')
            self._id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'MetricComponent':
            obj_ = MetricComponentType.factory()
            obj_.build(child_)
            self.MetricComponent.append(obj_)
            obj_.original_tagname_ = 'MetricComponent'
# end class MetricComponentsType


class AssembliesType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, _derived=None, _real_archetype=None, _archetype=None, _subtype=None, _instances=None, _desynched_atts=None, _id=None, Assembly=None):
        self.original_tagname_ = None
        self._derived = _cast(None, _derived)
        self._real_archetype = _cast(bool, _real_archetype)
        self._archetype = _cast(None, _archetype)
        self._subtype = _cast(bool, _subtype)
        self._instances = _cast(None, _instances)
        self._desynched_atts = _cast(None, _desynched_atts)
        self._id = _cast(None, _id)
        if Assembly is None:
            self.Assembly = []
        else:
            self.Assembly = Assembly
    def factory(*args_, **kwargs_):
        if AssembliesType.subclass:
            return AssembliesType.subclass(*args_, **kwargs_)
        else:
            return AssembliesType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Assembly(self): return self.Assembly
    def set_Assembly(self, Assembly): self.Assembly = Assembly
    def add_Assembly(self, value): self.Assembly.append(value)
    def insert_Assembly(self, index, value): self.Assembly[index] = value
    def get__derived(self): return self._derived
    def set__derived(self, _derived): self._derived = _derived
    def get__real_archetype(self): return self._real_archetype
    def set__real_archetype(self, _real_archetype): self._real_archetype = _real_archetype
    def get__archetype(self): return self._archetype
    def set__archetype(self, _archetype): self._archetype = _archetype
    def get__subtype(self): return self._subtype
    def set__subtype(self, _subtype): self._subtype = _subtype
    def get__instances(self): return self._instances
    def set__instances(self, _instances): self._instances = _instances
    def get__desynched_atts(self): return self._desynched_atts
    def set__desynched_atts(self, _desynched_atts): self._desynched_atts = _desynched_atts
    def get__id(self): return self._id
    def set__id(self, _id): self._id = _id
    def hasContent_(self):
        if (
            self.Assembly
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AssembliesType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AssembliesType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AssembliesType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AssembliesType'):
        if self._derived is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            outfile.write(' _derived=%s' % (self.gds_format_string(quote_attrib(self._derived).encode(ExternalEncoding), input_name='_derived'), ))
        if self._real_archetype is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            outfile.write(' _real_archetype="%s"' % self.gds_format_boolean(self._real_archetype, input_name='_real_archetype'))
        if self._archetype is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            outfile.write(' _archetype=%s' % (self.gds_format_string(quote_attrib(self._archetype).encode(ExternalEncoding), input_name='_archetype'), ))
        if self._subtype is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            outfile.write(' _subtype="%s"' % self.gds_format_boolean(self._subtype, input_name='_subtype'))
        if self._instances is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            outfile.write(' _instances=%s' % (self.gds_format_string(quote_attrib(self._instances).encode(ExternalEncoding), input_name='_instances'), ))
        if self._desynched_atts is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            outfile.write(' _desynched_atts=%s' % (self.gds_format_string(quote_attrib(self._desynched_atts).encode(ExternalEncoding), input_name='_desynched_atts'), ))
        if self._id is not None and '_id' not in already_processed:
            already_processed.add('_id')
            outfile.write(' _id=%s' % (self.gds_format_string(quote_attrib(self._id).encode(ExternalEncoding), input_name='_id'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='AssembliesType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Assembly_ in self.Assembly:
            Assembly_.export(outfile, level, namespace_, name_='Assembly', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='AssembliesType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self._derived is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            showIndent(outfile, level)
            outfile.write('_derived="%s",\n' % (self._derived,))
        if self._real_archetype is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            showIndent(outfile, level)
            outfile.write('_real_archetype=%s,\n' % (self._real_archetype,))
        if self._archetype is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            showIndent(outfile, level)
            outfile.write('_archetype="%s",\n' % (self._archetype,))
        if self._subtype is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            showIndent(outfile, level)
            outfile.write('_subtype=%s,\n' % (self._subtype,))
        if self._instances is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            showIndent(outfile, level)
            outfile.write('_instances="%s",\n' % (self._instances,))
        if self._desynched_atts is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            showIndent(outfile, level)
            outfile.write('_desynched_atts="%s",\n' % (self._desynched_atts,))
        if self._id is not None and '_id' not in already_processed:
            already_processed.add('_id')
            showIndent(outfile, level)
            outfile.write('_id="%s",\n' % (self._id,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('Assembly=[\n')
        level += 1
        for Assembly_ in self.Assembly:
            showIndent(outfile, level)
            outfile.write('model_.AssemblyType(\n')
            Assembly_.exportLiteral(outfile, level, name_='AssemblyType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('_derived', node)
        if value is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            self._derived = value
        value = find_attr_value_('_real_archetype', node)
        if value is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            if value in ('true', '1'):
                self._real_archetype = True
            elif value in ('false', '0'):
                self._real_archetype = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('_archetype', node)
        if value is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            self._archetype = value
        value = find_attr_value_('_subtype', node)
        if value is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            if value in ('true', '1'):
                self._subtype = True
            elif value in ('false', '0'):
                self._subtype = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('_instances', node)
        if value is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            self._instances = value
        value = find_attr_value_('_desynched_atts', node)
        if value is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            self._desynched_atts = value
        value = find_attr_value_('_id', node)
        if value is not None and '_id' not in already_processed:
            already_processed.add('_id')
            self._id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Assembly':
            obj_ = AssemblyType.factory()
            obj_.build(child_)
            self.Assembly.append(obj_)
            obj_.original_tagname_ = 'Assembly'
# end class AssembliesType


class CADComponentType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, _derived=None, _real_archetype=None, _desynched_atts=None, ComponentInstanceID=None, MetricID=None, _subtype=None, _instances=None, _archetype=None, _id=None, CADComponent=None):
        self.original_tagname_ = None
        self._derived = _cast(None, _derived)
        self._real_archetype = _cast(bool, _real_archetype)
        self._desynched_atts = _cast(None, _desynched_atts)
        self.ComponentInstanceID = _cast(None, ComponentInstanceID)
        self.MetricID = _cast(int, MetricID)
        self._subtype = _cast(bool, _subtype)
        self._instances = _cast(None, _instances)
        self._archetype = _cast(None, _archetype)
        self._id = _cast(None, _id)
        if CADComponent is None:
            self.CADComponent = []
        else:
            self.CADComponent = CADComponent
    def factory(*args_, **kwargs_):
        if CADComponentType.subclass:
            return CADComponentType.subclass(*args_, **kwargs_)
        else:
            return CADComponentType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CADComponent(self): return self.CADComponent
    def set_CADComponent(self, CADComponent): self.CADComponent = CADComponent
    def add_CADComponent(self, value): self.CADComponent.append(value)
    def insert_CADComponent(self, index, value): self.CADComponent[index] = value
    def get__derived(self): return self._derived
    def set__derived(self, _derived): self._derived = _derived
    def get__real_archetype(self): return self._real_archetype
    def set__real_archetype(self, _real_archetype): self._real_archetype = _real_archetype
    def get__desynched_atts(self): return self._desynched_atts
    def set__desynched_atts(self, _desynched_atts): self._desynched_atts = _desynched_atts
    def get_ComponentInstanceID(self): return self.ComponentInstanceID
    def set_ComponentInstanceID(self, ComponentInstanceID): self.ComponentInstanceID = ComponentInstanceID
    def get_MetricID(self): return self.MetricID
    def set_MetricID(self, MetricID): self.MetricID = MetricID
    def get__subtype(self): return self._subtype
    def set__subtype(self, _subtype): self._subtype = _subtype
    def get__instances(self): return self._instances
    def set__instances(self, _instances): self._instances = _instances
    def get__archetype(self): return self._archetype
    def set__archetype(self, _archetype): self._archetype = _archetype
    def get__id(self): return self._id
    def set__id(self, _id): self._id = _id
    def hasContent_(self):
        if (
            self.CADComponent
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CADComponentType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CADComponentType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CADComponentType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CADComponentType'):
        if self._derived is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            outfile.write(' _derived=%s' % (self.gds_format_string(quote_attrib(self._derived).encode(ExternalEncoding), input_name='_derived'), ))
        if self._real_archetype is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            outfile.write(' _real_archetype="%s"' % self.gds_format_boolean(self._real_archetype, input_name='_real_archetype'))
        if self._desynched_atts is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            outfile.write(' _desynched_atts=%s' % (self.gds_format_string(quote_attrib(self._desynched_atts).encode(ExternalEncoding), input_name='_desynched_atts'), ))
        if self.ComponentInstanceID is not None and 'ComponentInstanceID' not in already_processed:
            already_processed.add('ComponentInstanceID')
            outfile.write(' ComponentInstanceID=%s' % (self.gds_format_string(quote_attrib(self.ComponentInstanceID).encode(ExternalEncoding), input_name='ComponentInstanceID'), ))
        if self.MetricID is not None and 'MetricID' not in already_processed:
            already_processed.add('MetricID')
            outfile.write(' MetricID="%s"' % self.gds_format_integer(self.MetricID, input_name='MetricID'))
        if self._subtype is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            outfile.write(' _subtype="%s"' % self.gds_format_boolean(self._subtype, input_name='_subtype'))
        if self._instances is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            outfile.write(' _instances=%s' % (self.gds_format_string(quote_attrib(self._instances).encode(ExternalEncoding), input_name='_instances'), ))
        if self._archetype is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            outfile.write(' _archetype=%s' % (self.gds_format_string(quote_attrib(self._archetype).encode(ExternalEncoding), input_name='_archetype'), ))
        if self._id is not None and '_id' not in already_processed:
            already_processed.add('_id')
            outfile.write(' _id=%s' % (self.gds_format_string(quote_attrib(self._id).encode(ExternalEncoding), input_name='_id'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='CADComponentType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for CADComponent_ in self.CADComponent:
            CADComponent_.export(outfile, level, namespace_, name_='CADComponent', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='CADComponentType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self._derived is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            showIndent(outfile, level)
            outfile.write('_derived="%s",\n' % (self._derived,))
        if self._real_archetype is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            showIndent(outfile, level)
            outfile.write('_real_archetype=%s,\n' % (self._real_archetype,))
        if self._desynched_atts is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            showIndent(outfile, level)
            outfile.write('_desynched_atts="%s",\n' % (self._desynched_atts,))
        if self.ComponentInstanceID is not None and 'ComponentInstanceID' not in already_processed:
            already_processed.add('ComponentInstanceID')
            showIndent(outfile, level)
            outfile.write('ComponentInstanceID="%s",\n' % (self.ComponentInstanceID,))
        if self.MetricID is not None and 'MetricID' not in already_processed:
            already_processed.add('MetricID')
            showIndent(outfile, level)
            outfile.write('MetricID=%d,\n' % (self.MetricID,))
        if self._subtype is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            showIndent(outfile, level)
            outfile.write('_subtype=%s,\n' % (self._subtype,))
        if self._instances is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            showIndent(outfile, level)
            outfile.write('_instances="%s",\n' % (self._instances,))
        if self._archetype is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            showIndent(outfile, level)
            outfile.write('_archetype="%s",\n' % (self._archetype,))
        if self._id is not None and '_id' not in already_processed:
            already_processed.add('_id')
            showIndent(outfile, level)
            outfile.write('_id="%s",\n' % (self._id,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('CADComponent=[\n')
        level += 1
        for CADComponent_ in self.CADComponent:
            showIndent(outfile, level)
            outfile.write('model_.CADComponentType(\n')
            CADComponent_.exportLiteral(outfile, level, name_='CADComponentType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('_derived', node)
        if value is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            self._derived = value
        value = find_attr_value_('_real_archetype', node)
        if value is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            if value in ('true', '1'):
                self._real_archetype = True
            elif value in ('false', '0'):
                self._real_archetype = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('_desynched_atts', node)
        if value is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            self._desynched_atts = value
        value = find_attr_value_('ComponentInstanceID', node)
        if value is not None and 'ComponentInstanceID' not in already_processed:
            already_processed.add('ComponentInstanceID')
            self.ComponentInstanceID = value
        value = find_attr_value_('MetricID', node)
        if value is not None and 'MetricID' not in already_processed:
            already_processed.add('MetricID')
            try:
                self.MetricID = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('_subtype', node)
        if value is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            if value in ('true', '1'):
                self._subtype = True
            elif value in ('false', '0'):
                self._subtype = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('_instances', node)
        if value is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            self._instances = value
        value = find_attr_value_('_archetype', node)
        if value is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            self._archetype = value
        value = find_attr_value_('_id', node)
        if value is not None and '_id' not in already_processed:
            already_processed.add('_id')
            self._id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CADComponent':
            obj_ = CADComponentType.factory()
            obj_.build(child_)
            self.CADComponent.append(obj_)
            obj_.original_tagname_ = 'CADComponent'
# end class CADComponentType


class CADMetricRootType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, _derived=None, _id=None, _real_archetype=None, _archetype=None, _subtype=None, _instances=None, _desynched_atts=None, VersionInfo=None, _libname=None, Anomalies=None, Assemblies=None, Joints=None, MetricComponents=None, CADMetricRoot=None):
        self.original_tagname_ = None
        self._derived = _cast(None, _derived)
        self._id = _cast(None, _id)
        self._real_archetype = _cast(bool, _real_archetype)
        self._archetype = _cast(None, _archetype)
        self._subtype = _cast(bool, _subtype)
        self._instances = _cast(None, _instances)
        self._desynched_atts = _cast(None, _desynched_atts)
        self.VersionInfo = _cast(None, VersionInfo)
        self._libname = _cast(None, _libname)
        self.Anomalies = Anomalies
        self.Assemblies = Assemblies
        self.Joints = Joints
        self.MetricComponents = MetricComponents
        if CADMetricRoot is None:
            self.CADMetricRoot = []
        else:
            self.CADMetricRoot = CADMetricRoot
    def factory(*args_, **kwargs_):
        if CADMetricRootType.subclass:
            return CADMetricRootType.subclass(*args_, **kwargs_)
        else:
            return CADMetricRootType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Anomalies(self): return self.Anomalies
    def set_Anomalies(self, Anomalies): self.Anomalies = Anomalies
    def get_Assemblies(self): return self.Assemblies
    def set_Assemblies(self, Assemblies): self.Assemblies = Assemblies
    def get_Joints(self): return self.Joints
    def set_Joints(self, Joints): self.Joints = Joints
    def get_MetricComponents(self): return self.MetricComponents
    def set_MetricComponents(self, MetricComponents): self.MetricComponents = MetricComponents
    def get_CADMetricRoot(self): return self.CADMetricRoot
    def set_CADMetricRoot(self, CADMetricRoot): self.CADMetricRoot = CADMetricRoot
    def add_CADMetricRoot(self, value): self.CADMetricRoot.append(value)
    def insert_CADMetricRoot(self, index, value): self.CADMetricRoot[index] = value
    def get__derived(self): return self._derived
    def set__derived(self, _derived): self._derived = _derived
    def get__id(self): return self._id
    def set__id(self, _id): self._id = _id
    def get__real_archetype(self): return self._real_archetype
    def set__real_archetype(self, _real_archetype): self._real_archetype = _real_archetype
    def get__archetype(self): return self._archetype
    def set__archetype(self, _archetype): self._archetype = _archetype
    def get__subtype(self): return self._subtype
    def set__subtype(self, _subtype): self._subtype = _subtype
    def get__instances(self): return self._instances
    def set__instances(self, _instances): self._instances = _instances
    def get__desynched_atts(self): return self._desynched_atts
    def set__desynched_atts(self, _desynched_atts): self._desynched_atts = _desynched_atts
    def get_VersionInfo(self): return self.VersionInfo
    def set_VersionInfo(self, VersionInfo): self.VersionInfo = VersionInfo
    def get__libname(self): return self._libname
    def set__libname(self, _libname): self._libname = _libname
    def hasContent_(self):
        if (
            self.Anomalies is not None or
            self.Assemblies is not None or
            self.Joints is not None or
            self.MetricComponents is not None or
            self.CADMetricRoot
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CADMetricRootType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CADMetricRootType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CADMetricRootType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CADMetricRootType'):
        if self._derived is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            outfile.write(' _derived=%s' % (self.gds_format_string(quote_attrib(self._derived).encode(ExternalEncoding), input_name='_derived'), ))
        if self._id is not None and '_id' not in already_processed:
            already_processed.add('_id')
            outfile.write(' _id=%s' % (self.gds_format_string(quote_attrib(self._id).encode(ExternalEncoding), input_name='_id'), ))
        if self._real_archetype is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            outfile.write(' _real_archetype="%s"' % self.gds_format_boolean(self._real_archetype, input_name='_real_archetype'))
        if self._archetype is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            outfile.write(' _archetype=%s' % (self.gds_format_string(quote_attrib(self._archetype).encode(ExternalEncoding), input_name='_archetype'), ))
        if self._subtype is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            outfile.write(' _subtype="%s"' % self.gds_format_boolean(self._subtype, input_name='_subtype'))
        if self._instances is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            outfile.write(' _instances=%s' % (self.gds_format_string(quote_attrib(self._instances).encode(ExternalEncoding), input_name='_instances'), ))
        if self._desynched_atts is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            outfile.write(' _desynched_atts=%s' % (self.gds_format_string(quote_attrib(self._desynched_atts).encode(ExternalEncoding), input_name='_desynched_atts'), ))
        if self.VersionInfo is not None and 'VersionInfo' not in already_processed:
            already_processed.add('VersionInfo')
            outfile.write(' VersionInfo=%s' % (self.gds_format_string(quote_attrib(self.VersionInfo).encode(ExternalEncoding), input_name='VersionInfo'), ))
        if self._libname is not None and '_libname' not in already_processed:
            already_processed.add('_libname')
            outfile.write(' _libname=%s' % (self.gds_format_string(quote_attrib(self._libname).encode(ExternalEncoding), input_name='_libname'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='CADMetricRootType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Anomalies is not None:
            self.Anomalies.export(outfile, level, namespace_, name_='Anomalies', pretty_print=pretty_print)
        if self.Assemblies is not None:
            self.Assemblies.export(outfile, level, namespace_, name_='Assemblies', pretty_print=pretty_print)
        if self.Joints is not None:
            self.Joints.export(outfile, level, namespace_, name_='Joints', pretty_print=pretty_print)
        if self.MetricComponents is not None:
            self.MetricComponents.export(outfile, level, namespace_, name_='MetricComponents', pretty_print=pretty_print)
        for CADMetricRoot_ in self.CADMetricRoot:
            CADMetricRoot_.export(outfile, level, namespace_, name_='CADMetricRoot', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='CADMetricRootType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self._derived is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            showIndent(outfile, level)
            outfile.write('_derived="%s",\n' % (self._derived,))
        if self._id is not None and '_id' not in already_processed:
            already_processed.add('_id')
            showIndent(outfile, level)
            outfile.write('_id="%s",\n' % (self._id,))
        if self._real_archetype is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            showIndent(outfile, level)
            outfile.write('_real_archetype=%s,\n' % (self._real_archetype,))
        if self._archetype is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            showIndent(outfile, level)
            outfile.write('_archetype="%s",\n' % (self._archetype,))
        if self._subtype is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            showIndent(outfile, level)
            outfile.write('_subtype=%s,\n' % (self._subtype,))
        if self._instances is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            showIndent(outfile, level)
            outfile.write('_instances="%s",\n' % (self._instances,))
        if self._desynched_atts is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            showIndent(outfile, level)
            outfile.write('_desynched_atts="%s",\n' % (self._desynched_atts,))
        if self.VersionInfo is not None and 'VersionInfo' not in already_processed:
            already_processed.add('VersionInfo')
            showIndent(outfile, level)
            outfile.write('VersionInfo="%s",\n' % (self.VersionInfo,))
        if self._libname is not None and '_libname' not in already_processed:
            already_processed.add('_libname')
            showIndent(outfile, level)
            outfile.write('_libname="%s",\n' % (self._libname,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Anomalies is not None:
            showIndent(outfile, level)
            outfile.write('Anomalies=model_.AnomaliesType(\n')
            self.Anomalies.exportLiteral(outfile, level, name_='Anomalies')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Assemblies is not None:
            showIndent(outfile, level)
            outfile.write('Assemblies=model_.AssembliesType(\n')
            self.Assemblies.exportLiteral(outfile, level, name_='Assemblies')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Joints is not None:
            showIndent(outfile, level)
            outfile.write('Joints=model_.JointsType(\n')
            self.Joints.exportLiteral(outfile, level, name_='Joints')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.MetricComponents is not None:
            showIndent(outfile, level)
            outfile.write('MetricComponents=model_.MetricComponentsType(\n')
            self.MetricComponents.exportLiteral(outfile, level, name_='MetricComponents')
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('CADMetricRoot=[\n')
        level += 1
        for CADMetricRoot_ in self.CADMetricRoot:
            showIndent(outfile, level)
            outfile.write('model_.CADMetricRootType(\n')
            CADMetricRoot_.exportLiteral(outfile, level, name_='CADMetricRootType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('_derived', node)
        if value is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            self._derived = value
        value = find_attr_value_('_id', node)
        if value is not None and '_id' not in already_processed:
            already_processed.add('_id')
            self._id = value
        value = find_attr_value_('_real_archetype', node)
        if value is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            if value in ('true', '1'):
                self._real_archetype = True
            elif value in ('false', '0'):
                self._real_archetype = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('_archetype', node)
        if value is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            self._archetype = value
        value = find_attr_value_('_subtype', node)
        if value is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            if value in ('true', '1'):
                self._subtype = True
            elif value in ('false', '0'):
                self._subtype = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('_instances', node)
        if value is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            self._instances = value
        value = find_attr_value_('_desynched_atts', node)
        if value is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            self._desynched_atts = value
        value = find_attr_value_('VersionInfo', node)
        if value is not None and 'VersionInfo' not in already_processed:
            already_processed.add('VersionInfo')
            self.VersionInfo = value
        value = find_attr_value_('_libname', node)
        if value is not None and '_libname' not in already_processed:
            already_processed.add('_libname')
            self._libname = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Anomalies':
            obj_ = AnomaliesType.factory()
            obj_.build(child_)
            self.Anomalies = obj_
            obj_.original_tagname_ = 'Anomalies'
        elif nodeName_ == 'Assemblies':
            obj_ = AssembliesType.factory()
            obj_.build(child_)
            self.Assemblies = obj_
            obj_.original_tagname_ = 'Assemblies'
        elif nodeName_ == 'Joints':
            obj_ = JointsType.factory()
            obj_.build(child_)
            self.Joints = obj_
            obj_.original_tagname_ = 'Joints'
        elif nodeName_ == 'MetricComponents':
            obj_ = MetricComponentsType.factory()
            obj_.build(child_)
            self.MetricComponents = obj_
            obj_.original_tagname_ = 'MetricComponents'
        elif nodeName_ == 'CADMetricRoot':
            obj_ = CADMetricRootType.factory()
            obj_.build(child_)
            self.CADMetricRoot.append(obj_)
            obj_.original_tagname_ = 'CADMetricRoot'
# end class CADMetricRootType


GDSClassesMapping = {
    'Rows': RowsType,
    'CADMetricRoot': CADMetricRootType,
    'JointsMetaData': JointsMetaDataType,
    'ChildMetric': ChildMetricType,
    'Location': LocationType,
    'Units': UnitsType,
    'Anomaly': AnomalyType,
    'GlobalCoordinateSystem': GlobalCoordinateSystemType,
    'InertiaTensor': InertiaTensorType,
    'Assembly': AssemblyType,
    'Scalars': ScalarsType,
    'Material': MaterialType,
    'CADComponent': CADComponentType,
    'Joint': JointType,
    'ComponentCoordinateSystem': ComponentCoordinateSystemType,
    'Rotation': RotationType,
    'Assemblies': AssembliesType,
    'CADJointComponent': CADJointComponentType,
    'Anomalies': AnomaliesType,
    'PrincipleMomentsOfInertia': PrincipleMomentsOfInertiaType,
    'Column': ColumnType,
    'ConstrainedToComponent': ConstrainedToComponentType,
    'CG': CGType,
    'MetricComponent': MetricComponentType,
    'Translation': TranslationType,
    'MetricComponents': MetricComponentsType,
    'Orientation': OrientationType,
    'Point': PointType,
    'Joints': JointsType,
    'RotationMatrix': RotationMatrixType,
    'ConstrainedToComponents': ConstrainedToComponentsType,
    'Scalar': ScalarType,
    'OutlinePoints': OutlinePointsType,
    'BoundingBox': BoundingBoxType,
    'ComponentInstanceData': ComponentInstanceDataType,
    'Children': ChildrenType,
    'Row': RowType,
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName, silence=False):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'ComponentInstanceDataType'
        rootClass = ComponentInstanceDataType
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='',
            pretty_print=True)
    return rootObj


def parseEtree(inFileName, silence=False):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'ComponentInstanceDataType'
        rootClass = ComponentInstanceDataType
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(content)
        sys.stdout.write('\n')
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False):
    from StringIO import StringIO
    doc = parsexml_(StringIO(inString))
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'ComponentInstanceDataType'
        rootClass = ComponentInstanceDataType
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='')
    return rootObj


def parseLiteral(inFileName, silence=False):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'ComponentInstanceDataType'
        rootClass = ComponentInstanceDataType
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('#from aa import *\n\n')
        sys.stdout.write('import aa as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "AnomaliesType",
    "AnomalyType",
    "AssembliesType",
    "AssemblyType",
    "BoundingBoxType",
    "CADComponentType",
    "CADJointComponentType",
    "CADMetricRootType",
    "CGType",
    "ChildMetricType",
    "ChildrenType",
    "ColumnType",
    "ComponentCoordinateSystemType",
    "ComponentInstanceDataType",
    "ConstrainedToComponentType",
    "ConstrainedToComponentsType",
    "GlobalCoordinateSystemType",
    "InertiaTensorType",
    "JointType",
    "JointsMetaDataType",
    "JointsType",
    "LocationType",
    "MaterialType",
    "MetricComponentType",
    "MetricComponentsType",
    "OrientationType",
    "OutlinePointsType",
    "PointType",
    "PrincipleMomentsOfInertiaType",
    "RotationMatrixType",
    "RotationType",
    "RowType",
    "RowsType",
    "ScalarType",
    "ScalarsType",
    "TranslationType",
    "UnitsType"
]
