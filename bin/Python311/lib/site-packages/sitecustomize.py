import sys
import os
import os.path

if os.path.normcase(os.environ.get('ProgramFiles', 'C:\\Program Files')) not in os.path.normcase(os.path.abspath(__file__)):
    import glob
    for entry in glob.glob(os.path.join(os.path.dirname(os.path.abspath(__file__)), r"../../../../src/Python27Packages") + "/*"):
        if os.path.isdir(entry):
            sys.path.append(os.path.normpath(entry))
    sys.path.append(os.path.normpath(os.path.join(os.path.dirname(os.path.abspath(__file__)), r"../../../../src/Python27Packages")))
    sys.path.append(os.path.normpath(os.path.join(os.path.dirname(os.path.abspath(__file__)), r"../../../../src")))
    sys.path.append(os.path.normpath(os.path.join(os.path.dirname(os.path.abspath(__file__)), r"../../../../meta/DesignDataPackage/lib/python")))

_this_dir = os.path.dirname(os.path.abspath(__file__))

# import glob, os.path
# ', '.join(["'{}'".format(os.path.basename(f)[:-4]) for f in glob.glob('bin/python27/lib/site-packages/win32/*pyd')])
_win32api_modules = set(('mmapfile', 'odbc', 'perfmon', 'servicemanager', 'timer', 'win2kras', 'win32api', 'win32clipboard', 'win32console', 'win32cred', 'win32crypt', 'win32event', 'win32evtlog', 'win32file', 'win32gui', 'win32help', 'win32inet', 'win32job', 'win32lz', 'win32net', 'win32pdh', 'win32pipe', 'win32print', 'win32process', 'win32profile', 'win32ras', 'win32security', 'win32service', 'win32trace', 'win32transaction', 'win32ts', 'win32wnet', 'winxpgui', '_win32sysloader', '_winxptheme'))

class PythonComLoader(object):
    """
    pythoncom.py calls LoadLibrary("pythoncom27.dll"), which will load via %PATH%
    Anaconda's pythoncom27.dll (for one) doesn't include the correct SxS activation info, so trying to load it results in "An application has made an attempt to load the C runtime library incorrectly."
    load our pythoncom27.dll(which we know works) with an explicit path

    For win32api.pyd et al, we need to load our pywintypes27.dll first, so we don't load from SysWOW64 or Anaconda.

    pywintypes.py from pywin32 has some magic to load the correct pywintypes27, but it doesn't appear to work.
    """

    def find_module(self, fullname, path=None):
        if fullname == 'pythoncom':
            return self
        if fullname != '_win32sysloader' and fullname in _win32api_modules:
            # n.b. use _win32sysloader instead of ctypes, since we will definitely load the former, but maybe not the latter
            import _win32sysloader
            # just a LoadLibrary; if needed as a Python module, it will be loaded later
            _win32sysloader.LoadModule(os.path.join(_this_dir, 'pywin32_system32', 'pywintypes' + ''.join(map(str, sys.version_info[0:2])) + '.dll'))
        return None

    def load_module(self, name):
        if name in sys.modules:
            return sys.modules[name]
        import imp
        import traceback
        if name == 'pythoncom':
            try:
                # pywin32 version 223
                return imp.load_dynamic('pythoncom', os.path.join(_this_dir, 'pywin32_system32', 'pythoncom' + ''.join(map(str, sys.version_info[0:2])) + '.dll'))
            except Exception as e:
                # maybe the user downgraded pywin32. Print the error to show something is wrong
                traceback.print_exc()
            # pywin32 version 220
            import afxres
            return imp.load_dynamic('pythoncom', os.path.join(os.path.dirname(afxres.__file__), 'pythoncom' + ''.join(map(str, sys.version_info[0:2])) + '.dll'))

sys.meta_path.append(PythonComLoader())
