# lextab.py. This file automatically created by PLY (version 3.8). Don't edit!
import re
_tabversion   = '3.8'
_lextokens    = {'FUNCTION', 'UNWIND_PROTECT_CLEANUP', 'MINUS', 'LBRACE', 'MINUSMINUS', 'DOTEXP', 'EQ', 'MUL', 'DOTDIV', 'PLUS', 'EXPEQ', 'LE', 'EXP', 'RETURN', 'MINUSEQ', 'PLUSPLUS', 'RBRACE', 'GLOBAL', 'TRY', 'NUMBER', 'ANDAND', 'DOTDIVEQ', 'TRANSPOSE', 'LBRACKET', 'FOR', 'SWITCH', 'COMMENT', 'MULEQ', 'OR', 'SEMI', 'HANDLE', 'CATCH', 'COMMA', 'OREQ', 'RBRACKET', 'END_EXPR', 'BACKSLASH', 'END_STMT', 'END_UNWIND_PROTECT', 'GT', 'ANDEQ', 'UNWIND_PROTECT', 'CASE', 'RPAREN', 'NEG', 'STRING', 'LT', 'FIELD', 'GE', 'DOT', 'OROR', 'CONTINUE', 'LPAREN', 'COLON', 'DIVEQ', 'IDENT', 'ELSE', 'IF', 'DOTMUL', 'PERSISTENT', 'EQEQ', 'PLUSEQ', 'ELSEIF', 'WHILE', 'DIV', 'DOTMULEQ', 'AND', 'NE', 'BREAK', 'OTHERWISE'}
_lexreflags   = re.IGNORECASE
_lexliterals  = ''
_lexstateinfo = {'INITIAL': 'inclusive', 'matrix': 'inclusive', 'afterkeyword': 'exclusive', 'comment': 'exclusive'}
_lexstatere   = {'INITIAL': [('(?P<t_TRANSPOSE>(?<=\\w|\\]|\\)|\\})((\\.\')|\')+)|(?P<t_STRING>("([^"\\a\\b\\f\\r\\t\\0\\v\\n\\\\]|(\\\\[abfn0vtr\\"\\n\\\\])|(""))*")|(\'([^\']|(\'\'))*\'))|(?P<t_IDENT>(\\.(\\s|(\\#|%)[^\\n]*\\n|\\.\\.\\.[^\\n]*\\n|\\\\\\n)*)?[a-zA-Z_][a-zA-Z_0-9]*)|(?P<t_LPAREN>\\()|(?P<t_RPAREN>\\))|(?P<t_RBRACKET>(\\s|(\\#|%)[^\\n]*\\n|\\.\\.\\.[^\\n]*\\n|\\\\\\n)*\\])|(?P<t_LBRACKET>\\[(\\s|(\\#|%)[^\\n]*\\n|\\.\\.\\.[^\\n]*\\n|\\\\\\n)*)|(?P<t_RBRACE>(\\s|(\\#|%)[^\\n]*\\n|\\.\\.\\.[^\\n]*\\n|\\\\\\n)*\\})|(?P<t_LBRACE>\\{(\\s|(\\#|%)[^\\n]*\\n|\\.\\.\\.[^\\n]*\\n|\\\\\\n)*)|(?P<t_COMMA>,(\\s|(\\#|%)[^\\n]*\\n|\\.\\.\\.[^\\n]*\\n|\\\\\\n)*)|(?P<t_SEMI>\\;(\\s|(\\#|%)[^\\n]*\\n|\\.\\.\\.[^\\n]*\\n|\\\\\\n)*)|(?P<t_NUMBER>(0x[0-9A-Fa-f]+)|((\\d+(\\.\\d*)?|\\.\\d+)([eE][-+]?\\d+)?[ij]?))|(?P<t_NEWLINE>\\n+)|(?P<t_comment>(%|\\#)(?!{)[^\\n]*)|(?P<t_multicomment>%\\{)|(?P<t_ELLIPSIS>\\.\\.\\.[^\\n]*\\n)|(?P<t_SPACES>(\\\\\\n|[ \\t\\r])+)|(?P<t_NE>(~=)|(!=))|(?P<t_DOTMULEQ>\\.\\*=)|(?P<t_NEG>\\~|\\!)|(?P<t_ANDAND>\\&\\&)|(?P<t_DOTDIVEQ>\\./=)|(?P<t_DOTEXP>\\.\\^)|(?P<t_DOTMUL>\\.\\*)|(?P<t_OROR>\\|\\|)|(?P<t_PLUSPLUS>\\+\\+)|(?P<t_ANDEQ>\\&=)|(?P<t_DIVEQ>\\/=)|(?P<t_DOTDIV>\\./)|(?P<t_EXPEQ>\\^=)|(?P<t_MINUSEQ>\\-=)|(?P<t_MINUSMINUS>\\--)|(?P<t_MULEQ>\\*=)|(?P<t_OREQ>\\|=)|(?P<t_PLUSEQ>\\+=)|(?P<t_AND>\\&)|(?P<t_BACKSLASH>\\\\)|(?P<t_DIV>\\/)|(?P<t_DOT>\\.)|(?P<t_EQEQ>==)|(?P<t_EXP>\\^)|(?P<t_GE>>=)|(?P<t_GT>\\>)|(?P<t_HANDLE>\\@)|(?P<t_LE><=)|(?P<t_LT>\\<)|(?P<t_MINUS>\\-)|(?P<t_MUL>\\*)|(?P<t_OR>\\|)|(?P<t_PLUS>\\+)|(?P<t_COLON>:)|(?P<t_EQ>=)', [None, ('t_TRANSPOSE', 'TRANSPOSE'), None, None, ('t_STRING', 'STRING'), None, None, None, None, None, None, None, ('t_IDENT', 'IDENT'), None, None, None, ('t_LPAREN', 'LPAREN'), ('t_RPAREN', 'RPAREN'), ('t_RBRACKET', 'RBRACKET'), None, None, ('t_LBRACKET', 'LBRACKET'), None, None, ('t_RBRACE', 'RBRACE'), None, None, ('t_LBRACE', 'LBRACE'), None, None, ('t_COMMA', 'COMMA'), None, None, ('t_SEMI', 'SEMI'), None, None, ('t_NUMBER', 'NUMBER'), None, None, None, None, None, ('t_NEWLINE', 'NEWLINE'), ('t_comment', 'comment'), None, ('t_multicomment', 'multicomment'), ('t_ELLIPSIS', 'ELLIPSIS'), ('t_SPACES', 'SPACES'), None, (None, 'NE'), None, None, (None, 'DOTMULEQ'), (None, 'NEG'), (None, 'ANDAND'), (None, 'DOTDIVEQ'), (None, 'DOTEXP'), (None, 'DOTMUL'), (None, 'OROR'), (None, 'PLUSPLUS'), (None, 'ANDEQ'), (None, 'DIVEQ'), (None, 'DOTDIV'), (None, 'EXPEQ'), (None, 'MINUSEQ'), (None, 'MINUSMINUS'), (None, 'MULEQ'), (None, 'OREQ'), (None, 'PLUSEQ'), (None, 'AND'), (None, 'BACKSLASH'), (None, 'DIV'), (None, 'DOT'), (None, 'EQEQ'), (None, 'EXP'), (None, 'GE'), (None, 'GT'), (None, 'HANDLE'), (None, 'LE'), (None, 'LT'), (None, 'MINUS'), (None, 'MUL'), (None, 'OR'), (None, 'PLUS'), (None, 'COLON'), (None, 'EQ')])], 'matrix': [('(?P<t_matrix_BAR>(?<=\\w)(\\s|(\\#|%)[^\\n]*\\n|\\.\\.\\.[^\\n]*\\n|\\\\\\n)+(?=\\())|(?P<t_matrix_FOO>(?<=[])}\'\\".]|\\w)(\\s|(\\#|%)[^\\n]*\\n|\\.\\.\\.[^\\n]*\\n|\\\\\\n)+(?=[-+]?([[({\'\\"]|\\w|\\.\\d)))', [None, ('t_matrix_BAR', 'BAR'), None, None, ('t_matrix_FOO', 'FOO')]), ('(?P<t_TRANSPOSE>(?<=\\w|\\]|\\)|\\})((\\.\')|\')+)|(?P<t_STRING>("([^"\\a\\b\\f\\r\\t\\0\\v\\n\\\\]|(\\\\[abfn0vtr\\"\\n\\\\])|(""))*")|(\'([^\']|(\'\'))*\'))|(?P<t_IDENT>(\\.(\\s|(\\#|%)[^\\n]*\\n|\\.\\.\\.[^\\n]*\\n|\\\\\\n)*)?[a-zA-Z_][a-zA-Z_0-9]*)|(?P<t_LPAREN>\\()|(?P<t_RPAREN>\\))|(?P<t_RBRACKET>(\\s|(\\#|%)[^\\n]*\\n|\\.\\.\\.[^\\n]*\\n|\\\\\\n)*\\])|(?P<t_LBRACKET>\\[(\\s|(\\#|%)[^\\n]*\\n|\\.\\.\\.[^\\n]*\\n|\\\\\\n)*)|(?P<t_RBRACE>(\\s|(\\#|%)[^\\n]*\\n|\\.\\.\\.[^\\n]*\\n|\\\\\\n)*\\})|(?P<t_LBRACE>\\{(\\s|(\\#|%)[^\\n]*\\n|\\.\\.\\.[^\\n]*\\n|\\\\\\n)*)|(?P<t_COMMA>,(\\s|(\\#|%)[^\\n]*\\n|\\.\\.\\.[^\\n]*\\n|\\\\\\n)*)|(?P<t_SEMI>\\;(\\s|(\\#|%)[^\\n]*\\n|\\.\\.\\.[^\\n]*\\n|\\\\\\n)*)|(?P<t_NUMBER>(0x[0-9A-Fa-f]+)|((\\d+(\\.\\d*)?|\\.\\d+)([eE][-+]?\\d+)?[ij]?))|(?P<t_NEWLINE>\\n+)|(?P<t_comment>(%|\\#)(?!{)[^\\n]*)|(?P<t_multicomment>%\\{)|(?P<t_ELLIPSIS>\\.\\.\\.[^\\n]*\\n)|(?P<t_SPACES>(\\\\\\n|[ \\t\\r])+)|(?P<t_NE>(~=)|(!=))|(?P<t_DOTMULEQ>\\.\\*=)|(?P<t_NEG>\\~|\\!)|(?P<t_ANDAND>\\&\\&)|(?P<t_DOTDIVEQ>\\./=)|(?P<t_DOTEXP>\\.\\^)|(?P<t_DOTMUL>\\.\\*)|(?P<t_OROR>\\|\\|)|(?P<t_PLUSPLUS>\\+\\+)|(?P<t_ANDEQ>\\&=)|(?P<t_DIVEQ>\\/=)|(?P<t_DOTDIV>\\./)|(?P<t_EXPEQ>\\^=)|(?P<t_MINUSEQ>\\-=)|(?P<t_MINUSMINUS>\\--)|(?P<t_MULEQ>\\*=)|(?P<t_OREQ>\\|=)|(?P<t_PLUSEQ>\\+=)|(?P<t_AND>\\&)|(?P<t_BACKSLASH>\\\\)|(?P<t_DIV>\\/)|(?P<t_DOT>\\.)|(?P<t_EQEQ>==)|(?P<t_EXP>\\^)|(?P<t_GE>>=)|(?P<t_GT>\\>)|(?P<t_HANDLE>\\@)|(?P<t_LE><=)|(?P<t_LT>\\<)|(?P<t_MINUS>\\-)|(?P<t_MUL>\\*)|(?P<t_OR>\\|)|(?P<t_PLUS>\\+)|(?P<t_COLON>:)|(?P<t_EQ>=)', [None, ('t_TRANSPOSE', 'TRANSPOSE'), None, None, ('t_STRING', 'STRING'), None, None, None, None, None, None, None, ('t_IDENT', 'IDENT'), None, None, None, ('t_LPAREN', 'LPAREN'), ('t_RPAREN', 'RPAREN'), ('t_RBRACKET', 'RBRACKET'), None, None, ('t_LBRACKET', 'LBRACKET'), None, None, ('t_RBRACE', 'RBRACE'), None, None, ('t_LBRACE', 'LBRACE'), None, None, ('t_COMMA', 'COMMA'), None, None, ('t_SEMI', 'SEMI'), None, None, ('t_NUMBER', 'NUMBER'), None, None, None, None, None, ('t_NEWLINE', 'NEWLINE'), ('t_comment', 'comment'), None, ('t_multicomment', 'multicomment'), ('t_ELLIPSIS', 'ELLIPSIS'), ('t_SPACES', 'SPACES'), None, (None, 'NE'), None, None, (None, 'DOTMULEQ'), (None, 'NEG'), (None, 'ANDAND'), (None, 'DOTDIVEQ'), (None, 'DOTEXP'), (None, 'DOTMUL'), (None, 'OROR'), (None, 'PLUSPLUS'), (None, 'ANDEQ'), (None, 'DIVEQ'), (None, 'DOTDIV'), (None, 'EXPEQ'), (None, 'MINUSEQ'), (None, 'MINUSMINUS'), (None, 'MULEQ'), (None, 'OREQ'), (None, 'PLUSEQ'), (None, 'AND'), (None, 'BACKSLASH'), (None, 'DIV'), (None, 'DOT'), (None, 'EQEQ'), (None, 'EXP'), (None, 'GE'), (None, 'GT'), (None, 'HANDLE'), (None, 'LE'), (None, 'LT'), (None, 'MINUS'), (None, 'MUL'), (None, 'OR'), (None, 'PLUS'), (None, 'COLON'), (None, 'EQ')])], 'afterkeyword': [('(?P<t_afterkeyword_STRING>("([^"\\a\\b\\f\\r\\t\\0\\v\\n\\\\]|(\\\\[abfn0vtr\\"\\n\\\\])|(""))*")|(\'([^\']|(\'\'))*\'))', [None, ('t_afterkeyword_STRING', 'STRING')])], 'comment': [('(?P<t_comment_contents>(?!%\\}).*\\n)|(?P<t_comment_end>%\\})', [None, ('t_comment_contents', 'contents'), ('t_comment_end', 'end')])]}
_lexstateignore = {'INITIAL': '', 'matrix': ''}
_lexstateerrorf = {'afterkeyword': 't_afterkeyword_error', 'comment': 't_comment_error', 'INITIAL': 't_error', 'matrix': 't_error'}
_lexstateeoff = {}
