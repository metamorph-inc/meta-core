# Python stubs generated by omniidl from ..\..\..\..\..\idl\COS\CosCollection.idl
# DO NOT EDIT THIS FILE!

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA


_omnipy.checkVersion(4,2, __file__, 1)

try:
    property
except NameError:
    def property(*args):
        return None


# #include "corbaidl.idl"
import corbaidl_idl
_0_CORBA = omniORB.openModule("CORBA")
_0_CORBA__POA = omniORB.openModule("CORBA__POA")

# #include "boxes.idl"
import boxes_idl
_0_CORBA = omniORB.openModule("CORBA")
_0_CORBA__POA = omniORB.openModule("CORBA__POA")

#
# Start of module "CosCollection"
#
__name__ = "CosCollection"
_0_CosCollection = omniORB.openModule("CosCollection", r"..\..\..\..\..\idl\COS\CosCollection.idl")
_0_CosCollection__POA = omniORB.openModule("CosCollection__POA", r"..\..\..\..\..\idl\COS\CosCollection.idl")


# forward interface Collection;
_0_CosCollection._d_Collection = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosCollection/Collection:1.0", "Collection")
omniORB.typeMapping["IDL:omg.org/CosCollection/Collection:1.0"] = _0_CosCollection._d_Collection

# typedef ... AnySequence
class AnySequence:
    _NP_RepositoryId = "IDL:omg.org/CosCollection/AnySequence:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_CosCollection.AnySequence = AnySequence
_0_CosCollection._d_AnySequence  = (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_any, 0)
_0_CosCollection._ad_AnySequence = (omniORB.tcInternal.tv_alias, AnySequence._NP_RepositoryId, "AnySequence", (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_any, 0))
_0_CosCollection._tc_AnySequence = omniORB.tcInternal.createTypeCode(_0_CosCollection._ad_AnySequence)
omniORB.registerType(AnySequence._NP_RepositoryId, _0_CosCollection._ad_AnySequence, _0_CosCollection._tc_AnySequence)
del AnySequence

# typedef ... Istring
class Istring:
    _NP_RepositoryId = "IDL:omg.org/CosCollection/Istring:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_CosCollection.Istring = Istring
_0_CosCollection._d_Istring  = (omniORB.tcInternal.tv_string,0)
_0_CosCollection._ad_Istring = (omniORB.tcInternal.tv_alias, Istring._NP_RepositoryId, "Istring", (omniORB.tcInternal.tv_string,0))
_0_CosCollection._tc_Istring = omniORB.tcInternal.createTypeCode(_0_CosCollection._ad_Istring)
omniORB.registerType(Istring._NP_RepositoryId, _0_CosCollection._ad_Istring, _0_CosCollection._tc_Istring)
del Istring

# struct NVPair
_0_CosCollection.NVPair = omniORB.newEmptyClass()
class NVPair (omniORB.StructBase):
    _NP_RepositoryId = "IDL:omg.org/CosCollection/NVPair:1.0"

    def __init__(self, name, value):
        self.name = name
        self.value = value

_0_CosCollection.NVPair = NVPair
_0_CosCollection._d_NVPair  = (omniORB.tcInternal.tv_struct, NVPair, NVPair._NP_RepositoryId, "NVPair", "name", omniORB.typeMapping["IDL:omg.org/CosCollection/Istring:1.0"], "value", omniORB.tcInternal.tv_any)
_0_CosCollection._tc_NVPair = omniORB.tcInternal.createTypeCode(_0_CosCollection._d_NVPair)
omniORB.registerType(NVPair._NP_RepositoryId, _0_CosCollection._d_NVPair, _0_CosCollection._tc_NVPair)
del NVPair

# typedef ... ParameterList
class ParameterList:
    _NP_RepositoryId = "IDL:omg.org/CosCollection/ParameterList:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_CosCollection.ParameterList = ParameterList
_0_CosCollection._d_ParameterList  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:omg.org/CosCollection/NVPair:1.0"], 0)
_0_CosCollection._ad_ParameterList = (omniORB.tcInternal.tv_alias, ParameterList._NP_RepositoryId, "ParameterList", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:omg.org/CosCollection/NVPair:1.0"], 0))
_0_CosCollection._tc_ParameterList = omniORB.tcInternal.createTypeCode(_0_CosCollection._ad_ParameterList)
omniORB.registerType(ParameterList._NP_RepositoryId, _0_CosCollection._ad_ParameterList, _0_CosCollection._tc_ParameterList)
del ParameterList

# exception EmptyCollection
_0_CosCollection.EmptyCollection = omniORB.newEmptyClass()
class EmptyCollection (CORBA.UserException):
    _NP_RepositoryId = "IDL:omg.org/CosCollection/EmptyCollection:1.0"

    def __init__(self):
        CORBA.UserException.__init__(self)

_0_CosCollection.EmptyCollection = EmptyCollection
_0_CosCollection._d_EmptyCollection  = (omniORB.tcInternal.tv_except, EmptyCollection, EmptyCollection._NP_RepositoryId, "EmptyCollection")
_0_CosCollection._tc_EmptyCollection = omniORB.tcInternal.createTypeCode(_0_CosCollection._d_EmptyCollection)
omniORB.registerType(EmptyCollection._NP_RepositoryId, _0_CosCollection._d_EmptyCollection, _0_CosCollection._tc_EmptyCollection)
del EmptyCollection

# exception PositionInvalid
_0_CosCollection.PositionInvalid = omniORB.newEmptyClass()
class PositionInvalid (CORBA.UserException):
    _NP_RepositoryId = "IDL:omg.org/CosCollection/PositionInvalid:1.0"

    def __init__(self):
        CORBA.UserException.__init__(self)

_0_CosCollection.PositionInvalid = PositionInvalid
_0_CosCollection._d_PositionInvalid  = (omniORB.tcInternal.tv_except, PositionInvalid, PositionInvalid._NP_RepositoryId, "PositionInvalid")
_0_CosCollection._tc_PositionInvalid = omniORB.tcInternal.createTypeCode(_0_CosCollection._d_PositionInvalid)
omniORB.registerType(PositionInvalid._NP_RepositoryId, _0_CosCollection._d_PositionInvalid, _0_CosCollection._tc_PositionInvalid)
del PositionInvalid

# enum IteratorInvalidReason
_0_CosCollection.is_invalid = omniORB.EnumItem("is_invalid", 0)
_0_CosCollection.is_not_for_collection = omniORB.EnumItem("is_not_for_collection", 1)
_0_CosCollection.is_const = omniORB.EnumItem("is_const", 2)
_0_CosCollection.IteratorInvalidReason = omniORB.Enum("IDL:omg.org/CosCollection/IteratorInvalidReason:1.0", (_0_CosCollection.is_invalid, _0_CosCollection.is_not_for_collection, _0_CosCollection.is_const,))

_0_CosCollection._d_IteratorInvalidReason  = (omniORB.tcInternal.tv_enum, _0_CosCollection.IteratorInvalidReason._NP_RepositoryId, "IteratorInvalidReason", _0_CosCollection.IteratorInvalidReason._items)
_0_CosCollection._tc_IteratorInvalidReason = omniORB.tcInternal.createTypeCode(_0_CosCollection._d_IteratorInvalidReason)
omniORB.registerType(_0_CosCollection.IteratorInvalidReason._NP_RepositoryId, _0_CosCollection._d_IteratorInvalidReason, _0_CosCollection._tc_IteratorInvalidReason)

# exception IteratorInvalid
_0_CosCollection.IteratorInvalid = omniORB.newEmptyClass()
class IteratorInvalid (CORBA.UserException):
    _NP_RepositoryId = "IDL:omg.org/CosCollection/IteratorInvalid:1.0"

    def __init__(self, why):
        CORBA.UserException.__init__(self, why)
        self.why = why

_0_CosCollection.IteratorInvalid = IteratorInvalid
_0_CosCollection._d_IteratorInvalid  = (omniORB.tcInternal.tv_except, IteratorInvalid, IteratorInvalid._NP_RepositoryId, "IteratorInvalid", "why", omniORB.typeMapping["IDL:omg.org/CosCollection/IteratorInvalidReason:1.0"])
_0_CosCollection._tc_IteratorInvalid = omniORB.tcInternal.createTypeCode(_0_CosCollection._d_IteratorInvalid)
omniORB.registerType(IteratorInvalid._NP_RepositoryId, _0_CosCollection._d_IteratorInvalid, _0_CosCollection._tc_IteratorInvalid)
del IteratorInvalid

# exception IteratorInBetween
_0_CosCollection.IteratorInBetween = omniORB.newEmptyClass()
class IteratorInBetween (CORBA.UserException):
    _NP_RepositoryId = "IDL:omg.org/CosCollection/IteratorInBetween:1.0"

    def __init__(self):
        CORBA.UserException.__init__(self)

_0_CosCollection.IteratorInBetween = IteratorInBetween
_0_CosCollection._d_IteratorInBetween  = (omniORB.tcInternal.tv_except, IteratorInBetween, IteratorInBetween._NP_RepositoryId, "IteratorInBetween")
_0_CosCollection._tc_IteratorInBetween = omniORB.tcInternal.createTypeCode(_0_CosCollection._d_IteratorInBetween)
omniORB.registerType(IteratorInBetween._NP_RepositoryId, _0_CosCollection._d_IteratorInBetween, _0_CosCollection._tc_IteratorInBetween)
del IteratorInBetween

# enum ElementInvalidReason
_0_CosCollection.element_type_invalid = omniORB.EnumItem("element_type_invalid", 0)
_0_CosCollection.positioning_property_invalid = omniORB.EnumItem("positioning_property_invalid", 1)
_0_CosCollection.element_exists = omniORB.EnumItem("element_exists", 2)
_0_CosCollection.ElementInvalidReason = omniORB.Enum("IDL:omg.org/CosCollection/ElementInvalidReason:1.0", (_0_CosCollection.element_type_invalid, _0_CosCollection.positioning_property_invalid, _0_CosCollection.element_exists,))

_0_CosCollection._d_ElementInvalidReason  = (omniORB.tcInternal.tv_enum, _0_CosCollection.ElementInvalidReason._NP_RepositoryId, "ElementInvalidReason", _0_CosCollection.ElementInvalidReason._items)
_0_CosCollection._tc_ElementInvalidReason = omniORB.tcInternal.createTypeCode(_0_CosCollection._d_ElementInvalidReason)
omniORB.registerType(_0_CosCollection.ElementInvalidReason._NP_RepositoryId, _0_CosCollection._d_ElementInvalidReason, _0_CosCollection._tc_ElementInvalidReason)

# exception ElementInvalid
_0_CosCollection.ElementInvalid = omniORB.newEmptyClass()
class ElementInvalid (CORBA.UserException):
    _NP_RepositoryId = "IDL:omg.org/CosCollection/ElementInvalid:1.0"

    def __init__(self, why):
        CORBA.UserException.__init__(self, why)
        self.why = why

_0_CosCollection.ElementInvalid = ElementInvalid
_0_CosCollection._d_ElementInvalid  = (omniORB.tcInternal.tv_except, ElementInvalid, ElementInvalid._NP_RepositoryId, "ElementInvalid", "why", omniORB.typeMapping["IDL:omg.org/CosCollection/ElementInvalidReason:1.0"])
_0_CosCollection._tc_ElementInvalid = omniORB.tcInternal.createTypeCode(_0_CosCollection._d_ElementInvalid)
omniORB.registerType(ElementInvalid._NP_RepositoryId, _0_CosCollection._d_ElementInvalid, _0_CosCollection._tc_ElementInvalid)
del ElementInvalid

# exception KeyInvalid
_0_CosCollection.KeyInvalid = omniORB.newEmptyClass()
class KeyInvalid (CORBA.UserException):
    _NP_RepositoryId = "IDL:omg.org/CosCollection/KeyInvalid:1.0"

    def __init__(self):
        CORBA.UserException.__init__(self)

_0_CosCollection.KeyInvalid = KeyInvalid
_0_CosCollection._d_KeyInvalid  = (omniORB.tcInternal.tv_except, KeyInvalid, KeyInvalid._NP_RepositoryId, "KeyInvalid")
_0_CosCollection._tc_KeyInvalid = omniORB.tcInternal.createTypeCode(_0_CosCollection._d_KeyInvalid)
omniORB.registerType(KeyInvalid._NP_RepositoryId, _0_CosCollection._d_KeyInvalid, _0_CosCollection._tc_KeyInvalid)
del KeyInvalid

# exception ParameterInvalid
_0_CosCollection.ParameterInvalid = omniORB.newEmptyClass()
class ParameterInvalid (CORBA.UserException):
    _NP_RepositoryId = "IDL:omg.org/CosCollection/ParameterInvalid:1.0"

    def __init__(self, which, why):
        CORBA.UserException.__init__(self, which, why)
        self.which = which
        self.why = why

_0_CosCollection.ParameterInvalid = ParameterInvalid
_0_CosCollection._d_ParameterInvalid  = (omniORB.tcInternal.tv_except, ParameterInvalid, ParameterInvalid._NP_RepositoryId, "ParameterInvalid", "which", omniORB.tcInternal.tv_ulong, "why", omniORB.typeMapping["IDL:omg.org/CosCollection/Istring:1.0"])
_0_CosCollection._tc_ParameterInvalid = omniORB.tcInternal.createTypeCode(_0_CosCollection._d_ParameterInvalid)
omniORB.registerType(ParameterInvalid._NP_RepositoryId, _0_CosCollection._d_ParameterInvalid, _0_CosCollection._tc_ParameterInvalid)
del ParameterInvalid

# interface Operations
_0_CosCollection._d_Operations = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosCollection/Operations:1.0", "Operations")
omniORB.typeMapping["IDL:omg.org/CosCollection/Operations:1.0"] = _0_CosCollection._d_Operations
_0_CosCollection.Operations = omniORB.newEmptyClass()
class Operations :
    _NP_RepositoryId = _0_CosCollection._d_Operations[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_CosCollection.Operations = Operations
_0_CosCollection._tc_Operations = omniORB.tcInternal.createTypeCode(_0_CosCollection._d_Operations)
omniORB.registerType(Operations._NP_RepositoryId, _0_CosCollection._d_Operations, _0_CosCollection._tc_Operations)

# Operations operations and attributes
Operations._d__get_element_type = ((),(omniORB.tcInternal.tv_TypeCode,),None)
Operations._d_check_element_type = ((omniORB.tcInternal.tv_any, ), (omniORB.tcInternal.tv_boolean, ), None)
Operations._d_equal = ((omniORB.tcInternal.tv_any, omniORB.tcInternal.tv_any), (omniORB.tcInternal.tv_boolean, ), None)
Operations._d_compare = ((omniORB.tcInternal.tv_any, omniORB.tcInternal.tv_any), (omniORB.tcInternal.tv_long, ), None)
Operations._d_hash = ((omniORB.tcInternal.tv_any, omniORB.tcInternal.tv_ulong), (omniORB.tcInternal.tv_ulong, ), None)
Operations._d_key = ((omniORB.tcInternal.tv_any, ), (omniORB.tcInternal.tv_any, ), None)
Operations._d__get_key_type = ((),(omniORB.tcInternal.tv_TypeCode,),None)
Operations._d_check_key_type = ((omniORB.tcInternal.tv_any, ), (omniORB.tcInternal.tv_boolean, ), None)
Operations._d_key_equal = ((omniORB.tcInternal.tv_any, omniORB.tcInternal.tv_any), (omniORB.tcInternal.tv_boolean, ), None)
Operations._d_key_compare = ((omniORB.tcInternal.tv_any, omniORB.tcInternal.tv_any), (omniORB.tcInternal.tv_long, ), None)
Operations._d_key_hash = ((omniORB.tcInternal.tv_any, omniORB.tcInternal.tv_ulong), (omniORB.tcInternal.tv_ulong, ), None)
Operations._d_destroy = ((), (), None)

# Operations object reference
class _objref_Operations (CORBA.Object):
    _NP_RepositoryId = Operations._NP_RepositoryId

    def __init__(self, obj):
        CORBA.Object.__init__(self, obj)

    def _get_element_type(self, *args):
        return self._obj.invoke("_get_element_type", _0_CosCollection.Operations._d__get_element_type, args)

    element_type = property(_get_element_type)


    def check_element_type(self, *args):
        return self._obj.invoke("check_element_type", _0_CosCollection.Operations._d_check_element_type, args)

    def equal(self, *args):
        return self._obj.invoke("equal", _0_CosCollection.Operations._d_equal, args)

    def compare(self, *args):
        return self._obj.invoke("compare", _0_CosCollection.Operations._d_compare, args)

    def hash(self, *args):
        return self._obj.invoke("hash", _0_CosCollection.Operations._d_hash, args)

    def key(self, *args):
        return self._obj.invoke("key", _0_CosCollection.Operations._d_key, args)

    def _get_key_type(self, *args):
        return self._obj.invoke("_get_key_type", _0_CosCollection.Operations._d__get_key_type, args)

    key_type = property(_get_key_type)


    def check_key_type(self, *args):
        return self._obj.invoke("check_key_type", _0_CosCollection.Operations._d_check_key_type, args)

    def key_equal(self, *args):
        return self._obj.invoke("key_equal", _0_CosCollection.Operations._d_key_equal, args)

    def key_compare(self, *args):
        return self._obj.invoke("key_compare", _0_CosCollection.Operations._d_key_compare, args)

    def key_hash(self, *args):
        return self._obj.invoke("key_hash", _0_CosCollection.Operations._d_key_hash, args)

    def destroy(self, *args):
        return self._obj.invoke("destroy", _0_CosCollection.Operations._d_destroy, args)

omniORB.registerObjref(Operations._NP_RepositoryId, _objref_Operations)
_0_CosCollection._objref_Operations = _objref_Operations
del Operations, _objref_Operations

# Operations skeleton
__name__ = "CosCollection__POA"
class Operations (PortableServer.Servant):
    _NP_RepositoryId = _0_CosCollection.Operations._NP_RepositoryId


    _omni_op_d = {"_get_element_type": _0_CosCollection.Operations._d__get_element_type, "check_element_type": _0_CosCollection.Operations._d_check_element_type, "equal": _0_CosCollection.Operations._d_equal, "compare": _0_CosCollection.Operations._d_compare, "hash": _0_CosCollection.Operations._d_hash, "key": _0_CosCollection.Operations._d_key, "_get_key_type": _0_CosCollection.Operations._d__get_key_type, "check_key_type": _0_CosCollection.Operations._d_check_key_type, "key_equal": _0_CosCollection.Operations._d_key_equal, "key_compare": _0_CosCollection.Operations._d_key_compare, "key_hash": _0_CosCollection.Operations._d_key_hash, "destroy": _0_CosCollection.Operations._d_destroy}

Operations._omni_skeleton = Operations
_0_CosCollection__POA.Operations = Operations
omniORB.registerSkeleton(Operations._NP_RepositoryId, Operations)
del Operations
__name__ = "CosCollection"

# interface Command
_0_CosCollection._d_Command = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosCollection/Command:1.0", "Command")
omniORB.typeMapping["IDL:omg.org/CosCollection/Command:1.0"] = _0_CosCollection._d_Command
_0_CosCollection.Command = omniORB.newEmptyClass()
class Command :
    _NP_RepositoryId = _0_CosCollection._d_Command[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_CosCollection.Command = Command
_0_CosCollection._tc_Command = omniORB.tcInternal.createTypeCode(_0_CosCollection._d_Command)
omniORB.registerType(Command._NP_RepositoryId, _0_CosCollection._d_Command, _0_CosCollection._tc_Command)

# Command operations and attributes
Command._d_do_on = ((omniORB.tcInternal.tv_any, ), (omniORB.tcInternal.tv_boolean, ), None)

# Command object reference
class _objref_Command (CORBA.Object):
    _NP_RepositoryId = Command._NP_RepositoryId

    def __init__(self, obj):
        CORBA.Object.__init__(self, obj)

    def do_on(self, *args):
        return self._obj.invoke("do_on", _0_CosCollection.Command._d_do_on, args)

omniORB.registerObjref(Command._NP_RepositoryId, _objref_Command)
_0_CosCollection._objref_Command = _objref_Command
del Command, _objref_Command

# Command skeleton
__name__ = "CosCollection__POA"
class Command (PortableServer.Servant):
    _NP_RepositoryId = _0_CosCollection.Command._NP_RepositoryId


    _omni_op_d = {"do_on": _0_CosCollection.Command._d_do_on}

Command._omni_skeleton = Command
_0_CosCollection__POA.Command = Command
omniORB.registerSkeleton(Command._NP_RepositoryId, Command)
del Command
__name__ = "CosCollection"

# interface Comparator
_0_CosCollection._d_Comparator = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosCollection/Comparator:1.0", "Comparator")
omniORB.typeMapping["IDL:omg.org/CosCollection/Comparator:1.0"] = _0_CosCollection._d_Comparator
_0_CosCollection.Comparator = omniORB.newEmptyClass()
class Comparator :
    _NP_RepositoryId = _0_CosCollection._d_Comparator[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_CosCollection.Comparator = Comparator
_0_CosCollection._tc_Comparator = omniORB.tcInternal.createTypeCode(_0_CosCollection._d_Comparator)
omniORB.registerType(Comparator._NP_RepositoryId, _0_CosCollection._d_Comparator, _0_CosCollection._tc_Comparator)

# Comparator operations and attributes
Comparator._d_compare = ((omniORB.tcInternal.tv_any, omniORB.tcInternal.tv_any), (omniORB.tcInternal.tv_long, ), None)

# Comparator object reference
class _objref_Comparator (CORBA.Object):
    _NP_RepositoryId = Comparator._NP_RepositoryId

    def __init__(self, obj):
        CORBA.Object.__init__(self, obj)

    def compare(self, *args):
        return self._obj.invoke("compare", _0_CosCollection.Comparator._d_compare, args)

omniORB.registerObjref(Comparator._NP_RepositoryId, _objref_Comparator)
_0_CosCollection._objref_Comparator = _objref_Comparator
del Comparator, _objref_Comparator

# Comparator skeleton
__name__ = "CosCollection__POA"
class Comparator (PortableServer.Servant):
    _NP_RepositoryId = _0_CosCollection.Comparator._NP_RepositoryId


    _omni_op_d = {"compare": _0_CosCollection.Comparator._d_compare}

Comparator._omni_skeleton = Comparator
_0_CosCollection__POA.Comparator = Comparator
omniORB.registerSkeleton(Comparator._NP_RepositoryId, Comparator)
del Comparator
__name__ = "CosCollection"

# interface Iterator
_0_CosCollection._d_Iterator = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosCollection/Iterator:1.0", "Iterator")
omniORB.typeMapping["IDL:omg.org/CosCollection/Iterator:1.0"] = _0_CosCollection._d_Iterator
_0_CosCollection.Iterator = omniORB.newEmptyClass()
class Iterator :
    _NP_RepositoryId = _0_CosCollection._d_Iterator[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_CosCollection.Iterator = Iterator
_0_CosCollection._tc_Iterator = omniORB.tcInternal.createTypeCode(_0_CosCollection._d_Iterator)
omniORB.registerType(Iterator._NP_RepositoryId, _0_CosCollection._d_Iterator, _0_CosCollection._tc_Iterator)

# Iterator operations and attributes
Iterator._d_set_to_first_element = ((), (omniORB.tcInternal.tv_boolean, ), None)
Iterator._d_set_to_next_element = ((), (omniORB.tcInternal.tv_boolean, ), {_0_CosCollection.IteratorInvalid._NP_RepositoryId: _0_CosCollection._d_IteratorInvalid})
Iterator._d_set_to_next_nth_element = ((omniORB.tcInternal.tv_ulong, ), (omniORB.tcInternal.tv_boolean, ), {_0_CosCollection.IteratorInvalid._NP_RepositoryId: _0_CosCollection._d_IteratorInvalid})
Iterator._d_retrieve_element = ((), (omniORB.tcInternal.tv_boolean, omniORB.tcInternal.tv_any), {_0_CosCollection.IteratorInvalid._NP_RepositoryId: _0_CosCollection._d_IteratorInvalid, _0_CosCollection.IteratorInBetween._NP_RepositoryId: _0_CosCollection._d_IteratorInBetween})
Iterator._d_retrieve_element_set_to_next = ((), (omniORB.tcInternal.tv_boolean, omniORB.tcInternal.tv_any, omniORB.tcInternal.tv_boolean), {_0_CosCollection.IteratorInvalid._NP_RepositoryId: _0_CosCollection._d_IteratorInvalid, _0_CosCollection.IteratorInBetween._NP_RepositoryId: _0_CosCollection._d_IteratorInBetween})
Iterator._d_retrieve_next_n_elements = ((omniORB.tcInternal.tv_ulong, ), (omniORB.tcInternal.tv_boolean, omniORB.typeMapping["IDL:omg.org/CosCollection/AnySequence:1.0"], omniORB.tcInternal.tv_boolean), {_0_CosCollection.IteratorInvalid._NP_RepositoryId: _0_CosCollection._d_IteratorInvalid, _0_CosCollection.IteratorInBetween._NP_RepositoryId: _0_CosCollection._d_IteratorInBetween})
Iterator._d_not_equal_retrieve_element_set_to_next = ((omniORB.typeMapping["IDL:omg.org/CosCollection/Iterator:1.0"], ), (omniORB.tcInternal.tv_boolean, omniORB.tcInternal.tv_any), {_0_CosCollection.IteratorInvalid._NP_RepositoryId: _0_CosCollection._d_IteratorInvalid, _0_CosCollection.IteratorInBetween._NP_RepositoryId: _0_CosCollection._d_IteratorInBetween})
Iterator._d_remove_element = ((), (), {_0_CosCollection.IteratorInvalid._NP_RepositoryId: _0_CosCollection._d_IteratorInvalid, _0_CosCollection.IteratorInBetween._NP_RepositoryId: _0_CosCollection._d_IteratorInBetween})
Iterator._d_remove_element_set_to_next = ((), (omniORB.tcInternal.tv_boolean, ), {_0_CosCollection.IteratorInvalid._NP_RepositoryId: _0_CosCollection._d_IteratorInvalid, _0_CosCollection.IteratorInBetween._NP_RepositoryId: _0_CosCollection._d_IteratorInBetween})
Iterator._d_remove_next_n_elements = ((omniORB.tcInternal.tv_ulong, ), (omniORB.tcInternal.tv_boolean, omniORB.tcInternal.tv_ulong), {_0_CosCollection.IteratorInvalid._NP_RepositoryId: _0_CosCollection._d_IteratorInvalid, _0_CosCollection.IteratorInBetween._NP_RepositoryId: _0_CosCollection._d_IteratorInBetween})
Iterator._d_not_equal_remove_element_set_to_next = ((omniORB.typeMapping["IDL:omg.org/CosCollection/Iterator:1.0"], ), (omniORB.tcInternal.tv_boolean, ), {_0_CosCollection.IteratorInvalid._NP_RepositoryId: _0_CosCollection._d_IteratorInvalid, _0_CosCollection.IteratorInBetween._NP_RepositoryId: _0_CosCollection._d_IteratorInBetween})
Iterator._d_replace_element = ((omniORB.tcInternal.tv_any, ), (), {_0_CosCollection.IteratorInvalid._NP_RepositoryId: _0_CosCollection._d_IteratorInvalid, _0_CosCollection.IteratorInBetween._NP_RepositoryId: _0_CosCollection._d_IteratorInBetween, _0_CosCollection.ElementInvalid._NP_RepositoryId: _0_CosCollection._d_ElementInvalid})
Iterator._d_replace_element_set_to_next = ((omniORB.tcInternal.tv_any, ), (omniORB.tcInternal.tv_boolean, ), {_0_CosCollection.IteratorInvalid._NP_RepositoryId: _0_CosCollection._d_IteratorInvalid, _0_CosCollection.IteratorInBetween._NP_RepositoryId: _0_CosCollection._d_IteratorInBetween, _0_CosCollection.ElementInvalid._NP_RepositoryId: _0_CosCollection._d_ElementInvalid})
Iterator._d_replace_next_n_elements = ((omniORB.typeMapping["IDL:omg.org/CosCollection/AnySequence:1.0"], ), (omniORB.tcInternal.tv_boolean, omniORB.tcInternal.tv_ulong), {_0_CosCollection.IteratorInvalid._NP_RepositoryId: _0_CosCollection._d_IteratorInvalid, _0_CosCollection.IteratorInBetween._NP_RepositoryId: _0_CosCollection._d_IteratorInBetween, _0_CosCollection.ElementInvalid._NP_RepositoryId: _0_CosCollection._d_ElementInvalid})
Iterator._d_not_equal_replace_element_set_to_next = ((omniORB.typeMapping["IDL:omg.org/CosCollection/Iterator:1.0"], omniORB.tcInternal.tv_any), (omniORB.tcInternal.tv_boolean, ), {_0_CosCollection.IteratorInvalid._NP_RepositoryId: _0_CosCollection._d_IteratorInvalid, _0_CosCollection.IteratorInBetween._NP_RepositoryId: _0_CosCollection._d_IteratorInBetween, _0_CosCollection.ElementInvalid._NP_RepositoryId: _0_CosCollection._d_ElementInvalid})
Iterator._d_add_element_set_iterator = ((omniORB.tcInternal.tv_any, ), (omniORB.tcInternal.tv_boolean, ), {_0_CosCollection.ElementInvalid._NP_RepositoryId: _0_CosCollection._d_ElementInvalid})
Iterator._d_add_n_elements_set_iterator = ((omniORB.typeMapping["IDL:omg.org/CosCollection/AnySequence:1.0"], ), (omniORB.tcInternal.tv_boolean, omniORB.tcInternal.tv_ulong), {_0_CosCollection.ElementInvalid._NP_RepositoryId: _0_CosCollection._d_ElementInvalid})
Iterator._d_invalidate = ((), (), None)
Iterator._d_is_valid = ((), (omniORB.tcInternal.tv_boolean, ), None)
Iterator._d_is_in_between = ((), (omniORB.tcInternal.tv_boolean, ), None)
Iterator._d_is_for = ((omniORB.typeMapping["IDL:omg.org/CosCollection/Collection:1.0"], ), (omniORB.tcInternal.tv_boolean, ), None)
Iterator._d_is_const = ((), (omniORB.tcInternal.tv_boolean, ), None)
Iterator._d_is_equal = ((omniORB.typeMapping["IDL:omg.org/CosCollection/Iterator:1.0"], ), (omniORB.tcInternal.tv_boolean, ), {_0_CosCollection.IteratorInvalid._NP_RepositoryId: _0_CosCollection._d_IteratorInvalid})
Iterator._d_clone = ((), (omniORB.typeMapping["IDL:omg.org/CosCollection/Iterator:1.0"], ), None)
Iterator._d_assign = ((omniORB.typeMapping["IDL:omg.org/CosCollection/Iterator:1.0"], ), (), {_0_CosCollection.IteratorInvalid._NP_RepositoryId: _0_CosCollection._d_IteratorInvalid})
Iterator._d_destroy = ((), (), None)

# Iterator object reference
class _objref_Iterator (CORBA.Object):
    _NP_RepositoryId = Iterator._NP_RepositoryId

    def __init__(self, obj):
        CORBA.Object.__init__(self, obj)

    def set_to_first_element(self, *args):
        return self._obj.invoke("set_to_first_element", _0_CosCollection.Iterator._d_set_to_first_element, args)

    def set_to_next_element(self, *args):
        return self._obj.invoke("set_to_next_element", _0_CosCollection.Iterator._d_set_to_next_element, args)

    def set_to_next_nth_element(self, *args):
        return self._obj.invoke("set_to_next_nth_element", _0_CosCollection.Iterator._d_set_to_next_nth_element, args)

    def retrieve_element(self, *args):
        return self._obj.invoke("retrieve_element", _0_CosCollection.Iterator._d_retrieve_element, args)

    def retrieve_element_set_to_next(self, *args):
        return self._obj.invoke("retrieve_element_set_to_next", _0_CosCollection.Iterator._d_retrieve_element_set_to_next, args)

    def retrieve_next_n_elements(self, *args):
        return self._obj.invoke("retrieve_next_n_elements", _0_CosCollection.Iterator._d_retrieve_next_n_elements, args)

    def not_equal_retrieve_element_set_to_next(self, *args):
        return self._obj.invoke("not_equal_retrieve_element_set_to_next", _0_CosCollection.Iterator._d_not_equal_retrieve_element_set_to_next, args)

    def remove_element(self, *args):
        return self._obj.invoke("remove_element", _0_CosCollection.Iterator._d_remove_element, args)

    def remove_element_set_to_next(self, *args):
        return self._obj.invoke("remove_element_set_to_next", _0_CosCollection.Iterator._d_remove_element_set_to_next, args)

    def remove_next_n_elements(self, *args):
        return self._obj.invoke("remove_next_n_elements", _0_CosCollection.Iterator._d_remove_next_n_elements, args)

    def not_equal_remove_element_set_to_next(self, *args):
        return self._obj.invoke("not_equal_remove_element_set_to_next", _0_CosCollection.Iterator._d_not_equal_remove_element_set_to_next, args)

    def replace_element(self, *args):
        return self._obj.invoke("replace_element", _0_CosCollection.Iterator._d_replace_element, args)

    def replace_element_set_to_next(self, *args):
        return self._obj.invoke("replace_element_set_to_next", _0_CosCollection.Iterator._d_replace_element_set_to_next, args)

    def replace_next_n_elements(self, *args):
        return self._obj.invoke("replace_next_n_elements", _0_CosCollection.Iterator._d_replace_next_n_elements, args)

    def not_equal_replace_element_set_to_next(self, *args):
        return self._obj.invoke("not_equal_replace_element_set_to_next", _0_CosCollection.Iterator._d_not_equal_replace_element_set_to_next, args)

    def add_element_set_iterator(self, *args):
        return self._obj.invoke("add_element_set_iterator", _0_CosCollection.Iterator._d_add_element_set_iterator, args)

    def add_n_elements_set_iterator(self, *args):
        return self._obj.invoke("add_n_elements_set_iterator", _0_CosCollection.Iterator._d_add_n_elements_set_iterator, args)

    def invalidate(self, *args):
        return self._obj.invoke("invalidate", _0_CosCollection.Iterator._d_invalidate, args)

    def is_valid(self, *args):
        return self._obj.invoke("is_valid", _0_CosCollection.Iterator._d_is_valid, args)

    def is_in_between(self, *args):
        return self._obj.invoke("is_in_between", _0_CosCollection.Iterator._d_is_in_between, args)

    def is_for(self, *args):
        return self._obj.invoke("is_for", _0_CosCollection.Iterator._d_is_for, args)

    def is_const(self, *args):
        return self._obj.invoke("is_const", _0_CosCollection.Iterator._d_is_const, args)

    def is_equal(self, *args):
        return self._obj.invoke("is_equal", _0_CosCollection.Iterator._d_is_equal, args)

    def clone(self, *args):
        return self._obj.invoke("clone", _0_CosCollection.Iterator._d_clone, args)

    def assign(self, *args):
        return self._obj.invoke("assign", _0_CosCollection.Iterator._d_assign, args)

    def destroy(self, *args):
        return self._obj.invoke("destroy", _0_CosCollection.Iterator._d_destroy, args)

omniORB.registerObjref(Iterator._NP_RepositoryId, _objref_Iterator)
_0_CosCollection._objref_Iterator = _objref_Iterator
del Iterator, _objref_Iterator

# Iterator skeleton
__name__ = "CosCollection__POA"
class Iterator (PortableServer.Servant):
    _NP_RepositoryId = _0_CosCollection.Iterator._NP_RepositoryId


    _omni_op_d = {"set_to_first_element": _0_CosCollection.Iterator._d_set_to_first_element, "set_to_next_element": _0_CosCollection.Iterator._d_set_to_next_element, "set_to_next_nth_element": _0_CosCollection.Iterator._d_set_to_next_nth_element, "retrieve_element": _0_CosCollection.Iterator._d_retrieve_element, "retrieve_element_set_to_next": _0_CosCollection.Iterator._d_retrieve_element_set_to_next, "retrieve_next_n_elements": _0_CosCollection.Iterator._d_retrieve_next_n_elements, "not_equal_retrieve_element_set_to_next": _0_CosCollection.Iterator._d_not_equal_retrieve_element_set_to_next, "remove_element": _0_CosCollection.Iterator._d_remove_element, "remove_element_set_to_next": _0_CosCollection.Iterator._d_remove_element_set_to_next, "remove_next_n_elements": _0_CosCollection.Iterator._d_remove_next_n_elements, "not_equal_remove_element_set_to_next": _0_CosCollection.Iterator._d_not_equal_remove_element_set_to_next, "replace_element": _0_CosCollection.Iterator._d_replace_element, "replace_element_set_to_next": _0_CosCollection.Iterator._d_replace_element_set_to_next, "replace_next_n_elements": _0_CosCollection.Iterator._d_replace_next_n_elements, "not_equal_replace_element_set_to_next": _0_CosCollection.Iterator._d_not_equal_replace_element_set_to_next, "add_element_set_iterator": _0_CosCollection.Iterator._d_add_element_set_iterator, "add_n_elements_set_iterator": _0_CosCollection.Iterator._d_add_n_elements_set_iterator, "invalidate": _0_CosCollection.Iterator._d_invalidate, "is_valid": _0_CosCollection.Iterator._d_is_valid, "is_in_between": _0_CosCollection.Iterator._d_is_in_between, "is_for": _0_CosCollection.Iterator._d_is_for, "is_const": _0_CosCollection.Iterator._d_is_const, "is_equal": _0_CosCollection.Iterator._d_is_equal, "clone": _0_CosCollection.Iterator._d_clone, "assign": _0_CosCollection.Iterator._d_assign, "destroy": _0_CosCollection.Iterator._d_destroy}

Iterator._omni_skeleton = Iterator
_0_CosCollection__POA.Iterator = Iterator
omniORB.registerSkeleton(Iterator._NP_RepositoryId, Iterator)
del Iterator
__name__ = "CosCollection"

# interface OrderedIterator
_0_CosCollection._d_OrderedIterator = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosCollection/OrderedIterator:1.0", "OrderedIterator")
omniORB.typeMapping["IDL:omg.org/CosCollection/OrderedIterator:1.0"] = _0_CosCollection._d_OrderedIterator
_0_CosCollection.OrderedIterator = omniORB.newEmptyClass()
class OrderedIterator (_0_CosCollection.Iterator):
    _NP_RepositoryId = _0_CosCollection._d_OrderedIterator[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_CosCollection.OrderedIterator = OrderedIterator
_0_CosCollection._tc_OrderedIterator = omniORB.tcInternal.createTypeCode(_0_CosCollection._d_OrderedIterator)
omniORB.registerType(OrderedIterator._NP_RepositoryId, _0_CosCollection._d_OrderedIterator, _0_CosCollection._tc_OrderedIterator)

# OrderedIterator operations and attributes
OrderedIterator._d_set_to_last_element = ((), (omniORB.tcInternal.tv_boolean, ), None)
OrderedIterator._d_set_to_previous_element = ((), (omniORB.tcInternal.tv_boolean, ), {_0_CosCollection.IteratorInvalid._NP_RepositoryId: _0_CosCollection._d_IteratorInvalid})
OrderedIterator._d_set_to_nth_previous_element = ((omniORB.tcInternal.tv_ulong, ), (omniORB.tcInternal.tv_boolean, ), {_0_CosCollection.IteratorInvalid._NP_RepositoryId: _0_CosCollection._d_IteratorInvalid})
OrderedIterator._d_set_to_position = ((omniORB.tcInternal.tv_ulong, ), (), {_0_CosCollection.PositionInvalid._NP_RepositoryId: _0_CosCollection._d_PositionInvalid})
OrderedIterator._d_position = ((), (omniORB.tcInternal.tv_ulong, ), {_0_CosCollection.IteratorInvalid._NP_RepositoryId: _0_CosCollection._d_IteratorInvalid})
OrderedIterator._d_retrieve_element_set_to_previous = ((), (omniORB.tcInternal.tv_boolean, omniORB.tcInternal.tv_any, omniORB.tcInternal.tv_boolean), {_0_CosCollection.IteratorInvalid._NP_RepositoryId: _0_CosCollection._d_IteratorInvalid, _0_CosCollection.IteratorInBetween._NP_RepositoryId: _0_CosCollection._d_IteratorInBetween})
OrderedIterator._d_retrieve_previous_n_elements = ((omniORB.tcInternal.tv_ulong, ), (omniORB.tcInternal.tv_boolean, omniORB.typeMapping["IDL:omg.org/CosCollection/AnySequence:1.0"], omniORB.tcInternal.tv_boolean), {_0_CosCollection.IteratorInvalid._NP_RepositoryId: _0_CosCollection._d_IteratorInvalid, _0_CosCollection.IteratorInBetween._NP_RepositoryId: _0_CosCollection._d_IteratorInBetween})
OrderedIterator._d_not_equal_retrieve_element_set_to_previous = ((omniORB.typeMapping["IDL:omg.org/CosCollection/Iterator:1.0"], ), (omniORB.tcInternal.tv_boolean, omniORB.tcInternal.tv_any), {_0_CosCollection.IteratorInvalid._NP_RepositoryId: _0_CosCollection._d_IteratorInvalid, _0_CosCollection.IteratorInBetween._NP_RepositoryId: _0_CosCollection._d_IteratorInBetween})
OrderedIterator._d_remove_element_set_to_previous = ((), (omniORB.tcInternal.tv_boolean, ), {_0_CosCollection.IteratorInvalid._NP_RepositoryId: _0_CosCollection._d_IteratorInvalid, _0_CosCollection.IteratorInBetween._NP_RepositoryId: _0_CosCollection._d_IteratorInBetween})
OrderedIterator._d_remove_previous_n_elements = ((omniORB.tcInternal.tv_ulong, ), (omniORB.tcInternal.tv_boolean, omniORB.tcInternal.tv_ulong), {_0_CosCollection.IteratorInvalid._NP_RepositoryId: _0_CosCollection._d_IteratorInvalid, _0_CosCollection.IteratorInBetween._NP_RepositoryId: _0_CosCollection._d_IteratorInBetween})
OrderedIterator._d_not_equal_remove_element_set_to_previous = ((omniORB.typeMapping["IDL:omg.org/CosCollection/Iterator:1.0"], ), (omniORB.tcInternal.tv_boolean, ), {_0_CosCollection.IteratorInvalid._NP_RepositoryId: _0_CosCollection._d_IteratorInvalid, _0_CosCollection.IteratorInBetween._NP_RepositoryId: _0_CosCollection._d_IteratorInBetween})
OrderedIterator._d_replace_element_set_to_previous = ((omniORB.tcInternal.tv_any, ), (omniORB.tcInternal.tv_boolean, ), {_0_CosCollection.IteratorInvalid._NP_RepositoryId: _0_CosCollection._d_IteratorInvalid, _0_CosCollection.IteratorInBetween._NP_RepositoryId: _0_CosCollection._d_IteratorInBetween, _0_CosCollection.ElementInvalid._NP_RepositoryId: _0_CosCollection._d_ElementInvalid})
OrderedIterator._d_replace_previous_n_elements = ((omniORB.typeMapping["IDL:omg.org/CosCollection/AnySequence:1.0"], ), (omniORB.tcInternal.tv_boolean, omniORB.tcInternal.tv_ulong), {_0_CosCollection.IteratorInvalid._NP_RepositoryId: _0_CosCollection._d_IteratorInvalid, _0_CosCollection.IteratorInBetween._NP_RepositoryId: _0_CosCollection._d_IteratorInBetween, _0_CosCollection.ElementInvalid._NP_RepositoryId: _0_CosCollection._d_ElementInvalid})
OrderedIterator._d_not_equal_replace_element_set_to_previous = ((omniORB.typeMapping["IDL:omg.org/CosCollection/Iterator:1.0"], omniORB.tcInternal.tv_any), (omniORB.tcInternal.tv_boolean, ), {_0_CosCollection.IteratorInvalid._NP_RepositoryId: _0_CosCollection._d_IteratorInvalid, _0_CosCollection.IteratorInBetween._NP_RepositoryId: _0_CosCollection._d_IteratorInBetween, _0_CosCollection.ElementInvalid._NP_RepositoryId: _0_CosCollection._d_ElementInvalid})
OrderedIterator._d_is_first = ((), (omniORB.tcInternal.tv_boolean, ), None)
OrderedIterator._d_is_last = ((), (omniORB.tcInternal.tv_boolean, ), None)
OrderedIterator._d_is_for_same = ((omniORB.typeMapping["IDL:omg.org/CosCollection/Iterator:1.0"], ), (omniORB.tcInternal.tv_boolean, ), None)
OrderedIterator._d_is_reverse = ((), (omniORB.tcInternal.tv_boolean, ), None)

# OrderedIterator object reference
class _objref_OrderedIterator (_0_CosCollection._objref_Iterator):
    _NP_RepositoryId = OrderedIterator._NP_RepositoryId

    def __init__(self, obj):
        _0_CosCollection._objref_Iterator.__init__(self, obj)

    def set_to_last_element(self, *args):
        return self._obj.invoke("set_to_last_element", _0_CosCollection.OrderedIterator._d_set_to_last_element, args)

    def set_to_previous_element(self, *args):
        return self._obj.invoke("set_to_previous_element", _0_CosCollection.OrderedIterator._d_set_to_previous_element, args)

    def set_to_nth_previous_element(self, *args):
        return self._obj.invoke("set_to_nth_previous_element", _0_CosCollection.OrderedIterator._d_set_to_nth_previous_element, args)

    def set_to_position(self, *args):
        return self._obj.invoke("set_to_position", _0_CosCollection.OrderedIterator._d_set_to_position, args)

    def position(self, *args):
        return self._obj.invoke("position", _0_CosCollection.OrderedIterator._d_position, args)

    def retrieve_element_set_to_previous(self, *args):
        return self._obj.invoke("retrieve_element_set_to_previous", _0_CosCollection.OrderedIterator._d_retrieve_element_set_to_previous, args)

    def retrieve_previous_n_elements(self, *args):
        return self._obj.invoke("retrieve_previous_n_elements", _0_CosCollection.OrderedIterator._d_retrieve_previous_n_elements, args)

    def not_equal_retrieve_element_set_to_previous(self, *args):
        return self._obj.invoke("not_equal_retrieve_element_set_to_previous", _0_CosCollection.OrderedIterator._d_not_equal_retrieve_element_set_to_previous, args)

    def remove_element_set_to_previous(self, *args):
        return self._obj.invoke("remove_element_set_to_previous", _0_CosCollection.OrderedIterator._d_remove_element_set_to_previous, args)

    def remove_previous_n_elements(self, *args):
        return self._obj.invoke("remove_previous_n_elements", _0_CosCollection.OrderedIterator._d_remove_previous_n_elements, args)

    def not_equal_remove_element_set_to_previous(self, *args):
        return self._obj.invoke("not_equal_remove_element_set_to_previous", _0_CosCollection.OrderedIterator._d_not_equal_remove_element_set_to_previous, args)

    def replace_element_set_to_previous(self, *args):
        return self._obj.invoke("replace_element_set_to_previous", _0_CosCollection.OrderedIterator._d_replace_element_set_to_previous, args)

    def replace_previous_n_elements(self, *args):
        return self._obj.invoke("replace_previous_n_elements", _0_CosCollection.OrderedIterator._d_replace_previous_n_elements, args)

    def not_equal_replace_element_set_to_previous(self, *args):
        return self._obj.invoke("not_equal_replace_element_set_to_previous", _0_CosCollection.OrderedIterator._d_not_equal_replace_element_set_to_previous, args)

    def is_first(self, *args):
        return self._obj.invoke("is_first", _0_CosCollection.OrderedIterator._d_is_first, args)

    def is_last(self, *args):
        return self._obj.invoke("is_last", _0_CosCollection.OrderedIterator._d_is_last, args)

    def is_for_same(self, *args):
        return self._obj.invoke("is_for_same", _0_CosCollection.OrderedIterator._d_is_for_same, args)

    def is_reverse(self, *args):
        return self._obj.invoke("is_reverse", _0_CosCollection.OrderedIterator._d_is_reverse, args)

omniORB.registerObjref(OrderedIterator._NP_RepositoryId, _objref_OrderedIterator)
_0_CosCollection._objref_OrderedIterator = _objref_OrderedIterator
del OrderedIterator, _objref_OrderedIterator

# OrderedIterator skeleton
__name__ = "CosCollection__POA"
class OrderedIterator (_0_CosCollection__POA.Iterator):
    _NP_RepositoryId = _0_CosCollection.OrderedIterator._NP_RepositoryId


    _omni_op_d = {"set_to_last_element": _0_CosCollection.OrderedIterator._d_set_to_last_element, "set_to_previous_element": _0_CosCollection.OrderedIterator._d_set_to_previous_element, "set_to_nth_previous_element": _0_CosCollection.OrderedIterator._d_set_to_nth_previous_element, "set_to_position": _0_CosCollection.OrderedIterator._d_set_to_position, "position": _0_CosCollection.OrderedIterator._d_position, "retrieve_element_set_to_previous": _0_CosCollection.OrderedIterator._d_retrieve_element_set_to_previous, "retrieve_previous_n_elements": _0_CosCollection.OrderedIterator._d_retrieve_previous_n_elements, "not_equal_retrieve_element_set_to_previous": _0_CosCollection.OrderedIterator._d_not_equal_retrieve_element_set_to_previous, "remove_element_set_to_previous": _0_CosCollection.OrderedIterator._d_remove_element_set_to_previous, "remove_previous_n_elements": _0_CosCollection.OrderedIterator._d_remove_previous_n_elements, "not_equal_remove_element_set_to_previous": _0_CosCollection.OrderedIterator._d_not_equal_remove_element_set_to_previous, "replace_element_set_to_previous": _0_CosCollection.OrderedIterator._d_replace_element_set_to_previous, "replace_previous_n_elements": _0_CosCollection.OrderedIterator._d_replace_previous_n_elements, "not_equal_replace_element_set_to_previous": _0_CosCollection.OrderedIterator._d_not_equal_replace_element_set_to_previous, "is_first": _0_CosCollection.OrderedIterator._d_is_first, "is_last": _0_CosCollection.OrderedIterator._d_is_last, "is_for_same": _0_CosCollection.OrderedIterator._d_is_for_same, "is_reverse": _0_CosCollection.OrderedIterator._d_is_reverse}
    _omni_op_d.update(_0_CosCollection__POA.Iterator._omni_op_d)

OrderedIterator._omni_skeleton = OrderedIterator
_0_CosCollection__POA.OrderedIterator = OrderedIterator
omniORB.registerSkeleton(OrderedIterator._NP_RepositoryId, OrderedIterator)
del OrderedIterator
__name__ = "CosCollection"

# interface SequentialIterator
_0_CosCollection._d_SequentialIterator = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosCollection/SequentialIterator:1.0", "SequentialIterator")
omniORB.typeMapping["IDL:omg.org/CosCollection/SequentialIterator:1.0"] = _0_CosCollection._d_SequentialIterator
_0_CosCollection.SequentialIterator = omniORB.newEmptyClass()
class SequentialIterator (_0_CosCollection.OrderedIterator):
    _NP_RepositoryId = _0_CosCollection._d_SequentialIterator[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_CosCollection.SequentialIterator = SequentialIterator
_0_CosCollection._tc_SequentialIterator = omniORB.tcInternal.createTypeCode(_0_CosCollection._d_SequentialIterator)
omniORB.registerType(SequentialIterator._NP_RepositoryId, _0_CosCollection._d_SequentialIterator, _0_CosCollection._tc_SequentialIterator)

# SequentialIterator operations and attributes
SequentialIterator._d_add_element_as_next_set_iterator = ((omniORB.tcInternal.tv_any, ), (omniORB.tcInternal.tv_boolean, ), {_0_CosCollection.IteratorInvalid._NP_RepositoryId: _0_CosCollection._d_IteratorInvalid, _0_CosCollection.ElementInvalid._NP_RepositoryId: _0_CosCollection._d_ElementInvalid})
SequentialIterator._d_add_n_elements_as_next_set_iterator = ((omniORB.typeMapping["IDL:omg.org/CosCollection/AnySequence:1.0"], ), (), {_0_CosCollection.IteratorInvalid._NP_RepositoryId: _0_CosCollection._d_IteratorInvalid, _0_CosCollection.ElementInvalid._NP_RepositoryId: _0_CosCollection._d_ElementInvalid})
SequentialIterator._d_add_element_as_previous_set_iterator = ((omniORB.tcInternal.tv_any, ), (omniORB.tcInternal.tv_boolean, ), {_0_CosCollection.IteratorInvalid._NP_RepositoryId: _0_CosCollection._d_IteratorInvalid, _0_CosCollection.ElementInvalid._NP_RepositoryId: _0_CosCollection._d_ElementInvalid})
SequentialIterator._d_add_n_elements_as_previous_set_iterator = ((omniORB.typeMapping["IDL:omg.org/CosCollection/AnySequence:1.0"], ), (), {_0_CosCollection.IteratorInvalid._NP_RepositoryId: _0_CosCollection._d_IteratorInvalid, _0_CosCollection.ElementInvalid._NP_RepositoryId: _0_CosCollection._d_ElementInvalid})

# SequentialIterator object reference
class _objref_SequentialIterator (_0_CosCollection._objref_OrderedIterator):
    _NP_RepositoryId = SequentialIterator._NP_RepositoryId

    def __init__(self, obj):
        _0_CosCollection._objref_OrderedIterator.__init__(self, obj)

    def add_element_as_next_set_iterator(self, *args):
        return self._obj.invoke("add_element_as_next_set_iterator", _0_CosCollection.SequentialIterator._d_add_element_as_next_set_iterator, args)

    def add_n_elements_as_next_set_iterator(self, *args):
        return self._obj.invoke("add_n_elements_as_next_set_iterator", _0_CosCollection.SequentialIterator._d_add_n_elements_as_next_set_iterator, args)

    def add_element_as_previous_set_iterator(self, *args):
        return self._obj.invoke("add_element_as_previous_set_iterator", _0_CosCollection.SequentialIterator._d_add_element_as_previous_set_iterator, args)

    def add_n_elements_as_previous_set_iterator(self, *args):
        return self._obj.invoke("add_n_elements_as_previous_set_iterator", _0_CosCollection.SequentialIterator._d_add_n_elements_as_previous_set_iterator, args)

omniORB.registerObjref(SequentialIterator._NP_RepositoryId, _objref_SequentialIterator)
_0_CosCollection._objref_SequentialIterator = _objref_SequentialIterator
del SequentialIterator, _objref_SequentialIterator

# SequentialIterator skeleton
__name__ = "CosCollection__POA"
class SequentialIterator (_0_CosCollection__POA.OrderedIterator):
    _NP_RepositoryId = _0_CosCollection.SequentialIterator._NP_RepositoryId


    _omni_op_d = {"add_element_as_next_set_iterator": _0_CosCollection.SequentialIterator._d_add_element_as_next_set_iterator, "add_n_elements_as_next_set_iterator": _0_CosCollection.SequentialIterator._d_add_n_elements_as_next_set_iterator, "add_element_as_previous_set_iterator": _0_CosCollection.SequentialIterator._d_add_element_as_previous_set_iterator, "add_n_elements_as_previous_set_iterator": _0_CosCollection.SequentialIterator._d_add_n_elements_as_previous_set_iterator}
    _omni_op_d.update(_0_CosCollection__POA.OrderedIterator._omni_op_d)

SequentialIterator._omni_skeleton = SequentialIterator
_0_CosCollection__POA.SequentialIterator = SequentialIterator
omniORB.registerSkeleton(SequentialIterator._NP_RepositoryId, SequentialIterator)
del SequentialIterator
__name__ = "CosCollection"

# interface KeyIterator
_0_CosCollection._d_KeyIterator = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosCollection/KeyIterator:1.0", "KeyIterator")
omniORB.typeMapping["IDL:omg.org/CosCollection/KeyIterator:1.0"] = _0_CosCollection._d_KeyIterator
_0_CosCollection.KeyIterator = omniORB.newEmptyClass()
class KeyIterator (_0_CosCollection.Iterator):
    _NP_RepositoryId = _0_CosCollection._d_KeyIterator[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_CosCollection.KeyIterator = KeyIterator
_0_CosCollection._tc_KeyIterator = omniORB.tcInternal.createTypeCode(_0_CosCollection._d_KeyIterator)
omniORB.registerType(KeyIterator._NP_RepositoryId, _0_CosCollection._d_KeyIterator, _0_CosCollection._tc_KeyIterator)

# KeyIterator operations and attributes
KeyIterator._d_set_to_element_with_key = ((omniORB.tcInternal.tv_any, ), (omniORB.tcInternal.tv_boolean, ), {_0_CosCollection.KeyInvalid._NP_RepositoryId: _0_CosCollection._d_KeyInvalid})
KeyIterator._d_set_to_next_element_with_key = ((omniORB.tcInternal.tv_any, ), (omniORB.tcInternal.tv_boolean, ), {_0_CosCollection.IteratorInvalid._NP_RepositoryId: _0_CosCollection._d_IteratorInvalid, _0_CosCollection.KeyInvalid._NP_RepositoryId: _0_CosCollection._d_KeyInvalid})
KeyIterator._d_set_to_next_element_with_different_key = ((), (omniORB.tcInternal.tv_boolean, ), {_0_CosCollection.IteratorInBetween._NP_RepositoryId: _0_CosCollection._d_IteratorInBetween, _0_CosCollection.IteratorInvalid._NP_RepositoryId: _0_CosCollection._d_IteratorInvalid})
KeyIterator._d_retrieve_key = ((), (omniORB.tcInternal.tv_boolean, omniORB.tcInternal.tv_any), {_0_CosCollection.IteratorInBetween._NP_RepositoryId: _0_CosCollection._d_IteratorInBetween, _0_CosCollection.IteratorInvalid._NP_RepositoryId: _0_CosCollection._d_IteratorInvalid})
KeyIterator._d_retrieve_next_n_keys = ((), (omniORB.tcInternal.tv_boolean, omniORB.typeMapping["IDL:omg.org/CosCollection/AnySequence:1.0"]), {_0_CosCollection.IteratorInBetween._NP_RepositoryId: _0_CosCollection._d_IteratorInBetween, _0_CosCollection.IteratorInvalid._NP_RepositoryId: _0_CosCollection._d_IteratorInvalid})

# KeyIterator object reference
class _objref_KeyIterator (_0_CosCollection._objref_Iterator):
    _NP_RepositoryId = KeyIterator._NP_RepositoryId

    def __init__(self, obj):
        _0_CosCollection._objref_Iterator.__init__(self, obj)

    def set_to_element_with_key(self, *args):
        return self._obj.invoke("set_to_element_with_key", _0_CosCollection.KeyIterator._d_set_to_element_with_key, args)

    def set_to_next_element_with_key(self, *args):
        return self._obj.invoke("set_to_next_element_with_key", _0_CosCollection.KeyIterator._d_set_to_next_element_with_key, args)

    def set_to_next_element_with_different_key(self, *args):
        return self._obj.invoke("set_to_next_element_with_different_key", _0_CosCollection.KeyIterator._d_set_to_next_element_with_different_key, args)

    def retrieve_key(self, *args):
        return self._obj.invoke("retrieve_key", _0_CosCollection.KeyIterator._d_retrieve_key, args)

    def retrieve_next_n_keys(self, *args):
        return self._obj.invoke("retrieve_next_n_keys", _0_CosCollection.KeyIterator._d_retrieve_next_n_keys, args)

omniORB.registerObjref(KeyIterator._NP_RepositoryId, _objref_KeyIterator)
_0_CosCollection._objref_KeyIterator = _objref_KeyIterator
del KeyIterator, _objref_KeyIterator

# KeyIterator skeleton
__name__ = "CosCollection__POA"
class KeyIterator (_0_CosCollection__POA.Iterator):
    _NP_RepositoryId = _0_CosCollection.KeyIterator._NP_RepositoryId


    _omni_op_d = {"set_to_element_with_key": _0_CosCollection.KeyIterator._d_set_to_element_with_key, "set_to_next_element_with_key": _0_CosCollection.KeyIterator._d_set_to_next_element_with_key, "set_to_next_element_with_different_key": _0_CosCollection.KeyIterator._d_set_to_next_element_with_different_key, "retrieve_key": _0_CosCollection.KeyIterator._d_retrieve_key, "retrieve_next_n_keys": _0_CosCollection.KeyIterator._d_retrieve_next_n_keys}
    _omni_op_d.update(_0_CosCollection__POA.Iterator._omni_op_d)

KeyIterator._omni_skeleton = KeyIterator
_0_CosCollection__POA.KeyIterator = KeyIterator
omniORB.registerSkeleton(KeyIterator._NP_RepositoryId, KeyIterator)
del KeyIterator
__name__ = "CosCollection"

# interface EqualityIterator
_0_CosCollection._d_EqualityIterator = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosCollection/EqualityIterator:1.0", "EqualityIterator")
omniORB.typeMapping["IDL:omg.org/CosCollection/EqualityIterator:1.0"] = _0_CosCollection._d_EqualityIterator
_0_CosCollection.EqualityIterator = omniORB.newEmptyClass()
class EqualityIterator (_0_CosCollection.Iterator):
    _NP_RepositoryId = _0_CosCollection._d_EqualityIterator[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_CosCollection.EqualityIterator = EqualityIterator
_0_CosCollection._tc_EqualityIterator = omniORB.tcInternal.createTypeCode(_0_CosCollection._d_EqualityIterator)
omniORB.registerType(EqualityIterator._NP_RepositoryId, _0_CosCollection._d_EqualityIterator, _0_CosCollection._tc_EqualityIterator)

# EqualityIterator operations and attributes
EqualityIterator._d_set_to_element_with_value = ((omniORB.tcInternal.tv_any, ), (omniORB.tcInternal.tv_boolean, ), {_0_CosCollection.ElementInvalid._NP_RepositoryId: _0_CosCollection._d_ElementInvalid})
EqualityIterator._d_set_to_next_element_with_value = ((omniORB.tcInternal.tv_any, ), (omniORB.tcInternal.tv_boolean, ), {_0_CosCollection.IteratorInvalid._NP_RepositoryId: _0_CosCollection._d_IteratorInvalid, _0_CosCollection.ElementInvalid._NP_RepositoryId: _0_CosCollection._d_ElementInvalid})
EqualityIterator._d_set_to_next_element_with_different_value = ((), (omniORB.tcInternal.tv_boolean, ), {_0_CosCollection.IteratorInBetween._NP_RepositoryId: _0_CosCollection._d_IteratorInBetween, _0_CosCollection.IteratorInvalid._NP_RepositoryId: _0_CosCollection._d_IteratorInvalid})

# EqualityIterator object reference
class _objref_EqualityIterator (_0_CosCollection._objref_Iterator):
    _NP_RepositoryId = EqualityIterator._NP_RepositoryId

    def __init__(self, obj):
        _0_CosCollection._objref_Iterator.__init__(self, obj)

    def set_to_element_with_value(self, *args):
        return self._obj.invoke("set_to_element_with_value", _0_CosCollection.EqualityIterator._d_set_to_element_with_value, args)

    def set_to_next_element_with_value(self, *args):
        return self._obj.invoke("set_to_next_element_with_value", _0_CosCollection.EqualityIterator._d_set_to_next_element_with_value, args)

    def set_to_next_element_with_different_value(self, *args):
        return self._obj.invoke("set_to_next_element_with_different_value", _0_CosCollection.EqualityIterator._d_set_to_next_element_with_different_value, args)

omniORB.registerObjref(EqualityIterator._NP_RepositoryId, _objref_EqualityIterator)
_0_CosCollection._objref_EqualityIterator = _objref_EqualityIterator
del EqualityIterator, _objref_EqualityIterator

# EqualityIterator skeleton
__name__ = "CosCollection__POA"
class EqualityIterator (_0_CosCollection__POA.Iterator):
    _NP_RepositoryId = _0_CosCollection.EqualityIterator._NP_RepositoryId


    _omni_op_d = {"set_to_element_with_value": _0_CosCollection.EqualityIterator._d_set_to_element_with_value, "set_to_next_element_with_value": _0_CosCollection.EqualityIterator._d_set_to_next_element_with_value, "set_to_next_element_with_different_value": _0_CosCollection.EqualityIterator._d_set_to_next_element_with_different_value}
    _omni_op_d.update(_0_CosCollection__POA.Iterator._omni_op_d)

EqualityIterator._omni_skeleton = EqualityIterator
_0_CosCollection__POA.EqualityIterator = EqualityIterator
omniORB.registerSkeleton(EqualityIterator._NP_RepositoryId, EqualityIterator)
del EqualityIterator
__name__ = "CosCollection"

# interface EqualityKeyIterator
_0_CosCollection._d_EqualityKeyIterator = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosCollection/EqualityKeyIterator:1.0", "EqualityKeyIterator")
omniORB.typeMapping["IDL:omg.org/CosCollection/EqualityKeyIterator:1.0"] = _0_CosCollection._d_EqualityKeyIterator
_0_CosCollection.EqualityKeyIterator = omniORB.newEmptyClass()
class EqualityKeyIterator (_0_CosCollection.EqualityIterator, _0_CosCollection.KeyIterator):
    _NP_RepositoryId = _0_CosCollection._d_EqualityKeyIterator[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_CosCollection.EqualityKeyIterator = EqualityKeyIterator
_0_CosCollection._tc_EqualityKeyIterator = omniORB.tcInternal.createTypeCode(_0_CosCollection._d_EqualityKeyIterator)
omniORB.registerType(EqualityKeyIterator._NP_RepositoryId, _0_CosCollection._d_EqualityKeyIterator, _0_CosCollection._tc_EqualityKeyIterator)

# EqualityKeyIterator object reference
class _objref_EqualityKeyIterator (_0_CosCollection._objref_EqualityIterator, _0_CosCollection._objref_KeyIterator):
    _NP_RepositoryId = EqualityKeyIterator._NP_RepositoryId

    def __init__(self, obj):
        _0_CosCollection._objref_EqualityIterator.__init__(self, obj)
        _0_CosCollection._objref_KeyIterator.__init__(self, obj)

omniORB.registerObjref(EqualityKeyIterator._NP_RepositoryId, _objref_EqualityKeyIterator)
_0_CosCollection._objref_EqualityKeyIterator = _objref_EqualityKeyIterator
del EqualityKeyIterator, _objref_EqualityKeyIterator

# EqualityKeyIterator skeleton
__name__ = "CosCollection__POA"
class EqualityKeyIterator (_0_CosCollection__POA.EqualityIterator, _0_CosCollection__POA.KeyIterator):
    _NP_RepositoryId = _0_CosCollection.EqualityKeyIterator._NP_RepositoryId


    _omni_op_d = {}
    _omni_op_d.update(_0_CosCollection__POA.EqualityIterator._omni_op_d)
    _omni_op_d.update(_0_CosCollection__POA.KeyIterator._omni_op_d)

EqualityKeyIterator._omni_skeleton = EqualityKeyIterator
_0_CosCollection__POA.EqualityKeyIterator = EqualityKeyIterator
omniORB.registerSkeleton(EqualityKeyIterator._NP_RepositoryId, EqualityKeyIterator)
del EqualityKeyIterator
__name__ = "CosCollection"

# interface SortedIterator
_0_CosCollection._d_SortedIterator = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosCollection/SortedIterator:1.0", "SortedIterator")
omniORB.typeMapping["IDL:omg.org/CosCollection/SortedIterator:1.0"] = _0_CosCollection._d_SortedIterator
_0_CosCollection.SortedIterator = omniORB.newEmptyClass()
class SortedIterator (_0_CosCollection.OrderedIterator):
    _NP_RepositoryId = _0_CosCollection._d_SortedIterator[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_CosCollection.SortedIterator = SortedIterator
_0_CosCollection._tc_SortedIterator = omniORB.tcInternal.createTypeCode(_0_CosCollection._d_SortedIterator)
omniORB.registerType(SortedIterator._NP_RepositoryId, _0_CosCollection._d_SortedIterator, _0_CosCollection._tc_SortedIterator)

# SortedIterator object reference
class _objref_SortedIterator (_0_CosCollection._objref_OrderedIterator):
    _NP_RepositoryId = SortedIterator._NP_RepositoryId

    def __init__(self, obj):
        _0_CosCollection._objref_OrderedIterator.__init__(self, obj)

omniORB.registerObjref(SortedIterator._NP_RepositoryId, _objref_SortedIterator)
_0_CosCollection._objref_SortedIterator = _objref_SortedIterator
del SortedIterator, _objref_SortedIterator

# SortedIterator skeleton
__name__ = "CosCollection__POA"
class SortedIterator (_0_CosCollection__POA.OrderedIterator):
    _NP_RepositoryId = _0_CosCollection.SortedIterator._NP_RepositoryId


    _omni_op_d = {}
    _omni_op_d.update(_0_CosCollection__POA.OrderedIterator._omni_op_d)

SortedIterator._omni_skeleton = SortedIterator
_0_CosCollection__POA.SortedIterator = SortedIterator
omniORB.registerSkeleton(SortedIterator._NP_RepositoryId, SortedIterator)
del SortedIterator
__name__ = "CosCollection"

# enum LowerBoundStyle
_0_CosCollection.equal_lo = omniORB.EnumItem("equal_lo", 0)
_0_CosCollection.greater = omniORB.EnumItem("greater", 1)
_0_CosCollection.greater_or_equal = omniORB.EnumItem("greater_or_equal", 2)
_0_CosCollection.LowerBoundStyle = omniORB.Enum("IDL:omg.org/CosCollection/LowerBoundStyle:1.0", (_0_CosCollection.equal_lo, _0_CosCollection.greater, _0_CosCollection.greater_or_equal,))

_0_CosCollection._d_LowerBoundStyle  = (omniORB.tcInternal.tv_enum, _0_CosCollection.LowerBoundStyle._NP_RepositoryId, "LowerBoundStyle", _0_CosCollection.LowerBoundStyle._items)
_0_CosCollection._tc_LowerBoundStyle = omniORB.tcInternal.createTypeCode(_0_CosCollection._d_LowerBoundStyle)
omniORB.registerType(_0_CosCollection.LowerBoundStyle._NP_RepositoryId, _0_CosCollection._d_LowerBoundStyle, _0_CosCollection._tc_LowerBoundStyle)

# enum UpperBoundStyle
_0_CosCollection.equal_up = omniORB.EnumItem("equal_up", 0)
_0_CosCollection.less = omniORB.EnumItem("less", 1)
_0_CosCollection.less_or_equal = omniORB.EnumItem("less_or_equal", 2)
_0_CosCollection.UpperBoundStyle = omniORB.Enum("IDL:omg.org/CosCollection/UpperBoundStyle:1.0", (_0_CosCollection.equal_up, _0_CosCollection.less, _0_CosCollection.less_or_equal,))

_0_CosCollection._d_UpperBoundStyle  = (omniORB.tcInternal.tv_enum, _0_CosCollection.UpperBoundStyle._NP_RepositoryId, "UpperBoundStyle", _0_CosCollection.UpperBoundStyle._items)
_0_CosCollection._tc_UpperBoundStyle = omniORB.tcInternal.createTypeCode(_0_CosCollection._d_UpperBoundStyle)
omniORB.registerType(_0_CosCollection.UpperBoundStyle._NP_RepositoryId, _0_CosCollection._d_UpperBoundStyle, _0_CosCollection._tc_UpperBoundStyle)

# interface KeySortedIterator
_0_CosCollection._d_KeySortedIterator = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosCollection/KeySortedIterator:1.0", "KeySortedIterator")
omniORB.typeMapping["IDL:omg.org/CosCollection/KeySortedIterator:1.0"] = _0_CosCollection._d_KeySortedIterator
_0_CosCollection.KeySortedIterator = omniORB.newEmptyClass()
class KeySortedIterator (_0_CosCollection.KeyIterator, _0_CosCollection.SortedIterator):
    _NP_RepositoryId = _0_CosCollection._d_KeySortedIterator[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_CosCollection.KeySortedIterator = KeySortedIterator
_0_CosCollection._tc_KeySortedIterator = omniORB.tcInternal.createTypeCode(_0_CosCollection._d_KeySortedIterator)
omniORB.registerType(KeySortedIterator._NP_RepositoryId, _0_CosCollection._d_KeySortedIterator, _0_CosCollection._tc_KeySortedIterator)

# KeySortedIterator operations and attributes
KeySortedIterator._d_set_to_first_element_with_key = ((omniORB.tcInternal.tv_any, omniORB.typeMapping["IDL:omg.org/CosCollection/LowerBoundStyle:1.0"]), (omniORB.tcInternal.tv_boolean, ), {_0_CosCollection.KeyInvalid._NP_RepositoryId: _0_CosCollection._d_KeyInvalid})
KeySortedIterator._d_set_to_last_element_with_key = ((omniORB.tcInternal.tv_any, omniORB.typeMapping["IDL:omg.org/CosCollection/UpperBoundStyle:1.0"]), (omniORB.tcInternal.tv_boolean, ), {_0_CosCollection.KeyInvalid._NP_RepositoryId: _0_CosCollection._d_KeyInvalid})
KeySortedIterator._d_set_to_previous_element_with_key = ((omniORB.tcInternal.tv_any, ), (omniORB.tcInternal.tv_boolean, ), {_0_CosCollection.IteratorInvalid._NP_RepositoryId: _0_CosCollection._d_IteratorInvalid, _0_CosCollection.KeyInvalid._NP_RepositoryId: _0_CosCollection._d_KeyInvalid})
KeySortedIterator._d_set_to_previous_element_with_different_key = ((), (omniORB.tcInternal.tv_boolean, ), {_0_CosCollection.IteratorInBetween._NP_RepositoryId: _0_CosCollection._d_IteratorInBetween, _0_CosCollection.IteratorInvalid._NP_RepositoryId: _0_CosCollection._d_IteratorInvalid})
KeySortedIterator._d_retrieve_previous_n_keys = ((), (omniORB.tcInternal.tv_boolean, omniORB.typeMapping["IDL:omg.org/CosCollection/AnySequence:1.0"]), {_0_CosCollection.IteratorInBetween._NP_RepositoryId: _0_CosCollection._d_IteratorInBetween, _0_CosCollection.IteratorInvalid._NP_RepositoryId: _0_CosCollection._d_IteratorInvalid})

# KeySortedIterator object reference
class _objref_KeySortedIterator (_0_CosCollection._objref_KeyIterator, _0_CosCollection._objref_SortedIterator):
    _NP_RepositoryId = KeySortedIterator._NP_RepositoryId

    def __init__(self, obj):
        _0_CosCollection._objref_KeyIterator.__init__(self, obj)
        _0_CosCollection._objref_SortedIterator.__init__(self, obj)

    def set_to_first_element_with_key(self, *args):
        return self._obj.invoke("set_to_first_element_with_key", _0_CosCollection.KeySortedIterator._d_set_to_first_element_with_key, args)

    def set_to_last_element_with_key(self, *args):
        return self._obj.invoke("set_to_last_element_with_key", _0_CosCollection.KeySortedIterator._d_set_to_last_element_with_key, args)

    def set_to_previous_element_with_key(self, *args):
        return self._obj.invoke("set_to_previous_element_with_key", _0_CosCollection.KeySortedIterator._d_set_to_previous_element_with_key, args)

    def set_to_previous_element_with_different_key(self, *args):
        return self._obj.invoke("set_to_previous_element_with_different_key", _0_CosCollection.KeySortedIterator._d_set_to_previous_element_with_different_key, args)

    def retrieve_previous_n_keys(self, *args):
        return self._obj.invoke("retrieve_previous_n_keys", _0_CosCollection.KeySortedIterator._d_retrieve_previous_n_keys, args)

omniORB.registerObjref(KeySortedIterator._NP_RepositoryId, _objref_KeySortedIterator)
_0_CosCollection._objref_KeySortedIterator = _objref_KeySortedIterator
del KeySortedIterator, _objref_KeySortedIterator

# KeySortedIterator skeleton
__name__ = "CosCollection__POA"
class KeySortedIterator (_0_CosCollection__POA.KeyIterator, _0_CosCollection__POA.SortedIterator):
    _NP_RepositoryId = _0_CosCollection.KeySortedIterator._NP_RepositoryId


    _omni_op_d = {"set_to_first_element_with_key": _0_CosCollection.KeySortedIterator._d_set_to_first_element_with_key, "set_to_last_element_with_key": _0_CosCollection.KeySortedIterator._d_set_to_last_element_with_key, "set_to_previous_element_with_key": _0_CosCollection.KeySortedIterator._d_set_to_previous_element_with_key, "set_to_previous_element_with_different_key": _0_CosCollection.KeySortedIterator._d_set_to_previous_element_with_different_key, "retrieve_previous_n_keys": _0_CosCollection.KeySortedIterator._d_retrieve_previous_n_keys}
    _omni_op_d.update(_0_CosCollection__POA.KeyIterator._omni_op_d)
    _omni_op_d.update(_0_CosCollection__POA.SortedIterator._omni_op_d)

KeySortedIterator._omni_skeleton = KeySortedIterator
_0_CosCollection__POA.KeySortedIterator = KeySortedIterator
omniORB.registerSkeleton(KeySortedIterator._NP_RepositoryId, KeySortedIterator)
del KeySortedIterator
__name__ = "CosCollection"

# interface EqualitySortedIterator
_0_CosCollection._d_EqualitySortedIterator = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosCollection/EqualitySortedIterator:1.0", "EqualitySortedIterator")
omniORB.typeMapping["IDL:omg.org/CosCollection/EqualitySortedIterator:1.0"] = _0_CosCollection._d_EqualitySortedIterator
_0_CosCollection.EqualitySortedIterator = omniORB.newEmptyClass()
class EqualitySortedIterator (_0_CosCollection.EqualityIterator, _0_CosCollection.SortedIterator):
    _NP_RepositoryId = _0_CosCollection._d_EqualitySortedIterator[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_CosCollection.EqualitySortedIterator = EqualitySortedIterator
_0_CosCollection._tc_EqualitySortedIterator = omniORB.tcInternal.createTypeCode(_0_CosCollection._d_EqualitySortedIterator)
omniORB.registerType(EqualitySortedIterator._NP_RepositoryId, _0_CosCollection._d_EqualitySortedIterator, _0_CosCollection._tc_EqualitySortedIterator)

# EqualitySortedIterator operations and attributes
EqualitySortedIterator._d_set_to_first_element_with_value = ((omniORB.tcInternal.tv_any, omniORB.typeMapping["IDL:omg.org/CosCollection/LowerBoundStyle:1.0"]), (omniORB.tcInternal.tv_boolean, ), {_0_CosCollection.ElementInvalid._NP_RepositoryId: _0_CosCollection._d_ElementInvalid})
EqualitySortedIterator._d_set_to_last_element_with_value = ((omniORB.tcInternal.tv_any, omniORB.typeMapping["IDL:omg.org/CosCollection/UpperBoundStyle:1.0"]), (omniORB.tcInternal.tv_boolean, ), {_0_CosCollection.ElementInvalid._NP_RepositoryId: _0_CosCollection._d_ElementInvalid})
EqualitySortedIterator._d_set_to_previous_element_with_value = ((omniORB.tcInternal.tv_any, ), (omniORB.tcInternal.tv_boolean, ), {_0_CosCollection.IteratorInvalid._NP_RepositoryId: _0_CosCollection._d_IteratorInvalid, _0_CosCollection.ElementInvalid._NP_RepositoryId: _0_CosCollection._d_ElementInvalid})
EqualitySortedIterator._d_set_to_previous_element_with_different_value = ((), (omniORB.tcInternal.tv_boolean, ), {_0_CosCollection.IteratorInBetween._NP_RepositoryId: _0_CosCollection._d_IteratorInBetween, _0_CosCollection.IteratorInvalid._NP_RepositoryId: _0_CosCollection._d_IteratorInvalid})

# EqualitySortedIterator object reference
class _objref_EqualitySortedIterator (_0_CosCollection._objref_EqualityIterator, _0_CosCollection._objref_SortedIterator):
    _NP_RepositoryId = EqualitySortedIterator._NP_RepositoryId

    def __init__(self, obj):
        _0_CosCollection._objref_EqualityIterator.__init__(self, obj)
        _0_CosCollection._objref_SortedIterator.__init__(self, obj)

    def set_to_first_element_with_value(self, *args):
        return self._obj.invoke("set_to_first_element_with_value", _0_CosCollection.EqualitySortedIterator._d_set_to_first_element_with_value, args)

    def set_to_last_element_with_value(self, *args):
        return self._obj.invoke("set_to_last_element_with_value", _0_CosCollection.EqualitySortedIterator._d_set_to_last_element_with_value, args)

    def set_to_previous_element_with_value(self, *args):
        return self._obj.invoke("set_to_previous_element_with_value", _0_CosCollection.EqualitySortedIterator._d_set_to_previous_element_with_value, args)

    def set_to_previous_element_with_different_value(self, *args):
        return self._obj.invoke("set_to_previous_element_with_different_value", _0_CosCollection.EqualitySortedIterator._d_set_to_previous_element_with_different_value, args)

omniORB.registerObjref(EqualitySortedIterator._NP_RepositoryId, _objref_EqualitySortedIterator)
_0_CosCollection._objref_EqualitySortedIterator = _objref_EqualitySortedIterator
del EqualitySortedIterator, _objref_EqualitySortedIterator

# EqualitySortedIterator skeleton
__name__ = "CosCollection__POA"
class EqualitySortedIterator (_0_CosCollection__POA.EqualityIterator, _0_CosCollection__POA.SortedIterator):
    _NP_RepositoryId = _0_CosCollection.EqualitySortedIterator._NP_RepositoryId


    _omni_op_d = {"set_to_first_element_with_value": _0_CosCollection.EqualitySortedIterator._d_set_to_first_element_with_value, "set_to_last_element_with_value": _0_CosCollection.EqualitySortedIterator._d_set_to_last_element_with_value, "set_to_previous_element_with_value": _0_CosCollection.EqualitySortedIterator._d_set_to_previous_element_with_value, "set_to_previous_element_with_different_value": _0_CosCollection.EqualitySortedIterator._d_set_to_previous_element_with_different_value}
    _omni_op_d.update(_0_CosCollection__POA.EqualityIterator._omni_op_d)
    _omni_op_d.update(_0_CosCollection__POA.SortedIterator._omni_op_d)

EqualitySortedIterator._omni_skeleton = EqualitySortedIterator
_0_CosCollection__POA.EqualitySortedIterator = EqualitySortedIterator
omniORB.registerSkeleton(EqualitySortedIterator._NP_RepositoryId, EqualitySortedIterator)
del EqualitySortedIterator
__name__ = "CosCollection"

# interface EqualityKeySortedIterator
_0_CosCollection._d_EqualityKeySortedIterator = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosCollection/EqualityKeySortedIterator:1.0", "EqualityKeySortedIterator")
omniORB.typeMapping["IDL:omg.org/CosCollection/EqualityKeySortedIterator:1.0"] = _0_CosCollection._d_EqualityKeySortedIterator
_0_CosCollection.EqualityKeySortedIterator = omniORB.newEmptyClass()
class EqualityKeySortedIterator (_0_CosCollection.EqualitySortedIterator, _0_CosCollection.KeySortedIterator):
    _NP_RepositoryId = _0_CosCollection._d_EqualityKeySortedIterator[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_CosCollection.EqualityKeySortedIterator = EqualityKeySortedIterator
_0_CosCollection._tc_EqualityKeySortedIterator = omniORB.tcInternal.createTypeCode(_0_CosCollection._d_EqualityKeySortedIterator)
omniORB.registerType(EqualityKeySortedIterator._NP_RepositoryId, _0_CosCollection._d_EqualityKeySortedIterator, _0_CosCollection._tc_EqualityKeySortedIterator)

# EqualityKeySortedIterator object reference
class _objref_EqualityKeySortedIterator (_0_CosCollection._objref_EqualitySortedIterator, _0_CosCollection._objref_KeySortedIterator):
    _NP_RepositoryId = EqualityKeySortedIterator._NP_RepositoryId

    def __init__(self, obj):
        _0_CosCollection._objref_EqualitySortedIterator.__init__(self, obj)
        _0_CosCollection._objref_KeySortedIterator.__init__(self, obj)

omniORB.registerObjref(EqualityKeySortedIterator._NP_RepositoryId, _objref_EqualityKeySortedIterator)
_0_CosCollection._objref_EqualityKeySortedIterator = _objref_EqualityKeySortedIterator
del EqualityKeySortedIterator, _objref_EqualityKeySortedIterator

# EqualityKeySortedIterator skeleton
__name__ = "CosCollection__POA"
class EqualityKeySortedIterator (_0_CosCollection__POA.EqualitySortedIterator, _0_CosCollection__POA.KeySortedIterator):
    _NP_RepositoryId = _0_CosCollection.EqualityKeySortedIterator._NP_RepositoryId


    _omni_op_d = {}
    _omni_op_d.update(_0_CosCollection__POA.EqualitySortedIterator._omni_op_d)
    _omni_op_d.update(_0_CosCollection__POA.KeySortedIterator._omni_op_d)

EqualityKeySortedIterator._omni_skeleton = EqualityKeySortedIterator
_0_CosCollection__POA.EqualityKeySortedIterator = EqualityKeySortedIterator
omniORB.registerSkeleton(EqualityKeySortedIterator._NP_RepositoryId, EqualityKeySortedIterator)
del EqualityKeySortedIterator
__name__ = "CosCollection"

# interface EqualitySequentialIterator
_0_CosCollection._d_EqualitySequentialIterator = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosCollection/EqualitySequentialIterator:1.0", "EqualitySequentialIterator")
omniORB.typeMapping["IDL:omg.org/CosCollection/EqualitySequentialIterator:1.0"] = _0_CosCollection._d_EqualitySequentialIterator
_0_CosCollection.EqualitySequentialIterator = omniORB.newEmptyClass()
class EqualitySequentialIterator (_0_CosCollection.EqualityIterator, _0_CosCollection.SequentialIterator):
    _NP_RepositoryId = _0_CosCollection._d_EqualitySequentialIterator[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_CosCollection.EqualitySequentialIterator = EqualitySequentialIterator
_0_CosCollection._tc_EqualitySequentialIterator = omniORB.tcInternal.createTypeCode(_0_CosCollection._d_EqualitySequentialIterator)
omniORB.registerType(EqualitySequentialIterator._NP_RepositoryId, _0_CosCollection._d_EqualitySequentialIterator, _0_CosCollection._tc_EqualitySequentialIterator)

# EqualitySequentialIterator operations and attributes
EqualitySequentialIterator._d_set_to_first_element_with_value = ((omniORB.tcInternal.tv_any, ), (omniORB.tcInternal.tv_boolean, ), {_0_CosCollection.ElementInvalid._NP_RepositoryId: _0_CosCollection._d_ElementInvalid})
EqualitySequentialIterator._d_set_to_last_element_with_value = ((omniORB.tcInternal.tv_any, ), (omniORB.tcInternal.tv_boolean, ), {_0_CosCollection.ElementInvalid._NP_RepositoryId: _0_CosCollection._d_ElementInvalid})
EqualitySequentialIterator._d_set_to_previous_element_with_value = ((omniORB.tcInternal.tv_any, ), (omniORB.tcInternal.tv_boolean, ), {_0_CosCollection.ElementInvalid._NP_RepositoryId: _0_CosCollection._d_ElementInvalid})

# EqualitySequentialIterator object reference
class _objref_EqualitySequentialIterator (_0_CosCollection._objref_EqualityIterator, _0_CosCollection._objref_SequentialIterator):
    _NP_RepositoryId = EqualitySequentialIterator._NP_RepositoryId

    def __init__(self, obj):
        _0_CosCollection._objref_EqualityIterator.__init__(self, obj)
        _0_CosCollection._objref_SequentialIterator.__init__(self, obj)

    def set_to_first_element_with_value(self, *args):
        return self._obj.invoke("set_to_first_element_with_value", _0_CosCollection.EqualitySequentialIterator._d_set_to_first_element_with_value, args)

    def set_to_last_element_with_value(self, *args):
        return self._obj.invoke("set_to_last_element_with_value", _0_CosCollection.EqualitySequentialIterator._d_set_to_last_element_with_value, args)

    def set_to_previous_element_with_value(self, *args):
        return self._obj.invoke("set_to_previous_element_with_value", _0_CosCollection.EqualitySequentialIterator._d_set_to_previous_element_with_value, args)

omniORB.registerObjref(EqualitySequentialIterator._NP_RepositoryId, _objref_EqualitySequentialIterator)
_0_CosCollection._objref_EqualitySequentialIterator = _objref_EqualitySequentialIterator
del EqualitySequentialIterator, _objref_EqualitySequentialIterator

# EqualitySequentialIterator skeleton
__name__ = "CosCollection__POA"
class EqualitySequentialIterator (_0_CosCollection__POA.EqualityIterator, _0_CosCollection__POA.SequentialIterator):
    _NP_RepositoryId = _0_CosCollection.EqualitySequentialIterator._NP_RepositoryId


    _omni_op_d = {"set_to_first_element_with_value": _0_CosCollection.EqualitySequentialIterator._d_set_to_first_element_with_value, "set_to_last_element_with_value": _0_CosCollection.EqualitySequentialIterator._d_set_to_last_element_with_value, "set_to_previous_element_with_value": _0_CosCollection.EqualitySequentialIterator._d_set_to_previous_element_with_value}
    _omni_op_d.update(_0_CosCollection__POA.EqualityIterator._omni_op_d)
    _omni_op_d.update(_0_CosCollection__POA.SequentialIterator._omni_op_d)

EqualitySequentialIterator._omni_skeleton = EqualitySequentialIterator
_0_CosCollection__POA.EqualitySequentialIterator = EqualitySequentialIterator
omniORB.registerSkeleton(EqualitySequentialIterator._NP_RepositoryId, EqualitySequentialIterator)
del EqualitySequentialIterator
__name__ = "CosCollection"

# interface Collection
_0_CosCollection._d_Collection = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosCollection/Collection:1.0", "Collection")
omniORB.typeMapping["IDL:omg.org/CosCollection/Collection:1.0"] = _0_CosCollection._d_Collection
_0_CosCollection.Collection = omniORB.newEmptyClass()
class Collection :
    _NP_RepositoryId = _0_CosCollection._d_Collection[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_CosCollection.Collection = Collection
_0_CosCollection._tc_Collection = omniORB.tcInternal.createTypeCode(_0_CosCollection._d_Collection)
omniORB.registerType(Collection._NP_RepositoryId, _0_CosCollection._d_Collection, _0_CosCollection._tc_Collection)

# Collection operations and attributes
Collection._d__get_element_type = ((),(omniORB.tcInternal.tv_TypeCode,),None)
Collection._d_add_element = ((omniORB.tcInternal.tv_any, ), (omniORB.tcInternal.tv_boolean, ), {_0_CosCollection.ElementInvalid._NP_RepositoryId: _0_CosCollection._d_ElementInvalid})
Collection._d_add_element_set_iterator = ((omniORB.tcInternal.tv_any, omniORB.typeMapping["IDL:omg.org/CosCollection/Iterator:1.0"]), (omniORB.tcInternal.tv_boolean, ), {_0_CosCollection.IteratorInvalid._NP_RepositoryId: _0_CosCollection._d_IteratorInvalid, _0_CosCollection.ElementInvalid._NP_RepositoryId: _0_CosCollection._d_ElementInvalid})
Collection._d_add_all_from = ((omniORB.typeMapping["IDL:omg.org/CosCollection/Collection:1.0"], ), (), {_0_CosCollection.ElementInvalid._NP_RepositoryId: _0_CosCollection._d_ElementInvalid})
Collection._d_remove_element_at = ((omniORB.typeMapping["IDL:omg.org/CosCollection/Iterator:1.0"], ), (), {_0_CosCollection.IteratorInvalid._NP_RepositoryId: _0_CosCollection._d_IteratorInvalid, _0_CosCollection.IteratorInBetween._NP_RepositoryId: _0_CosCollection._d_IteratorInBetween})
Collection._d_remove_all = ((), (omniORB.tcInternal.tv_ulong, ), None)
Collection._d_replace_element_at = ((omniORB.typeMapping["IDL:omg.org/CosCollection/Iterator:1.0"], omniORB.tcInternal.tv_any), (), {_0_CosCollection.IteratorInvalid._NP_RepositoryId: _0_CosCollection._d_IteratorInvalid, _0_CosCollection.IteratorInBetween._NP_RepositoryId: _0_CosCollection._d_IteratorInBetween, _0_CosCollection.ElementInvalid._NP_RepositoryId: _0_CosCollection._d_ElementInvalid})
Collection._d_retrieve_element_at = ((omniORB.typeMapping["IDL:omg.org/CosCollection/Iterator:1.0"], ), (omniORB.tcInternal.tv_boolean, omniORB.tcInternal.tv_any), {_0_CosCollection.IteratorInvalid._NP_RepositoryId: _0_CosCollection._d_IteratorInvalid, _0_CosCollection.IteratorInBetween._NP_RepositoryId: _0_CosCollection._d_IteratorInBetween})
Collection._d_all_elements_do = ((omniORB.typeMapping["IDL:omg.org/CosCollection/Command:1.0"], ), (omniORB.tcInternal.tv_boolean, ), None)
Collection._d_number_of_elements = ((), (omniORB.tcInternal.tv_ulong, ), None)
Collection._d_is_empty = ((), (omniORB.tcInternal.tv_boolean, ), None)
Collection._d_destroy = ((), (), None)
Collection._d_create_iterator = ((omniORB.tcInternal.tv_boolean, ), (omniORB.typeMapping["IDL:omg.org/CosCollection/Iterator:1.0"], ), None)

# Collection object reference
class _objref_Collection (CORBA.Object):
    _NP_RepositoryId = Collection._NP_RepositoryId

    def __init__(self, obj):
        CORBA.Object.__init__(self, obj)

    def _get_element_type(self, *args):
        return self._obj.invoke("_get_element_type", _0_CosCollection.Collection._d__get_element_type, args)

    element_type = property(_get_element_type)


    def add_element(self, *args):
        return self._obj.invoke("add_element", _0_CosCollection.Collection._d_add_element, args)

    def add_element_set_iterator(self, *args):
        return self._obj.invoke("add_element_set_iterator", _0_CosCollection.Collection._d_add_element_set_iterator, args)

    def add_all_from(self, *args):
        return self._obj.invoke("add_all_from", _0_CosCollection.Collection._d_add_all_from, args)

    def remove_element_at(self, *args):
        return self._obj.invoke("remove_element_at", _0_CosCollection.Collection._d_remove_element_at, args)

    def remove_all(self, *args):
        return self._obj.invoke("remove_all", _0_CosCollection.Collection._d_remove_all, args)

    def replace_element_at(self, *args):
        return self._obj.invoke("replace_element_at", _0_CosCollection.Collection._d_replace_element_at, args)

    def retrieve_element_at(self, *args):
        return self._obj.invoke("retrieve_element_at", _0_CosCollection.Collection._d_retrieve_element_at, args)

    def all_elements_do(self, *args):
        return self._obj.invoke("all_elements_do", _0_CosCollection.Collection._d_all_elements_do, args)

    def number_of_elements(self, *args):
        return self._obj.invoke("number_of_elements", _0_CosCollection.Collection._d_number_of_elements, args)

    def is_empty(self, *args):
        return self._obj.invoke("is_empty", _0_CosCollection.Collection._d_is_empty, args)

    def destroy(self, *args):
        return self._obj.invoke("destroy", _0_CosCollection.Collection._d_destroy, args)

    def create_iterator(self, *args):
        return self._obj.invoke("create_iterator", _0_CosCollection.Collection._d_create_iterator, args)

omniORB.registerObjref(Collection._NP_RepositoryId, _objref_Collection)
_0_CosCollection._objref_Collection = _objref_Collection
del Collection, _objref_Collection

# Collection skeleton
__name__ = "CosCollection__POA"
class Collection (PortableServer.Servant):
    _NP_RepositoryId = _0_CosCollection.Collection._NP_RepositoryId


    _omni_op_d = {"_get_element_type": _0_CosCollection.Collection._d__get_element_type, "add_element": _0_CosCollection.Collection._d_add_element, "add_element_set_iterator": _0_CosCollection.Collection._d_add_element_set_iterator, "add_all_from": _0_CosCollection.Collection._d_add_all_from, "remove_element_at": _0_CosCollection.Collection._d_remove_element_at, "remove_all": _0_CosCollection.Collection._d_remove_all, "replace_element_at": _0_CosCollection.Collection._d_replace_element_at, "retrieve_element_at": _0_CosCollection.Collection._d_retrieve_element_at, "all_elements_do": _0_CosCollection.Collection._d_all_elements_do, "number_of_elements": _0_CosCollection.Collection._d_number_of_elements, "is_empty": _0_CosCollection.Collection._d_is_empty, "destroy": _0_CosCollection.Collection._d_destroy, "create_iterator": _0_CosCollection.Collection._d_create_iterator}

Collection._omni_skeleton = Collection
_0_CosCollection__POA.Collection = Collection
omniORB.registerSkeleton(Collection._NP_RepositoryId, Collection)
del Collection
__name__ = "CosCollection"

# interface OrderedCollection
_0_CosCollection._d_OrderedCollection = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosCollection/OrderedCollection:1.0", "OrderedCollection")
omniORB.typeMapping["IDL:omg.org/CosCollection/OrderedCollection:1.0"] = _0_CosCollection._d_OrderedCollection
_0_CosCollection.OrderedCollection = omniORB.newEmptyClass()
class OrderedCollection (_0_CosCollection.Collection):
    _NP_RepositoryId = _0_CosCollection._d_OrderedCollection[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_CosCollection.OrderedCollection = OrderedCollection
_0_CosCollection._tc_OrderedCollection = omniORB.tcInternal.createTypeCode(_0_CosCollection._d_OrderedCollection)
omniORB.registerType(OrderedCollection._NP_RepositoryId, _0_CosCollection._d_OrderedCollection, _0_CosCollection._tc_OrderedCollection)

# OrderedCollection operations and attributes
OrderedCollection._d_remove_element_at_position = ((omniORB.tcInternal.tv_ulong, ), (), {_0_CosCollection.PositionInvalid._NP_RepositoryId: _0_CosCollection._d_PositionInvalid})
OrderedCollection._d_remove_first_element = ((), (), {_0_CosCollection.EmptyCollection._NP_RepositoryId: _0_CosCollection._d_EmptyCollection})
OrderedCollection._d_remove_last_element = ((), (), {_0_CosCollection.EmptyCollection._NP_RepositoryId: _0_CosCollection._d_EmptyCollection})
OrderedCollection._d_retrieve_element_at_position = ((omniORB.tcInternal.tv_ulong, ), (omniORB.tcInternal.tv_boolean, omniORB.tcInternal.tv_any), {_0_CosCollection.PositionInvalid._NP_RepositoryId: _0_CosCollection._d_PositionInvalid})
OrderedCollection._d_retrieve_first_element = ((), (omniORB.tcInternal.tv_boolean, omniORB.tcInternal.tv_any), {_0_CosCollection.EmptyCollection._NP_RepositoryId: _0_CosCollection._d_EmptyCollection})
OrderedCollection._d_retrieve_last_element = ((), (omniORB.tcInternal.tv_boolean, omniORB.tcInternal.tv_any), {_0_CosCollection.EmptyCollection._NP_RepositoryId: _0_CosCollection._d_EmptyCollection})
OrderedCollection._d_create_ordered_iterator = ((omniORB.tcInternal.tv_boolean, omniORB.tcInternal.tv_boolean), (omniORB.typeMapping["IDL:omg.org/CosCollection/OrderedIterator:1.0"], ), None)

# OrderedCollection object reference
class _objref_OrderedCollection (_0_CosCollection._objref_Collection):
    _NP_RepositoryId = OrderedCollection._NP_RepositoryId

    def __init__(self, obj):
        _0_CosCollection._objref_Collection.__init__(self, obj)

    def remove_element_at_position(self, *args):
        return self._obj.invoke("remove_element_at_position", _0_CosCollection.OrderedCollection._d_remove_element_at_position, args)

    def remove_first_element(self, *args):
        return self._obj.invoke("remove_first_element", _0_CosCollection.OrderedCollection._d_remove_first_element, args)

    def remove_last_element(self, *args):
        return self._obj.invoke("remove_last_element", _0_CosCollection.OrderedCollection._d_remove_last_element, args)

    def retrieve_element_at_position(self, *args):
        return self._obj.invoke("retrieve_element_at_position", _0_CosCollection.OrderedCollection._d_retrieve_element_at_position, args)

    def retrieve_first_element(self, *args):
        return self._obj.invoke("retrieve_first_element", _0_CosCollection.OrderedCollection._d_retrieve_first_element, args)

    def retrieve_last_element(self, *args):
        return self._obj.invoke("retrieve_last_element", _0_CosCollection.OrderedCollection._d_retrieve_last_element, args)

    def create_ordered_iterator(self, *args):
        return self._obj.invoke("create_ordered_iterator", _0_CosCollection.OrderedCollection._d_create_ordered_iterator, args)

omniORB.registerObjref(OrderedCollection._NP_RepositoryId, _objref_OrderedCollection)
_0_CosCollection._objref_OrderedCollection = _objref_OrderedCollection
del OrderedCollection, _objref_OrderedCollection

# OrderedCollection skeleton
__name__ = "CosCollection__POA"
class OrderedCollection (_0_CosCollection__POA.Collection):
    _NP_RepositoryId = _0_CosCollection.OrderedCollection._NP_RepositoryId


    _omni_op_d = {"remove_element_at_position": _0_CosCollection.OrderedCollection._d_remove_element_at_position, "remove_first_element": _0_CosCollection.OrderedCollection._d_remove_first_element, "remove_last_element": _0_CosCollection.OrderedCollection._d_remove_last_element, "retrieve_element_at_position": _0_CosCollection.OrderedCollection._d_retrieve_element_at_position, "retrieve_first_element": _0_CosCollection.OrderedCollection._d_retrieve_first_element, "retrieve_last_element": _0_CosCollection.OrderedCollection._d_retrieve_last_element, "create_ordered_iterator": _0_CosCollection.OrderedCollection._d_create_ordered_iterator}
    _omni_op_d.update(_0_CosCollection__POA.Collection._omni_op_d)

OrderedCollection._omni_skeleton = OrderedCollection
_0_CosCollection__POA.OrderedCollection = OrderedCollection
omniORB.registerSkeleton(OrderedCollection._NP_RepositoryId, OrderedCollection)
del OrderedCollection
__name__ = "CosCollection"

# interface SequentialCollection
_0_CosCollection._d_SequentialCollection = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosCollection/SequentialCollection:1.0", "SequentialCollection")
omniORB.typeMapping["IDL:omg.org/CosCollection/SequentialCollection:1.0"] = _0_CosCollection._d_SequentialCollection
_0_CosCollection.SequentialCollection = omniORB.newEmptyClass()
class SequentialCollection (_0_CosCollection.OrderedCollection):
    _NP_RepositoryId = _0_CosCollection._d_SequentialCollection[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_CosCollection.SequentialCollection = SequentialCollection
_0_CosCollection._tc_SequentialCollection = omniORB.tcInternal.createTypeCode(_0_CosCollection._d_SequentialCollection)
omniORB.registerType(SequentialCollection._NP_RepositoryId, _0_CosCollection._d_SequentialCollection, _0_CosCollection._tc_SequentialCollection)

# SequentialCollection operations and attributes
SequentialCollection._d_add_element_as_first = ((omniORB.tcInternal.tv_any, ), (), {_0_CosCollection.ElementInvalid._NP_RepositoryId: _0_CosCollection._d_ElementInvalid})
SequentialCollection._d_add_element_as_first_set_iterator = ((omniORB.tcInternal.tv_any, omniORB.typeMapping["IDL:omg.org/CosCollection/Iterator:1.0"]), (), {_0_CosCollection.ElementInvalid._NP_RepositoryId: _0_CosCollection._d_ElementInvalid, _0_CosCollection.IteratorInvalid._NP_RepositoryId: _0_CosCollection._d_IteratorInvalid})
SequentialCollection._d_add_element_as_last = ((omniORB.tcInternal.tv_any, ), (), {_0_CosCollection.ElementInvalid._NP_RepositoryId: _0_CosCollection._d_ElementInvalid})
SequentialCollection._d_add_element_as_last_set_iterator = ((omniORB.tcInternal.tv_any, omniORB.typeMapping["IDL:omg.org/CosCollection/Iterator:1.0"]), (), {_0_CosCollection.ElementInvalid._NP_RepositoryId: _0_CosCollection._d_ElementInvalid, _0_CosCollection.IteratorInvalid._NP_RepositoryId: _0_CosCollection._d_IteratorInvalid})
SequentialCollection._d_add_element_as_next = ((omniORB.tcInternal.tv_any, omniORB.typeMapping["IDL:omg.org/CosCollection/Iterator:1.0"]), (), {_0_CosCollection.ElementInvalid._NP_RepositoryId: _0_CosCollection._d_ElementInvalid, _0_CosCollection.IteratorInvalid._NP_RepositoryId: _0_CosCollection._d_IteratorInvalid})
SequentialCollection._d_add_element_as_previous = ((omniORB.tcInternal.tv_any, omniORB.typeMapping["IDL:omg.org/CosCollection/Iterator:1.0"]), (), {_0_CosCollection.ElementInvalid._NP_RepositoryId: _0_CosCollection._d_ElementInvalid, _0_CosCollection.IteratorInvalid._NP_RepositoryId: _0_CosCollection._d_IteratorInvalid})
SequentialCollection._d_add_element_at_position = ((omniORB.tcInternal.tv_ulong, omniORB.tcInternal.tv_any), (), {_0_CosCollection.PositionInvalid._NP_RepositoryId: _0_CosCollection._d_PositionInvalid, _0_CosCollection.ElementInvalid._NP_RepositoryId: _0_CosCollection._d_ElementInvalid})
SequentialCollection._d_add_element_at_position_set_iterator = ((omniORB.tcInternal.tv_ulong, omniORB.tcInternal.tv_any, omniORB.typeMapping["IDL:omg.org/CosCollection/Iterator:1.0"]), (), {_0_CosCollection.PositionInvalid._NP_RepositoryId: _0_CosCollection._d_PositionInvalid, _0_CosCollection.ElementInvalid._NP_RepositoryId: _0_CosCollection._d_ElementInvalid, _0_CosCollection.IteratorInvalid._NP_RepositoryId: _0_CosCollection._d_IteratorInvalid})
SequentialCollection._d_replace_element_at_position = ((omniORB.tcInternal.tv_ulong, omniORB.tcInternal.tv_any), (), {_0_CosCollection.PositionInvalid._NP_RepositoryId: _0_CosCollection._d_PositionInvalid, _0_CosCollection.ElementInvalid._NP_RepositoryId: _0_CosCollection._d_ElementInvalid})
SequentialCollection._d_replace_first_element = ((omniORB.tcInternal.tv_any, ), (), {_0_CosCollection.ElementInvalid._NP_RepositoryId: _0_CosCollection._d_ElementInvalid, _0_CosCollection.EmptyCollection._NP_RepositoryId: _0_CosCollection._d_EmptyCollection})
SequentialCollection._d_replace_last_element = ((omniORB.tcInternal.tv_any, ), (), {_0_CosCollection.ElementInvalid._NP_RepositoryId: _0_CosCollection._d_ElementInvalid, _0_CosCollection.EmptyCollection._NP_RepositoryId: _0_CosCollection._d_EmptyCollection})
SequentialCollection._d_sort = ((omniORB.typeMapping["IDL:omg.org/CosCollection/Comparator:1.0"], ), (), None)
SequentialCollection._d_reverse = ((), (), None)

# SequentialCollection object reference
class _objref_SequentialCollection (_0_CosCollection._objref_OrderedCollection):
    _NP_RepositoryId = SequentialCollection._NP_RepositoryId

    def __init__(self, obj):
        _0_CosCollection._objref_OrderedCollection.__init__(self, obj)

    def add_element_as_first(self, *args):
        return self._obj.invoke("add_element_as_first", _0_CosCollection.SequentialCollection._d_add_element_as_first, args)

    def add_element_as_first_set_iterator(self, *args):
        return self._obj.invoke("add_element_as_first_set_iterator", _0_CosCollection.SequentialCollection._d_add_element_as_first_set_iterator, args)

    def add_element_as_last(self, *args):
        return self._obj.invoke("add_element_as_last", _0_CosCollection.SequentialCollection._d_add_element_as_last, args)

    def add_element_as_last_set_iterator(self, *args):
        return self._obj.invoke("add_element_as_last_set_iterator", _0_CosCollection.SequentialCollection._d_add_element_as_last_set_iterator, args)

    def add_element_as_next(self, *args):
        return self._obj.invoke("add_element_as_next", _0_CosCollection.SequentialCollection._d_add_element_as_next, args)

    def add_element_as_previous(self, *args):
        return self._obj.invoke("add_element_as_previous", _0_CosCollection.SequentialCollection._d_add_element_as_previous, args)

    def add_element_at_position(self, *args):
        return self._obj.invoke("add_element_at_position", _0_CosCollection.SequentialCollection._d_add_element_at_position, args)

    def add_element_at_position_set_iterator(self, *args):
        return self._obj.invoke("add_element_at_position_set_iterator", _0_CosCollection.SequentialCollection._d_add_element_at_position_set_iterator, args)

    def replace_element_at_position(self, *args):
        return self._obj.invoke("replace_element_at_position", _0_CosCollection.SequentialCollection._d_replace_element_at_position, args)

    def replace_first_element(self, *args):
        return self._obj.invoke("replace_first_element", _0_CosCollection.SequentialCollection._d_replace_first_element, args)

    def replace_last_element(self, *args):
        return self._obj.invoke("replace_last_element", _0_CosCollection.SequentialCollection._d_replace_last_element, args)

    def sort(self, *args):
        return self._obj.invoke("sort", _0_CosCollection.SequentialCollection._d_sort, args)

    def reverse(self, *args):
        return self._obj.invoke("reverse", _0_CosCollection.SequentialCollection._d_reverse, args)

omniORB.registerObjref(SequentialCollection._NP_RepositoryId, _objref_SequentialCollection)
_0_CosCollection._objref_SequentialCollection = _objref_SequentialCollection
del SequentialCollection, _objref_SequentialCollection

# SequentialCollection skeleton
__name__ = "CosCollection__POA"
class SequentialCollection (_0_CosCollection__POA.OrderedCollection):
    _NP_RepositoryId = _0_CosCollection.SequentialCollection._NP_RepositoryId


    _omni_op_d = {"add_element_as_first": _0_CosCollection.SequentialCollection._d_add_element_as_first, "add_element_as_first_set_iterator": _0_CosCollection.SequentialCollection._d_add_element_as_first_set_iterator, "add_element_as_last": _0_CosCollection.SequentialCollection._d_add_element_as_last, "add_element_as_last_set_iterator": _0_CosCollection.SequentialCollection._d_add_element_as_last_set_iterator, "add_element_as_next": _0_CosCollection.SequentialCollection._d_add_element_as_next, "add_element_as_previous": _0_CosCollection.SequentialCollection._d_add_element_as_previous, "add_element_at_position": _0_CosCollection.SequentialCollection._d_add_element_at_position, "add_element_at_position_set_iterator": _0_CosCollection.SequentialCollection._d_add_element_at_position_set_iterator, "replace_element_at_position": _0_CosCollection.SequentialCollection._d_replace_element_at_position, "replace_first_element": _0_CosCollection.SequentialCollection._d_replace_first_element, "replace_last_element": _0_CosCollection.SequentialCollection._d_replace_last_element, "sort": _0_CosCollection.SequentialCollection._d_sort, "reverse": _0_CosCollection.SequentialCollection._d_reverse}
    _omni_op_d.update(_0_CosCollection__POA.OrderedCollection._omni_op_d)

SequentialCollection._omni_skeleton = SequentialCollection
_0_CosCollection__POA.SequentialCollection = SequentialCollection
omniORB.registerSkeleton(SequentialCollection._NP_RepositoryId, SequentialCollection)
del SequentialCollection
__name__ = "CosCollection"

# interface SortedCollection
_0_CosCollection._d_SortedCollection = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosCollection/SortedCollection:1.0", "SortedCollection")
omniORB.typeMapping["IDL:omg.org/CosCollection/SortedCollection:1.0"] = _0_CosCollection._d_SortedCollection
_0_CosCollection.SortedCollection = omniORB.newEmptyClass()
class SortedCollection (_0_CosCollection.OrderedCollection):
    _NP_RepositoryId = _0_CosCollection._d_SortedCollection[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_CosCollection.SortedCollection = SortedCollection
_0_CosCollection._tc_SortedCollection = omniORB.tcInternal.createTypeCode(_0_CosCollection._d_SortedCollection)
omniORB.registerType(SortedCollection._NP_RepositoryId, _0_CosCollection._d_SortedCollection, _0_CosCollection._tc_SortedCollection)

# SortedCollection object reference
class _objref_SortedCollection (_0_CosCollection._objref_OrderedCollection):
    _NP_RepositoryId = SortedCollection._NP_RepositoryId

    def __init__(self, obj):
        _0_CosCollection._objref_OrderedCollection.__init__(self, obj)

omniORB.registerObjref(SortedCollection._NP_RepositoryId, _objref_SortedCollection)
_0_CosCollection._objref_SortedCollection = _objref_SortedCollection
del SortedCollection, _objref_SortedCollection

# SortedCollection skeleton
__name__ = "CosCollection__POA"
class SortedCollection (_0_CosCollection__POA.OrderedCollection):
    _NP_RepositoryId = _0_CosCollection.SortedCollection._NP_RepositoryId


    _omni_op_d = {}
    _omni_op_d.update(_0_CosCollection__POA.OrderedCollection._omni_op_d)

SortedCollection._omni_skeleton = SortedCollection
_0_CosCollection__POA.SortedCollection = SortedCollection
omniORB.registerSkeleton(SortedCollection._NP_RepositoryId, SortedCollection)
del SortedCollection
__name__ = "CosCollection"

# interface EqualityCollection
_0_CosCollection._d_EqualityCollection = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosCollection/EqualityCollection:1.0", "EqualityCollection")
omniORB.typeMapping["IDL:omg.org/CosCollection/EqualityCollection:1.0"] = _0_CosCollection._d_EqualityCollection
_0_CosCollection.EqualityCollection = omniORB.newEmptyClass()
class EqualityCollection (_0_CosCollection.Collection):
    _NP_RepositoryId = _0_CosCollection._d_EqualityCollection[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_CosCollection.EqualityCollection = EqualityCollection
_0_CosCollection._tc_EqualityCollection = omniORB.tcInternal.createTypeCode(_0_CosCollection._d_EqualityCollection)
omniORB.registerType(EqualityCollection._NP_RepositoryId, _0_CosCollection._d_EqualityCollection, _0_CosCollection._tc_EqualityCollection)

# EqualityCollection operations and attributes
EqualityCollection._d_contains_element = ((omniORB.tcInternal.tv_any, ), (omniORB.tcInternal.tv_boolean, ), {_0_CosCollection.ElementInvalid._NP_RepositoryId: _0_CosCollection._d_ElementInvalid})
EqualityCollection._d_contains_all_from = ((omniORB.typeMapping["IDL:omg.org/CosCollection/Collection:1.0"], ), (omniORB.tcInternal.tv_boolean, ), {_0_CosCollection.ElementInvalid._NP_RepositoryId: _0_CosCollection._d_ElementInvalid})
EqualityCollection._d_locate_or_add_element = ((omniORB.tcInternal.tv_any, ), (omniORB.tcInternal.tv_boolean, ), {_0_CosCollection.ElementInvalid._NP_RepositoryId: _0_CosCollection._d_ElementInvalid})
EqualityCollection._d_locate_or_add_element_set_iterator = ((omniORB.tcInternal.tv_any, omniORB.typeMapping["IDL:omg.org/CosCollection/Iterator:1.0"]), (omniORB.tcInternal.tv_boolean, ), {_0_CosCollection.ElementInvalid._NP_RepositoryId: _0_CosCollection._d_ElementInvalid, _0_CosCollection.IteratorInvalid._NP_RepositoryId: _0_CosCollection._d_IteratorInvalid})
EqualityCollection._d_locate_element = ((omniORB.tcInternal.tv_any, omniORB.typeMapping["IDL:omg.org/CosCollection/Iterator:1.0"]), (omniORB.tcInternal.tv_boolean, ), {_0_CosCollection.ElementInvalid._NP_RepositoryId: _0_CosCollection._d_ElementInvalid, _0_CosCollection.IteratorInvalid._NP_RepositoryId: _0_CosCollection._d_IteratorInvalid})
EqualityCollection._d_locate_next_element = ((omniORB.tcInternal.tv_any, omniORB.typeMapping["IDL:omg.org/CosCollection/Iterator:1.0"]), (omniORB.tcInternal.tv_boolean, ), {_0_CosCollection.ElementInvalid._NP_RepositoryId: _0_CosCollection._d_ElementInvalid, _0_CosCollection.IteratorInvalid._NP_RepositoryId: _0_CosCollection._d_IteratorInvalid})
EqualityCollection._d_locate_next_different_element = ((omniORB.typeMapping["IDL:omg.org/CosCollection/Iterator:1.0"], ), (omniORB.tcInternal.tv_boolean, ), {_0_CosCollection.IteratorInvalid._NP_RepositoryId: _0_CosCollection._d_IteratorInvalid, _0_CosCollection.IteratorInBetween._NP_RepositoryId: _0_CosCollection._d_IteratorInBetween})
EqualityCollection._d_remove_element = ((omniORB.tcInternal.tv_any, ), (omniORB.tcInternal.tv_boolean, ), {_0_CosCollection.ElementInvalid._NP_RepositoryId: _0_CosCollection._d_ElementInvalid})
EqualityCollection._d_remove_all_occurrences = ((omniORB.tcInternal.tv_any, ), (omniORB.tcInternal.tv_ulong, ), {_0_CosCollection.ElementInvalid._NP_RepositoryId: _0_CosCollection._d_ElementInvalid})
EqualityCollection._d_number_of_different_elements = ((), (omniORB.tcInternal.tv_ulong, ), None)
EqualityCollection._d_number_of_occurrences = ((omniORB.tcInternal.tv_any, ), (omniORB.tcInternal.tv_ulong, ), {_0_CosCollection.ElementInvalid._NP_RepositoryId: _0_CosCollection._d_ElementInvalid})

# EqualityCollection object reference
class _objref_EqualityCollection (_0_CosCollection._objref_Collection):
    _NP_RepositoryId = EqualityCollection._NP_RepositoryId

    def __init__(self, obj):
        _0_CosCollection._objref_Collection.__init__(self, obj)

    def contains_element(self, *args):
        return self._obj.invoke("contains_element", _0_CosCollection.EqualityCollection._d_contains_element, args)

    def contains_all_from(self, *args):
        return self._obj.invoke("contains_all_from", _0_CosCollection.EqualityCollection._d_contains_all_from, args)

    def locate_or_add_element(self, *args):
        return self._obj.invoke("locate_or_add_element", _0_CosCollection.EqualityCollection._d_locate_or_add_element, args)

    def locate_or_add_element_set_iterator(self, *args):
        return self._obj.invoke("locate_or_add_element_set_iterator", _0_CosCollection.EqualityCollection._d_locate_or_add_element_set_iterator, args)

    def locate_element(self, *args):
        return self._obj.invoke("locate_element", _0_CosCollection.EqualityCollection._d_locate_element, args)

    def locate_next_element(self, *args):
        return self._obj.invoke("locate_next_element", _0_CosCollection.EqualityCollection._d_locate_next_element, args)

    def locate_next_different_element(self, *args):
        return self._obj.invoke("locate_next_different_element", _0_CosCollection.EqualityCollection._d_locate_next_different_element, args)

    def remove_element(self, *args):
        return self._obj.invoke("remove_element", _0_CosCollection.EqualityCollection._d_remove_element, args)

    def remove_all_occurrences(self, *args):
        return self._obj.invoke("remove_all_occurrences", _0_CosCollection.EqualityCollection._d_remove_all_occurrences, args)

    def number_of_different_elements(self, *args):
        return self._obj.invoke("number_of_different_elements", _0_CosCollection.EqualityCollection._d_number_of_different_elements, args)

    def number_of_occurrences(self, *args):
        return self._obj.invoke("number_of_occurrences", _0_CosCollection.EqualityCollection._d_number_of_occurrences, args)

omniORB.registerObjref(EqualityCollection._NP_RepositoryId, _objref_EqualityCollection)
_0_CosCollection._objref_EqualityCollection = _objref_EqualityCollection
del EqualityCollection, _objref_EqualityCollection

# EqualityCollection skeleton
__name__ = "CosCollection__POA"
class EqualityCollection (_0_CosCollection__POA.Collection):
    _NP_RepositoryId = _0_CosCollection.EqualityCollection._NP_RepositoryId


    _omni_op_d = {"contains_element": _0_CosCollection.EqualityCollection._d_contains_element, "contains_all_from": _0_CosCollection.EqualityCollection._d_contains_all_from, "locate_or_add_element": _0_CosCollection.EqualityCollection._d_locate_or_add_element, "locate_or_add_element_set_iterator": _0_CosCollection.EqualityCollection._d_locate_or_add_element_set_iterator, "locate_element": _0_CosCollection.EqualityCollection._d_locate_element, "locate_next_element": _0_CosCollection.EqualityCollection._d_locate_next_element, "locate_next_different_element": _0_CosCollection.EqualityCollection._d_locate_next_different_element, "remove_element": _0_CosCollection.EqualityCollection._d_remove_element, "remove_all_occurrences": _0_CosCollection.EqualityCollection._d_remove_all_occurrences, "number_of_different_elements": _0_CosCollection.EqualityCollection._d_number_of_different_elements, "number_of_occurrences": _0_CosCollection.EqualityCollection._d_number_of_occurrences}
    _omni_op_d.update(_0_CosCollection__POA.Collection._omni_op_d)

EqualityCollection._omni_skeleton = EqualityCollection
_0_CosCollection__POA.EqualityCollection = EqualityCollection
omniORB.registerSkeleton(EqualityCollection._NP_RepositoryId, EqualityCollection)
del EqualityCollection
__name__ = "CosCollection"

# interface KeyCollection
_0_CosCollection._d_KeyCollection = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosCollection/KeyCollection:1.0", "KeyCollection")
omniORB.typeMapping["IDL:omg.org/CosCollection/KeyCollection:1.0"] = _0_CosCollection._d_KeyCollection
_0_CosCollection.KeyCollection = omniORB.newEmptyClass()
class KeyCollection (_0_CosCollection.Collection):
    _NP_RepositoryId = _0_CosCollection._d_KeyCollection[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_CosCollection.KeyCollection = KeyCollection
_0_CosCollection._tc_KeyCollection = omniORB.tcInternal.createTypeCode(_0_CosCollection._d_KeyCollection)
omniORB.registerType(KeyCollection._NP_RepositoryId, _0_CosCollection._d_KeyCollection, _0_CosCollection._tc_KeyCollection)

# KeyCollection operations and attributes
KeyCollection._d__get_key_type = ((),(omniORB.tcInternal.tv_TypeCode,),None)
KeyCollection._d_contains_element_with_key = ((omniORB.tcInternal.tv_any, ), (omniORB.tcInternal.tv_boolean, ), {_0_CosCollection.KeyInvalid._NP_RepositoryId: _0_CosCollection._d_KeyInvalid})
KeyCollection._d_contains_all_keys_from = ((omniORB.typeMapping["IDL:omg.org/CosCollection/KeyCollection:1.0"], ), (omniORB.tcInternal.tv_boolean, ), {_0_CosCollection.KeyInvalid._NP_RepositoryId: _0_CosCollection._d_KeyInvalid})
KeyCollection._d_locate_or_add_element_with_key = ((omniORB.tcInternal.tv_any, ), (omniORB.tcInternal.tv_boolean, ), {_0_CosCollection.ElementInvalid._NP_RepositoryId: _0_CosCollection._d_ElementInvalid})
KeyCollection._d_locate_or_add_element_with_key_set_iterator = ((omniORB.tcInternal.tv_any, omniORB.typeMapping["IDL:omg.org/CosCollection/Iterator:1.0"]), (omniORB.tcInternal.tv_boolean, ), {_0_CosCollection.ElementInvalid._NP_RepositoryId: _0_CosCollection._d_ElementInvalid, _0_CosCollection.IteratorInvalid._NP_RepositoryId: _0_CosCollection._d_IteratorInvalid})
KeyCollection._d_add_or_replace_element_with_key = ((omniORB.tcInternal.tv_any, ), (omniORB.tcInternal.tv_boolean, ), {_0_CosCollection.ElementInvalid._NP_RepositoryId: _0_CosCollection._d_ElementInvalid})
KeyCollection._d_add_or_replace_element_with_key_set_iterator = ((omniORB.tcInternal.tv_any, omniORB.typeMapping["IDL:omg.org/CosCollection/Iterator:1.0"]), (omniORB.tcInternal.tv_boolean, ), {_0_CosCollection.ElementInvalid._NP_RepositoryId: _0_CosCollection._d_ElementInvalid, _0_CosCollection.IteratorInvalid._NP_RepositoryId: _0_CosCollection._d_IteratorInvalid})
KeyCollection._d_remove_element_with_key = ((omniORB.tcInternal.tv_any, ), (omniORB.tcInternal.tv_boolean, ), {_0_CosCollection.KeyInvalid._NP_RepositoryId: _0_CosCollection._d_KeyInvalid})
KeyCollection._d_remove_all_elements_with_key = ((omniORB.tcInternal.tv_any, ), (omniORB.tcInternal.tv_ulong, ), {_0_CosCollection.KeyInvalid._NP_RepositoryId: _0_CosCollection._d_KeyInvalid})
KeyCollection._d_replace_element_with_key = ((omniORB.tcInternal.tv_any, ), (omniORB.tcInternal.tv_boolean, ), {_0_CosCollection.ElementInvalid._NP_RepositoryId: _0_CosCollection._d_ElementInvalid})
KeyCollection._d_replace_element_with_key_set_iterator = ((omniORB.tcInternal.tv_any, omniORB.typeMapping["IDL:omg.org/CosCollection/Iterator:1.0"]), (omniORB.tcInternal.tv_boolean, ), {_0_CosCollection.ElementInvalid._NP_RepositoryId: _0_CosCollection._d_ElementInvalid, _0_CosCollection.IteratorInvalid._NP_RepositoryId: _0_CosCollection._d_IteratorInvalid})
KeyCollection._d_retrieve_element_with_key = ((omniORB.tcInternal.tv_any, ), (omniORB.tcInternal.tv_boolean, omniORB.tcInternal.tv_any), {_0_CosCollection.KeyInvalid._NP_RepositoryId: _0_CosCollection._d_KeyInvalid})
KeyCollection._d_key = ((omniORB.tcInternal.tv_any, ), (omniORB.tcInternal.tv_any, ), {_0_CosCollection.ElementInvalid._NP_RepositoryId: _0_CosCollection._d_ElementInvalid})
KeyCollection._d_keys = ((omniORB.typeMapping["IDL:omg.org/CosCollection/AnySequence:1.0"], ), (omniORB.typeMapping["IDL:omg.org/CosCollection/AnySequence:1.0"], ), {_0_CosCollection.ElementInvalid._NP_RepositoryId: _0_CosCollection._d_ElementInvalid})
KeyCollection._d_locate_element_with_key = ((omniORB.tcInternal.tv_any, omniORB.typeMapping["IDL:omg.org/CosCollection/Iterator:1.0"]), (omniORB.tcInternal.tv_boolean, ), {_0_CosCollection.KeyInvalid._NP_RepositoryId: _0_CosCollection._d_KeyInvalid, _0_CosCollection.IteratorInvalid._NP_RepositoryId: _0_CosCollection._d_IteratorInvalid})
KeyCollection._d_locate_next_element_with_key = ((omniORB.tcInternal.tv_any, omniORB.typeMapping["IDL:omg.org/CosCollection/Iterator:1.0"]), (omniORB.tcInternal.tv_boolean, ), {_0_CosCollection.KeyInvalid._NP_RepositoryId: _0_CosCollection._d_KeyInvalid, _0_CosCollection.IteratorInvalid._NP_RepositoryId: _0_CosCollection._d_IteratorInvalid})
KeyCollection._d_locate_next_element_with_different_key = ((omniORB.typeMapping["IDL:omg.org/CosCollection/Iterator:1.0"], ), (omniORB.tcInternal.tv_boolean, ), {_0_CosCollection.IteratorInBetween._NP_RepositoryId: _0_CosCollection._d_IteratorInBetween, _0_CosCollection.IteratorInvalid._NP_RepositoryId: _0_CosCollection._d_IteratorInvalid})
KeyCollection._d_number_of_different_keys = ((), (omniORB.tcInternal.tv_ulong, ), None)
KeyCollection._d_number_of_elements_with_key = ((omniORB.tcInternal.tv_any, ), (omniORB.tcInternal.tv_ulong, ), {_0_CosCollection.KeyInvalid._NP_RepositoryId: _0_CosCollection._d_KeyInvalid})

# KeyCollection object reference
class _objref_KeyCollection (_0_CosCollection._objref_Collection):
    _NP_RepositoryId = KeyCollection._NP_RepositoryId

    def __init__(self, obj):
        _0_CosCollection._objref_Collection.__init__(self, obj)

    def _get_key_type(self, *args):
        return self._obj.invoke("_get_key_type", _0_CosCollection.KeyCollection._d__get_key_type, args)

    key_type = property(_get_key_type)


    def contains_element_with_key(self, *args):
        return self._obj.invoke("contains_element_with_key", _0_CosCollection.KeyCollection._d_contains_element_with_key, args)

    def contains_all_keys_from(self, *args):
        return self._obj.invoke("contains_all_keys_from", _0_CosCollection.KeyCollection._d_contains_all_keys_from, args)

    def locate_or_add_element_with_key(self, *args):
        return self._obj.invoke("locate_or_add_element_with_key", _0_CosCollection.KeyCollection._d_locate_or_add_element_with_key, args)

    def locate_or_add_element_with_key_set_iterator(self, *args):
        return self._obj.invoke("locate_or_add_element_with_key_set_iterator", _0_CosCollection.KeyCollection._d_locate_or_add_element_with_key_set_iterator, args)

    def add_or_replace_element_with_key(self, *args):
        return self._obj.invoke("add_or_replace_element_with_key", _0_CosCollection.KeyCollection._d_add_or_replace_element_with_key, args)

    def add_or_replace_element_with_key_set_iterator(self, *args):
        return self._obj.invoke("add_or_replace_element_with_key_set_iterator", _0_CosCollection.KeyCollection._d_add_or_replace_element_with_key_set_iterator, args)

    def remove_element_with_key(self, *args):
        return self._obj.invoke("remove_element_with_key", _0_CosCollection.KeyCollection._d_remove_element_with_key, args)

    def remove_all_elements_with_key(self, *args):
        return self._obj.invoke("remove_all_elements_with_key", _0_CosCollection.KeyCollection._d_remove_all_elements_with_key, args)

    def replace_element_with_key(self, *args):
        return self._obj.invoke("replace_element_with_key", _0_CosCollection.KeyCollection._d_replace_element_with_key, args)

    def replace_element_with_key_set_iterator(self, *args):
        return self._obj.invoke("replace_element_with_key_set_iterator", _0_CosCollection.KeyCollection._d_replace_element_with_key_set_iterator, args)

    def retrieve_element_with_key(self, *args):
        return self._obj.invoke("retrieve_element_with_key", _0_CosCollection.KeyCollection._d_retrieve_element_with_key, args)

    def key(self, *args):
        return self._obj.invoke("key", _0_CosCollection.KeyCollection._d_key, args)

    def keys(self, *args):
        return self._obj.invoke("keys", _0_CosCollection.KeyCollection._d_keys, args)

    def locate_element_with_key(self, *args):
        return self._obj.invoke("locate_element_with_key", _0_CosCollection.KeyCollection._d_locate_element_with_key, args)

    def locate_next_element_with_key(self, *args):
        return self._obj.invoke("locate_next_element_with_key", _0_CosCollection.KeyCollection._d_locate_next_element_with_key, args)

    def locate_next_element_with_different_key(self, *args):
        return self._obj.invoke("locate_next_element_with_different_key", _0_CosCollection.KeyCollection._d_locate_next_element_with_different_key, args)

    def number_of_different_keys(self, *args):
        return self._obj.invoke("number_of_different_keys", _0_CosCollection.KeyCollection._d_number_of_different_keys, args)

    def number_of_elements_with_key(self, *args):
        return self._obj.invoke("number_of_elements_with_key", _0_CosCollection.KeyCollection._d_number_of_elements_with_key, args)

omniORB.registerObjref(KeyCollection._NP_RepositoryId, _objref_KeyCollection)
_0_CosCollection._objref_KeyCollection = _objref_KeyCollection
del KeyCollection, _objref_KeyCollection

# KeyCollection skeleton
__name__ = "CosCollection__POA"
class KeyCollection (_0_CosCollection__POA.Collection):
    _NP_RepositoryId = _0_CosCollection.KeyCollection._NP_RepositoryId


    _omni_op_d = {"_get_key_type": _0_CosCollection.KeyCollection._d__get_key_type, "contains_element_with_key": _0_CosCollection.KeyCollection._d_contains_element_with_key, "contains_all_keys_from": _0_CosCollection.KeyCollection._d_contains_all_keys_from, "locate_or_add_element_with_key": _0_CosCollection.KeyCollection._d_locate_or_add_element_with_key, "locate_or_add_element_with_key_set_iterator": _0_CosCollection.KeyCollection._d_locate_or_add_element_with_key_set_iterator, "add_or_replace_element_with_key": _0_CosCollection.KeyCollection._d_add_or_replace_element_with_key, "add_or_replace_element_with_key_set_iterator": _0_CosCollection.KeyCollection._d_add_or_replace_element_with_key_set_iterator, "remove_element_with_key": _0_CosCollection.KeyCollection._d_remove_element_with_key, "remove_all_elements_with_key": _0_CosCollection.KeyCollection._d_remove_all_elements_with_key, "replace_element_with_key": _0_CosCollection.KeyCollection._d_replace_element_with_key, "replace_element_with_key_set_iterator": _0_CosCollection.KeyCollection._d_replace_element_with_key_set_iterator, "retrieve_element_with_key": _0_CosCollection.KeyCollection._d_retrieve_element_with_key, "key": _0_CosCollection.KeyCollection._d_key, "keys": _0_CosCollection.KeyCollection._d_keys, "locate_element_with_key": _0_CosCollection.KeyCollection._d_locate_element_with_key, "locate_next_element_with_key": _0_CosCollection.KeyCollection._d_locate_next_element_with_key, "locate_next_element_with_different_key": _0_CosCollection.KeyCollection._d_locate_next_element_with_different_key, "number_of_different_keys": _0_CosCollection.KeyCollection._d_number_of_different_keys, "number_of_elements_with_key": _0_CosCollection.KeyCollection._d_number_of_elements_with_key}
    _omni_op_d.update(_0_CosCollection__POA.Collection._omni_op_d)

KeyCollection._omni_skeleton = KeyCollection
_0_CosCollection__POA.KeyCollection = KeyCollection
omniORB.registerSkeleton(KeyCollection._NP_RepositoryId, KeyCollection)
del KeyCollection
__name__ = "CosCollection"

# interface EqualityKeyCollection
_0_CosCollection._d_EqualityKeyCollection = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosCollection/EqualityKeyCollection:1.0", "EqualityKeyCollection")
omniORB.typeMapping["IDL:omg.org/CosCollection/EqualityKeyCollection:1.0"] = _0_CosCollection._d_EqualityKeyCollection
_0_CosCollection.EqualityKeyCollection = omniORB.newEmptyClass()
class EqualityKeyCollection (_0_CosCollection.EqualityCollection, _0_CosCollection.KeyCollection):
    _NP_RepositoryId = _0_CosCollection._d_EqualityKeyCollection[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_CosCollection.EqualityKeyCollection = EqualityKeyCollection
_0_CosCollection._tc_EqualityKeyCollection = omniORB.tcInternal.createTypeCode(_0_CosCollection._d_EqualityKeyCollection)
omniORB.registerType(EqualityKeyCollection._NP_RepositoryId, _0_CosCollection._d_EqualityKeyCollection, _0_CosCollection._tc_EqualityKeyCollection)

# EqualityKeyCollection object reference
class _objref_EqualityKeyCollection (_0_CosCollection._objref_EqualityCollection, _0_CosCollection._objref_KeyCollection):
    _NP_RepositoryId = EqualityKeyCollection._NP_RepositoryId

    def __init__(self, obj):
        _0_CosCollection._objref_EqualityCollection.__init__(self, obj)
        _0_CosCollection._objref_KeyCollection.__init__(self, obj)

omniORB.registerObjref(EqualityKeyCollection._NP_RepositoryId, _objref_EqualityKeyCollection)
_0_CosCollection._objref_EqualityKeyCollection = _objref_EqualityKeyCollection
del EqualityKeyCollection, _objref_EqualityKeyCollection

# EqualityKeyCollection skeleton
__name__ = "CosCollection__POA"
class EqualityKeyCollection (_0_CosCollection__POA.EqualityCollection, _0_CosCollection__POA.KeyCollection):
    _NP_RepositoryId = _0_CosCollection.EqualityKeyCollection._NP_RepositoryId


    _omni_op_d = {}
    _omni_op_d.update(_0_CosCollection__POA.EqualityCollection._omni_op_d)
    _omni_op_d.update(_0_CosCollection__POA.KeyCollection._omni_op_d)

EqualityKeyCollection._omni_skeleton = EqualityKeyCollection
_0_CosCollection__POA.EqualityKeyCollection = EqualityKeyCollection
omniORB.registerSkeleton(EqualityKeyCollection._NP_RepositoryId, EqualityKeyCollection)
del EqualityKeyCollection
__name__ = "CosCollection"

# interface KeySortedCollection
_0_CosCollection._d_KeySortedCollection = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosCollection/KeySortedCollection:1.0", "KeySortedCollection")
omniORB.typeMapping["IDL:omg.org/CosCollection/KeySortedCollection:1.0"] = _0_CosCollection._d_KeySortedCollection
_0_CosCollection.KeySortedCollection = omniORB.newEmptyClass()
class KeySortedCollection (_0_CosCollection.KeyCollection, _0_CosCollection.SortedCollection):
    _NP_RepositoryId = _0_CosCollection._d_KeySortedCollection[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_CosCollection.KeySortedCollection = KeySortedCollection
_0_CosCollection._tc_KeySortedCollection = omniORB.tcInternal.createTypeCode(_0_CosCollection._d_KeySortedCollection)
omniORB.registerType(KeySortedCollection._NP_RepositoryId, _0_CosCollection._d_KeySortedCollection, _0_CosCollection._tc_KeySortedCollection)

# KeySortedCollection operations and attributes
KeySortedCollection._d_locate_first_element_with_key = ((omniORB.tcInternal.tv_any, omniORB.typeMapping["IDL:omg.org/CosCollection/Iterator:1.0"]), (omniORB.tcInternal.tv_boolean, ), {_0_CosCollection.KeyInvalid._NP_RepositoryId: _0_CosCollection._d_KeyInvalid, _0_CosCollection.IteratorInvalid._NP_RepositoryId: _0_CosCollection._d_IteratorInvalid})
KeySortedCollection._d_locate_last_element_with_key = ((omniORB.tcInternal.tv_any, omniORB.typeMapping["IDL:omg.org/CosCollection/Iterator:1.0"]), (omniORB.tcInternal.tv_boolean, ), {_0_CosCollection.KeyInvalid._NP_RepositoryId: _0_CosCollection._d_KeyInvalid, _0_CosCollection.IteratorInvalid._NP_RepositoryId: _0_CosCollection._d_IteratorInvalid})
KeySortedCollection._d_locate_previous_element_with_key = ((omniORB.tcInternal.tv_any, omniORB.typeMapping["IDL:omg.org/CosCollection/Iterator:1.0"]), (omniORB.tcInternal.tv_boolean, ), {_0_CosCollection.KeyInvalid._NP_RepositoryId: _0_CosCollection._d_KeyInvalid, _0_CosCollection.IteratorInvalid._NP_RepositoryId: _0_CosCollection._d_IteratorInvalid})
KeySortedCollection._d_locate_previous_element_with_different_key = ((omniORB.typeMapping["IDL:omg.org/CosCollection/Iterator:1.0"], ), (omniORB.tcInternal.tv_boolean, ), {_0_CosCollection.IteratorInBetween._NP_RepositoryId: _0_CosCollection._d_IteratorInBetween, _0_CosCollection.IteratorInvalid._NP_RepositoryId: _0_CosCollection._d_IteratorInvalid})

# KeySortedCollection object reference
class _objref_KeySortedCollection (_0_CosCollection._objref_KeyCollection, _0_CosCollection._objref_SortedCollection):
    _NP_RepositoryId = KeySortedCollection._NP_RepositoryId

    def __init__(self, obj):
        _0_CosCollection._objref_KeyCollection.__init__(self, obj)
        _0_CosCollection._objref_SortedCollection.__init__(self, obj)

    def locate_first_element_with_key(self, *args):
        return self._obj.invoke("locate_first_element_with_key", _0_CosCollection.KeySortedCollection._d_locate_first_element_with_key, args)

    def locate_last_element_with_key(self, *args):
        return self._obj.invoke("locate_last_element_with_key", _0_CosCollection.KeySortedCollection._d_locate_last_element_with_key, args)

    def locate_previous_element_with_key(self, *args):
        return self._obj.invoke("locate_previous_element_with_key", _0_CosCollection.KeySortedCollection._d_locate_previous_element_with_key, args)

    def locate_previous_element_with_different_key(self, *args):
        return self._obj.invoke("locate_previous_element_with_different_key", _0_CosCollection.KeySortedCollection._d_locate_previous_element_with_different_key, args)

omniORB.registerObjref(KeySortedCollection._NP_RepositoryId, _objref_KeySortedCollection)
_0_CosCollection._objref_KeySortedCollection = _objref_KeySortedCollection
del KeySortedCollection, _objref_KeySortedCollection

# KeySortedCollection skeleton
__name__ = "CosCollection__POA"
class KeySortedCollection (_0_CosCollection__POA.KeyCollection, _0_CosCollection__POA.SortedCollection):
    _NP_RepositoryId = _0_CosCollection.KeySortedCollection._NP_RepositoryId


    _omni_op_d = {"locate_first_element_with_key": _0_CosCollection.KeySortedCollection._d_locate_first_element_with_key, "locate_last_element_with_key": _0_CosCollection.KeySortedCollection._d_locate_last_element_with_key, "locate_previous_element_with_key": _0_CosCollection.KeySortedCollection._d_locate_previous_element_with_key, "locate_previous_element_with_different_key": _0_CosCollection.KeySortedCollection._d_locate_previous_element_with_different_key}
    _omni_op_d.update(_0_CosCollection__POA.KeyCollection._omni_op_d)
    _omni_op_d.update(_0_CosCollection__POA.SortedCollection._omni_op_d)

KeySortedCollection._omni_skeleton = KeySortedCollection
_0_CosCollection__POA.KeySortedCollection = KeySortedCollection
omniORB.registerSkeleton(KeySortedCollection._NP_RepositoryId, KeySortedCollection)
del KeySortedCollection
__name__ = "CosCollection"

# interface EqualitySortedCollection
_0_CosCollection._d_EqualitySortedCollection = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosCollection/EqualitySortedCollection:1.0", "EqualitySortedCollection")
omniORB.typeMapping["IDL:omg.org/CosCollection/EqualitySortedCollection:1.0"] = _0_CosCollection._d_EqualitySortedCollection
_0_CosCollection.EqualitySortedCollection = omniORB.newEmptyClass()
class EqualitySortedCollection (_0_CosCollection.EqualityCollection, _0_CosCollection.SortedCollection):
    _NP_RepositoryId = _0_CosCollection._d_EqualitySortedCollection[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_CosCollection.EqualitySortedCollection = EqualitySortedCollection
_0_CosCollection._tc_EqualitySortedCollection = omniORB.tcInternal.createTypeCode(_0_CosCollection._d_EqualitySortedCollection)
omniORB.registerType(EqualitySortedCollection._NP_RepositoryId, _0_CosCollection._d_EqualitySortedCollection, _0_CosCollection._tc_EqualitySortedCollection)

# EqualitySortedCollection operations and attributes
EqualitySortedCollection._d_locate_first_element = ((omniORB.tcInternal.tv_any, omniORB.typeMapping["IDL:omg.org/CosCollection/Iterator:1.0"]), (omniORB.tcInternal.tv_boolean, ), {_0_CosCollection.ElementInvalid._NP_RepositoryId: _0_CosCollection._d_ElementInvalid, _0_CosCollection.IteratorInvalid._NP_RepositoryId: _0_CosCollection._d_IteratorInvalid})
EqualitySortedCollection._d_locate_last_element = ((omniORB.tcInternal.tv_any, omniORB.typeMapping["IDL:omg.org/CosCollection/Iterator:1.0"]), (omniORB.tcInternal.tv_boolean, ), {_0_CosCollection.ElementInvalid._NP_RepositoryId: _0_CosCollection._d_ElementInvalid, _0_CosCollection.IteratorInvalid._NP_RepositoryId: _0_CosCollection._d_IteratorInvalid})
EqualitySortedCollection._d_locate_previous_element = ((omniORB.tcInternal.tv_any, omniORB.typeMapping["IDL:omg.org/CosCollection/Iterator:1.0"]), (omniORB.tcInternal.tv_boolean, ), {_0_CosCollection.ElementInvalid._NP_RepositoryId: _0_CosCollection._d_ElementInvalid, _0_CosCollection.IteratorInvalid._NP_RepositoryId: _0_CosCollection._d_IteratorInvalid})
EqualitySortedCollection._d_locate_previous_different_element = ((omniORB.typeMapping["IDL:omg.org/CosCollection/Iterator:1.0"], ), (omniORB.tcInternal.tv_boolean, ), {_0_CosCollection.IteratorInvalid._NP_RepositoryId: _0_CosCollection._d_IteratorInvalid})

# EqualitySortedCollection object reference
class _objref_EqualitySortedCollection (_0_CosCollection._objref_EqualityCollection, _0_CosCollection._objref_SortedCollection):
    _NP_RepositoryId = EqualitySortedCollection._NP_RepositoryId

    def __init__(self, obj):
        _0_CosCollection._objref_EqualityCollection.__init__(self, obj)
        _0_CosCollection._objref_SortedCollection.__init__(self, obj)

    def locate_first_element(self, *args):
        return self._obj.invoke("locate_first_element", _0_CosCollection.EqualitySortedCollection._d_locate_first_element, args)

    def locate_last_element(self, *args):
        return self._obj.invoke("locate_last_element", _0_CosCollection.EqualitySortedCollection._d_locate_last_element, args)

    def locate_previous_element(self, *args):
        return self._obj.invoke("locate_previous_element", _0_CosCollection.EqualitySortedCollection._d_locate_previous_element, args)

    def locate_previous_different_element(self, *args):
        return self._obj.invoke("locate_previous_different_element", _0_CosCollection.EqualitySortedCollection._d_locate_previous_different_element, args)

omniORB.registerObjref(EqualitySortedCollection._NP_RepositoryId, _objref_EqualitySortedCollection)
_0_CosCollection._objref_EqualitySortedCollection = _objref_EqualitySortedCollection
del EqualitySortedCollection, _objref_EqualitySortedCollection

# EqualitySortedCollection skeleton
__name__ = "CosCollection__POA"
class EqualitySortedCollection (_0_CosCollection__POA.EqualityCollection, _0_CosCollection__POA.SortedCollection):
    _NP_RepositoryId = _0_CosCollection.EqualitySortedCollection._NP_RepositoryId


    _omni_op_d = {"locate_first_element": _0_CosCollection.EqualitySortedCollection._d_locate_first_element, "locate_last_element": _0_CosCollection.EqualitySortedCollection._d_locate_last_element, "locate_previous_element": _0_CosCollection.EqualitySortedCollection._d_locate_previous_element, "locate_previous_different_element": _0_CosCollection.EqualitySortedCollection._d_locate_previous_different_element}
    _omni_op_d.update(_0_CosCollection__POA.EqualityCollection._omni_op_d)
    _omni_op_d.update(_0_CosCollection__POA.SortedCollection._omni_op_d)

EqualitySortedCollection._omni_skeleton = EqualitySortedCollection
_0_CosCollection__POA.EqualitySortedCollection = EqualitySortedCollection
omniORB.registerSkeleton(EqualitySortedCollection._NP_RepositoryId, EqualitySortedCollection)
del EqualitySortedCollection
__name__ = "CosCollection"

# interface EqualityKeySortedCollection
_0_CosCollection._d_EqualityKeySortedCollection = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosCollection/EqualityKeySortedCollection:1.0", "EqualityKeySortedCollection")
omniORB.typeMapping["IDL:omg.org/CosCollection/EqualityKeySortedCollection:1.0"] = _0_CosCollection._d_EqualityKeySortedCollection
_0_CosCollection.EqualityKeySortedCollection = omniORB.newEmptyClass()
class EqualityKeySortedCollection (_0_CosCollection.EqualityCollection, _0_CosCollection.KeyCollection, _0_CosCollection.SortedCollection):
    _NP_RepositoryId = _0_CosCollection._d_EqualityKeySortedCollection[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_CosCollection.EqualityKeySortedCollection = EqualityKeySortedCollection
_0_CosCollection._tc_EqualityKeySortedCollection = omniORB.tcInternal.createTypeCode(_0_CosCollection._d_EqualityKeySortedCollection)
omniORB.registerType(EqualityKeySortedCollection._NP_RepositoryId, _0_CosCollection._d_EqualityKeySortedCollection, _0_CosCollection._tc_EqualityKeySortedCollection)

# EqualityKeySortedCollection object reference
class _objref_EqualityKeySortedCollection (_0_CosCollection._objref_EqualityCollection, _0_CosCollection._objref_KeyCollection, _0_CosCollection._objref_SortedCollection):
    _NP_RepositoryId = EqualityKeySortedCollection._NP_RepositoryId

    def __init__(self, obj):
        _0_CosCollection._objref_EqualityCollection.__init__(self, obj)
        _0_CosCollection._objref_KeyCollection.__init__(self, obj)
        _0_CosCollection._objref_SortedCollection.__init__(self, obj)

omniORB.registerObjref(EqualityKeySortedCollection._NP_RepositoryId, _objref_EqualityKeySortedCollection)
_0_CosCollection._objref_EqualityKeySortedCollection = _objref_EqualityKeySortedCollection
del EqualityKeySortedCollection, _objref_EqualityKeySortedCollection

# EqualityKeySortedCollection skeleton
__name__ = "CosCollection__POA"
class EqualityKeySortedCollection (_0_CosCollection__POA.EqualityCollection, _0_CosCollection__POA.KeyCollection, _0_CosCollection__POA.SortedCollection):
    _NP_RepositoryId = _0_CosCollection.EqualityKeySortedCollection._NP_RepositoryId


    _omni_op_d = {}
    _omni_op_d.update(_0_CosCollection__POA.EqualityCollection._omni_op_d)
    _omni_op_d.update(_0_CosCollection__POA.KeyCollection._omni_op_d)
    _omni_op_d.update(_0_CosCollection__POA.SortedCollection._omni_op_d)

EqualityKeySortedCollection._omni_skeleton = EqualityKeySortedCollection
_0_CosCollection__POA.EqualityKeySortedCollection = EqualityKeySortedCollection
omniORB.registerSkeleton(EqualityKeySortedCollection._NP_RepositoryId, EqualityKeySortedCollection)
del EqualityKeySortedCollection
__name__ = "CosCollection"

# interface EqualitySequentialCollection
_0_CosCollection._d_EqualitySequentialCollection = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosCollection/EqualitySequentialCollection:1.0", "EqualitySequentialCollection")
omniORB.typeMapping["IDL:omg.org/CosCollection/EqualitySequentialCollection:1.0"] = _0_CosCollection._d_EqualitySequentialCollection
_0_CosCollection.EqualitySequentialCollection = omniORB.newEmptyClass()
class EqualitySequentialCollection (_0_CosCollection.EqualityCollection, _0_CosCollection.SequentialCollection):
    _NP_RepositoryId = _0_CosCollection._d_EqualitySequentialCollection[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_CosCollection.EqualitySequentialCollection = EqualitySequentialCollection
_0_CosCollection._tc_EqualitySequentialCollection = omniORB.tcInternal.createTypeCode(_0_CosCollection._d_EqualitySequentialCollection)
omniORB.registerType(EqualitySequentialCollection._NP_RepositoryId, _0_CosCollection._d_EqualitySequentialCollection, _0_CosCollection._tc_EqualitySequentialCollection)

# EqualitySequentialCollection operations and attributes
EqualitySequentialCollection._d_locate_first_element_with_value = ((omniORB.tcInternal.tv_any, omniORB.typeMapping["IDL:omg.org/CosCollection/Iterator:1.0"]), (omniORB.tcInternal.tv_boolean, ), {_0_CosCollection.ElementInvalid._NP_RepositoryId: _0_CosCollection._d_ElementInvalid, _0_CosCollection.IteratorInvalid._NP_RepositoryId: _0_CosCollection._d_IteratorInvalid})
EqualitySequentialCollection._d_locate_last_element_with_value = ((omniORB.tcInternal.tv_any, omniORB.typeMapping["IDL:omg.org/CosCollection/Iterator:1.0"]), (omniORB.tcInternal.tv_boolean, ), {_0_CosCollection.ElementInvalid._NP_RepositoryId: _0_CosCollection._d_ElementInvalid, _0_CosCollection.IteratorInvalid._NP_RepositoryId: _0_CosCollection._d_IteratorInvalid})
EqualitySequentialCollection._d_locate_previous_element_with_value = ((omniORB.tcInternal.tv_any, omniORB.typeMapping["IDL:omg.org/CosCollection/Iterator:1.0"]), (omniORB.tcInternal.tv_boolean, ), {_0_CosCollection.ElementInvalid._NP_RepositoryId: _0_CosCollection._d_ElementInvalid, _0_CosCollection.IteratorInvalid._NP_RepositoryId: _0_CosCollection._d_IteratorInvalid})

# EqualitySequentialCollection object reference
class _objref_EqualitySequentialCollection (_0_CosCollection._objref_EqualityCollection, _0_CosCollection._objref_SequentialCollection):
    _NP_RepositoryId = EqualitySequentialCollection._NP_RepositoryId

    def __init__(self, obj):
        _0_CosCollection._objref_EqualityCollection.__init__(self, obj)
        _0_CosCollection._objref_SequentialCollection.__init__(self, obj)

    def locate_first_element_with_value(self, *args):
        return self._obj.invoke("locate_first_element_with_value", _0_CosCollection.EqualitySequentialCollection._d_locate_first_element_with_value, args)

    def locate_last_element_with_value(self, *args):
        return self._obj.invoke("locate_last_element_with_value", _0_CosCollection.EqualitySequentialCollection._d_locate_last_element_with_value, args)

    def locate_previous_element_with_value(self, *args):
        return self._obj.invoke("locate_previous_element_with_value", _0_CosCollection.EqualitySequentialCollection._d_locate_previous_element_with_value, args)

omniORB.registerObjref(EqualitySequentialCollection._NP_RepositoryId, _objref_EqualitySequentialCollection)
_0_CosCollection._objref_EqualitySequentialCollection = _objref_EqualitySequentialCollection
del EqualitySequentialCollection, _objref_EqualitySequentialCollection

# EqualitySequentialCollection skeleton
__name__ = "CosCollection__POA"
class EqualitySequentialCollection (_0_CosCollection__POA.EqualityCollection, _0_CosCollection__POA.SequentialCollection):
    _NP_RepositoryId = _0_CosCollection.EqualitySequentialCollection._NP_RepositoryId


    _omni_op_d = {"locate_first_element_with_value": _0_CosCollection.EqualitySequentialCollection._d_locate_first_element_with_value, "locate_last_element_with_value": _0_CosCollection.EqualitySequentialCollection._d_locate_last_element_with_value, "locate_previous_element_with_value": _0_CosCollection.EqualitySequentialCollection._d_locate_previous_element_with_value}
    _omni_op_d.update(_0_CosCollection__POA.EqualityCollection._omni_op_d)
    _omni_op_d.update(_0_CosCollection__POA.SequentialCollection._omni_op_d)

EqualitySequentialCollection._omni_skeleton = EqualitySequentialCollection
_0_CosCollection__POA.EqualitySequentialCollection = EqualitySequentialCollection
omniORB.registerSkeleton(EqualitySequentialCollection._NP_RepositoryId, EqualitySequentialCollection)
del EqualitySequentialCollection
__name__ = "CosCollection"

# interface KeySet
_0_CosCollection._d_KeySet = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosCollection/KeySet:1.0", "KeySet")
omniORB.typeMapping["IDL:omg.org/CosCollection/KeySet:1.0"] = _0_CosCollection._d_KeySet
_0_CosCollection.KeySet = omniORB.newEmptyClass()
class KeySet (_0_CosCollection.KeyCollection):
    _NP_RepositoryId = _0_CosCollection._d_KeySet[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_CosCollection.KeySet = KeySet
_0_CosCollection._tc_KeySet = omniORB.tcInternal.createTypeCode(_0_CosCollection._d_KeySet)
omniORB.registerType(KeySet._NP_RepositoryId, _0_CosCollection._d_KeySet, _0_CosCollection._tc_KeySet)

# KeySet object reference
class _objref_KeySet (_0_CosCollection._objref_KeyCollection):
    _NP_RepositoryId = KeySet._NP_RepositoryId

    def __init__(self, obj):
        _0_CosCollection._objref_KeyCollection.__init__(self, obj)

omniORB.registerObjref(KeySet._NP_RepositoryId, _objref_KeySet)
_0_CosCollection._objref_KeySet = _objref_KeySet
del KeySet, _objref_KeySet

# KeySet skeleton
__name__ = "CosCollection__POA"
class KeySet (_0_CosCollection__POA.KeyCollection):
    _NP_RepositoryId = _0_CosCollection.KeySet._NP_RepositoryId


    _omni_op_d = {}
    _omni_op_d.update(_0_CosCollection__POA.KeyCollection._omni_op_d)

KeySet._omni_skeleton = KeySet
_0_CosCollection__POA.KeySet = KeySet
omniORB.registerSkeleton(KeySet._NP_RepositoryId, KeySet)
del KeySet
__name__ = "CosCollection"

# interface KeyBag
_0_CosCollection._d_KeyBag = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosCollection/KeyBag:1.0", "KeyBag")
omniORB.typeMapping["IDL:omg.org/CosCollection/KeyBag:1.0"] = _0_CosCollection._d_KeyBag
_0_CosCollection.KeyBag = omniORB.newEmptyClass()
class KeyBag (_0_CosCollection.KeyCollection):
    _NP_RepositoryId = _0_CosCollection._d_KeyBag[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_CosCollection.KeyBag = KeyBag
_0_CosCollection._tc_KeyBag = omniORB.tcInternal.createTypeCode(_0_CosCollection._d_KeyBag)
omniORB.registerType(KeyBag._NP_RepositoryId, _0_CosCollection._d_KeyBag, _0_CosCollection._tc_KeyBag)

# KeyBag object reference
class _objref_KeyBag (_0_CosCollection._objref_KeyCollection):
    _NP_RepositoryId = KeyBag._NP_RepositoryId

    def __init__(self, obj):
        _0_CosCollection._objref_KeyCollection.__init__(self, obj)

omniORB.registerObjref(KeyBag._NP_RepositoryId, _objref_KeyBag)
_0_CosCollection._objref_KeyBag = _objref_KeyBag
del KeyBag, _objref_KeyBag

# KeyBag skeleton
__name__ = "CosCollection__POA"
class KeyBag (_0_CosCollection__POA.KeyCollection):
    _NP_RepositoryId = _0_CosCollection.KeyBag._NP_RepositoryId


    _omni_op_d = {}
    _omni_op_d.update(_0_CosCollection__POA.KeyCollection._omni_op_d)

KeyBag._omni_skeleton = KeyBag
_0_CosCollection__POA.KeyBag = KeyBag
omniORB.registerSkeleton(KeyBag._NP_RepositoryId, KeyBag)
del KeyBag
__name__ = "CosCollection"

# interface Map
_0_CosCollection._d_Map = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosCollection/Map:1.0", "Map")
omniORB.typeMapping["IDL:omg.org/CosCollection/Map:1.0"] = _0_CosCollection._d_Map
_0_CosCollection.Map = omniORB.newEmptyClass()
class Map (_0_CosCollection.EqualityKeyCollection):
    _NP_RepositoryId = _0_CosCollection._d_Map[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_CosCollection.Map = Map
_0_CosCollection._tc_Map = omniORB.tcInternal.createTypeCode(_0_CosCollection._d_Map)
omniORB.registerType(Map._NP_RepositoryId, _0_CosCollection._d_Map, _0_CosCollection._tc_Map)

# Map operations and attributes
Map._d_difference_with = ((omniORB.typeMapping["IDL:omg.org/CosCollection/Map:1.0"], ), (), {_0_CosCollection.ElementInvalid._NP_RepositoryId: _0_CosCollection._d_ElementInvalid})
Map._d_add_difference = ((omniORB.typeMapping["IDL:omg.org/CosCollection/Map:1.0"], omniORB.typeMapping["IDL:omg.org/CosCollection/Map:1.0"]), (), {_0_CosCollection.ElementInvalid._NP_RepositoryId: _0_CosCollection._d_ElementInvalid})
Map._d_intersection_with = ((omniORB.typeMapping["IDL:omg.org/CosCollection/Map:1.0"], ), (), {_0_CosCollection.ElementInvalid._NP_RepositoryId: _0_CosCollection._d_ElementInvalid})
Map._d_add_intersection = ((omniORB.typeMapping["IDL:omg.org/CosCollection/Map:1.0"], omniORB.typeMapping["IDL:omg.org/CosCollection/Map:1.0"]), (), {_0_CosCollection.ElementInvalid._NP_RepositoryId: _0_CosCollection._d_ElementInvalid})
Map._d_union_with = ((omniORB.typeMapping["IDL:omg.org/CosCollection/Map:1.0"], ), (), {_0_CosCollection.ElementInvalid._NP_RepositoryId: _0_CosCollection._d_ElementInvalid})
Map._d_add_union = ((omniORB.typeMapping["IDL:omg.org/CosCollection/Map:1.0"], omniORB.typeMapping["IDL:omg.org/CosCollection/Map:1.0"]), (), {_0_CosCollection.ElementInvalid._NP_RepositoryId: _0_CosCollection._d_ElementInvalid})
Map._d_equal = ((omniORB.typeMapping["IDL:omg.org/CosCollection/Map:1.0"], ), (omniORB.tcInternal.tv_boolean, ), {_0_CosCollection.ElementInvalid._NP_RepositoryId: _0_CosCollection._d_ElementInvalid})
Map._d_not_equal = ((omniORB.typeMapping["IDL:omg.org/CosCollection/Map:1.0"], ), (omniORB.tcInternal.tv_boolean, ), {_0_CosCollection.ElementInvalid._NP_RepositoryId: _0_CosCollection._d_ElementInvalid})

# Map object reference
class _objref_Map (_0_CosCollection._objref_EqualityKeyCollection):
    _NP_RepositoryId = Map._NP_RepositoryId

    def __init__(self, obj):
        _0_CosCollection._objref_EqualityKeyCollection.__init__(self, obj)

    def difference_with(self, *args):
        return self._obj.invoke("difference_with", _0_CosCollection.Map._d_difference_with, args)

    def add_difference(self, *args):
        return self._obj.invoke("add_difference", _0_CosCollection.Map._d_add_difference, args)

    def intersection_with(self, *args):
        return self._obj.invoke("intersection_with", _0_CosCollection.Map._d_intersection_with, args)

    def add_intersection(self, *args):
        return self._obj.invoke("add_intersection", _0_CosCollection.Map._d_add_intersection, args)

    def union_with(self, *args):
        return self._obj.invoke("union_with", _0_CosCollection.Map._d_union_with, args)

    def add_union(self, *args):
        return self._obj.invoke("add_union", _0_CosCollection.Map._d_add_union, args)

    def equal(self, *args):
        return self._obj.invoke("equal", _0_CosCollection.Map._d_equal, args)

    def not_equal(self, *args):
        return self._obj.invoke("not_equal", _0_CosCollection.Map._d_not_equal, args)

omniORB.registerObjref(Map._NP_RepositoryId, _objref_Map)
_0_CosCollection._objref_Map = _objref_Map
del Map, _objref_Map

# Map skeleton
__name__ = "CosCollection__POA"
class Map (_0_CosCollection__POA.EqualityKeyCollection):
    _NP_RepositoryId = _0_CosCollection.Map._NP_RepositoryId


    _omni_op_d = {"difference_with": _0_CosCollection.Map._d_difference_with, "add_difference": _0_CosCollection.Map._d_add_difference, "intersection_with": _0_CosCollection.Map._d_intersection_with, "add_intersection": _0_CosCollection.Map._d_add_intersection, "union_with": _0_CosCollection.Map._d_union_with, "add_union": _0_CosCollection.Map._d_add_union, "equal": _0_CosCollection.Map._d_equal, "not_equal": _0_CosCollection.Map._d_not_equal}
    _omni_op_d.update(_0_CosCollection__POA.EqualityKeyCollection._omni_op_d)

Map._omni_skeleton = Map
_0_CosCollection__POA.Map = Map
omniORB.registerSkeleton(Map._NP_RepositoryId, Map)
del Map
__name__ = "CosCollection"

# interface Relation
_0_CosCollection._d_Relation = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosCollection/Relation:1.0", "Relation")
omniORB.typeMapping["IDL:omg.org/CosCollection/Relation:1.0"] = _0_CosCollection._d_Relation
_0_CosCollection.Relation = omniORB.newEmptyClass()
class Relation (_0_CosCollection.EqualityKeyCollection):
    _NP_RepositoryId = _0_CosCollection._d_Relation[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_CosCollection.Relation = Relation
_0_CosCollection._tc_Relation = omniORB.tcInternal.createTypeCode(_0_CosCollection._d_Relation)
omniORB.registerType(Relation._NP_RepositoryId, _0_CosCollection._d_Relation, _0_CosCollection._tc_Relation)

# Relation object reference
class _objref_Relation (_0_CosCollection._objref_EqualityKeyCollection):
    _NP_RepositoryId = Relation._NP_RepositoryId

    def __init__(self, obj):
        _0_CosCollection._objref_EqualityKeyCollection.__init__(self, obj)

omniORB.registerObjref(Relation._NP_RepositoryId, _objref_Relation)
_0_CosCollection._objref_Relation = _objref_Relation
del Relation, _objref_Relation

# Relation skeleton
__name__ = "CosCollection__POA"
class Relation (_0_CosCollection__POA.EqualityKeyCollection):
    _NP_RepositoryId = _0_CosCollection.Relation._NP_RepositoryId


    _omni_op_d = {}
    _omni_op_d.update(_0_CosCollection__POA.EqualityKeyCollection._omni_op_d)

Relation._omni_skeleton = Relation
_0_CosCollection__POA.Relation = Relation
omniORB.registerSkeleton(Relation._NP_RepositoryId, Relation)
del Relation
__name__ = "CosCollection"

# interface Set
_0_CosCollection._d_Set = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosCollection/Set:1.0", "Set")
omniORB.typeMapping["IDL:omg.org/CosCollection/Set:1.0"] = _0_CosCollection._d_Set
_0_CosCollection.Set = omniORB.newEmptyClass()
class Set (_0_CosCollection.EqualityCollection):
    _NP_RepositoryId = _0_CosCollection._d_Set[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_CosCollection.Set = Set
_0_CosCollection._tc_Set = omniORB.tcInternal.createTypeCode(_0_CosCollection._d_Set)
omniORB.registerType(Set._NP_RepositoryId, _0_CosCollection._d_Set, _0_CosCollection._tc_Set)

# Set object reference
class _objref_Set (_0_CosCollection._objref_EqualityCollection):
    _NP_RepositoryId = Set._NP_RepositoryId

    def __init__(self, obj):
        _0_CosCollection._objref_EqualityCollection.__init__(self, obj)

omniORB.registerObjref(Set._NP_RepositoryId, _objref_Set)
_0_CosCollection._objref_Set = _objref_Set
del Set, _objref_Set

# Set skeleton
__name__ = "CosCollection__POA"
class Set (_0_CosCollection__POA.EqualityCollection):
    _NP_RepositoryId = _0_CosCollection.Set._NP_RepositoryId


    _omni_op_d = {}
    _omni_op_d.update(_0_CosCollection__POA.EqualityCollection._omni_op_d)

Set._omni_skeleton = Set
_0_CosCollection__POA.Set = Set
omniORB.registerSkeleton(Set._NP_RepositoryId, Set)
del Set
__name__ = "CosCollection"

# interface Bag
_0_CosCollection._d_Bag = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosCollection/Bag:1.0", "Bag")
omniORB.typeMapping["IDL:omg.org/CosCollection/Bag:1.0"] = _0_CosCollection._d_Bag
_0_CosCollection.Bag = omniORB.newEmptyClass()
class Bag (_0_CosCollection.EqualityCollection):
    _NP_RepositoryId = _0_CosCollection._d_Bag[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_CosCollection.Bag = Bag
_0_CosCollection._tc_Bag = omniORB.tcInternal.createTypeCode(_0_CosCollection._d_Bag)
omniORB.registerType(Bag._NP_RepositoryId, _0_CosCollection._d_Bag, _0_CosCollection._tc_Bag)

# Bag object reference
class _objref_Bag (_0_CosCollection._objref_EqualityCollection):
    _NP_RepositoryId = Bag._NP_RepositoryId

    def __init__(self, obj):
        _0_CosCollection._objref_EqualityCollection.__init__(self, obj)

omniORB.registerObjref(Bag._NP_RepositoryId, _objref_Bag)
_0_CosCollection._objref_Bag = _objref_Bag
del Bag, _objref_Bag

# Bag skeleton
__name__ = "CosCollection__POA"
class Bag (_0_CosCollection__POA.EqualityCollection):
    _NP_RepositoryId = _0_CosCollection.Bag._NP_RepositoryId


    _omni_op_d = {}
    _omni_op_d.update(_0_CosCollection__POA.EqualityCollection._omni_op_d)

Bag._omni_skeleton = Bag
_0_CosCollection__POA.Bag = Bag
omniORB.registerSkeleton(Bag._NP_RepositoryId, Bag)
del Bag
__name__ = "CosCollection"

# interface KeySortedSet
_0_CosCollection._d_KeySortedSet = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosCollection/KeySortedSet:1.0", "KeySortedSet")
omniORB.typeMapping["IDL:omg.org/CosCollection/KeySortedSet:1.0"] = _0_CosCollection._d_KeySortedSet
_0_CosCollection.KeySortedSet = omniORB.newEmptyClass()
class KeySortedSet (_0_CosCollection.KeySortedCollection):
    _NP_RepositoryId = _0_CosCollection._d_KeySortedSet[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_CosCollection.KeySortedSet = KeySortedSet
_0_CosCollection._tc_KeySortedSet = omniORB.tcInternal.createTypeCode(_0_CosCollection._d_KeySortedSet)
omniORB.registerType(KeySortedSet._NP_RepositoryId, _0_CosCollection._d_KeySortedSet, _0_CosCollection._tc_KeySortedSet)

# KeySortedSet operations and attributes
KeySortedSet._d_compare = ((omniORB.typeMapping["IDL:omg.org/CosCollection/KeySortedSet:1.0"], omniORB.typeMapping["IDL:omg.org/CosCollection/Comparator:1.0"]), (omniORB.tcInternal.tv_long, ), None)

# KeySortedSet object reference
class _objref_KeySortedSet (_0_CosCollection._objref_KeySortedCollection):
    _NP_RepositoryId = KeySortedSet._NP_RepositoryId

    def __init__(self, obj):
        _0_CosCollection._objref_KeySortedCollection.__init__(self, obj)

    def compare(self, *args):
        return self._obj.invoke("compare", _0_CosCollection.KeySortedSet._d_compare, args)

omniORB.registerObjref(KeySortedSet._NP_RepositoryId, _objref_KeySortedSet)
_0_CosCollection._objref_KeySortedSet = _objref_KeySortedSet
del KeySortedSet, _objref_KeySortedSet

# KeySortedSet skeleton
__name__ = "CosCollection__POA"
class KeySortedSet (_0_CosCollection__POA.KeySortedCollection):
    _NP_RepositoryId = _0_CosCollection.KeySortedSet._NP_RepositoryId


    _omni_op_d = {"compare": _0_CosCollection.KeySortedSet._d_compare}
    _omni_op_d.update(_0_CosCollection__POA.KeySortedCollection._omni_op_d)

KeySortedSet._omni_skeleton = KeySortedSet
_0_CosCollection__POA.KeySortedSet = KeySortedSet
omniORB.registerSkeleton(KeySortedSet._NP_RepositoryId, KeySortedSet)
del KeySortedSet
__name__ = "CosCollection"

# interface KeySortedBag
_0_CosCollection._d_KeySortedBag = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosCollection/KeySortedBag:1.0", "KeySortedBag")
omniORB.typeMapping["IDL:omg.org/CosCollection/KeySortedBag:1.0"] = _0_CosCollection._d_KeySortedBag
_0_CosCollection.KeySortedBag = omniORB.newEmptyClass()
class KeySortedBag (_0_CosCollection.KeySortedCollection):
    _NP_RepositoryId = _0_CosCollection._d_KeySortedBag[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_CosCollection.KeySortedBag = KeySortedBag
_0_CosCollection._tc_KeySortedBag = omniORB.tcInternal.createTypeCode(_0_CosCollection._d_KeySortedBag)
omniORB.registerType(KeySortedBag._NP_RepositoryId, _0_CosCollection._d_KeySortedBag, _0_CosCollection._tc_KeySortedBag)

# KeySortedBag operations and attributes
KeySortedBag._d_compare = ((omniORB.typeMapping["IDL:omg.org/CosCollection/KeySortedBag:1.0"], omniORB.typeMapping["IDL:omg.org/CosCollection/Comparator:1.0"]), (omniORB.tcInternal.tv_long, ), None)

# KeySortedBag object reference
class _objref_KeySortedBag (_0_CosCollection._objref_KeySortedCollection):
    _NP_RepositoryId = KeySortedBag._NP_RepositoryId

    def __init__(self, obj):
        _0_CosCollection._objref_KeySortedCollection.__init__(self, obj)

    def compare(self, *args):
        return self._obj.invoke("compare", _0_CosCollection.KeySortedBag._d_compare, args)

omniORB.registerObjref(KeySortedBag._NP_RepositoryId, _objref_KeySortedBag)
_0_CosCollection._objref_KeySortedBag = _objref_KeySortedBag
del KeySortedBag, _objref_KeySortedBag

# KeySortedBag skeleton
__name__ = "CosCollection__POA"
class KeySortedBag (_0_CosCollection__POA.KeySortedCollection):
    _NP_RepositoryId = _0_CosCollection.KeySortedBag._NP_RepositoryId


    _omni_op_d = {"compare": _0_CosCollection.KeySortedBag._d_compare}
    _omni_op_d.update(_0_CosCollection__POA.KeySortedCollection._omni_op_d)

KeySortedBag._omni_skeleton = KeySortedBag
_0_CosCollection__POA.KeySortedBag = KeySortedBag
omniORB.registerSkeleton(KeySortedBag._NP_RepositoryId, KeySortedBag)
del KeySortedBag
__name__ = "CosCollection"

# interface SortedMap
_0_CosCollection._d_SortedMap = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosCollection/SortedMap:1.0", "SortedMap")
omniORB.typeMapping["IDL:omg.org/CosCollection/SortedMap:1.0"] = _0_CosCollection._d_SortedMap
_0_CosCollection.SortedMap = omniORB.newEmptyClass()
class SortedMap (_0_CosCollection.EqualityKeySortedCollection):
    _NP_RepositoryId = _0_CosCollection._d_SortedMap[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_CosCollection.SortedMap = SortedMap
_0_CosCollection._tc_SortedMap = omniORB.tcInternal.createTypeCode(_0_CosCollection._d_SortedMap)
omniORB.registerType(SortedMap._NP_RepositoryId, _0_CosCollection._d_SortedMap, _0_CosCollection._tc_SortedMap)

# SortedMap operations and attributes
SortedMap._d_compare = ((omniORB.typeMapping["IDL:omg.org/CosCollection/SortedMap:1.0"], omniORB.typeMapping["IDL:omg.org/CosCollection/Comparator:1.0"]), (omniORB.tcInternal.tv_long, ), None)

# SortedMap object reference
class _objref_SortedMap (_0_CosCollection._objref_EqualityKeySortedCollection):
    _NP_RepositoryId = SortedMap._NP_RepositoryId

    def __init__(self, obj):
        _0_CosCollection._objref_EqualityKeySortedCollection.__init__(self, obj)

    def compare(self, *args):
        return self._obj.invoke("compare", _0_CosCollection.SortedMap._d_compare, args)

omniORB.registerObjref(SortedMap._NP_RepositoryId, _objref_SortedMap)
_0_CosCollection._objref_SortedMap = _objref_SortedMap
del SortedMap, _objref_SortedMap

# SortedMap skeleton
__name__ = "CosCollection__POA"
class SortedMap (_0_CosCollection__POA.EqualityKeySortedCollection):
    _NP_RepositoryId = _0_CosCollection.SortedMap._NP_RepositoryId


    _omni_op_d = {"compare": _0_CosCollection.SortedMap._d_compare}
    _omni_op_d.update(_0_CosCollection__POA.EqualityKeySortedCollection._omni_op_d)

SortedMap._omni_skeleton = SortedMap
_0_CosCollection__POA.SortedMap = SortedMap
omniORB.registerSkeleton(SortedMap._NP_RepositoryId, SortedMap)
del SortedMap
__name__ = "CosCollection"

# interface SortedRelation
_0_CosCollection._d_SortedRelation = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosCollection/SortedRelation:1.0", "SortedRelation")
omniORB.typeMapping["IDL:omg.org/CosCollection/SortedRelation:1.0"] = _0_CosCollection._d_SortedRelation
_0_CosCollection.SortedRelation = omniORB.newEmptyClass()
class SortedRelation (_0_CosCollection.EqualityKeySortedCollection):
    _NP_RepositoryId = _0_CosCollection._d_SortedRelation[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_CosCollection.SortedRelation = SortedRelation
_0_CosCollection._tc_SortedRelation = omniORB.tcInternal.createTypeCode(_0_CosCollection._d_SortedRelation)
omniORB.registerType(SortedRelation._NP_RepositoryId, _0_CosCollection._d_SortedRelation, _0_CosCollection._tc_SortedRelation)

# SortedRelation operations and attributes
SortedRelation._d_compare = ((omniORB.typeMapping["IDL:omg.org/CosCollection/SortedRelation:1.0"], omniORB.typeMapping["IDL:omg.org/CosCollection/Comparator:1.0"]), (omniORB.tcInternal.tv_long, ), None)

# SortedRelation object reference
class _objref_SortedRelation (_0_CosCollection._objref_EqualityKeySortedCollection):
    _NP_RepositoryId = SortedRelation._NP_RepositoryId

    def __init__(self, obj):
        _0_CosCollection._objref_EqualityKeySortedCollection.__init__(self, obj)

    def compare(self, *args):
        return self._obj.invoke("compare", _0_CosCollection.SortedRelation._d_compare, args)

omniORB.registerObjref(SortedRelation._NP_RepositoryId, _objref_SortedRelation)
_0_CosCollection._objref_SortedRelation = _objref_SortedRelation
del SortedRelation, _objref_SortedRelation

# SortedRelation skeleton
__name__ = "CosCollection__POA"
class SortedRelation (_0_CosCollection__POA.EqualityKeySortedCollection):
    _NP_RepositoryId = _0_CosCollection.SortedRelation._NP_RepositoryId


    _omni_op_d = {"compare": _0_CosCollection.SortedRelation._d_compare}
    _omni_op_d.update(_0_CosCollection__POA.EqualityKeySortedCollection._omni_op_d)

SortedRelation._omni_skeleton = SortedRelation
_0_CosCollection__POA.SortedRelation = SortedRelation
omniORB.registerSkeleton(SortedRelation._NP_RepositoryId, SortedRelation)
del SortedRelation
__name__ = "CosCollection"

# interface SortedSet
_0_CosCollection._d_SortedSet = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosCollection/SortedSet:1.0", "SortedSet")
omniORB.typeMapping["IDL:omg.org/CosCollection/SortedSet:1.0"] = _0_CosCollection._d_SortedSet
_0_CosCollection.SortedSet = omniORB.newEmptyClass()
class SortedSet (_0_CosCollection.EqualitySortedCollection):
    _NP_RepositoryId = _0_CosCollection._d_SortedSet[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_CosCollection.SortedSet = SortedSet
_0_CosCollection._tc_SortedSet = omniORB.tcInternal.createTypeCode(_0_CosCollection._d_SortedSet)
omniORB.registerType(SortedSet._NP_RepositoryId, _0_CosCollection._d_SortedSet, _0_CosCollection._tc_SortedSet)

# SortedSet operations and attributes
SortedSet._d_compare = ((omniORB.typeMapping["IDL:omg.org/CosCollection/SortedSet:1.0"], omniORB.typeMapping["IDL:omg.org/CosCollection/Comparator:1.0"]), (omniORB.tcInternal.tv_long, ), None)

# SortedSet object reference
class _objref_SortedSet (_0_CosCollection._objref_EqualitySortedCollection):
    _NP_RepositoryId = SortedSet._NP_RepositoryId

    def __init__(self, obj):
        _0_CosCollection._objref_EqualitySortedCollection.__init__(self, obj)

    def compare(self, *args):
        return self._obj.invoke("compare", _0_CosCollection.SortedSet._d_compare, args)

omniORB.registerObjref(SortedSet._NP_RepositoryId, _objref_SortedSet)
_0_CosCollection._objref_SortedSet = _objref_SortedSet
del SortedSet, _objref_SortedSet

# SortedSet skeleton
__name__ = "CosCollection__POA"
class SortedSet (_0_CosCollection__POA.EqualitySortedCollection):
    _NP_RepositoryId = _0_CosCollection.SortedSet._NP_RepositoryId


    _omni_op_d = {"compare": _0_CosCollection.SortedSet._d_compare}
    _omni_op_d.update(_0_CosCollection__POA.EqualitySortedCollection._omni_op_d)

SortedSet._omni_skeleton = SortedSet
_0_CosCollection__POA.SortedSet = SortedSet
omniORB.registerSkeleton(SortedSet._NP_RepositoryId, SortedSet)
del SortedSet
__name__ = "CosCollection"

# interface SortedBag
_0_CosCollection._d_SortedBag = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosCollection/SortedBag:1.0", "SortedBag")
omniORB.typeMapping["IDL:omg.org/CosCollection/SortedBag:1.0"] = _0_CosCollection._d_SortedBag
_0_CosCollection.SortedBag = omniORB.newEmptyClass()
class SortedBag (_0_CosCollection.EqualitySortedCollection):
    _NP_RepositoryId = _0_CosCollection._d_SortedBag[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_CosCollection.SortedBag = SortedBag
_0_CosCollection._tc_SortedBag = omniORB.tcInternal.createTypeCode(_0_CosCollection._d_SortedBag)
omniORB.registerType(SortedBag._NP_RepositoryId, _0_CosCollection._d_SortedBag, _0_CosCollection._tc_SortedBag)

# SortedBag operations and attributes
SortedBag._d_compare = ((omniORB.typeMapping["IDL:omg.org/CosCollection/SortedBag:1.0"], omniORB.typeMapping["IDL:omg.org/CosCollection/Comparator:1.0"]), (omniORB.tcInternal.tv_long, ), None)

# SortedBag object reference
class _objref_SortedBag (_0_CosCollection._objref_EqualitySortedCollection):
    _NP_RepositoryId = SortedBag._NP_RepositoryId

    def __init__(self, obj):
        _0_CosCollection._objref_EqualitySortedCollection.__init__(self, obj)

    def compare(self, *args):
        return self._obj.invoke("compare", _0_CosCollection.SortedBag._d_compare, args)

omniORB.registerObjref(SortedBag._NP_RepositoryId, _objref_SortedBag)
_0_CosCollection._objref_SortedBag = _objref_SortedBag
del SortedBag, _objref_SortedBag

# SortedBag skeleton
__name__ = "CosCollection__POA"
class SortedBag (_0_CosCollection__POA.EqualitySortedCollection):
    _NP_RepositoryId = _0_CosCollection.SortedBag._NP_RepositoryId


    _omni_op_d = {"compare": _0_CosCollection.SortedBag._d_compare}
    _omni_op_d.update(_0_CosCollection__POA.EqualitySortedCollection._omni_op_d)

SortedBag._omni_skeleton = SortedBag
_0_CosCollection__POA.SortedBag = SortedBag
omniORB.registerSkeleton(SortedBag._NP_RepositoryId, SortedBag)
del SortedBag
__name__ = "CosCollection"

# interface CSequence
_0_CosCollection._d_CSequence = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosCollection/CSequence:1.0", "CSequence")
omniORB.typeMapping["IDL:omg.org/CosCollection/CSequence:1.0"] = _0_CosCollection._d_CSequence
_0_CosCollection.CSequence = omniORB.newEmptyClass()
class CSequence (_0_CosCollection.SequentialCollection):
    _NP_RepositoryId = _0_CosCollection._d_CSequence[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_CosCollection.CSequence = CSequence
_0_CosCollection._tc_CSequence = omniORB.tcInternal.createTypeCode(_0_CosCollection._d_CSequence)
omniORB.registerType(CSequence._NP_RepositoryId, _0_CosCollection._d_CSequence, _0_CosCollection._tc_CSequence)

# CSequence operations and attributes
CSequence._d_compare = ((omniORB.typeMapping["IDL:omg.org/CosCollection/CSequence:1.0"], omniORB.typeMapping["IDL:omg.org/CosCollection/Comparator:1.0"]), (omniORB.tcInternal.tv_long, ), None)

# CSequence object reference
class _objref_CSequence (_0_CosCollection._objref_SequentialCollection):
    _NP_RepositoryId = CSequence._NP_RepositoryId

    def __init__(self, obj):
        _0_CosCollection._objref_SequentialCollection.__init__(self, obj)

    def compare(self, *args):
        return self._obj.invoke("compare", _0_CosCollection.CSequence._d_compare, args)

omniORB.registerObjref(CSequence._NP_RepositoryId, _objref_CSequence)
_0_CosCollection._objref_CSequence = _objref_CSequence
del CSequence, _objref_CSequence

# CSequence skeleton
__name__ = "CosCollection__POA"
class CSequence (_0_CosCollection__POA.SequentialCollection):
    _NP_RepositoryId = _0_CosCollection.CSequence._NP_RepositoryId


    _omni_op_d = {"compare": _0_CosCollection.CSequence._d_compare}
    _omni_op_d.update(_0_CosCollection__POA.SequentialCollection._omni_op_d)

CSequence._omni_skeleton = CSequence
_0_CosCollection__POA.CSequence = CSequence
omniORB.registerSkeleton(CSequence._NP_RepositoryId, CSequence)
del CSequence
__name__ = "CosCollection"

# interface EqualitySequence
_0_CosCollection._d_EqualitySequence = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosCollection/EqualitySequence:1.0", "EqualitySequence")
omniORB.typeMapping["IDL:omg.org/CosCollection/EqualitySequence:1.0"] = _0_CosCollection._d_EqualitySequence
_0_CosCollection.EqualitySequence = omniORB.newEmptyClass()
class EqualitySequence (_0_CosCollection.EqualitySequentialCollection):
    _NP_RepositoryId = _0_CosCollection._d_EqualitySequence[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_CosCollection.EqualitySequence = EqualitySequence
_0_CosCollection._tc_EqualitySequence = omniORB.tcInternal.createTypeCode(_0_CosCollection._d_EqualitySequence)
omniORB.registerType(EqualitySequence._NP_RepositoryId, _0_CosCollection._d_EqualitySequence, _0_CosCollection._tc_EqualitySequence)

# EqualitySequence operations and attributes
EqualitySequence._d_equal = ((omniORB.typeMapping["IDL:omg.org/CosCollection/EqualitySequence:1.0"], ), (omniORB.tcInternal.tv_boolean, ), None)
EqualitySequence._d_not_equal = ((omniORB.typeMapping["IDL:omg.org/CosCollection/EqualitySequence:1.0"], ), (omniORB.tcInternal.tv_boolean, ), None)
EqualitySequence._d_compare = ((omniORB.typeMapping["IDL:omg.org/CosCollection/EqualitySequence:1.0"], omniORB.typeMapping["IDL:omg.org/CosCollection/Comparator:1.0"]), (omniORB.tcInternal.tv_long, ), None)

# EqualitySequence object reference
class _objref_EqualitySequence (_0_CosCollection._objref_EqualitySequentialCollection):
    _NP_RepositoryId = EqualitySequence._NP_RepositoryId

    def __init__(self, obj):
        _0_CosCollection._objref_EqualitySequentialCollection.__init__(self, obj)

    def equal(self, *args):
        return self._obj.invoke("equal", _0_CosCollection.EqualitySequence._d_equal, args)

    def not_equal(self, *args):
        return self._obj.invoke("not_equal", _0_CosCollection.EqualitySequence._d_not_equal, args)

    def compare(self, *args):
        return self._obj.invoke("compare", _0_CosCollection.EqualitySequence._d_compare, args)

omniORB.registerObjref(EqualitySequence._NP_RepositoryId, _objref_EqualitySequence)
_0_CosCollection._objref_EqualitySequence = _objref_EqualitySequence
del EqualitySequence, _objref_EqualitySequence

# EqualitySequence skeleton
__name__ = "CosCollection__POA"
class EqualitySequence (_0_CosCollection__POA.EqualitySequentialCollection):
    _NP_RepositoryId = _0_CosCollection.EqualitySequence._NP_RepositoryId


    _omni_op_d = {"equal": _0_CosCollection.EqualitySequence._d_equal, "not_equal": _0_CosCollection.EqualitySequence._d_not_equal, "compare": _0_CosCollection.EqualitySequence._d_compare}
    _omni_op_d.update(_0_CosCollection__POA.EqualitySequentialCollection._omni_op_d)

EqualitySequence._omni_skeleton = EqualitySequence
_0_CosCollection__POA.EqualitySequence = EqualitySequence
omniORB.registerSkeleton(EqualitySequence._NP_RepositoryId, EqualitySequence)
del EqualitySequence
__name__ = "CosCollection"

# interface Heap
_0_CosCollection._d_Heap = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosCollection/Heap:1.0", "Heap")
omniORB.typeMapping["IDL:omg.org/CosCollection/Heap:1.0"] = _0_CosCollection._d_Heap
_0_CosCollection.Heap = omniORB.newEmptyClass()
class Heap (_0_CosCollection.Collection):
    _NP_RepositoryId = _0_CosCollection._d_Heap[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_CosCollection.Heap = Heap
_0_CosCollection._tc_Heap = omniORB.tcInternal.createTypeCode(_0_CosCollection._d_Heap)
omniORB.registerType(Heap._NP_RepositoryId, _0_CosCollection._d_Heap, _0_CosCollection._tc_Heap)

# Heap object reference
class _objref_Heap (_0_CosCollection._objref_Collection):
    _NP_RepositoryId = Heap._NP_RepositoryId

    def __init__(self, obj):
        _0_CosCollection._objref_Collection.__init__(self, obj)

omniORB.registerObjref(Heap._NP_RepositoryId, _objref_Heap)
_0_CosCollection._objref_Heap = _objref_Heap
del Heap, _objref_Heap

# Heap skeleton
__name__ = "CosCollection__POA"
class Heap (_0_CosCollection__POA.Collection):
    _NP_RepositoryId = _0_CosCollection.Heap._NP_RepositoryId


    _omni_op_d = {}
    _omni_op_d.update(_0_CosCollection__POA.Collection._omni_op_d)

Heap._omni_skeleton = Heap
_0_CosCollection__POA.Heap = Heap
omniORB.registerSkeleton(Heap._NP_RepositoryId, Heap)
del Heap
__name__ = "CosCollection"

# interface RestrictedAccessCollection
_0_CosCollection._d_RestrictedAccessCollection = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosCollection/RestrictedAccessCollection:1.0", "RestrictedAccessCollection")
omniORB.typeMapping["IDL:omg.org/CosCollection/RestrictedAccessCollection:1.0"] = _0_CosCollection._d_RestrictedAccessCollection
_0_CosCollection.RestrictedAccessCollection = omniORB.newEmptyClass()
class RestrictedAccessCollection :
    _NP_RepositoryId = _0_CosCollection._d_RestrictedAccessCollection[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_CosCollection.RestrictedAccessCollection = RestrictedAccessCollection
_0_CosCollection._tc_RestrictedAccessCollection = omniORB.tcInternal.createTypeCode(_0_CosCollection._d_RestrictedAccessCollection)
omniORB.registerType(RestrictedAccessCollection._NP_RepositoryId, _0_CosCollection._d_RestrictedAccessCollection, _0_CosCollection._tc_RestrictedAccessCollection)

# RestrictedAccessCollection operations and attributes
RestrictedAccessCollection._d_unfilled = ((), (omniORB.tcInternal.tv_boolean, ), None)
RestrictedAccessCollection._d_size = ((), (omniORB.tcInternal.tv_ulong, ), None)
RestrictedAccessCollection._d_purge = ((), (), None)

# RestrictedAccessCollection object reference
class _objref_RestrictedAccessCollection (CORBA.Object):
    _NP_RepositoryId = RestrictedAccessCollection._NP_RepositoryId

    def __init__(self, obj):
        CORBA.Object.__init__(self, obj)

    def unfilled(self, *args):
        return self._obj.invoke("unfilled", _0_CosCollection.RestrictedAccessCollection._d_unfilled, args)

    def size(self, *args):
        return self._obj.invoke("size", _0_CosCollection.RestrictedAccessCollection._d_size, args)

    def purge(self, *args):
        return self._obj.invoke("purge", _0_CosCollection.RestrictedAccessCollection._d_purge, args)

omniORB.registerObjref(RestrictedAccessCollection._NP_RepositoryId, _objref_RestrictedAccessCollection)
_0_CosCollection._objref_RestrictedAccessCollection = _objref_RestrictedAccessCollection
del RestrictedAccessCollection, _objref_RestrictedAccessCollection

# RestrictedAccessCollection skeleton
__name__ = "CosCollection__POA"
class RestrictedAccessCollection (PortableServer.Servant):
    _NP_RepositoryId = _0_CosCollection.RestrictedAccessCollection._NP_RepositoryId


    _omni_op_d = {"unfilled": _0_CosCollection.RestrictedAccessCollection._d_unfilled, "size": _0_CosCollection.RestrictedAccessCollection._d_size, "purge": _0_CosCollection.RestrictedAccessCollection._d_purge}

RestrictedAccessCollection._omni_skeleton = RestrictedAccessCollection
_0_CosCollection__POA.RestrictedAccessCollection = RestrictedAccessCollection
omniORB.registerSkeleton(RestrictedAccessCollection._NP_RepositoryId, RestrictedAccessCollection)
del RestrictedAccessCollection
__name__ = "CosCollection"

# interface Queue
_0_CosCollection._d_Queue = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosCollection/Queue:1.0", "Queue")
omniORB.typeMapping["IDL:omg.org/CosCollection/Queue:1.0"] = _0_CosCollection._d_Queue
_0_CosCollection.Queue = omniORB.newEmptyClass()
class Queue (_0_CosCollection.RestrictedAccessCollection):
    _NP_RepositoryId = _0_CosCollection._d_Queue[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_CosCollection.Queue = Queue
_0_CosCollection._tc_Queue = omniORB.tcInternal.createTypeCode(_0_CosCollection._d_Queue)
omniORB.registerType(Queue._NP_RepositoryId, _0_CosCollection._d_Queue, _0_CosCollection._tc_Queue)

# Queue operations and attributes
Queue._d_enqueue = ((omniORB.tcInternal.tv_any, ), (), {_0_CosCollection.ElementInvalid._NP_RepositoryId: _0_CosCollection._d_ElementInvalid})
Queue._d_dequeue = ((), (), {_0_CosCollection.EmptyCollection._NP_RepositoryId: _0_CosCollection._d_EmptyCollection})
Queue._d_element_dequeue = ((), (omniORB.tcInternal.tv_boolean, omniORB.tcInternal.tv_any), {_0_CosCollection.EmptyCollection._NP_RepositoryId: _0_CosCollection._d_EmptyCollection})

# Queue object reference
class _objref_Queue (_0_CosCollection._objref_RestrictedAccessCollection):
    _NP_RepositoryId = Queue._NP_RepositoryId

    def __init__(self, obj):
        _0_CosCollection._objref_RestrictedAccessCollection.__init__(self, obj)

    def enqueue(self, *args):
        return self._obj.invoke("enqueue", _0_CosCollection.Queue._d_enqueue, args)

    def dequeue(self, *args):
        return self._obj.invoke("dequeue", _0_CosCollection.Queue._d_dequeue, args)

    def element_dequeue(self, *args):
        return self._obj.invoke("element_dequeue", _0_CosCollection.Queue._d_element_dequeue, args)

omniORB.registerObjref(Queue._NP_RepositoryId, _objref_Queue)
_0_CosCollection._objref_Queue = _objref_Queue
del Queue, _objref_Queue

# Queue skeleton
__name__ = "CosCollection__POA"
class Queue (_0_CosCollection__POA.RestrictedAccessCollection):
    _NP_RepositoryId = _0_CosCollection.Queue._NP_RepositoryId


    _omni_op_d = {"enqueue": _0_CosCollection.Queue._d_enqueue, "dequeue": _0_CosCollection.Queue._d_dequeue, "element_dequeue": _0_CosCollection.Queue._d_element_dequeue}
    _omni_op_d.update(_0_CosCollection__POA.RestrictedAccessCollection._omni_op_d)

Queue._omni_skeleton = Queue
_0_CosCollection__POA.Queue = Queue
omniORB.registerSkeleton(Queue._NP_RepositoryId, Queue)
del Queue
__name__ = "CosCollection"

# interface Deque
_0_CosCollection._d_Deque = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosCollection/Deque:1.0", "Deque")
omniORB.typeMapping["IDL:omg.org/CosCollection/Deque:1.0"] = _0_CosCollection._d_Deque
_0_CosCollection.Deque = omniORB.newEmptyClass()
class Deque (_0_CosCollection.RestrictedAccessCollection):
    _NP_RepositoryId = _0_CosCollection._d_Deque[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_CosCollection.Deque = Deque
_0_CosCollection._tc_Deque = omniORB.tcInternal.createTypeCode(_0_CosCollection._d_Deque)
omniORB.registerType(Deque._NP_RepositoryId, _0_CosCollection._d_Deque, _0_CosCollection._tc_Deque)

# Deque operations and attributes
Deque._d_enqueue_as_first = ((omniORB.tcInternal.tv_any, ), (), {_0_CosCollection.ElementInvalid._NP_RepositoryId: _0_CosCollection._d_ElementInvalid})
Deque._d_enqueue_as_last = ((omniORB.tcInternal.tv_any, ), (), {_0_CosCollection.ElementInvalid._NP_RepositoryId: _0_CosCollection._d_ElementInvalid})
Deque._d_dequeue_first = ((), (), {_0_CosCollection.EmptyCollection._NP_RepositoryId: _0_CosCollection._d_EmptyCollection})
Deque._d_element_dequeue_first = ((), (omniORB.tcInternal.tv_boolean, omniORB.tcInternal.tv_any), {_0_CosCollection.EmptyCollection._NP_RepositoryId: _0_CosCollection._d_EmptyCollection})
Deque._d_dequeue_last = ((), (), {_0_CosCollection.EmptyCollection._NP_RepositoryId: _0_CosCollection._d_EmptyCollection})
Deque._d_element_dequeue_last = ((), (omniORB.tcInternal.tv_boolean, omniORB.tcInternal.tv_any), {_0_CosCollection.EmptyCollection._NP_RepositoryId: _0_CosCollection._d_EmptyCollection})

# Deque object reference
class _objref_Deque (_0_CosCollection._objref_RestrictedAccessCollection):
    _NP_RepositoryId = Deque._NP_RepositoryId

    def __init__(self, obj):
        _0_CosCollection._objref_RestrictedAccessCollection.__init__(self, obj)

    def enqueue_as_first(self, *args):
        return self._obj.invoke("enqueue_as_first", _0_CosCollection.Deque._d_enqueue_as_first, args)

    def enqueue_as_last(self, *args):
        return self._obj.invoke("enqueue_as_last", _0_CosCollection.Deque._d_enqueue_as_last, args)

    def dequeue_first(self, *args):
        return self._obj.invoke("dequeue_first", _0_CosCollection.Deque._d_dequeue_first, args)

    def element_dequeue_first(self, *args):
        return self._obj.invoke("element_dequeue_first", _0_CosCollection.Deque._d_element_dequeue_first, args)

    def dequeue_last(self, *args):
        return self._obj.invoke("dequeue_last", _0_CosCollection.Deque._d_dequeue_last, args)

    def element_dequeue_last(self, *args):
        return self._obj.invoke("element_dequeue_last", _0_CosCollection.Deque._d_element_dequeue_last, args)

omniORB.registerObjref(Deque._NP_RepositoryId, _objref_Deque)
_0_CosCollection._objref_Deque = _objref_Deque
del Deque, _objref_Deque

# Deque skeleton
__name__ = "CosCollection__POA"
class Deque (_0_CosCollection__POA.RestrictedAccessCollection):
    _NP_RepositoryId = _0_CosCollection.Deque._NP_RepositoryId


    _omni_op_d = {"enqueue_as_first": _0_CosCollection.Deque._d_enqueue_as_first, "enqueue_as_last": _0_CosCollection.Deque._d_enqueue_as_last, "dequeue_first": _0_CosCollection.Deque._d_dequeue_first, "element_dequeue_first": _0_CosCollection.Deque._d_element_dequeue_first, "dequeue_last": _0_CosCollection.Deque._d_dequeue_last, "element_dequeue_last": _0_CosCollection.Deque._d_element_dequeue_last}
    _omni_op_d.update(_0_CosCollection__POA.RestrictedAccessCollection._omni_op_d)

Deque._omni_skeleton = Deque
_0_CosCollection__POA.Deque = Deque
omniORB.registerSkeleton(Deque._NP_RepositoryId, Deque)
del Deque
__name__ = "CosCollection"

# interface Stack
_0_CosCollection._d_Stack = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosCollection/Stack:1.0", "Stack")
omniORB.typeMapping["IDL:omg.org/CosCollection/Stack:1.0"] = _0_CosCollection._d_Stack
_0_CosCollection.Stack = omniORB.newEmptyClass()
class Stack (_0_CosCollection.RestrictedAccessCollection):
    _NP_RepositoryId = _0_CosCollection._d_Stack[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_CosCollection.Stack = Stack
_0_CosCollection._tc_Stack = omniORB.tcInternal.createTypeCode(_0_CosCollection._d_Stack)
omniORB.registerType(Stack._NP_RepositoryId, _0_CosCollection._d_Stack, _0_CosCollection._tc_Stack)

# Stack operations and attributes
Stack._d_push = ((omniORB.tcInternal.tv_any, ), (), {_0_CosCollection.ElementInvalid._NP_RepositoryId: _0_CosCollection._d_ElementInvalid})
Stack._d_pop = ((), (), {_0_CosCollection.EmptyCollection._NP_RepositoryId: _0_CosCollection._d_EmptyCollection})
Stack._d_element_pop = ((), (omniORB.tcInternal.tv_boolean, omniORB.tcInternal.tv_any), {_0_CosCollection.EmptyCollection._NP_RepositoryId: _0_CosCollection._d_EmptyCollection})
Stack._d_top = ((), (omniORB.tcInternal.tv_boolean, omniORB.tcInternal.tv_any), {_0_CosCollection.EmptyCollection._NP_RepositoryId: _0_CosCollection._d_EmptyCollection})

# Stack object reference
class _objref_Stack (_0_CosCollection._objref_RestrictedAccessCollection):
    _NP_RepositoryId = Stack._NP_RepositoryId

    def __init__(self, obj):
        _0_CosCollection._objref_RestrictedAccessCollection.__init__(self, obj)

    def push(self, *args):
        return self._obj.invoke("push", _0_CosCollection.Stack._d_push, args)

    def pop(self, *args):
        return self._obj.invoke("pop", _0_CosCollection.Stack._d_pop, args)

    def element_pop(self, *args):
        return self._obj.invoke("element_pop", _0_CosCollection.Stack._d_element_pop, args)

    def top(self, *args):
        return self._obj.invoke("top", _0_CosCollection.Stack._d_top, args)

omniORB.registerObjref(Stack._NP_RepositoryId, _objref_Stack)
_0_CosCollection._objref_Stack = _objref_Stack
del Stack, _objref_Stack

# Stack skeleton
__name__ = "CosCollection__POA"
class Stack (_0_CosCollection__POA.RestrictedAccessCollection):
    _NP_RepositoryId = _0_CosCollection.Stack._NP_RepositoryId


    _omni_op_d = {"push": _0_CosCollection.Stack._d_push, "pop": _0_CosCollection.Stack._d_pop, "element_pop": _0_CosCollection.Stack._d_element_pop, "top": _0_CosCollection.Stack._d_top}
    _omni_op_d.update(_0_CosCollection__POA.RestrictedAccessCollection._omni_op_d)

Stack._omni_skeleton = Stack
_0_CosCollection__POA.Stack = Stack
omniORB.registerSkeleton(Stack._NP_RepositoryId, Stack)
del Stack
__name__ = "CosCollection"

# interface PriorityQueue
_0_CosCollection._d_PriorityQueue = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosCollection/PriorityQueue:1.0", "PriorityQueue")
omniORB.typeMapping["IDL:omg.org/CosCollection/PriorityQueue:1.0"] = _0_CosCollection._d_PriorityQueue
_0_CosCollection.PriorityQueue = omniORB.newEmptyClass()
class PriorityQueue (_0_CosCollection.RestrictedAccessCollection):
    _NP_RepositoryId = _0_CosCollection._d_PriorityQueue[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_CosCollection.PriorityQueue = PriorityQueue
_0_CosCollection._tc_PriorityQueue = omniORB.tcInternal.createTypeCode(_0_CosCollection._d_PriorityQueue)
omniORB.registerType(PriorityQueue._NP_RepositoryId, _0_CosCollection._d_PriorityQueue, _0_CosCollection._tc_PriorityQueue)

# PriorityQueue operations and attributes
PriorityQueue._d_enqueue = ((omniORB.tcInternal.tv_any, ), (), {_0_CosCollection.ElementInvalid._NP_RepositoryId: _0_CosCollection._d_ElementInvalid})
PriorityQueue._d_dequeue = ((), (), {_0_CosCollection.EmptyCollection._NP_RepositoryId: _0_CosCollection._d_EmptyCollection})
PriorityQueue._d_element_dequeue = ((), (omniORB.tcInternal.tv_boolean, omniORB.tcInternal.tv_any), {_0_CosCollection.EmptyCollection._NP_RepositoryId: _0_CosCollection._d_EmptyCollection})

# PriorityQueue object reference
class _objref_PriorityQueue (_0_CosCollection._objref_RestrictedAccessCollection):
    _NP_RepositoryId = PriorityQueue._NP_RepositoryId

    def __init__(self, obj):
        _0_CosCollection._objref_RestrictedAccessCollection.__init__(self, obj)

    def enqueue(self, *args):
        return self._obj.invoke("enqueue", _0_CosCollection.PriorityQueue._d_enqueue, args)

    def dequeue(self, *args):
        return self._obj.invoke("dequeue", _0_CosCollection.PriorityQueue._d_dequeue, args)

    def element_dequeue(self, *args):
        return self._obj.invoke("element_dequeue", _0_CosCollection.PriorityQueue._d_element_dequeue, args)

omniORB.registerObjref(PriorityQueue._NP_RepositoryId, _objref_PriorityQueue)
_0_CosCollection._objref_PriorityQueue = _objref_PriorityQueue
del PriorityQueue, _objref_PriorityQueue

# PriorityQueue skeleton
__name__ = "CosCollection__POA"
class PriorityQueue (_0_CosCollection__POA.RestrictedAccessCollection):
    _NP_RepositoryId = _0_CosCollection.PriorityQueue._NP_RepositoryId


    _omni_op_d = {"enqueue": _0_CosCollection.PriorityQueue._d_enqueue, "dequeue": _0_CosCollection.PriorityQueue._d_dequeue, "element_dequeue": _0_CosCollection.PriorityQueue._d_element_dequeue}
    _omni_op_d.update(_0_CosCollection__POA.RestrictedAccessCollection._omni_op_d)

PriorityQueue._omni_skeleton = PriorityQueue
_0_CosCollection__POA.PriorityQueue = PriorityQueue
omniORB.registerSkeleton(PriorityQueue._NP_RepositoryId, PriorityQueue)
del PriorityQueue
__name__ = "CosCollection"

# interface CollectionFactory
_0_CosCollection._d_CollectionFactory = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosCollection/CollectionFactory:1.0", "CollectionFactory")
omniORB.typeMapping["IDL:omg.org/CosCollection/CollectionFactory:1.0"] = _0_CosCollection._d_CollectionFactory
_0_CosCollection.CollectionFactory = omniORB.newEmptyClass()
class CollectionFactory :
    _NP_RepositoryId = _0_CosCollection._d_CollectionFactory[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_CosCollection.CollectionFactory = CollectionFactory
_0_CosCollection._tc_CollectionFactory = omniORB.tcInternal.createTypeCode(_0_CosCollection._d_CollectionFactory)
omniORB.registerType(CollectionFactory._NP_RepositoryId, _0_CosCollection._d_CollectionFactory, _0_CosCollection._tc_CollectionFactory)

# CollectionFactory operations and attributes
CollectionFactory._d_generic_create = ((omniORB.typeMapping["IDL:omg.org/CosCollection/ParameterList:1.0"], ), (omniORB.typeMapping["IDL:omg.org/CosCollection/Collection:1.0"], ), {_0_CosCollection.ParameterInvalid._NP_RepositoryId: _0_CosCollection._d_ParameterInvalid})

# CollectionFactory object reference
class _objref_CollectionFactory (CORBA.Object):
    _NP_RepositoryId = CollectionFactory._NP_RepositoryId

    def __init__(self, obj):
        CORBA.Object.__init__(self, obj)

    def generic_create(self, *args):
        return self._obj.invoke("generic_create", _0_CosCollection.CollectionFactory._d_generic_create, args)

omniORB.registerObjref(CollectionFactory._NP_RepositoryId, _objref_CollectionFactory)
_0_CosCollection._objref_CollectionFactory = _objref_CollectionFactory
del CollectionFactory, _objref_CollectionFactory

# CollectionFactory skeleton
__name__ = "CosCollection__POA"
class CollectionFactory (PortableServer.Servant):
    _NP_RepositoryId = _0_CosCollection.CollectionFactory._NP_RepositoryId


    _omni_op_d = {"generic_create": _0_CosCollection.CollectionFactory._d_generic_create}

CollectionFactory._omni_skeleton = CollectionFactory
_0_CosCollection__POA.CollectionFactory = CollectionFactory
omniORB.registerSkeleton(CollectionFactory._NP_RepositoryId, CollectionFactory)
del CollectionFactory
__name__ = "CosCollection"

# interface CollectionFactories
_0_CosCollection._d_CollectionFactories = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosCollection/CollectionFactories:1.0", "CollectionFactories")
omniORB.typeMapping["IDL:omg.org/CosCollection/CollectionFactories:1.0"] = _0_CosCollection._d_CollectionFactories
_0_CosCollection.CollectionFactories = omniORB.newEmptyClass()
class CollectionFactories (_0_CosCollection.CollectionFactory):
    _NP_RepositoryId = _0_CosCollection._d_CollectionFactories[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_CosCollection.CollectionFactories = CollectionFactories
_0_CosCollection._tc_CollectionFactories = omniORB.tcInternal.createTypeCode(_0_CosCollection._d_CollectionFactories)
omniORB.registerType(CollectionFactories._NP_RepositoryId, _0_CosCollection._d_CollectionFactories, _0_CosCollection._tc_CollectionFactories)

# CollectionFactories operations and attributes
CollectionFactories._d_add_factory = ((omniORB.typeMapping["IDL:omg.org/CosCollection/Istring:1.0"], omniORB.typeMapping["IDL:omg.org/CosCollection/Istring:1.0"], omniORB.typeMapping["IDL:omg.org/CosCollection/Istring:1.0"], omniORB.typeMapping["IDL:omg.org/CosCollection/CollectionFactory:1.0"]), (omniORB.tcInternal.tv_boolean, ), None)
CollectionFactories._d_remove_factory = ((omniORB.typeMapping["IDL:omg.org/CosCollection/Istring:1.0"], omniORB.typeMapping["IDL:omg.org/CosCollection/Istring:1.0"], omniORB.typeMapping["IDL:omg.org/CosCollection/Istring:1.0"]), (omniORB.tcInternal.tv_boolean, ), None)
CollectionFactories._d_create = ((omniORB.typeMapping["IDL:omg.org/CosCollection/ParameterList:1.0"], ), (omniORB.typeMapping["IDL:omg.org/CosCollection/Collection:1.0"], ), {_0_CosCollection.ParameterInvalid._NP_RepositoryId: _0_CosCollection._d_ParameterInvalid})

# CollectionFactories object reference
class _objref_CollectionFactories (_0_CosCollection._objref_CollectionFactory):
    _NP_RepositoryId = CollectionFactories._NP_RepositoryId

    def __init__(self, obj):
        _0_CosCollection._objref_CollectionFactory.__init__(self, obj)

    def add_factory(self, *args):
        return self._obj.invoke("add_factory", _0_CosCollection.CollectionFactories._d_add_factory, args)

    def remove_factory(self, *args):
        return self._obj.invoke("remove_factory", _0_CosCollection.CollectionFactories._d_remove_factory, args)

    def create(self, *args):
        return self._obj.invoke("create", _0_CosCollection.CollectionFactories._d_create, args)

omniORB.registerObjref(CollectionFactories._NP_RepositoryId, _objref_CollectionFactories)
_0_CosCollection._objref_CollectionFactories = _objref_CollectionFactories
del CollectionFactories, _objref_CollectionFactories

# CollectionFactories skeleton
__name__ = "CosCollection__POA"
class CollectionFactories (_0_CosCollection__POA.CollectionFactory):
    _NP_RepositoryId = _0_CosCollection.CollectionFactories._NP_RepositoryId


    _omni_op_d = {"add_factory": _0_CosCollection.CollectionFactories._d_add_factory, "remove_factory": _0_CosCollection.CollectionFactories._d_remove_factory, "create": _0_CosCollection.CollectionFactories._d_create}
    _omni_op_d.update(_0_CosCollection__POA.CollectionFactory._omni_op_d)

CollectionFactories._omni_skeleton = CollectionFactories
_0_CosCollection__POA.CollectionFactories = CollectionFactories
omniORB.registerSkeleton(CollectionFactories._NP_RepositoryId, CollectionFactories)
del CollectionFactories
__name__ = "CosCollection"

# interface RACollectionFactory
_0_CosCollection._d_RACollectionFactory = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosCollection/RACollectionFactory:1.0", "RACollectionFactory")
omniORB.typeMapping["IDL:omg.org/CosCollection/RACollectionFactory:1.0"] = _0_CosCollection._d_RACollectionFactory
_0_CosCollection.RACollectionFactory = omniORB.newEmptyClass()
class RACollectionFactory :
    _NP_RepositoryId = _0_CosCollection._d_RACollectionFactory[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_CosCollection.RACollectionFactory = RACollectionFactory
_0_CosCollection._tc_RACollectionFactory = omniORB.tcInternal.createTypeCode(_0_CosCollection._d_RACollectionFactory)
omniORB.registerType(RACollectionFactory._NP_RepositoryId, _0_CosCollection._d_RACollectionFactory, _0_CosCollection._tc_RACollectionFactory)

# RACollectionFactory operations and attributes
RACollectionFactory._d_generic_create = ((omniORB.typeMapping["IDL:omg.org/CosCollection/ParameterList:1.0"], ), (omniORB.typeMapping["IDL:omg.org/CosCollection/RestrictedAccessCollection:1.0"], ), {_0_CosCollection.ParameterInvalid._NP_RepositoryId: _0_CosCollection._d_ParameterInvalid})

# RACollectionFactory object reference
class _objref_RACollectionFactory (CORBA.Object):
    _NP_RepositoryId = RACollectionFactory._NP_RepositoryId

    def __init__(self, obj):
        CORBA.Object.__init__(self, obj)

    def generic_create(self, *args):
        return self._obj.invoke("generic_create", _0_CosCollection.RACollectionFactory._d_generic_create, args)

omniORB.registerObjref(RACollectionFactory._NP_RepositoryId, _objref_RACollectionFactory)
_0_CosCollection._objref_RACollectionFactory = _objref_RACollectionFactory
del RACollectionFactory, _objref_RACollectionFactory

# RACollectionFactory skeleton
__name__ = "CosCollection__POA"
class RACollectionFactory (PortableServer.Servant):
    _NP_RepositoryId = _0_CosCollection.RACollectionFactory._NP_RepositoryId


    _omni_op_d = {"generic_create": _0_CosCollection.RACollectionFactory._d_generic_create}

RACollectionFactory._omni_skeleton = RACollectionFactory
_0_CosCollection__POA.RACollectionFactory = RACollectionFactory
omniORB.registerSkeleton(RACollectionFactory._NP_RepositoryId, RACollectionFactory)
del RACollectionFactory
__name__ = "CosCollection"

# interface RACollectionFactories
_0_CosCollection._d_RACollectionFactories = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosCollection/RACollectionFactories:1.0", "RACollectionFactories")
omniORB.typeMapping["IDL:omg.org/CosCollection/RACollectionFactories:1.0"] = _0_CosCollection._d_RACollectionFactories
_0_CosCollection.RACollectionFactories = omniORB.newEmptyClass()
class RACollectionFactories (_0_CosCollection.RACollectionFactory):
    _NP_RepositoryId = _0_CosCollection._d_RACollectionFactories[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_CosCollection.RACollectionFactories = RACollectionFactories
_0_CosCollection._tc_RACollectionFactories = omniORB.tcInternal.createTypeCode(_0_CosCollection._d_RACollectionFactories)
omniORB.registerType(RACollectionFactories._NP_RepositoryId, _0_CosCollection._d_RACollectionFactories, _0_CosCollection._tc_RACollectionFactories)

# RACollectionFactories operations and attributes
RACollectionFactories._d_add_factory = ((omniORB.typeMapping["IDL:omg.org/CosCollection/Istring:1.0"], omniORB.typeMapping["IDL:omg.org/CosCollection/Istring:1.0"], omniORB.typeMapping["IDL:omg.org/CosCollection/Istring:1.0"], omniORB.typeMapping["IDL:omg.org/CosCollection/RACollectionFactory:1.0"]), (omniORB.tcInternal.tv_boolean, ), None)
RACollectionFactories._d_remove_factory = ((omniORB.typeMapping["IDL:omg.org/CosCollection/Istring:1.0"], omniORB.typeMapping["IDL:omg.org/CosCollection/Istring:1.0"], omniORB.typeMapping["IDL:omg.org/CosCollection/Istring:1.0"]), (omniORB.tcInternal.tv_boolean, ), None)
RACollectionFactories._d_create = ((omniORB.typeMapping["IDL:omg.org/CosCollection/ParameterList:1.0"], ), (omniORB.typeMapping["IDL:omg.org/CosCollection/Collection:1.0"], ), {_0_CosCollection.ParameterInvalid._NP_RepositoryId: _0_CosCollection._d_ParameterInvalid})

# RACollectionFactories object reference
class _objref_RACollectionFactories (_0_CosCollection._objref_RACollectionFactory):
    _NP_RepositoryId = RACollectionFactories._NP_RepositoryId

    def __init__(self, obj):
        _0_CosCollection._objref_RACollectionFactory.__init__(self, obj)

    def add_factory(self, *args):
        return self._obj.invoke("add_factory", _0_CosCollection.RACollectionFactories._d_add_factory, args)

    def remove_factory(self, *args):
        return self._obj.invoke("remove_factory", _0_CosCollection.RACollectionFactories._d_remove_factory, args)

    def create(self, *args):
        return self._obj.invoke("create", _0_CosCollection.RACollectionFactories._d_create, args)

omniORB.registerObjref(RACollectionFactories._NP_RepositoryId, _objref_RACollectionFactories)
_0_CosCollection._objref_RACollectionFactories = _objref_RACollectionFactories
del RACollectionFactories, _objref_RACollectionFactories

# RACollectionFactories skeleton
__name__ = "CosCollection__POA"
class RACollectionFactories (_0_CosCollection__POA.RACollectionFactory):
    _NP_RepositoryId = _0_CosCollection.RACollectionFactories._NP_RepositoryId


    _omni_op_d = {"add_factory": _0_CosCollection.RACollectionFactories._d_add_factory, "remove_factory": _0_CosCollection.RACollectionFactories._d_remove_factory, "create": _0_CosCollection.RACollectionFactories._d_create}
    _omni_op_d.update(_0_CosCollection__POA.RACollectionFactory._omni_op_d)

RACollectionFactories._omni_skeleton = RACollectionFactories
_0_CosCollection__POA.RACollectionFactories = RACollectionFactories
omniORB.registerSkeleton(RACollectionFactories._NP_RepositoryId, RACollectionFactories)
del RACollectionFactories
__name__ = "CosCollection"

# interface KeySetFactory
_0_CosCollection._d_KeySetFactory = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosCollection/KeySetFactory:1.0", "KeySetFactory")
omniORB.typeMapping["IDL:omg.org/CosCollection/KeySetFactory:1.0"] = _0_CosCollection._d_KeySetFactory
_0_CosCollection.KeySetFactory = omniORB.newEmptyClass()
class KeySetFactory (_0_CosCollection.CollectionFactory):
    _NP_RepositoryId = _0_CosCollection._d_KeySetFactory[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_CosCollection.KeySetFactory = KeySetFactory
_0_CosCollection._tc_KeySetFactory = omniORB.tcInternal.createTypeCode(_0_CosCollection._d_KeySetFactory)
omniORB.registerType(KeySetFactory._NP_RepositoryId, _0_CosCollection._d_KeySetFactory, _0_CosCollection._tc_KeySetFactory)

# KeySetFactory operations and attributes
KeySetFactory._d_create = ((omniORB.typeMapping["IDL:omg.org/CosCollection/Operations:1.0"], omniORB.tcInternal.tv_ulong), (omniORB.typeMapping["IDL:omg.org/CosCollection/KeySet:1.0"], ), None)

# KeySetFactory object reference
class _objref_KeySetFactory (_0_CosCollection._objref_CollectionFactory):
    _NP_RepositoryId = KeySetFactory._NP_RepositoryId

    def __init__(self, obj):
        _0_CosCollection._objref_CollectionFactory.__init__(self, obj)

    def create(self, *args):
        return self._obj.invoke("create", _0_CosCollection.KeySetFactory._d_create, args)

omniORB.registerObjref(KeySetFactory._NP_RepositoryId, _objref_KeySetFactory)
_0_CosCollection._objref_KeySetFactory = _objref_KeySetFactory
del KeySetFactory, _objref_KeySetFactory

# KeySetFactory skeleton
__name__ = "CosCollection__POA"
class KeySetFactory (_0_CosCollection__POA.CollectionFactory):
    _NP_RepositoryId = _0_CosCollection.KeySetFactory._NP_RepositoryId


    _omni_op_d = {"create": _0_CosCollection.KeySetFactory._d_create}
    _omni_op_d.update(_0_CosCollection__POA.CollectionFactory._omni_op_d)

KeySetFactory._omni_skeleton = KeySetFactory
_0_CosCollection__POA.KeySetFactory = KeySetFactory
omniORB.registerSkeleton(KeySetFactory._NP_RepositoryId, KeySetFactory)
del KeySetFactory
__name__ = "CosCollection"

# interface KeyBagFactory
_0_CosCollection._d_KeyBagFactory = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosCollection/KeyBagFactory:1.0", "KeyBagFactory")
omniORB.typeMapping["IDL:omg.org/CosCollection/KeyBagFactory:1.0"] = _0_CosCollection._d_KeyBagFactory
_0_CosCollection.KeyBagFactory = omniORB.newEmptyClass()
class KeyBagFactory (_0_CosCollection.CollectionFactory):
    _NP_RepositoryId = _0_CosCollection._d_KeyBagFactory[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_CosCollection.KeyBagFactory = KeyBagFactory
_0_CosCollection._tc_KeyBagFactory = omniORB.tcInternal.createTypeCode(_0_CosCollection._d_KeyBagFactory)
omniORB.registerType(KeyBagFactory._NP_RepositoryId, _0_CosCollection._d_KeyBagFactory, _0_CosCollection._tc_KeyBagFactory)

# KeyBagFactory operations and attributes
KeyBagFactory._d_create = ((omniORB.typeMapping["IDL:omg.org/CosCollection/Operations:1.0"], omniORB.tcInternal.tv_ulong), (omniORB.typeMapping["IDL:omg.org/CosCollection/KeyBag:1.0"], ), None)

# KeyBagFactory object reference
class _objref_KeyBagFactory (_0_CosCollection._objref_CollectionFactory):
    _NP_RepositoryId = KeyBagFactory._NP_RepositoryId

    def __init__(self, obj):
        _0_CosCollection._objref_CollectionFactory.__init__(self, obj)

    def create(self, *args):
        return self._obj.invoke("create", _0_CosCollection.KeyBagFactory._d_create, args)

omniORB.registerObjref(KeyBagFactory._NP_RepositoryId, _objref_KeyBagFactory)
_0_CosCollection._objref_KeyBagFactory = _objref_KeyBagFactory
del KeyBagFactory, _objref_KeyBagFactory

# KeyBagFactory skeleton
__name__ = "CosCollection__POA"
class KeyBagFactory (_0_CosCollection__POA.CollectionFactory):
    _NP_RepositoryId = _0_CosCollection.KeyBagFactory._NP_RepositoryId


    _omni_op_d = {"create": _0_CosCollection.KeyBagFactory._d_create}
    _omni_op_d.update(_0_CosCollection__POA.CollectionFactory._omni_op_d)

KeyBagFactory._omni_skeleton = KeyBagFactory
_0_CosCollection__POA.KeyBagFactory = KeyBagFactory
omniORB.registerSkeleton(KeyBagFactory._NP_RepositoryId, KeyBagFactory)
del KeyBagFactory
__name__ = "CosCollection"

# interface MapFactory
_0_CosCollection._d_MapFactory = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosCollection/MapFactory:1.0", "MapFactory")
omniORB.typeMapping["IDL:omg.org/CosCollection/MapFactory:1.0"] = _0_CosCollection._d_MapFactory
_0_CosCollection.MapFactory = omniORB.newEmptyClass()
class MapFactory (_0_CosCollection.CollectionFactory):
    _NP_RepositoryId = _0_CosCollection._d_MapFactory[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_CosCollection.MapFactory = MapFactory
_0_CosCollection._tc_MapFactory = omniORB.tcInternal.createTypeCode(_0_CosCollection._d_MapFactory)
omniORB.registerType(MapFactory._NP_RepositoryId, _0_CosCollection._d_MapFactory, _0_CosCollection._tc_MapFactory)

# MapFactory operations and attributes
MapFactory._d_create = ((omniORB.typeMapping["IDL:omg.org/CosCollection/Operations:1.0"], omniORB.tcInternal.tv_ulong), (omniORB.typeMapping["IDL:omg.org/CosCollection/Map:1.0"], ), None)

# MapFactory object reference
class _objref_MapFactory (_0_CosCollection._objref_CollectionFactory):
    _NP_RepositoryId = MapFactory._NP_RepositoryId

    def __init__(self, obj):
        _0_CosCollection._objref_CollectionFactory.__init__(self, obj)

    def create(self, *args):
        return self._obj.invoke("create", _0_CosCollection.MapFactory._d_create, args)

omniORB.registerObjref(MapFactory._NP_RepositoryId, _objref_MapFactory)
_0_CosCollection._objref_MapFactory = _objref_MapFactory
del MapFactory, _objref_MapFactory

# MapFactory skeleton
__name__ = "CosCollection__POA"
class MapFactory (_0_CosCollection__POA.CollectionFactory):
    _NP_RepositoryId = _0_CosCollection.MapFactory._NP_RepositoryId


    _omni_op_d = {"create": _0_CosCollection.MapFactory._d_create}
    _omni_op_d.update(_0_CosCollection__POA.CollectionFactory._omni_op_d)

MapFactory._omni_skeleton = MapFactory
_0_CosCollection__POA.MapFactory = MapFactory
omniORB.registerSkeleton(MapFactory._NP_RepositoryId, MapFactory)
del MapFactory
__name__ = "CosCollection"

# interface RelationFactory
_0_CosCollection._d_RelationFactory = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosCollection/RelationFactory:1.0", "RelationFactory")
omniORB.typeMapping["IDL:omg.org/CosCollection/RelationFactory:1.0"] = _0_CosCollection._d_RelationFactory
_0_CosCollection.RelationFactory = omniORB.newEmptyClass()
class RelationFactory (_0_CosCollection.CollectionFactory):
    _NP_RepositoryId = _0_CosCollection._d_RelationFactory[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_CosCollection.RelationFactory = RelationFactory
_0_CosCollection._tc_RelationFactory = omniORB.tcInternal.createTypeCode(_0_CosCollection._d_RelationFactory)
omniORB.registerType(RelationFactory._NP_RepositoryId, _0_CosCollection._d_RelationFactory, _0_CosCollection._tc_RelationFactory)

# RelationFactory operations and attributes
RelationFactory._d_create = ((omniORB.typeMapping["IDL:omg.org/CosCollection/Operations:1.0"], omniORB.tcInternal.tv_ulong), (omniORB.typeMapping["IDL:omg.org/CosCollection/Relation:1.0"], ), None)

# RelationFactory object reference
class _objref_RelationFactory (_0_CosCollection._objref_CollectionFactory):
    _NP_RepositoryId = RelationFactory._NP_RepositoryId

    def __init__(self, obj):
        _0_CosCollection._objref_CollectionFactory.__init__(self, obj)

    def create(self, *args):
        return self._obj.invoke("create", _0_CosCollection.RelationFactory._d_create, args)

omniORB.registerObjref(RelationFactory._NP_RepositoryId, _objref_RelationFactory)
_0_CosCollection._objref_RelationFactory = _objref_RelationFactory
del RelationFactory, _objref_RelationFactory

# RelationFactory skeleton
__name__ = "CosCollection__POA"
class RelationFactory (_0_CosCollection__POA.CollectionFactory):
    _NP_RepositoryId = _0_CosCollection.RelationFactory._NP_RepositoryId


    _omni_op_d = {"create": _0_CosCollection.RelationFactory._d_create}
    _omni_op_d.update(_0_CosCollection__POA.CollectionFactory._omni_op_d)

RelationFactory._omni_skeleton = RelationFactory
_0_CosCollection__POA.RelationFactory = RelationFactory
omniORB.registerSkeleton(RelationFactory._NP_RepositoryId, RelationFactory)
del RelationFactory
__name__ = "CosCollection"

# interface SetFactory
_0_CosCollection._d_SetFactory = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosCollection/SetFactory:1.0", "SetFactory")
omniORB.typeMapping["IDL:omg.org/CosCollection/SetFactory:1.0"] = _0_CosCollection._d_SetFactory
_0_CosCollection.SetFactory = omniORB.newEmptyClass()
class SetFactory (_0_CosCollection.CollectionFactory):
    _NP_RepositoryId = _0_CosCollection._d_SetFactory[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_CosCollection.SetFactory = SetFactory
_0_CosCollection._tc_SetFactory = omniORB.tcInternal.createTypeCode(_0_CosCollection._d_SetFactory)
omniORB.registerType(SetFactory._NP_RepositoryId, _0_CosCollection._d_SetFactory, _0_CosCollection._tc_SetFactory)

# SetFactory operations and attributes
SetFactory._d_create = ((omniORB.typeMapping["IDL:omg.org/CosCollection/Operations:1.0"], omniORB.tcInternal.tv_ulong), (omniORB.typeMapping["IDL:omg.org/CosCollection/Set:1.0"], ), None)

# SetFactory object reference
class _objref_SetFactory (_0_CosCollection._objref_CollectionFactory):
    _NP_RepositoryId = SetFactory._NP_RepositoryId

    def __init__(self, obj):
        _0_CosCollection._objref_CollectionFactory.__init__(self, obj)

    def create(self, *args):
        return self._obj.invoke("create", _0_CosCollection.SetFactory._d_create, args)

omniORB.registerObjref(SetFactory._NP_RepositoryId, _objref_SetFactory)
_0_CosCollection._objref_SetFactory = _objref_SetFactory
del SetFactory, _objref_SetFactory

# SetFactory skeleton
__name__ = "CosCollection__POA"
class SetFactory (_0_CosCollection__POA.CollectionFactory):
    _NP_RepositoryId = _0_CosCollection.SetFactory._NP_RepositoryId


    _omni_op_d = {"create": _0_CosCollection.SetFactory._d_create}
    _omni_op_d.update(_0_CosCollection__POA.CollectionFactory._omni_op_d)

SetFactory._omni_skeleton = SetFactory
_0_CosCollection__POA.SetFactory = SetFactory
omniORB.registerSkeleton(SetFactory._NP_RepositoryId, SetFactory)
del SetFactory
__name__ = "CosCollection"

# interface BagFactory
_0_CosCollection._d_BagFactory = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosCollection/BagFactory:1.0", "BagFactory")
omniORB.typeMapping["IDL:omg.org/CosCollection/BagFactory:1.0"] = _0_CosCollection._d_BagFactory
_0_CosCollection.BagFactory = omniORB.newEmptyClass()
class BagFactory :
    _NP_RepositoryId = _0_CosCollection._d_BagFactory[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_CosCollection.BagFactory = BagFactory
_0_CosCollection._tc_BagFactory = omniORB.tcInternal.createTypeCode(_0_CosCollection._d_BagFactory)
omniORB.registerType(BagFactory._NP_RepositoryId, _0_CosCollection._d_BagFactory, _0_CosCollection._tc_BagFactory)

# BagFactory operations and attributes
BagFactory._d_create = ((omniORB.typeMapping["IDL:omg.org/CosCollection/Operations:1.0"], omniORB.tcInternal.tv_ulong), (omniORB.typeMapping["IDL:omg.org/CosCollection/Bag:1.0"], ), None)

# BagFactory object reference
class _objref_BagFactory (CORBA.Object):
    _NP_RepositoryId = BagFactory._NP_RepositoryId

    def __init__(self, obj):
        CORBA.Object.__init__(self, obj)

    def create(self, *args):
        return self._obj.invoke("create", _0_CosCollection.BagFactory._d_create, args)

omniORB.registerObjref(BagFactory._NP_RepositoryId, _objref_BagFactory)
_0_CosCollection._objref_BagFactory = _objref_BagFactory
del BagFactory, _objref_BagFactory

# BagFactory skeleton
__name__ = "CosCollection__POA"
class BagFactory (PortableServer.Servant):
    _NP_RepositoryId = _0_CosCollection.BagFactory._NP_RepositoryId


    _omni_op_d = {"create": _0_CosCollection.BagFactory._d_create}

BagFactory._omni_skeleton = BagFactory
_0_CosCollection__POA.BagFactory = BagFactory
omniORB.registerSkeleton(BagFactory._NP_RepositoryId, BagFactory)
del BagFactory
__name__ = "CosCollection"

# interface KeySortedSetFactory
_0_CosCollection._d_KeySortedSetFactory = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosCollection/KeySortedSetFactory:1.0", "KeySortedSetFactory")
omniORB.typeMapping["IDL:omg.org/CosCollection/KeySortedSetFactory:1.0"] = _0_CosCollection._d_KeySortedSetFactory
_0_CosCollection.KeySortedSetFactory = omniORB.newEmptyClass()
class KeySortedSetFactory :
    _NP_RepositoryId = _0_CosCollection._d_KeySortedSetFactory[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_CosCollection.KeySortedSetFactory = KeySortedSetFactory
_0_CosCollection._tc_KeySortedSetFactory = omniORB.tcInternal.createTypeCode(_0_CosCollection._d_KeySortedSetFactory)
omniORB.registerType(KeySortedSetFactory._NP_RepositoryId, _0_CosCollection._d_KeySortedSetFactory, _0_CosCollection._tc_KeySortedSetFactory)

# KeySortedSetFactory operations and attributes
KeySortedSetFactory._d_create = ((omniORB.typeMapping["IDL:omg.org/CosCollection/Operations:1.0"], omniORB.tcInternal.tv_ulong), (omniORB.typeMapping["IDL:omg.org/CosCollection/KeySortedSet:1.0"], ), None)

# KeySortedSetFactory object reference
class _objref_KeySortedSetFactory (CORBA.Object):
    _NP_RepositoryId = KeySortedSetFactory._NP_RepositoryId

    def __init__(self, obj):
        CORBA.Object.__init__(self, obj)

    def create(self, *args):
        return self._obj.invoke("create", _0_CosCollection.KeySortedSetFactory._d_create, args)

omniORB.registerObjref(KeySortedSetFactory._NP_RepositoryId, _objref_KeySortedSetFactory)
_0_CosCollection._objref_KeySortedSetFactory = _objref_KeySortedSetFactory
del KeySortedSetFactory, _objref_KeySortedSetFactory

# KeySortedSetFactory skeleton
__name__ = "CosCollection__POA"
class KeySortedSetFactory (PortableServer.Servant):
    _NP_RepositoryId = _0_CosCollection.KeySortedSetFactory._NP_RepositoryId


    _omni_op_d = {"create": _0_CosCollection.KeySortedSetFactory._d_create}

KeySortedSetFactory._omni_skeleton = KeySortedSetFactory
_0_CosCollection__POA.KeySortedSetFactory = KeySortedSetFactory
omniORB.registerSkeleton(KeySortedSetFactory._NP_RepositoryId, KeySortedSetFactory)
del KeySortedSetFactory
__name__ = "CosCollection"

# interface KeySortedBagFactory
_0_CosCollection._d_KeySortedBagFactory = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosCollection/KeySortedBagFactory:1.0", "KeySortedBagFactory")
omniORB.typeMapping["IDL:omg.org/CosCollection/KeySortedBagFactory:1.0"] = _0_CosCollection._d_KeySortedBagFactory
_0_CosCollection.KeySortedBagFactory = omniORB.newEmptyClass()
class KeySortedBagFactory (_0_CosCollection.CollectionFactory):
    _NP_RepositoryId = _0_CosCollection._d_KeySortedBagFactory[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_CosCollection.KeySortedBagFactory = KeySortedBagFactory
_0_CosCollection._tc_KeySortedBagFactory = omniORB.tcInternal.createTypeCode(_0_CosCollection._d_KeySortedBagFactory)
omniORB.registerType(KeySortedBagFactory._NP_RepositoryId, _0_CosCollection._d_KeySortedBagFactory, _0_CosCollection._tc_KeySortedBagFactory)

# KeySortedBagFactory operations and attributes
KeySortedBagFactory._d_create = ((omniORB.typeMapping["IDL:omg.org/CosCollection/Operations:1.0"], omniORB.tcInternal.tv_ulong), (omniORB.typeMapping["IDL:omg.org/CosCollection/KeySortedBag:1.0"], ), None)

# KeySortedBagFactory object reference
class _objref_KeySortedBagFactory (_0_CosCollection._objref_CollectionFactory):
    _NP_RepositoryId = KeySortedBagFactory._NP_RepositoryId

    def __init__(self, obj):
        _0_CosCollection._objref_CollectionFactory.__init__(self, obj)

    def create(self, *args):
        return self._obj.invoke("create", _0_CosCollection.KeySortedBagFactory._d_create, args)

omniORB.registerObjref(KeySortedBagFactory._NP_RepositoryId, _objref_KeySortedBagFactory)
_0_CosCollection._objref_KeySortedBagFactory = _objref_KeySortedBagFactory
del KeySortedBagFactory, _objref_KeySortedBagFactory

# KeySortedBagFactory skeleton
__name__ = "CosCollection__POA"
class KeySortedBagFactory (_0_CosCollection__POA.CollectionFactory):
    _NP_RepositoryId = _0_CosCollection.KeySortedBagFactory._NP_RepositoryId


    _omni_op_d = {"create": _0_CosCollection.KeySortedBagFactory._d_create}
    _omni_op_d.update(_0_CosCollection__POA.CollectionFactory._omni_op_d)

KeySortedBagFactory._omni_skeleton = KeySortedBagFactory
_0_CosCollection__POA.KeySortedBagFactory = KeySortedBagFactory
omniORB.registerSkeleton(KeySortedBagFactory._NP_RepositoryId, KeySortedBagFactory)
del KeySortedBagFactory
__name__ = "CosCollection"

# interface SortedMapFactory
_0_CosCollection._d_SortedMapFactory = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosCollection/SortedMapFactory:1.0", "SortedMapFactory")
omniORB.typeMapping["IDL:omg.org/CosCollection/SortedMapFactory:1.0"] = _0_CosCollection._d_SortedMapFactory
_0_CosCollection.SortedMapFactory = omniORB.newEmptyClass()
class SortedMapFactory (_0_CosCollection.CollectionFactory):
    _NP_RepositoryId = _0_CosCollection._d_SortedMapFactory[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_CosCollection.SortedMapFactory = SortedMapFactory
_0_CosCollection._tc_SortedMapFactory = omniORB.tcInternal.createTypeCode(_0_CosCollection._d_SortedMapFactory)
omniORB.registerType(SortedMapFactory._NP_RepositoryId, _0_CosCollection._d_SortedMapFactory, _0_CosCollection._tc_SortedMapFactory)

# SortedMapFactory operations and attributes
SortedMapFactory._d_create = ((omniORB.typeMapping["IDL:omg.org/CosCollection/Operations:1.0"], omniORB.tcInternal.tv_ulong), (omniORB.typeMapping["IDL:omg.org/CosCollection/SortedMap:1.0"], ), None)

# SortedMapFactory object reference
class _objref_SortedMapFactory (_0_CosCollection._objref_CollectionFactory):
    _NP_RepositoryId = SortedMapFactory._NP_RepositoryId

    def __init__(self, obj):
        _0_CosCollection._objref_CollectionFactory.__init__(self, obj)

    def create(self, *args):
        return self._obj.invoke("create", _0_CosCollection.SortedMapFactory._d_create, args)

omniORB.registerObjref(SortedMapFactory._NP_RepositoryId, _objref_SortedMapFactory)
_0_CosCollection._objref_SortedMapFactory = _objref_SortedMapFactory
del SortedMapFactory, _objref_SortedMapFactory

# SortedMapFactory skeleton
__name__ = "CosCollection__POA"
class SortedMapFactory (_0_CosCollection__POA.CollectionFactory):
    _NP_RepositoryId = _0_CosCollection.SortedMapFactory._NP_RepositoryId


    _omni_op_d = {"create": _0_CosCollection.SortedMapFactory._d_create}
    _omni_op_d.update(_0_CosCollection__POA.CollectionFactory._omni_op_d)

SortedMapFactory._omni_skeleton = SortedMapFactory
_0_CosCollection__POA.SortedMapFactory = SortedMapFactory
omniORB.registerSkeleton(SortedMapFactory._NP_RepositoryId, SortedMapFactory)
del SortedMapFactory
__name__ = "CosCollection"

# interface SortedRelationFactory
_0_CosCollection._d_SortedRelationFactory = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosCollection/SortedRelationFactory:1.0", "SortedRelationFactory")
omniORB.typeMapping["IDL:omg.org/CosCollection/SortedRelationFactory:1.0"] = _0_CosCollection._d_SortedRelationFactory
_0_CosCollection.SortedRelationFactory = omniORB.newEmptyClass()
class SortedRelationFactory (_0_CosCollection.CollectionFactory):
    _NP_RepositoryId = _0_CosCollection._d_SortedRelationFactory[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_CosCollection.SortedRelationFactory = SortedRelationFactory
_0_CosCollection._tc_SortedRelationFactory = omniORB.tcInternal.createTypeCode(_0_CosCollection._d_SortedRelationFactory)
omniORB.registerType(SortedRelationFactory._NP_RepositoryId, _0_CosCollection._d_SortedRelationFactory, _0_CosCollection._tc_SortedRelationFactory)

# SortedRelationFactory operations and attributes
SortedRelationFactory._d_create = ((omniORB.typeMapping["IDL:omg.org/CosCollection/Operations:1.0"], omniORB.tcInternal.tv_ulong), (omniORB.typeMapping["IDL:omg.org/CosCollection/SortedRelation:1.0"], ), None)

# SortedRelationFactory object reference
class _objref_SortedRelationFactory (_0_CosCollection._objref_CollectionFactory):
    _NP_RepositoryId = SortedRelationFactory._NP_RepositoryId

    def __init__(self, obj):
        _0_CosCollection._objref_CollectionFactory.__init__(self, obj)

    def create(self, *args):
        return self._obj.invoke("create", _0_CosCollection.SortedRelationFactory._d_create, args)

omniORB.registerObjref(SortedRelationFactory._NP_RepositoryId, _objref_SortedRelationFactory)
_0_CosCollection._objref_SortedRelationFactory = _objref_SortedRelationFactory
del SortedRelationFactory, _objref_SortedRelationFactory

# SortedRelationFactory skeleton
__name__ = "CosCollection__POA"
class SortedRelationFactory (_0_CosCollection__POA.CollectionFactory):
    _NP_RepositoryId = _0_CosCollection.SortedRelationFactory._NP_RepositoryId


    _omni_op_d = {"create": _0_CosCollection.SortedRelationFactory._d_create}
    _omni_op_d.update(_0_CosCollection__POA.CollectionFactory._omni_op_d)

SortedRelationFactory._omni_skeleton = SortedRelationFactory
_0_CosCollection__POA.SortedRelationFactory = SortedRelationFactory
omniORB.registerSkeleton(SortedRelationFactory._NP_RepositoryId, SortedRelationFactory)
del SortedRelationFactory
__name__ = "CosCollection"

# interface SortedSetFactory
_0_CosCollection._d_SortedSetFactory = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosCollection/SortedSetFactory:1.0", "SortedSetFactory")
omniORB.typeMapping["IDL:omg.org/CosCollection/SortedSetFactory:1.0"] = _0_CosCollection._d_SortedSetFactory
_0_CosCollection.SortedSetFactory = omniORB.newEmptyClass()
class SortedSetFactory (_0_CosCollection.CollectionFactory):
    _NP_RepositoryId = _0_CosCollection._d_SortedSetFactory[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_CosCollection.SortedSetFactory = SortedSetFactory
_0_CosCollection._tc_SortedSetFactory = omniORB.tcInternal.createTypeCode(_0_CosCollection._d_SortedSetFactory)
omniORB.registerType(SortedSetFactory._NP_RepositoryId, _0_CosCollection._d_SortedSetFactory, _0_CosCollection._tc_SortedSetFactory)

# SortedSetFactory operations and attributes
SortedSetFactory._d_create = ((omniORB.typeMapping["IDL:omg.org/CosCollection/Operations:1.0"], omniORB.tcInternal.tv_ulong), (omniORB.typeMapping["IDL:omg.org/CosCollection/SortedSet:1.0"], ), None)

# SortedSetFactory object reference
class _objref_SortedSetFactory (_0_CosCollection._objref_CollectionFactory):
    _NP_RepositoryId = SortedSetFactory._NP_RepositoryId

    def __init__(self, obj):
        _0_CosCollection._objref_CollectionFactory.__init__(self, obj)

    def create(self, *args):
        return self._obj.invoke("create", _0_CosCollection.SortedSetFactory._d_create, args)

omniORB.registerObjref(SortedSetFactory._NP_RepositoryId, _objref_SortedSetFactory)
_0_CosCollection._objref_SortedSetFactory = _objref_SortedSetFactory
del SortedSetFactory, _objref_SortedSetFactory

# SortedSetFactory skeleton
__name__ = "CosCollection__POA"
class SortedSetFactory (_0_CosCollection__POA.CollectionFactory):
    _NP_RepositoryId = _0_CosCollection.SortedSetFactory._NP_RepositoryId


    _omni_op_d = {"create": _0_CosCollection.SortedSetFactory._d_create}
    _omni_op_d.update(_0_CosCollection__POA.CollectionFactory._omni_op_d)

SortedSetFactory._omni_skeleton = SortedSetFactory
_0_CosCollection__POA.SortedSetFactory = SortedSetFactory
omniORB.registerSkeleton(SortedSetFactory._NP_RepositoryId, SortedSetFactory)
del SortedSetFactory
__name__ = "CosCollection"

# interface SortedBagFactory
_0_CosCollection._d_SortedBagFactory = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosCollection/SortedBagFactory:1.0", "SortedBagFactory")
omniORB.typeMapping["IDL:omg.org/CosCollection/SortedBagFactory:1.0"] = _0_CosCollection._d_SortedBagFactory
_0_CosCollection.SortedBagFactory = omniORB.newEmptyClass()
class SortedBagFactory :
    _NP_RepositoryId = _0_CosCollection._d_SortedBagFactory[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_CosCollection.SortedBagFactory = SortedBagFactory
_0_CosCollection._tc_SortedBagFactory = omniORB.tcInternal.createTypeCode(_0_CosCollection._d_SortedBagFactory)
omniORB.registerType(SortedBagFactory._NP_RepositoryId, _0_CosCollection._d_SortedBagFactory, _0_CosCollection._tc_SortedBagFactory)

# SortedBagFactory operations and attributes
SortedBagFactory._d_create = ((omniORB.typeMapping["IDL:omg.org/CosCollection/Operations:1.0"], omniORB.tcInternal.tv_ulong), (omniORB.typeMapping["IDL:omg.org/CosCollection/SortedBag:1.0"], ), None)

# SortedBagFactory object reference
class _objref_SortedBagFactory (CORBA.Object):
    _NP_RepositoryId = SortedBagFactory._NP_RepositoryId

    def __init__(self, obj):
        CORBA.Object.__init__(self, obj)

    def create(self, *args):
        return self._obj.invoke("create", _0_CosCollection.SortedBagFactory._d_create, args)

omniORB.registerObjref(SortedBagFactory._NP_RepositoryId, _objref_SortedBagFactory)
_0_CosCollection._objref_SortedBagFactory = _objref_SortedBagFactory
del SortedBagFactory, _objref_SortedBagFactory

# SortedBagFactory skeleton
__name__ = "CosCollection__POA"
class SortedBagFactory (PortableServer.Servant):
    _NP_RepositoryId = _0_CosCollection.SortedBagFactory._NP_RepositoryId


    _omni_op_d = {"create": _0_CosCollection.SortedBagFactory._d_create}

SortedBagFactory._omni_skeleton = SortedBagFactory
_0_CosCollection__POA.SortedBagFactory = SortedBagFactory
omniORB.registerSkeleton(SortedBagFactory._NP_RepositoryId, SortedBagFactory)
del SortedBagFactory
__name__ = "CosCollection"

# interface SequenceFactory
_0_CosCollection._d_SequenceFactory = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosCollection/SequenceFactory:1.0", "SequenceFactory")
omniORB.typeMapping["IDL:omg.org/CosCollection/SequenceFactory:1.0"] = _0_CosCollection._d_SequenceFactory
_0_CosCollection.SequenceFactory = omniORB.newEmptyClass()
class SequenceFactory (_0_CosCollection.CollectionFactory):
    _NP_RepositoryId = _0_CosCollection._d_SequenceFactory[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_CosCollection.SequenceFactory = SequenceFactory
_0_CosCollection._tc_SequenceFactory = omniORB.tcInternal.createTypeCode(_0_CosCollection._d_SequenceFactory)
omniORB.registerType(SequenceFactory._NP_RepositoryId, _0_CosCollection._d_SequenceFactory, _0_CosCollection._tc_SequenceFactory)

# SequenceFactory operations and attributes
SequenceFactory._d_create = ((omniORB.typeMapping["IDL:omg.org/CosCollection/Operations:1.0"], omniORB.tcInternal.tv_ulong), (omniORB.typeMapping["IDL:omg.org/CosCollection/CSequence:1.0"], ), None)

# SequenceFactory object reference
class _objref_SequenceFactory (_0_CosCollection._objref_CollectionFactory):
    _NP_RepositoryId = SequenceFactory._NP_RepositoryId

    def __init__(self, obj):
        _0_CosCollection._objref_CollectionFactory.__init__(self, obj)

    def create(self, *args):
        return self._obj.invoke("create", _0_CosCollection.SequenceFactory._d_create, args)

omniORB.registerObjref(SequenceFactory._NP_RepositoryId, _objref_SequenceFactory)
_0_CosCollection._objref_SequenceFactory = _objref_SequenceFactory
del SequenceFactory, _objref_SequenceFactory

# SequenceFactory skeleton
__name__ = "CosCollection__POA"
class SequenceFactory (_0_CosCollection__POA.CollectionFactory):
    _NP_RepositoryId = _0_CosCollection.SequenceFactory._NP_RepositoryId


    _omni_op_d = {"create": _0_CosCollection.SequenceFactory._d_create}
    _omni_op_d.update(_0_CosCollection__POA.CollectionFactory._omni_op_d)

SequenceFactory._omni_skeleton = SequenceFactory
_0_CosCollection__POA.SequenceFactory = SequenceFactory
omniORB.registerSkeleton(SequenceFactory._NP_RepositoryId, SequenceFactory)
del SequenceFactory
__name__ = "CosCollection"

# interface EqualitySequenceFactory
_0_CosCollection._d_EqualitySequenceFactory = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosCollection/EqualitySequenceFactory:1.0", "EqualitySequenceFactory")
omniORB.typeMapping["IDL:omg.org/CosCollection/EqualitySequenceFactory:1.0"] = _0_CosCollection._d_EqualitySequenceFactory
_0_CosCollection.EqualitySequenceFactory = omniORB.newEmptyClass()
class EqualitySequenceFactory (_0_CosCollection.CollectionFactory):
    _NP_RepositoryId = _0_CosCollection._d_EqualitySequenceFactory[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_CosCollection.EqualitySequenceFactory = EqualitySequenceFactory
_0_CosCollection._tc_EqualitySequenceFactory = omniORB.tcInternal.createTypeCode(_0_CosCollection._d_EqualitySequenceFactory)
omniORB.registerType(EqualitySequenceFactory._NP_RepositoryId, _0_CosCollection._d_EqualitySequenceFactory, _0_CosCollection._tc_EqualitySequenceFactory)

# EqualitySequenceFactory operations and attributes
EqualitySequenceFactory._d_create = ((omniORB.typeMapping["IDL:omg.org/CosCollection/Operations:1.0"], omniORB.tcInternal.tv_ulong), (omniORB.typeMapping["IDL:omg.org/CosCollection/EqualitySequence:1.0"], ), None)

# EqualitySequenceFactory object reference
class _objref_EqualitySequenceFactory (_0_CosCollection._objref_CollectionFactory):
    _NP_RepositoryId = EqualitySequenceFactory._NP_RepositoryId

    def __init__(self, obj):
        _0_CosCollection._objref_CollectionFactory.__init__(self, obj)

    def create(self, *args):
        return self._obj.invoke("create", _0_CosCollection.EqualitySequenceFactory._d_create, args)

omniORB.registerObjref(EqualitySequenceFactory._NP_RepositoryId, _objref_EqualitySequenceFactory)
_0_CosCollection._objref_EqualitySequenceFactory = _objref_EqualitySequenceFactory
del EqualitySequenceFactory, _objref_EqualitySequenceFactory

# EqualitySequenceFactory skeleton
__name__ = "CosCollection__POA"
class EqualitySequenceFactory (_0_CosCollection__POA.CollectionFactory):
    _NP_RepositoryId = _0_CosCollection.EqualitySequenceFactory._NP_RepositoryId


    _omni_op_d = {"create": _0_CosCollection.EqualitySequenceFactory._d_create}
    _omni_op_d.update(_0_CosCollection__POA.CollectionFactory._omni_op_d)

EqualitySequenceFactory._omni_skeleton = EqualitySequenceFactory
_0_CosCollection__POA.EqualitySequenceFactory = EqualitySequenceFactory
omniORB.registerSkeleton(EqualitySequenceFactory._NP_RepositoryId, EqualitySequenceFactory)
del EqualitySequenceFactory
__name__ = "CosCollection"

# interface HeapFactory
_0_CosCollection._d_HeapFactory = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosCollection/HeapFactory:1.0", "HeapFactory")
omniORB.typeMapping["IDL:omg.org/CosCollection/HeapFactory:1.0"] = _0_CosCollection._d_HeapFactory
_0_CosCollection.HeapFactory = omniORB.newEmptyClass()
class HeapFactory (_0_CosCollection.CollectionFactory):
    _NP_RepositoryId = _0_CosCollection._d_HeapFactory[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_CosCollection.HeapFactory = HeapFactory
_0_CosCollection._tc_HeapFactory = omniORB.tcInternal.createTypeCode(_0_CosCollection._d_HeapFactory)
omniORB.registerType(HeapFactory._NP_RepositoryId, _0_CosCollection._d_HeapFactory, _0_CosCollection._tc_HeapFactory)

# HeapFactory operations and attributes
HeapFactory._d_create = ((omniORB.typeMapping["IDL:omg.org/CosCollection/Operations:1.0"], omniORB.tcInternal.tv_ulong), (omniORB.typeMapping["IDL:omg.org/CosCollection/Heap:1.0"], ), None)

# HeapFactory object reference
class _objref_HeapFactory (_0_CosCollection._objref_CollectionFactory):
    _NP_RepositoryId = HeapFactory._NP_RepositoryId

    def __init__(self, obj):
        _0_CosCollection._objref_CollectionFactory.__init__(self, obj)

    def create(self, *args):
        return self._obj.invoke("create", _0_CosCollection.HeapFactory._d_create, args)

omniORB.registerObjref(HeapFactory._NP_RepositoryId, _objref_HeapFactory)
_0_CosCollection._objref_HeapFactory = _objref_HeapFactory
del HeapFactory, _objref_HeapFactory

# HeapFactory skeleton
__name__ = "CosCollection__POA"
class HeapFactory (_0_CosCollection__POA.CollectionFactory):
    _NP_RepositoryId = _0_CosCollection.HeapFactory._NP_RepositoryId


    _omni_op_d = {"create": _0_CosCollection.HeapFactory._d_create}
    _omni_op_d.update(_0_CosCollection__POA.CollectionFactory._omni_op_d)

HeapFactory._omni_skeleton = HeapFactory
_0_CosCollection__POA.HeapFactory = HeapFactory
omniORB.registerSkeleton(HeapFactory._NP_RepositoryId, HeapFactory)
del HeapFactory
__name__ = "CosCollection"

# interface QueueFactory
_0_CosCollection._d_QueueFactory = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosCollection/QueueFactory:1.0", "QueueFactory")
omniORB.typeMapping["IDL:omg.org/CosCollection/QueueFactory:1.0"] = _0_CosCollection._d_QueueFactory
_0_CosCollection.QueueFactory = omniORB.newEmptyClass()
class QueueFactory (_0_CosCollection.RACollectionFactory):
    _NP_RepositoryId = _0_CosCollection._d_QueueFactory[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_CosCollection.QueueFactory = QueueFactory
_0_CosCollection._tc_QueueFactory = omniORB.tcInternal.createTypeCode(_0_CosCollection._d_QueueFactory)
omniORB.registerType(QueueFactory._NP_RepositoryId, _0_CosCollection._d_QueueFactory, _0_CosCollection._tc_QueueFactory)

# QueueFactory operations and attributes
QueueFactory._d_create = ((omniORB.typeMapping["IDL:omg.org/CosCollection/Operations:1.0"], omniORB.tcInternal.tv_ulong), (omniORB.typeMapping["IDL:omg.org/CosCollection/Queue:1.0"], ), None)

# QueueFactory object reference
class _objref_QueueFactory (_0_CosCollection._objref_RACollectionFactory):
    _NP_RepositoryId = QueueFactory._NP_RepositoryId

    def __init__(self, obj):
        _0_CosCollection._objref_RACollectionFactory.__init__(self, obj)

    def create(self, *args):
        return self._obj.invoke("create", _0_CosCollection.QueueFactory._d_create, args)

omniORB.registerObjref(QueueFactory._NP_RepositoryId, _objref_QueueFactory)
_0_CosCollection._objref_QueueFactory = _objref_QueueFactory
del QueueFactory, _objref_QueueFactory

# QueueFactory skeleton
__name__ = "CosCollection__POA"
class QueueFactory (_0_CosCollection__POA.RACollectionFactory):
    _NP_RepositoryId = _0_CosCollection.QueueFactory._NP_RepositoryId


    _omni_op_d = {"create": _0_CosCollection.QueueFactory._d_create}
    _omni_op_d.update(_0_CosCollection__POA.RACollectionFactory._omni_op_d)

QueueFactory._omni_skeleton = QueueFactory
_0_CosCollection__POA.QueueFactory = QueueFactory
omniORB.registerSkeleton(QueueFactory._NP_RepositoryId, QueueFactory)
del QueueFactory
__name__ = "CosCollection"

# interface StackFactory
_0_CosCollection._d_StackFactory = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosCollection/StackFactory:1.0", "StackFactory")
omniORB.typeMapping["IDL:omg.org/CosCollection/StackFactory:1.0"] = _0_CosCollection._d_StackFactory
_0_CosCollection.StackFactory = omniORB.newEmptyClass()
class StackFactory (_0_CosCollection.RACollectionFactory):
    _NP_RepositoryId = _0_CosCollection._d_StackFactory[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_CosCollection.StackFactory = StackFactory
_0_CosCollection._tc_StackFactory = omniORB.tcInternal.createTypeCode(_0_CosCollection._d_StackFactory)
omniORB.registerType(StackFactory._NP_RepositoryId, _0_CosCollection._d_StackFactory, _0_CosCollection._tc_StackFactory)

# StackFactory operations and attributes
StackFactory._d_create = ((omniORB.typeMapping["IDL:omg.org/CosCollection/Operations:1.0"], omniORB.tcInternal.tv_ulong), (omniORB.typeMapping["IDL:omg.org/CosCollection/Stack:1.0"], ), None)

# StackFactory object reference
class _objref_StackFactory (_0_CosCollection._objref_RACollectionFactory):
    _NP_RepositoryId = StackFactory._NP_RepositoryId

    def __init__(self, obj):
        _0_CosCollection._objref_RACollectionFactory.__init__(self, obj)

    def create(self, *args):
        return self._obj.invoke("create", _0_CosCollection.StackFactory._d_create, args)

omniORB.registerObjref(StackFactory._NP_RepositoryId, _objref_StackFactory)
_0_CosCollection._objref_StackFactory = _objref_StackFactory
del StackFactory, _objref_StackFactory

# StackFactory skeleton
__name__ = "CosCollection__POA"
class StackFactory (_0_CosCollection__POA.RACollectionFactory):
    _NP_RepositoryId = _0_CosCollection.StackFactory._NP_RepositoryId


    _omni_op_d = {"create": _0_CosCollection.StackFactory._d_create}
    _omni_op_d.update(_0_CosCollection__POA.RACollectionFactory._omni_op_d)

StackFactory._omni_skeleton = StackFactory
_0_CosCollection__POA.StackFactory = StackFactory
omniORB.registerSkeleton(StackFactory._NP_RepositoryId, StackFactory)
del StackFactory
__name__ = "CosCollection"

# interface DequeFactory
_0_CosCollection._d_DequeFactory = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosCollection/DequeFactory:1.0", "DequeFactory")
omniORB.typeMapping["IDL:omg.org/CosCollection/DequeFactory:1.0"] = _0_CosCollection._d_DequeFactory
_0_CosCollection.DequeFactory = omniORB.newEmptyClass()
class DequeFactory (_0_CosCollection.RACollectionFactory):
    _NP_RepositoryId = _0_CosCollection._d_DequeFactory[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_CosCollection.DequeFactory = DequeFactory
_0_CosCollection._tc_DequeFactory = omniORB.tcInternal.createTypeCode(_0_CosCollection._d_DequeFactory)
omniORB.registerType(DequeFactory._NP_RepositoryId, _0_CosCollection._d_DequeFactory, _0_CosCollection._tc_DequeFactory)

# DequeFactory operations and attributes
DequeFactory._d_create = ((omniORB.typeMapping["IDL:omg.org/CosCollection/Operations:1.0"], omniORB.tcInternal.tv_ulong), (omniORB.typeMapping["IDL:omg.org/CosCollection/Deque:1.0"], ), None)

# DequeFactory object reference
class _objref_DequeFactory (_0_CosCollection._objref_RACollectionFactory):
    _NP_RepositoryId = DequeFactory._NP_RepositoryId

    def __init__(self, obj):
        _0_CosCollection._objref_RACollectionFactory.__init__(self, obj)

    def create(self, *args):
        return self._obj.invoke("create", _0_CosCollection.DequeFactory._d_create, args)

omniORB.registerObjref(DequeFactory._NP_RepositoryId, _objref_DequeFactory)
_0_CosCollection._objref_DequeFactory = _objref_DequeFactory
del DequeFactory, _objref_DequeFactory

# DequeFactory skeleton
__name__ = "CosCollection__POA"
class DequeFactory (_0_CosCollection__POA.RACollectionFactory):
    _NP_RepositoryId = _0_CosCollection.DequeFactory._NP_RepositoryId


    _omni_op_d = {"create": _0_CosCollection.DequeFactory._d_create}
    _omni_op_d.update(_0_CosCollection__POA.RACollectionFactory._omni_op_d)

DequeFactory._omni_skeleton = DequeFactory
_0_CosCollection__POA.DequeFactory = DequeFactory
omniORB.registerSkeleton(DequeFactory._NP_RepositoryId, DequeFactory)
del DequeFactory
__name__ = "CosCollection"

# interface PriorityQueueFactory
_0_CosCollection._d_PriorityQueueFactory = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosCollection/PriorityQueueFactory:1.0", "PriorityQueueFactory")
omniORB.typeMapping["IDL:omg.org/CosCollection/PriorityQueueFactory:1.0"] = _0_CosCollection._d_PriorityQueueFactory
_0_CosCollection.PriorityQueueFactory = omniORB.newEmptyClass()
class PriorityQueueFactory (_0_CosCollection.RACollectionFactory):
    _NP_RepositoryId = _0_CosCollection._d_PriorityQueueFactory[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_CosCollection.PriorityQueueFactory = PriorityQueueFactory
_0_CosCollection._tc_PriorityQueueFactory = omniORB.tcInternal.createTypeCode(_0_CosCollection._d_PriorityQueueFactory)
omniORB.registerType(PriorityQueueFactory._NP_RepositoryId, _0_CosCollection._d_PriorityQueueFactory, _0_CosCollection._tc_PriorityQueueFactory)

# PriorityQueueFactory operations and attributes
PriorityQueueFactory._d_create = ((omniORB.typeMapping["IDL:omg.org/CosCollection/Operations:1.0"], omniORB.tcInternal.tv_ulong), (omniORB.typeMapping["IDL:omg.org/CosCollection/PriorityQueue:1.0"], ), None)

# PriorityQueueFactory object reference
class _objref_PriorityQueueFactory (_0_CosCollection._objref_RACollectionFactory):
    _NP_RepositoryId = PriorityQueueFactory._NP_RepositoryId

    def __init__(self, obj):
        _0_CosCollection._objref_RACollectionFactory.__init__(self, obj)

    def create(self, *args):
        return self._obj.invoke("create", _0_CosCollection.PriorityQueueFactory._d_create, args)

omniORB.registerObjref(PriorityQueueFactory._NP_RepositoryId, _objref_PriorityQueueFactory)
_0_CosCollection._objref_PriorityQueueFactory = _objref_PriorityQueueFactory
del PriorityQueueFactory, _objref_PriorityQueueFactory

# PriorityQueueFactory skeleton
__name__ = "CosCollection__POA"
class PriorityQueueFactory (_0_CosCollection__POA.RACollectionFactory):
    _NP_RepositoryId = _0_CosCollection.PriorityQueueFactory._NP_RepositoryId


    _omni_op_d = {"create": _0_CosCollection.PriorityQueueFactory._d_create}
    _omni_op_d.update(_0_CosCollection__POA.RACollectionFactory._omni_op_d)

PriorityQueueFactory._omni_skeleton = PriorityQueueFactory
_0_CosCollection__POA.PriorityQueueFactory = PriorityQueueFactory
omniORB.registerSkeleton(PriorityQueueFactory._NP_RepositoryId, PriorityQueueFactory)
del PriorityQueueFactory
__name__ = "CosCollection"

#
# End of module "CosCollection"
#
__name__ = "CosCollection_idl"

_exported_modules = ( "CosCollection", )

# The end.
