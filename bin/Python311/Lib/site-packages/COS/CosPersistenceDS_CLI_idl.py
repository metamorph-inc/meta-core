# Python stubs generated by omniidl from ..\..\..\..\..\idl\COS\CosPersistenceDS_CLI.idl
# DO NOT EDIT THIS FILE!

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA


_omnipy.checkVersion(4,2, __file__, 1)

try:
    property
except NameError:
    def property(*args):
        return None


# #include "CosPersistencePID.idl"
import CosPersistencePID_idl
_0_CosPersistencePID = omniORB.openModule("CosPersistencePID")
_0_CosPersistencePID__POA = omniORB.openModule("CosPersistencePID__POA")

# #include "CosPersistenceDDO.idl"
import CosPersistenceDDO_idl
_0_CosPersistenceDDO = omniORB.openModule("CosPersistenceDDO")
_0_CosPersistenceDDO__POA = omniORB.openModule("CosPersistenceDDO__POA")

#
# Start of module "CosPersistenceDS_CLI"
#
__name__ = "CosPersistenceDS_CLI"
_0_CosPersistenceDS_CLI = omniORB.openModule("CosPersistenceDS_CLI", r"..\..\..\..\..\idl\COS\CosPersistenceDS_CLI.idl")
_0_CosPersistenceDS_CLI__POA = omniORB.openModule("CosPersistenceDS_CLI__POA", r"..\..\..\..\..\idl\COS\CosPersistenceDS_CLI.idl")


# interface UserEnvironment
_0_CosPersistenceDS_CLI._d_UserEnvironment = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosPersistenceDS_CLI/UserEnvironment:1.0", "UserEnvironment")
omniORB.typeMapping["IDL:omg.org/CosPersistenceDS_CLI/UserEnvironment:1.0"] = _0_CosPersistenceDS_CLI._d_UserEnvironment
_0_CosPersistenceDS_CLI.UserEnvironment = omniORB.newEmptyClass()
class UserEnvironment :
    _NP_RepositoryId = _0_CosPersistenceDS_CLI._d_UserEnvironment[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_CosPersistenceDS_CLI.UserEnvironment = UserEnvironment
_0_CosPersistenceDS_CLI._tc_UserEnvironment = omniORB.tcInternal.createTypeCode(_0_CosPersistenceDS_CLI._d_UserEnvironment)
omniORB.registerType(UserEnvironment._NP_RepositoryId, _0_CosPersistenceDS_CLI._d_UserEnvironment, _0_CosPersistenceDS_CLI._tc_UserEnvironment)

# UserEnvironment operations and attributes
UserEnvironment._d_set_option = ((omniORB.tcInternal.tv_long, omniORB.tcInternal.tv_any), (), None)
UserEnvironment._d_get_option = ((omniORB.tcInternal.tv_long, ), (omniORB.tcInternal.tv_any, ), None)
UserEnvironment._d_release = ((), (), None)

# UserEnvironment object reference
class _objref_UserEnvironment (CORBA.Object):
    _NP_RepositoryId = UserEnvironment._NP_RepositoryId

    def __init__(self, obj):
        CORBA.Object.__init__(self, obj)

    def set_option(self, *args):
        return self._obj.invoke("set_option", _0_CosPersistenceDS_CLI.UserEnvironment._d_set_option, args)

    def get_option(self, *args):
        return self._obj.invoke("get_option", _0_CosPersistenceDS_CLI.UserEnvironment._d_get_option, args)

    def release(self, *args):
        return self._obj.invoke("release", _0_CosPersistenceDS_CLI.UserEnvironment._d_release, args)

omniORB.registerObjref(UserEnvironment._NP_RepositoryId, _objref_UserEnvironment)
_0_CosPersistenceDS_CLI._objref_UserEnvironment = _objref_UserEnvironment
del UserEnvironment, _objref_UserEnvironment

# UserEnvironment skeleton
__name__ = "CosPersistenceDS_CLI__POA"
class UserEnvironment (PortableServer.Servant):
    _NP_RepositoryId = _0_CosPersistenceDS_CLI.UserEnvironment._NP_RepositoryId


    _omni_op_d = {"set_option": _0_CosPersistenceDS_CLI.UserEnvironment._d_set_option, "get_option": _0_CosPersistenceDS_CLI.UserEnvironment._d_get_option, "release": _0_CosPersistenceDS_CLI.UserEnvironment._d_release}

UserEnvironment._omni_skeleton = UserEnvironment
_0_CosPersistenceDS_CLI__POA.UserEnvironment = UserEnvironment
omniORB.registerSkeleton(UserEnvironment._NP_RepositoryId, UserEnvironment)
del UserEnvironment
__name__ = "CosPersistenceDS_CLI"

# interface Connection
_0_CosPersistenceDS_CLI._d_Connection = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosPersistenceDS_CLI/Connection:1.0", "Connection")
omniORB.typeMapping["IDL:omg.org/CosPersistenceDS_CLI/Connection:1.0"] = _0_CosPersistenceDS_CLI._d_Connection
_0_CosPersistenceDS_CLI.Connection = omniORB.newEmptyClass()
class Connection :
    _NP_RepositoryId = _0_CosPersistenceDS_CLI._d_Connection[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_CosPersistenceDS_CLI.Connection = Connection
_0_CosPersistenceDS_CLI._tc_Connection = omniORB.tcInternal.createTypeCode(_0_CosPersistenceDS_CLI._d_Connection)
omniORB.registerType(Connection._NP_RepositoryId, _0_CosPersistenceDS_CLI._d_Connection, _0_CosPersistenceDS_CLI._tc_Connection)

# Connection operations and attributes
Connection._d_set_option = ((omniORB.tcInternal.tv_long, omniORB.tcInternal.tv_any), (), None)
Connection._d_get_option = ((omniORB.tcInternal.tv_long, ), (omniORB.tcInternal.tv_any, ), None)

# Connection object reference
class _objref_Connection (CORBA.Object):
    _NP_RepositoryId = Connection._NP_RepositoryId

    def __init__(self, obj):
        CORBA.Object.__init__(self, obj)

    def set_option(self, *args):
        return self._obj.invoke("set_option", _0_CosPersistenceDS_CLI.Connection._d_set_option, args)

    def get_option(self, *args):
        return self._obj.invoke("get_option", _0_CosPersistenceDS_CLI.Connection._d_get_option, args)

omniORB.registerObjref(Connection._NP_RepositoryId, _objref_Connection)
_0_CosPersistenceDS_CLI._objref_Connection = _objref_Connection
del Connection, _objref_Connection

# Connection skeleton
__name__ = "CosPersistenceDS_CLI__POA"
class Connection (PortableServer.Servant):
    _NP_RepositoryId = _0_CosPersistenceDS_CLI.Connection._NP_RepositoryId


    _omni_op_d = {"set_option": _0_CosPersistenceDS_CLI.Connection._d_set_option, "get_option": _0_CosPersistenceDS_CLI.Connection._d_get_option}

Connection._omni_skeleton = Connection
_0_CosPersistenceDS_CLI__POA.Connection = Connection
omniORB.registerSkeleton(Connection._NP_RepositoryId, Connection)
del Connection
__name__ = "CosPersistenceDS_CLI"

# interface ConnectionFactory
_0_CosPersistenceDS_CLI._d_ConnectionFactory = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosPersistenceDS_CLI/ConnectionFactory:1.0", "ConnectionFactory")
omniORB.typeMapping["IDL:omg.org/CosPersistenceDS_CLI/ConnectionFactory:1.0"] = _0_CosPersistenceDS_CLI._d_ConnectionFactory
_0_CosPersistenceDS_CLI.ConnectionFactory = omniORB.newEmptyClass()
class ConnectionFactory :
    _NP_RepositoryId = _0_CosPersistenceDS_CLI._d_ConnectionFactory[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_CosPersistenceDS_CLI.ConnectionFactory = ConnectionFactory
_0_CosPersistenceDS_CLI._tc_ConnectionFactory = omniORB.tcInternal.createTypeCode(_0_CosPersistenceDS_CLI._d_ConnectionFactory)
omniORB.registerType(ConnectionFactory._NP_RepositoryId, _0_CosPersistenceDS_CLI._d_ConnectionFactory, _0_CosPersistenceDS_CLI._tc_ConnectionFactory)

# ConnectionFactory operations and attributes
ConnectionFactory._d_create_object = ((omniORB.typeMapping["IDL:omg.org/CosPersistenceDS_CLI/UserEnvironment:1.0"], ), (omniORB.typeMapping["IDL:omg.org/CosPersistenceDS_CLI/Connection:1.0"], ), None)

# ConnectionFactory object reference
class _objref_ConnectionFactory (CORBA.Object):
    _NP_RepositoryId = ConnectionFactory._NP_RepositoryId

    def __init__(self, obj):
        CORBA.Object.__init__(self, obj)

    def create_object(self, *args):
        return self._obj.invoke("create_object", _0_CosPersistenceDS_CLI.ConnectionFactory._d_create_object, args)

omniORB.registerObjref(ConnectionFactory._NP_RepositoryId, _objref_ConnectionFactory)
_0_CosPersistenceDS_CLI._objref_ConnectionFactory = _objref_ConnectionFactory
del ConnectionFactory, _objref_ConnectionFactory

# ConnectionFactory skeleton
__name__ = "CosPersistenceDS_CLI__POA"
class ConnectionFactory (PortableServer.Servant):
    _NP_RepositoryId = _0_CosPersistenceDS_CLI.ConnectionFactory._NP_RepositoryId


    _omni_op_d = {"create_object": _0_CosPersistenceDS_CLI.ConnectionFactory._d_create_object}

ConnectionFactory._omni_skeleton = ConnectionFactory
_0_CosPersistenceDS_CLI__POA.ConnectionFactory = ConnectionFactory
omniORB.registerSkeleton(ConnectionFactory._NP_RepositoryId, ConnectionFactory)
del ConnectionFactory
__name__ = "CosPersistenceDS_CLI"

# interface Cursor
_0_CosPersistenceDS_CLI._d_Cursor = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosPersistenceDS_CLI/Cursor:1.0", "Cursor")
omniORB.typeMapping["IDL:omg.org/CosPersistenceDS_CLI/Cursor:1.0"] = _0_CosPersistenceDS_CLI._d_Cursor
_0_CosPersistenceDS_CLI.Cursor = omniORB.newEmptyClass()
class Cursor :
    _NP_RepositoryId = _0_CosPersistenceDS_CLI._d_Cursor[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_CosPersistenceDS_CLI.Cursor = Cursor
_0_CosPersistenceDS_CLI._tc_Cursor = omniORB.tcInternal.createTypeCode(_0_CosPersistenceDS_CLI._d_Cursor)
omniORB.registerType(Cursor._NP_RepositoryId, _0_CosPersistenceDS_CLI._d_Cursor, _0_CosPersistenceDS_CLI._tc_Cursor)

# Cursor operations and attributes
Cursor._d_set_position = ((omniORB.tcInternal.tv_long, omniORB.tcInternal.tv_any), (), None)
Cursor._d_fetch_object = ((), (omniORB.typeMapping["IDL:omg.org/CosPersistenceDDO/DDO:1.0"], ), None)

# Cursor object reference
class _objref_Cursor (CORBA.Object):
    _NP_RepositoryId = Cursor._NP_RepositoryId

    def __init__(self, obj):
        CORBA.Object.__init__(self, obj)

    def set_position(self, *args):
        return self._obj.invoke("set_position", _0_CosPersistenceDS_CLI.Cursor._d_set_position, args)

    def fetch_object(self, *args):
        return self._obj.invoke("fetch_object", _0_CosPersistenceDS_CLI.Cursor._d_fetch_object, args)

omniORB.registerObjref(Cursor._NP_RepositoryId, _objref_Cursor)
_0_CosPersistenceDS_CLI._objref_Cursor = _objref_Cursor
del Cursor, _objref_Cursor

# Cursor skeleton
__name__ = "CosPersistenceDS_CLI__POA"
class Cursor (PortableServer.Servant):
    _NP_RepositoryId = _0_CosPersistenceDS_CLI.Cursor._NP_RepositoryId


    _omni_op_d = {"set_position": _0_CosPersistenceDS_CLI.Cursor._d_set_position, "fetch_object": _0_CosPersistenceDS_CLI.Cursor._d_fetch_object}

Cursor._omni_skeleton = Cursor
_0_CosPersistenceDS_CLI__POA.Cursor = Cursor
omniORB.registerSkeleton(Cursor._NP_RepositoryId, Cursor)
del Cursor
__name__ = "CosPersistenceDS_CLI"

# interface CursorFactory
_0_CosPersistenceDS_CLI._d_CursorFactory = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosPersistenceDS_CLI/CursorFactory:1.0", "CursorFactory")
omniORB.typeMapping["IDL:omg.org/CosPersistenceDS_CLI/CursorFactory:1.0"] = _0_CosPersistenceDS_CLI._d_CursorFactory
_0_CosPersistenceDS_CLI.CursorFactory = omniORB.newEmptyClass()
class CursorFactory :
    _NP_RepositoryId = _0_CosPersistenceDS_CLI._d_CursorFactory[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_CosPersistenceDS_CLI.CursorFactory = CursorFactory
_0_CosPersistenceDS_CLI._tc_CursorFactory = omniORB.tcInternal.createTypeCode(_0_CosPersistenceDS_CLI._d_CursorFactory)
omniORB.registerType(CursorFactory._NP_RepositoryId, _0_CosPersistenceDS_CLI._d_CursorFactory, _0_CosPersistenceDS_CLI._tc_CursorFactory)

# CursorFactory operations and attributes
CursorFactory._d_create_object = ((omniORB.typeMapping["IDL:omg.org/CosPersistenceDS_CLI/Connection:1.0"], ), (omniORB.typeMapping["IDL:omg.org/CosPersistenceDS_CLI/Cursor:1.0"], ), None)

# CursorFactory object reference
class _objref_CursorFactory (CORBA.Object):
    _NP_RepositoryId = CursorFactory._NP_RepositoryId

    def __init__(self, obj):
        CORBA.Object.__init__(self, obj)

    def create_object(self, *args):
        return self._obj.invoke("create_object", _0_CosPersistenceDS_CLI.CursorFactory._d_create_object, args)

omniORB.registerObjref(CursorFactory._NP_RepositoryId, _objref_CursorFactory)
_0_CosPersistenceDS_CLI._objref_CursorFactory = _objref_CursorFactory
del CursorFactory, _objref_CursorFactory

# CursorFactory skeleton
__name__ = "CosPersistenceDS_CLI__POA"
class CursorFactory (PortableServer.Servant):
    _NP_RepositoryId = _0_CosPersistenceDS_CLI.CursorFactory._NP_RepositoryId


    _omni_op_d = {"create_object": _0_CosPersistenceDS_CLI.CursorFactory._d_create_object}

CursorFactory._omni_skeleton = CursorFactory
_0_CosPersistenceDS_CLI__POA.CursorFactory = CursorFactory
omniORB.registerSkeleton(CursorFactory._NP_RepositoryId, CursorFactory)
del CursorFactory
__name__ = "CosPersistenceDS_CLI"

# interface PID_CLI
_0_CosPersistenceDS_CLI._d_PID_CLI = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosPersistenceDS_CLI/PID_CLI:1.0", "PID_CLI")
omniORB.typeMapping["IDL:omg.org/CosPersistenceDS_CLI/PID_CLI:1.0"] = _0_CosPersistenceDS_CLI._d_PID_CLI
_0_CosPersistenceDS_CLI.PID_CLI = omniORB.newEmptyClass()
class PID_CLI (_0_CosPersistencePID.PID):
    _NP_RepositoryId = _0_CosPersistenceDS_CLI._d_PID_CLI[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_CosPersistenceDS_CLI.PID_CLI = PID_CLI
_0_CosPersistenceDS_CLI._tc_PID_CLI = omniORB.tcInternal.createTypeCode(_0_CosPersistenceDS_CLI._d_PID_CLI)
omniORB.registerType(PID_CLI._NP_RepositoryId, _0_CosPersistenceDS_CLI._d_PID_CLI, _0_CosPersistenceDS_CLI._tc_PID_CLI)

# PID_CLI operations and attributes
PID_CLI._d__get_datastore_id = ((),((omniORB.tcInternal.tv_string,0),),None)
PID_CLI._d__set_datastore_id = (((omniORB.tcInternal.tv_string,0),),(),None)
PID_CLI._d__get_id = ((),((omniORB.tcInternal.tv_string,0),),None)
PID_CLI._d__set_id = (((omniORB.tcInternal.tv_string,0),),(),None)

# PID_CLI object reference
class _objref_PID_CLI (_0_CosPersistencePID._objref_PID):
    _NP_RepositoryId = PID_CLI._NP_RepositoryId

    def __init__(self, obj):
        _0_CosPersistencePID._objref_PID.__init__(self, obj)

    def _get_datastore_id(self, *args):
        return self._obj.invoke("_get_datastore_id", _0_CosPersistenceDS_CLI.PID_CLI._d__get_datastore_id, args)

    def _set_datastore_id(self, *args):
        return self._obj.invoke("_set_datastore_id", _0_CosPersistenceDS_CLI.PID_CLI._d__set_datastore_id, args)

    datastore_id = property(_get_datastore_id, _set_datastore_id)


    def _get_id(self, *args):
        return self._obj.invoke("_get_id", _0_CosPersistenceDS_CLI.PID_CLI._d__get_id, args)

    def _set_id(self, *args):
        return self._obj.invoke("_set_id", _0_CosPersistenceDS_CLI.PID_CLI._d__set_id, args)

    id = property(_get_id, _set_id)


omniORB.registerObjref(PID_CLI._NP_RepositoryId, _objref_PID_CLI)
_0_CosPersistenceDS_CLI._objref_PID_CLI = _objref_PID_CLI
del PID_CLI, _objref_PID_CLI

# PID_CLI skeleton
__name__ = "CosPersistenceDS_CLI__POA"
class PID_CLI (_0_CosPersistencePID__POA.PID):
    _NP_RepositoryId = _0_CosPersistenceDS_CLI.PID_CLI._NP_RepositoryId


    _omni_op_d = {"_get_datastore_id": _0_CosPersistenceDS_CLI.PID_CLI._d__get_datastore_id, "_set_datastore_id": _0_CosPersistenceDS_CLI.PID_CLI._d__set_datastore_id, "_get_id": _0_CosPersistenceDS_CLI.PID_CLI._d__get_id, "_set_id": _0_CosPersistenceDS_CLI.PID_CLI._d__set_id}
    _omni_op_d.update(_0_CosPersistencePID__POA.PID._omni_op_d)

PID_CLI._omni_skeleton = PID_CLI
_0_CosPersistenceDS_CLI__POA.PID_CLI = PID_CLI
omniORB.registerSkeleton(PID_CLI._NP_RepositoryId, PID_CLI)
del PID_CLI
__name__ = "CosPersistenceDS_CLI"

# interface Datastore_CLI
_0_CosPersistenceDS_CLI._d_Datastore_CLI = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosPersistenceDS_CLI/Datastore_CLI:1.0", "Datastore_CLI")
omniORB.typeMapping["IDL:omg.org/CosPersistenceDS_CLI/Datastore_CLI:1.0"] = _0_CosPersistenceDS_CLI._d_Datastore_CLI
_0_CosPersistenceDS_CLI.Datastore_CLI = omniORB.newEmptyClass()
class Datastore_CLI :
    _NP_RepositoryId = _0_CosPersistenceDS_CLI._d_Datastore_CLI[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_CosPersistenceDS_CLI.Datastore_CLI = Datastore_CLI
_0_CosPersistenceDS_CLI._tc_Datastore_CLI = omniORB.tcInternal.createTypeCode(_0_CosPersistenceDS_CLI._d_Datastore_CLI)
omniORB.registerType(Datastore_CLI._NP_RepositoryId, _0_CosPersistenceDS_CLI._d_Datastore_CLI, _0_CosPersistenceDS_CLI._tc_Datastore_CLI)

# Datastore_CLI operations and attributes
Datastore_CLI._d_connect = ((omniORB.typeMapping["IDL:omg.org/CosPersistenceDS_CLI/Connection:1.0"], (omniORB.tcInternal.tv_string,0), (omniORB.tcInternal.tv_string,0), (omniORB.tcInternal.tv_string,0)), (), None)
Datastore_CLI._d_disconnect = ((omniORB.typeMapping["IDL:omg.org/CosPersistenceDS_CLI/Connection:1.0"], ), (), None)
Datastore_CLI._d_get_connection = (((omniORB.tcInternal.tv_string,0), (omniORB.tcInternal.tv_string,0)), (omniORB.typeMapping["IDL:omg.org/CosPersistenceDS_CLI/Connection:1.0"], ), None)
Datastore_CLI._d_add_object = ((omniORB.typeMapping["IDL:omg.org/CosPersistenceDS_CLI/Connection:1.0"], omniORB.typeMapping["IDL:omg.org/CosPersistenceDDO/DDO:1.0"]), (), None)
Datastore_CLI._d_delete_object = ((omniORB.typeMapping["IDL:omg.org/CosPersistenceDS_CLI/Connection:1.0"], omniORB.typeMapping["IDL:omg.org/CosPersistenceDDO/DDO:1.0"]), (), None)
Datastore_CLI._d_update_object = ((omniORB.typeMapping["IDL:omg.org/CosPersistenceDS_CLI/Connection:1.0"], omniORB.typeMapping["IDL:omg.org/CosPersistenceDDO/DDO:1.0"]), (), None)
Datastore_CLI._d_retrieve_object = ((omniORB.typeMapping["IDL:omg.org/CosPersistenceDS_CLI/Connection:1.0"], omniORB.typeMapping["IDL:omg.org/CosPersistenceDDO/DDO:1.0"]), (), None)
Datastore_CLI._d_select_object = ((omniORB.typeMapping["IDL:omg.org/CosPersistenceDS_CLI/Connection:1.0"], (omniORB.tcInternal.tv_string,0)), (omniORB.typeMapping["IDL:omg.org/CosPersistenceDS_CLI/Cursor:1.0"], ), None)
Datastore_CLI._d_transact = ((omniORB.typeMapping["IDL:omg.org/CosPersistenceDS_CLI/UserEnvironment:1.0"], omniORB.tcInternal.tv_short), (), None)
Datastore_CLI._d_assign_PID = ((omniORB.typeMapping["IDL:omg.org/CosPersistenceDS_CLI/PID_CLI:1.0"], ), (), None)
Datastore_CLI._d_assign_PID_relative = ((omniORB.typeMapping["IDL:omg.org/CosPersistenceDS_CLI/PID_CLI:1.0"], omniORB.typeMapping["IDL:omg.org/CosPersistenceDS_CLI/PID_CLI:1.0"]), (), None)
Datastore_CLI._d_is_identical_PID = ((omniORB.typeMapping["IDL:omg.org/CosPersistenceDS_CLI/PID_CLI:1.0"], omniORB.typeMapping["IDL:omg.org/CosPersistenceDS_CLI/PID_CLI:1.0"]), (omniORB.tcInternal.tv_boolean, ), None)
Datastore_CLI._d_get_object_type = ((omniORB.typeMapping["IDL:omg.org/CosPersistenceDS_CLI/PID_CLI:1.0"], ), ((omniORB.tcInternal.tv_string,0), ), None)
Datastore_CLI._d_register_mapping_schema = (((omniORB.tcInternal.tv_string,0), ), (), None)
Datastore_CLI._d_execute = ((omniORB.typeMapping["IDL:omg.org/CosPersistenceDS_CLI/Connection:1.0"], (omniORB.tcInternal.tv_string,0)), (omniORB.typeMapping["IDL:omg.org/CosPersistenceDS_CLI/Cursor:1.0"], ), None)

# Datastore_CLI object reference
class _objref_Datastore_CLI (CORBA.Object):
    _NP_RepositoryId = Datastore_CLI._NP_RepositoryId

    def __init__(self, obj):
        CORBA.Object.__init__(self, obj)

    def connect(self, *args):
        return self._obj.invoke("connect", _0_CosPersistenceDS_CLI.Datastore_CLI._d_connect, args)

    def disconnect(self, *args):
        return self._obj.invoke("disconnect", _0_CosPersistenceDS_CLI.Datastore_CLI._d_disconnect, args)

    def get_connection(self, *args):
        return self._obj.invoke("get_connection", _0_CosPersistenceDS_CLI.Datastore_CLI._d_get_connection, args)

    def add_object(self, *args):
        return self._obj.invoke("add_object", _0_CosPersistenceDS_CLI.Datastore_CLI._d_add_object, args)

    def delete_object(self, *args):
        return self._obj.invoke("delete_object", _0_CosPersistenceDS_CLI.Datastore_CLI._d_delete_object, args)

    def update_object(self, *args):
        return self._obj.invoke("update_object", _0_CosPersistenceDS_CLI.Datastore_CLI._d_update_object, args)

    def retrieve_object(self, *args):
        return self._obj.invoke("retrieve_object", _0_CosPersistenceDS_CLI.Datastore_CLI._d_retrieve_object, args)

    def select_object(self, *args):
        return self._obj.invoke("select_object", _0_CosPersistenceDS_CLI.Datastore_CLI._d_select_object, args)

    def transact(self, *args):
        return self._obj.invoke("transact", _0_CosPersistenceDS_CLI.Datastore_CLI._d_transact, args)

    def assign_PID(self, *args):
        return self._obj.invoke("assign_PID", _0_CosPersistenceDS_CLI.Datastore_CLI._d_assign_PID, args)

    def assign_PID_relative(self, *args):
        return self._obj.invoke("assign_PID_relative", _0_CosPersistenceDS_CLI.Datastore_CLI._d_assign_PID_relative, args)

    def is_identical_PID(self, *args):
        return self._obj.invoke("is_identical_PID", _0_CosPersistenceDS_CLI.Datastore_CLI._d_is_identical_PID, args)

    def get_object_type(self, *args):
        return self._obj.invoke("get_object_type", _0_CosPersistenceDS_CLI.Datastore_CLI._d_get_object_type, args)

    def register_mapping_schema(self, *args):
        return self._obj.invoke("register_mapping_schema", _0_CosPersistenceDS_CLI.Datastore_CLI._d_register_mapping_schema, args)

    def execute(self, *args):
        return self._obj.invoke("execute", _0_CosPersistenceDS_CLI.Datastore_CLI._d_execute, args)

omniORB.registerObjref(Datastore_CLI._NP_RepositoryId, _objref_Datastore_CLI)
_0_CosPersistenceDS_CLI._objref_Datastore_CLI = _objref_Datastore_CLI
del Datastore_CLI, _objref_Datastore_CLI

# Datastore_CLI skeleton
__name__ = "CosPersistenceDS_CLI__POA"
class Datastore_CLI (PortableServer.Servant):
    _NP_RepositoryId = _0_CosPersistenceDS_CLI.Datastore_CLI._NP_RepositoryId


    _omni_op_d = {"connect": _0_CosPersistenceDS_CLI.Datastore_CLI._d_connect, "disconnect": _0_CosPersistenceDS_CLI.Datastore_CLI._d_disconnect, "get_connection": _0_CosPersistenceDS_CLI.Datastore_CLI._d_get_connection, "add_object": _0_CosPersistenceDS_CLI.Datastore_CLI._d_add_object, "delete_object": _0_CosPersistenceDS_CLI.Datastore_CLI._d_delete_object, "update_object": _0_CosPersistenceDS_CLI.Datastore_CLI._d_update_object, "retrieve_object": _0_CosPersistenceDS_CLI.Datastore_CLI._d_retrieve_object, "select_object": _0_CosPersistenceDS_CLI.Datastore_CLI._d_select_object, "transact": _0_CosPersistenceDS_CLI.Datastore_CLI._d_transact, "assign_PID": _0_CosPersistenceDS_CLI.Datastore_CLI._d_assign_PID, "assign_PID_relative": _0_CosPersistenceDS_CLI.Datastore_CLI._d_assign_PID_relative, "is_identical_PID": _0_CosPersistenceDS_CLI.Datastore_CLI._d_is_identical_PID, "get_object_type": _0_CosPersistenceDS_CLI.Datastore_CLI._d_get_object_type, "register_mapping_schema": _0_CosPersistenceDS_CLI.Datastore_CLI._d_register_mapping_schema, "execute": _0_CosPersistenceDS_CLI.Datastore_CLI._d_execute}

Datastore_CLI._omni_skeleton = Datastore_CLI
_0_CosPersistenceDS_CLI__POA.Datastore_CLI = Datastore_CLI
omniORB.registerSkeleton(Datastore_CLI._NP_RepositoryId, Datastore_CLI)
del Datastore_CLI
__name__ = "CosPersistenceDS_CLI"

#
# End of module "CosPersistenceDS_CLI"
#
__name__ = "CosPersistenceDS_CLI_idl"

_exported_modules = ( "CosPersistenceDS_CLI", )

# The end.
