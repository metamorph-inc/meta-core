# Python stubs generated by omniidl from ..\..\..\..\..\idl\COS\CosQuery.idl
# DO NOT EDIT THIS FILE!

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA


_omnipy.checkVersion(4,2, __file__, 1)

try:
    property
except NameError:
    def property(*args):
        return None


# #include "corbaidl.idl"
import corbaidl_idl
_0_CORBA = omniORB.openModule("CORBA")
_0_CORBA__POA = omniORB.openModule("CORBA__POA")

# #include "boxes.idl"
import boxes_idl
_0_CORBA = omniORB.openModule("CORBA")
_0_CORBA__POA = omniORB.openModule("CORBA__POA")

# #include "ir.idl"
import ir_idl
_0_CORBA = omniORB.openModule("CORBA")
_0_CORBA__POA = omniORB.openModule("CORBA__POA")

# #include "CosQueryCollection.idl"
import CosQueryCollection_idl
_0_CosQueryCollection = omniORB.openModule("CosQueryCollection")
_0_CosQueryCollection__POA = omniORB.openModule("CosQueryCollection__POA")

#
# Start of module "CosQuery"
#
__name__ = "CosQuery"
_0_CosQuery = omniORB.openModule("CosQuery", r"..\..\..\..\..\idl\COS\CosQuery.idl")
_0_CosQuery__POA = omniORB.openModule("CosQuery__POA", r"..\..\..\..\..\idl\COS\CosQuery.idl")


# exception QueryInvalid
_0_CosQuery.QueryInvalid = omniORB.newEmptyClass()
class QueryInvalid (CORBA.UserException):
    _NP_RepositoryId = "IDL:omg.org/CosQuery/QueryInvalid:1.0"

    def __init__(self, why):
        CORBA.UserException.__init__(self, why)
        self.why = why

_0_CosQuery.QueryInvalid = QueryInvalid
_0_CosQuery._d_QueryInvalid  = (omniORB.tcInternal.tv_except, QueryInvalid, QueryInvalid._NP_RepositoryId, "QueryInvalid", "why", (omniORB.tcInternal.tv_string,0))
_0_CosQuery._tc_QueryInvalid = omniORB.tcInternal.createTypeCode(_0_CosQuery._d_QueryInvalid)
omniORB.registerType(QueryInvalid._NP_RepositoryId, _0_CosQuery._d_QueryInvalid, _0_CosQuery._tc_QueryInvalid)
del QueryInvalid

# exception QueryProcessingError
_0_CosQuery.QueryProcessingError = omniORB.newEmptyClass()
class QueryProcessingError (CORBA.UserException):
    _NP_RepositoryId = "IDL:omg.org/CosQuery/QueryProcessingError:1.0"

    def __init__(self, why):
        CORBA.UserException.__init__(self, why)
        self.why = why

_0_CosQuery.QueryProcessingError = QueryProcessingError
_0_CosQuery._d_QueryProcessingError  = (omniORB.tcInternal.tv_except, QueryProcessingError, QueryProcessingError._NP_RepositoryId, "QueryProcessingError", "why", (omniORB.tcInternal.tv_string,0))
_0_CosQuery._tc_QueryProcessingError = omniORB.tcInternal.createTypeCode(_0_CosQuery._d_QueryProcessingError)
omniORB.registerType(QueryProcessingError._NP_RepositoryId, _0_CosQuery._d_QueryProcessingError, _0_CosQuery._tc_QueryProcessingError)
del QueryProcessingError

# exception QueryTypeInvalid
_0_CosQuery.QueryTypeInvalid = omniORB.newEmptyClass()
class QueryTypeInvalid (CORBA.UserException):
    _NP_RepositoryId = "IDL:omg.org/CosQuery/QueryTypeInvalid:1.0"

    def __init__(self):
        CORBA.UserException.__init__(self)

_0_CosQuery.QueryTypeInvalid = QueryTypeInvalid
_0_CosQuery._d_QueryTypeInvalid  = (omniORB.tcInternal.tv_except, QueryTypeInvalid, QueryTypeInvalid._NP_RepositoryId, "QueryTypeInvalid")
_0_CosQuery._tc_QueryTypeInvalid = omniORB.tcInternal.createTypeCode(_0_CosQuery._d_QueryTypeInvalid)
omniORB.registerType(QueryTypeInvalid._NP_RepositoryId, _0_CosQuery._d_QueryTypeInvalid, _0_CosQuery._tc_QueryTypeInvalid)
del QueryTypeInvalid

# enum QueryStatus
_0_CosQuery.complete = omniORB.EnumItem("complete", 0)
_0_CosQuery.incomplete = omniORB.EnumItem("incomplete", 1)
_0_CosQuery.QueryStatus = omniORB.Enum("IDL:omg.org/CosQuery/QueryStatus:1.0", (_0_CosQuery.complete, _0_CosQuery.incomplete,))

_0_CosQuery._d_QueryStatus  = (omniORB.tcInternal.tv_enum, _0_CosQuery.QueryStatus._NP_RepositoryId, "QueryStatus", _0_CosQuery.QueryStatus._items)
_0_CosQuery._tc_QueryStatus = omniORB.tcInternal.createTypeCode(_0_CosQuery._d_QueryStatus)
omniORB.registerType(_0_CosQuery.QueryStatus._NP_RepositoryId, _0_CosQuery._d_QueryStatus, _0_CosQuery._tc_QueryStatus)

# typedef ... ParameterList
class ParameterList:
    _NP_RepositoryId = "IDL:omg.org/CosQuery/ParameterList:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_CosQuery.ParameterList = ParameterList
_0_CosQuery._d_ParameterList  = omniORB.typeMapping["IDL:omg.org/CosQueryCollection/ParameterList:1.0"]
_0_CosQuery._ad_ParameterList = (omniORB.tcInternal.tv_alias, ParameterList._NP_RepositoryId, "ParameterList", omniORB.typeCodeMapping["IDL:omg.org/CosQueryCollection/ParameterList:1.0"]._d)
_0_CosQuery._tc_ParameterList = omniORB.tcInternal.createTypeCode(_0_CosQuery._ad_ParameterList)
omniORB.registerType(ParameterList._NP_RepositoryId, _0_CosQuery._ad_ParameterList, _0_CosQuery._tc_ParameterList)
del ParameterList

# typedef ... QLType
class QLType:
    _NP_RepositoryId = "IDL:omg.org/CosQuery/QLType:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_CosQuery.QLType = QLType
_0_CosQuery._d_QLType  = omniORB.typeMapping["IDL:omg.org/CORBA/InterfaceDef:1.0"]
_0_CosQuery._ad_QLType = (omniORB.tcInternal.tv_alias, QLType._NP_RepositoryId, "QLType", omniORB.typeMapping["IDL:omg.org/CORBA/InterfaceDef:1.0"])
_0_CosQuery._tc_QLType = omniORB.tcInternal.createTypeCode(_0_CosQuery._ad_QLType)
omniORB.registerType(QLType._NP_RepositoryId, _0_CosQuery._ad_QLType, _0_CosQuery._tc_QLType)
del QLType

# forward interface Query;
_0_CosQuery._d_Query = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosQuery/Query:1.0", "Query")
omniORB.typeMapping["IDL:omg.org/CosQuery/Query:1.0"] = _0_CosQuery._d_Query

# interface QueryLanguageType
_0_CosQuery._d_QueryLanguageType = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosQuery/QueryLanguageType:1.0", "QueryLanguageType")
omniORB.typeMapping["IDL:omg.org/CosQuery/QueryLanguageType:1.0"] = _0_CosQuery._d_QueryLanguageType
_0_CosQuery.QueryLanguageType = omniORB.newEmptyClass()
class QueryLanguageType :
    _NP_RepositoryId = _0_CosQuery._d_QueryLanguageType[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_CosQuery.QueryLanguageType = QueryLanguageType
_0_CosQuery._tc_QueryLanguageType = omniORB.tcInternal.createTypeCode(_0_CosQuery._d_QueryLanguageType)
omniORB.registerType(QueryLanguageType._NP_RepositoryId, _0_CosQuery._d_QueryLanguageType, _0_CosQuery._tc_QueryLanguageType)

# QueryLanguageType object reference
class _objref_QueryLanguageType (CORBA.Object):
    _NP_RepositoryId = QueryLanguageType._NP_RepositoryId

    def __init__(self, obj):
        CORBA.Object.__init__(self, obj)

omniORB.registerObjref(QueryLanguageType._NP_RepositoryId, _objref_QueryLanguageType)
_0_CosQuery._objref_QueryLanguageType = _objref_QueryLanguageType
del QueryLanguageType, _objref_QueryLanguageType

# QueryLanguageType skeleton
__name__ = "CosQuery__POA"
class QueryLanguageType (PortableServer.Servant):
    _NP_RepositoryId = _0_CosQuery.QueryLanguageType._NP_RepositoryId


    _omni_op_d = {}

QueryLanguageType._omni_skeleton = QueryLanguageType
_0_CosQuery__POA.QueryLanguageType = QueryLanguageType
omniORB.registerSkeleton(QueryLanguageType._NP_RepositoryId, QueryLanguageType)
del QueryLanguageType
__name__ = "CosQuery"

# interface SQLQuery
_0_CosQuery._d_SQLQuery = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosQuery/SQLQuery:1.0", "SQLQuery")
omniORB.typeMapping["IDL:omg.org/CosQuery/SQLQuery:1.0"] = _0_CosQuery._d_SQLQuery
_0_CosQuery.SQLQuery = omniORB.newEmptyClass()
class SQLQuery (_0_CosQuery.QueryLanguageType):
    _NP_RepositoryId = _0_CosQuery._d_SQLQuery[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_CosQuery.SQLQuery = SQLQuery
_0_CosQuery._tc_SQLQuery = omniORB.tcInternal.createTypeCode(_0_CosQuery._d_SQLQuery)
omniORB.registerType(SQLQuery._NP_RepositoryId, _0_CosQuery._d_SQLQuery, _0_CosQuery._tc_SQLQuery)

# SQLQuery object reference
class _objref_SQLQuery (_0_CosQuery._objref_QueryLanguageType):
    _NP_RepositoryId = SQLQuery._NP_RepositoryId

    def __init__(self, obj):
        _0_CosQuery._objref_QueryLanguageType.__init__(self, obj)

omniORB.registerObjref(SQLQuery._NP_RepositoryId, _objref_SQLQuery)
_0_CosQuery._objref_SQLQuery = _objref_SQLQuery
del SQLQuery, _objref_SQLQuery

# SQLQuery skeleton
__name__ = "CosQuery__POA"
class SQLQuery (_0_CosQuery__POA.QueryLanguageType):
    _NP_RepositoryId = _0_CosQuery.SQLQuery._NP_RepositoryId


    _omni_op_d = {}
    _omni_op_d.update(_0_CosQuery__POA.QueryLanguageType._omni_op_d)

SQLQuery._omni_skeleton = SQLQuery
_0_CosQuery__POA.SQLQuery = SQLQuery
omniORB.registerSkeleton(SQLQuery._NP_RepositoryId, SQLQuery)
del SQLQuery
__name__ = "CosQuery"

# interface SQL_92Query
_0_CosQuery._d_SQL_92Query = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosQuery/SQL_92Query:1.0", "SQL_92Query")
omniORB.typeMapping["IDL:omg.org/CosQuery/SQL_92Query:1.0"] = _0_CosQuery._d_SQL_92Query
_0_CosQuery.SQL_92Query = omniORB.newEmptyClass()
class SQL_92Query (_0_CosQuery.SQLQuery):
    _NP_RepositoryId = _0_CosQuery._d_SQL_92Query[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_CosQuery.SQL_92Query = SQL_92Query
_0_CosQuery._tc_SQL_92Query = omniORB.tcInternal.createTypeCode(_0_CosQuery._d_SQL_92Query)
omniORB.registerType(SQL_92Query._NP_RepositoryId, _0_CosQuery._d_SQL_92Query, _0_CosQuery._tc_SQL_92Query)

# SQL_92Query object reference
class _objref_SQL_92Query (_0_CosQuery._objref_SQLQuery):
    _NP_RepositoryId = SQL_92Query._NP_RepositoryId

    def __init__(self, obj):
        _0_CosQuery._objref_SQLQuery.__init__(self, obj)

omniORB.registerObjref(SQL_92Query._NP_RepositoryId, _objref_SQL_92Query)
_0_CosQuery._objref_SQL_92Query = _objref_SQL_92Query
del SQL_92Query, _objref_SQL_92Query

# SQL_92Query skeleton
__name__ = "CosQuery__POA"
class SQL_92Query (_0_CosQuery__POA.SQLQuery):
    _NP_RepositoryId = _0_CosQuery.SQL_92Query._NP_RepositoryId


    _omni_op_d = {}
    _omni_op_d.update(_0_CosQuery__POA.SQLQuery._omni_op_d)

SQL_92Query._omni_skeleton = SQL_92Query
_0_CosQuery__POA.SQL_92Query = SQL_92Query
omniORB.registerSkeleton(SQL_92Query._NP_RepositoryId, SQL_92Query)
del SQL_92Query
__name__ = "CosQuery"

# interface OQL
_0_CosQuery._d_OQL = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosQuery/OQL:1.0", "OQL")
omniORB.typeMapping["IDL:omg.org/CosQuery/OQL:1.0"] = _0_CosQuery._d_OQL
_0_CosQuery.OQL = omniORB.newEmptyClass()
class OQL (_0_CosQuery.QueryLanguageType):
    _NP_RepositoryId = _0_CosQuery._d_OQL[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_CosQuery.OQL = OQL
_0_CosQuery._tc_OQL = omniORB.tcInternal.createTypeCode(_0_CosQuery._d_OQL)
omniORB.registerType(OQL._NP_RepositoryId, _0_CosQuery._d_OQL, _0_CosQuery._tc_OQL)

# OQL object reference
class _objref_OQL (_0_CosQuery._objref_QueryLanguageType):
    _NP_RepositoryId = OQL._NP_RepositoryId

    def __init__(self, obj):
        _0_CosQuery._objref_QueryLanguageType.__init__(self, obj)

omniORB.registerObjref(OQL._NP_RepositoryId, _objref_OQL)
_0_CosQuery._objref_OQL = _objref_OQL
del OQL, _objref_OQL

# OQL skeleton
__name__ = "CosQuery__POA"
class OQL (_0_CosQuery__POA.QueryLanguageType):
    _NP_RepositoryId = _0_CosQuery.OQL._NP_RepositoryId


    _omni_op_d = {}
    _omni_op_d.update(_0_CosQuery__POA.QueryLanguageType._omni_op_d)

OQL._omni_skeleton = OQL
_0_CosQuery__POA.OQL = OQL
omniORB.registerSkeleton(OQL._NP_RepositoryId, OQL)
del OQL
__name__ = "CosQuery"

# interface OQLBasic
_0_CosQuery._d_OQLBasic = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosQuery/OQLBasic:1.0", "OQLBasic")
omniORB.typeMapping["IDL:omg.org/CosQuery/OQLBasic:1.0"] = _0_CosQuery._d_OQLBasic
_0_CosQuery.OQLBasic = omniORB.newEmptyClass()
class OQLBasic (_0_CosQuery.OQL):
    _NP_RepositoryId = _0_CosQuery._d_OQLBasic[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_CosQuery.OQLBasic = OQLBasic
_0_CosQuery._tc_OQLBasic = omniORB.tcInternal.createTypeCode(_0_CosQuery._d_OQLBasic)
omniORB.registerType(OQLBasic._NP_RepositoryId, _0_CosQuery._d_OQLBasic, _0_CosQuery._tc_OQLBasic)

# OQLBasic object reference
class _objref_OQLBasic (_0_CosQuery._objref_OQL):
    _NP_RepositoryId = OQLBasic._NP_RepositoryId

    def __init__(self, obj):
        _0_CosQuery._objref_OQL.__init__(self, obj)

omniORB.registerObjref(OQLBasic._NP_RepositoryId, _objref_OQLBasic)
_0_CosQuery._objref_OQLBasic = _objref_OQLBasic
del OQLBasic, _objref_OQLBasic

# OQLBasic skeleton
__name__ = "CosQuery__POA"
class OQLBasic (_0_CosQuery__POA.OQL):
    _NP_RepositoryId = _0_CosQuery.OQLBasic._NP_RepositoryId


    _omni_op_d = {}
    _omni_op_d.update(_0_CosQuery__POA.OQL._omni_op_d)

OQLBasic._omni_skeleton = OQLBasic
_0_CosQuery__POA.OQLBasic = OQLBasic
omniORB.registerSkeleton(OQLBasic._NP_RepositoryId, OQLBasic)
del OQLBasic
__name__ = "CosQuery"

# interface OQL_93
_0_CosQuery._d_OQL_93 = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosQuery/OQL_93:1.0", "OQL_93")
omniORB.typeMapping["IDL:omg.org/CosQuery/OQL_93:1.0"] = _0_CosQuery._d_OQL_93
_0_CosQuery.OQL_93 = omniORB.newEmptyClass()
class OQL_93 (_0_CosQuery.OQL):
    _NP_RepositoryId = _0_CosQuery._d_OQL_93[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_CosQuery.OQL_93 = OQL_93
_0_CosQuery._tc_OQL_93 = omniORB.tcInternal.createTypeCode(_0_CosQuery._d_OQL_93)
omniORB.registerType(OQL_93._NP_RepositoryId, _0_CosQuery._d_OQL_93, _0_CosQuery._tc_OQL_93)

# OQL_93 object reference
class _objref_OQL_93 (_0_CosQuery._objref_OQL):
    _NP_RepositoryId = OQL_93._NP_RepositoryId

    def __init__(self, obj):
        _0_CosQuery._objref_OQL.__init__(self, obj)

omniORB.registerObjref(OQL_93._NP_RepositoryId, _objref_OQL_93)
_0_CosQuery._objref_OQL_93 = _objref_OQL_93
del OQL_93, _objref_OQL_93

# OQL_93 skeleton
__name__ = "CosQuery__POA"
class OQL_93 (_0_CosQuery__POA.OQL):
    _NP_RepositoryId = _0_CosQuery.OQL_93._NP_RepositoryId


    _omni_op_d = {}
    _omni_op_d.update(_0_CosQuery__POA.OQL._omni_op_d)

OQL_93._omni_skeleton = OQL_93
_0_CosQuery__POA.OQL_93 = OQL_93
omniORB.registerSkeleton(OQL_93._NP_RepositoryId, OQL_93)
del OQL_93
__name__ = "CosQuery"

# interface OQL_93Basic
_0_CosQuery._d_OQL_93Basic = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosQuery/OQL_93Basic:1.0", "OQL_93Basic")
omniORB.typeMapping["IDL:omg.org/CosQuery/OQL_93Basic:1.0"] = _0_CosQuery._d_OQL_93Basic
_0_CosQuery.OQL_93Basic = omniORB.newEmptyClass()
class OQL_93Basic (_0_CosQuery.OQL_93, _0_CosQuery.OQLBasic):
    _NP_RepositoryId = _0_CosQuery._d_OQL_93Basic[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_CosQuery.OQL_93Basic = OQL_93Basic
_0_CosQuery._tc_OQL_93Basic = omniORB.tcInternal.createTypeCode(_0_CosQuery._d_OQL_93Basic)
omniORB.registerType(OQL_93Basic._NP_RepositoryId, _0_CosQuery._d_OQL_93Basic, _0_CosQuery._tc_OQL_93Basic)

# OQL_93Basic object reference
class _objref_OQL_93Basic (_0_CosQuery._objref_OQL_93, _0_CosQuery._objref_OQLBasic):
    _NP_RepositoryId = OQL_93Basic._NP_RepositoryId

    def __init__(self, obj):
        _0_CosQuery._objref_OQL_93.__init__(self, obj)
        _0_CosQuery._objref_OQLBasic.__init__(self, obj)

omniORB.registerObjref(OQL_93Basic._NP_RepositoryId, _objref_OQL_93Basic)
_0_CosQuery._objref_OQL_93Basic = _objref_OQL_93Basic
del OQL_93Basic, _objref_OQL_93Basic

# OQL_93Basic skeleton
__name__ = "CosQuery__POA"
class OQL_93Basic (_0_CosQuery__POA.OQL_93, _0_CosQuery__POA.OQLBasic):
    _NP_RepositoryId = _0_CosQuery.OQL_93Basic._NP_RepositoryId


    _omni_op_d = {}
    _omni_op_d.update(_0_CosQuery__POA.OQL_93._omni_op_d)
    _omni_op_d.update(_0_CosQuery__POA.OQLBasic._omni_op_d)

OQL_93Basic._omni_skeleton = OQL_93Basic
_0_CosQuery__POA.OQL_93Basic = OQL_93Basic
omniORB.registerSkeleton(OQL_93Basic._NP_RepositoryId, OQL_93Basic)
del OQL_93Basic
__name__ = "CosQuery"

# interface QueryEvaluator
_0_CosQuery._d_QueryEvaluator = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosQuery/QueryEvaluator:1.0", "QueryEvaluator")
omniORB.typeMapping["IDL:omg.org/CosQuery/QueryEvaluator:1.0"] = _0_CosQuery._d_QueryEvaluator
_0_CosQuery.QueryEvaluator = omniORB.newEmptyClass()
class QueryEvaluator :
    _NP_RepositoryId = _0_CosQuery._d_QueryEvaluator[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil

    
    # typedef ... QLTypes
    class QLTypes:
        _NP_RepositoryId = "IDL:omg.org/CosQuery/QueryEvaluator/QLTypes:1.0"
        def __init__(self, *args, **kw):
            raise RuntimeError("Cannot construct objects of this type.")
    _d_QLTypes  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:omg.org/CosQuery/QLType:1.0"], 0)
    _ad_QLTypes = (omniORB.tcInternal.tv_alias, QLTypes._NP_RepositoryId, "QLTypes", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:omg.org/CosQuery/QLType:1.0"], 0))
    _tc_QLTypes = omniORB.tcInternal.createTypeCode(_ad_QLTypes)
    omniORB.registerType(QLTypes._NP_RepositoryId, _ad_QLTypes, _tc_QLTypes)


_0_CosQuery.QueryEvaluator = QueryEvaluator
_0_CosQuery._tc_QueryEvaluator = omniORB.tcInternal.createTypeCode(_0_CosQuery._d_QueryEvaluator)
omniORB.registerType(QueryEvaluator._NP_RepositoryId, _0_CosQuery._d_QueryEvaluator, _0_CosQuery._tc_QueryEvaluator)

# QueryEvaluator operations and attributes
QueryEvaluator._d__get_ql_types = ((),(omniORB.typeMapping["IDL:omg.org/CosQuery/QueryEvaluator/QLTypes:1.0"],),None)
QueryEvaluator._d__get_default_ql_type = ((),(omniORB.typeMapping["IDL:omg.org/CosQuery/QLType:1.0"],),None)
QueryEvaluator._d_evaluate = (((omniORB.tcInternal.tv_string,0), omniORB.typeMapping["IDL:omg.org/CosQuery/QLType:1.0"], omniORB.typeMapping["IDL:omg.org/CosQuery/ParameterList:1.0"]), (omniORB.tcInternal.tv_any, ), {_0_CosQuery.QueryTypeInvalid._NP_RepositoryId: _0_CosQuery._d_QueryTypeInvalid, _0_CosQuery.QueryInvalid._NP_RepositoryId: _0_CosQuery._d_QueryInvalid, _0_CosQuery.QueryProcessingError._NP_RepositoryId: _0_CosQuery._d_QueryProcessingError})

# QueryEvaluator object reference
class _objref_QueryEvaluator (CORBA.Object):
    _NP_RepositoryId = QueryEvaluator._NP_RepositoryId

    def __init__(self, obj):
        CORBA.Object.__init__(self, obj)

    def _get_ql_types(self, *args):
        return self._obj.invoke("_get_ql_types", _0_CosQuery.QueryEvaluator._d__get_ql_types, args)

    ql_types = property(_get_ql_types)


    def _get_default_ql_type(self, *args):
        return self._obj.invoke("_get_default_ql_type", _0_CosQuery.QueryEvaluator._d__get_default_ql_type, args)

    default_ql_type = property(_get_default_ql_type)


    def evaluate(self, *args):
        return self._obj.invoke("evaluate", _0_CosQuery.QueryEvaluator._d_evaluate, args)

omniORB.registerObjref(QueryEvaluator._NP_RepositoryId, _objref_QueryEvaluator)
_0_CosQuery._objref_QueryEvaluator = _objref_QueryEvaluator
del QueryEvaluator, _objref_QueryEvaluator

# QueryEvaluator skeleton
__name__ = "CosQuery__POA"
class QueryEvaluator (PortableServer.Servant):
    _NP_RepositoryId = _0_CosQuery.QueryEvaluator._NP_RepositoryId


    _omni_op_d = {"_get_ql_types": _0_CosQuery.QueryEvaluator._d__get_ql_types, "_get_default_ql_type": _0_CosQuery.QueryEvaluator._d__get_default_ql_type, "evaluate": _0_CosQuery.QueryEvaluator._d_evaluate}

QueryEvaluator._omni_skeleton = QueryEvaluator
_0_CosQuery__POA.QueryEvaluator = QueryEvaluator
omniORB.registerSkeleton(QueryEvaluator._NP_RepositoryId, QueryEvaluator)
del QueryEvaluator
__name__ = "CosQuery"

# interface QueryableCollection
_0_CosQuery._d_QueryableCollection = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosQuery/QueryableCollection:1.0", "QueryableCollection")
omniORB.typeMapping["IDL:omg.org/CosQuery/QueryableCollection:1.0"] = _0_CosQuery._d_QueryableCollection
_0_CosQuery.QueryableCollection = omniORB.newEmptyClass()
class QueryableCollection (_0_CosQuery.QueryEvaluator, _0_CosQueryCollection.Collection):
    _NP_RepositoryId = _0_CosQuery._d_QueryableCollection[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_CosQuery.QueryableCollection = QueryableCollection
_0_CosQuery._tc_QueryableCollection = omniORB.tcInternal.createTypeCode(_0_CosQuery._d_QueryableCollection)
omniORB.registerType(QueryableCollection._NP_RepositoryId, _0_CosQuery._d_QueryableCollection, _0_CosQuery._tc_QueryableCollection)

# QueryableCollection object reference
class _objref_QueryableCollection (_0_CosQuery._objref_QueryEvaluator, _0_CosQueryCollection._objref_Collection):
    _NP_RepositoryId = QueryableCollection._NP_RepositoryId

    def __init__(self, obj):
        _0_CosQuery._objref_QueryEvaluator.__init__(self, obj)
        _0_CosQueryCollection._objref_Collection.__init__(self, obj)

omniORB.registerObjref(QueryableCollection._NP_RepositoryId, _objref_QueryableCollection)
_0_CosQuery._objref_QueryableCollection = _objref_QueryableCollection
del QueryableCollection, _objref_QueryableCollection

# QueryableCollection skeleton
__name__ = "CosQuery__POA"
class QueryableCollection (_0_CosQuery__POA.QueryEvaluator, _0_CosQueryCollection__POA.Collection):
    _NP_RepositoryId = _0_CosQuery.QueryableCollection._NP_RepositoryId


    _omni_op_d = {}
    _omni_op_d.update(_0_CosQuery__POA.QueryEvaluator._omni_op_d)
    _omni_op_d.update(_0_CosQueryCollection__POA.Collection._omni_op_d)

QueryableCollection._omni_skeleton = QueryableCollection
_0_CosQuery__POA.QueryableCollection = QueryableCollection
omniORB.registerSkeleton(QueryableCollection._NP_RepositoryId, QueryableCollection)
del QueryableCollection
__name__ = "CosQuery"

# interface QueryManager
_0_CosQuery._d_QueryManager = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosQuery/QueryManager:1.0", "QueryManager")
omniORB.typeMapping["IDL:omg.org/CosQuery/QueryManager:1.0"] = _0_CosQuery._d_QueryManager
_0_CosQuery.QueryManager = omniORB.newEmptyClass()
class QueryManager (_0_CosQuery.QueryEvaluator):
    _NP_RepositoryId = _0_CosQuery._d_QueryManager[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_CosQuery.QueryManager = QueryManager
_0_CosQuery._tc_QueryManager = omniORB.tcInternal.createTypeCode(_0_CosQuery._d_QueryManager)
omniORB.registerType(QueryManager._NP_RepositoryId, _0_CosQuery._d_QueryManager, _0_CosQuery._tc_QueryManager)

# QueryManager operations and attributes
QueryManager._d_create = (((omniORB.tcInternal.tv_string,0), omniORB.typeMapping["IDL:omg.org/CosQuery/QLType:1.0"], omniORB.typeMapping["IDL:omg.org/CosQuery/ParameterList:1.0"]), (omniORB.typeMapping["IDL:omg.org/CosQuery/Query:1.0"], ), {_0_CosQuery.QueryTypeInvalid._NP_RepositoryId: _0_CosQuery._d_QueryTypeInvalid, _0_CosQuery.QueryInvalid._NP_RepositoryId: _0_CosQuery._d_QueryInvalid})

# QueryManager object reference
class _objref_QueryManager (_0_CosQuery._objref_QueryEvaluator):
    _NP_RepositoryId = QueryManager._NP_RepositoryId

    def __init__(self, obj):
        _0_CosQuery._objref_QueryEvaluator.__init__(self, obj)

    def create(self, *args):
        return self._obj.invoke("create", _0_CosQuery.QueryManager._d_create, args)

omniORB.registerObjref(QueryManager._NP_RepositoryId, _objref_QueryManager)
_0_CosQuery._objref_QueryManager = _objref_QueryManager
del QueryManager, _objref_QueryManager

# QueryManager skeleton
__name__ = "CosQuery__POA"
class QueryManager (_0_CosQuery__POA.QueryEvaluator):
    _NP_RepositoryId = _0_CosQuery.QueryManager._NP_RepositoryId


    _omni_op_d = {"create": _0_CosQuery.QueryManager._d_create}
    _omni_op_d.update(_0_CosQuery__POA.QueryEvaluator._omni_op_d)

QueryManager._omni_skeleton = QueryManager
_0_CosQuery__POA.QueryManager = QueryManager
omniORB.registerSkeleton(QueryManager._NP_RepositoryId, QueryManager)
del QueryManager
__name__ = "CosQuery"

# interface Query
_0_CosQuery._d_Query = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosQuery/Query:1.0", "Query")
omniORB.typeMapping["IDL:omg.org/CosQuery/Query:1.0"] = _0_CosQuery._d_Query
_0_CosQuery.Query = omniORB.newEmptyClass()
class Query :
    _NP_RepositoryId = _0_CosQuery._d_Query[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_CosQuery.Query = Query
_0_CosQuery._tc_Query = omniORB.tcInternal.createTypeCode(_0_CosQuery._d_Query)
omniORB.registerType(Query._NP_RepositoryId, _0_CosQuery._d_Query, _0_CosQuery._tc_Query)

# Query operations and attributes
Query._d__get_query_mgr = ((),(omniORB.typeMapping["IDL:omg.org/CosQuery/QueryManager:1.0"],),None)
Query._d_prepare = ((omniORB.typeMapping["IDL:omg.org/CosQuery/ParameterList:1.0"], ), (), {_0_CosQuery.QueryProcessingError._NP_RepositoryId: _0_CosQuery._d_QueryProcessingError})
Query._d_execute = ((omniORB.typeMapping["IDL:omg.org/CosQuery/ParameterList:1.0"], ), (), {_0_CosQuery.QueryProcessingError._NP_RepositoryId: _0_CosQuery._d_QueryProcessingError})
Query._d_get_status = ((), (omniORB.typeMapping["IDL:omg.org/CosQuery/QueryStatus:1.0"], ), None)
Query._d_get_result = ((), (omniORB.tcInternal.tv_any, ), None)

# Query object reference
class _objref_Query (CORBA.Object):
    _NP_RepositoryId = Query._NP_RepositoryId

    def __init__(self, obj):
        CORBA.Object.__init__(self, obj)

    def _get_query_mgr(self, *args):
        return self._obj.invoke("_get_query_mgr", _0_CosQuery.Query._d__get_query_mgr, args)

    query_mgr = property(_get_query_mgr)


    def prepare(self, *args):
        return self._obj.invoke("prepare", _0_CosQuery.Query._d_prepare, args)

    def execute(self, *args):
        return self._obj.invoke("execute", _0_CosQuery.Query._d_execute, args)

    def get_status(self, *args):
        return self._obj.invoke("get_status", _0_CosQuery.Query._d_get_status, args)

    def get_result(self, *args):
        return self._obj.invoke("get_result", _0_CosQuery.Query._d_get_result, args)

omniORB.registerObjref(Query._NP_RepositoryId, _objref_Query)
_0_CosQuery._objref_Query = _objref_Query
del Query, _objref_Query

# Query skeleton
__name__ = "CosQuery__POA"
class Query (PortableServer.Servant):
    _NP_RepositoryId = _0_CosQuery.Query._NP_RepositoryId


    _omni_op_d = {"_get_query_mgr": _0_CosQuery.Query._d__get_query_mgr, "prepare": _0_CosQuery.Query._d_prepare, "execute": _0_CosQuery.Query._d_execute, "get_status": _0_CosQuery.Query._d_get_status, "get_result": _0_CosQuery.Query._d_get_result}

Query._omni_skeleton = Query
_0_CosQuery__POA.Query = Query
omniORB.registerSkeleton(Query._NP_RepositoryId, Query)
del Query
__name__ = "CosQuery"

#
# End of module "CosQuery"
#
__name__ = "CosQuery_idl"

_exported_modules = ( "CosQuery", )

# The end.
