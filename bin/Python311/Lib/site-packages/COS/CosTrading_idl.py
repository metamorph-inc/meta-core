# Python stubs generated by omniidl from ..\..\..\..\..\idl\COS\CosTrading.idl
# DO NOT EDIT THIS FILE!

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA


_omnipy.checkVersion(4,2, __file__, 1)

try:
    property
except NameError:
    def property(*args):
        return None


#
# Start of module "CosTrading"
#
__name__ = "CosTrading"
_0_CosTrading = omniORB.openModule("CosTrading", r"..\..\..\..\..\idl\COS\CosTrading.idl")
_0_CosTrading__POA = omniORB.openModule("CosTrading__POA", r"..\..\..\..\..\idl\COS\CosTrading.idl")


# forward interface Lookup;
_0_CosTrading._d_Lookup = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosTrading/Lookup:1.0", "Lookup")
omniORB.typeMapping["IDL:omg.org/CosTrading/Lookup:1.0"] = _0_CosTrading._d_Lookup

# forward interface Register;
_0_CosTrading._d_Register = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosTrading/Register:1.0", "Register")
omniORB.typeMapping["IDL:omg.org/CosTrading/Register:1.0"] = _0_CosTrading._d_Register

# forward interface Link;
_0_CosTrading._d_Link = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosTrading/Link:1.0", "Link")
omniORB.typeMapping["IDL:omg.org/CosTrading/Link:1.0"] = _0_CosTrading._d_Link

# forward interface Proxy;
_0_CosTrading._d_Proxy = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosTrading/Proxy:1.0", "Proxy")
omniORB.typeMapping["IDL:omg.org/CosTrading/Proxy:1.0"] = _0_CosTrading._d_Proxy

# forward interface Admin;
_0_CosTrading._d_Admin = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosTrading/Admin:1.0", "Admin")
omniORB.typeMapping["IDL:omg.org/CosTrading/Admin:1.0"] = _0_CosTrading._d_Admin

# forward interface OfferIterator;
_0_CosTrading._d_OfferIterator = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosTrading/OfferIterator:1.0", "OfferIterator")
omniORB.typeMapping["IDL:omg.org/CosTrading/OfferIterator:1.0"] = _0_CosTrading._d_OfferIterator

# forward interface OfferIdIterator;
_0_CosTrading._d_OfferIdIterator = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosTrading/OfferIdIterator:1.0", "OfferIdIterator")
omniORB.typeMapping["IDL:omg.org/CosTrading/OfferIdIterator:1.0"] = _0_CosTrading._d_OfferIdIterator

# typedef ... Istring
class Istring:
    _NP_RepositoryId = "IDL:omg.org/CosTrading/Istring:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_CosTrading.Istring = Istring
_0_CosTrading._d_Istring  = (omniORB.tcInternal.tv_string,0)
_0_CosTrading._ad_Istring = (omniORB.tcInternal.tv_alias, Istring._NP_RepositoryId, "Istring", (omniORB.tcInternal.tv_string,0))
_0_CosTrading._tc_Istring = omniORB.tcInternal.createTypeCode(_0_CosTrading._ad_Istring)
omniORB.registerType(Istring._NP_RepositoryId, _0_CosTrading._ad_Istring, _0_CosTrading._tc_Istring)
del Istring

# typedef ... TypeRepository
class TypeRepository:
    _NP_RepositoryId = "IDL:omg.org/CosTrading/TypeRepository:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_CosTrading.TypeRepository = TypeRepository
_0_CosTrading._d_TypeRepository  = omniORB.typeMapping["IDL:omg.org/CORBA/Object:1.0"]
_0_CosTrading._ad_TypeRepository = (omniORB.tcInternal.tv_alias, TypeRepository._NP_RepositoryId, "TypeRepository", omniORB.typeMapping["IDL:omg.org/CORBA/Object:1.0"])
_0_CosTrading._tc_TypeRepository = omniORB.tcInternal.createTypeCode(_0_CosTrading._ad_TypeRepository)
omniORB.registerType(TypeRepository._NP_RepositoryId, _0_CosTrading._ad_TypeRepository, _0_CosTrading._tc_TypeRepository)
del TypeRepository

# typedef ... PropertyName
class PropertyName:
    _NP_RepositoryId = "IDL:omg.org/CosTrading/PropertyName:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_CosTrading.PropertyName = PropertyName
_0_CosTrading._d_PropertyName  = omniORB.typeMapping["IDL:omg.org/CosTrading/Istring:1.0"]
_0_CosTrading._ad_PropertyName = (omniORB.tcInternal.tv_alias, PropertyName._NP_RepositoryId, "PropertyName", omniORB.typeCodeMapping["IDL:omg.org/CosTrading/Istring:1.0"]._d)
_0_CosTrading._tc_PropertyName = omniORB.tcInternal.createTypeCode(_0_CosTrading._ad_PropertyName)
omniORB.registerType(PropertyName._NP_RepositoryId, _0_CosTrading._ad_PropertyName, _0_CosTrading._tc_PropertyName)
del PropertyName

# typedef ... PropertyNameSeq
class PropertyNameSeq:
    _NP_RepositoryId = "IDL:omg.org/CosTrading/PropertyNameSeq:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_CosTrading.PropertyNameSeq = PropertyNameSeq
_0_CosTrading._d_PropertyNameSeq  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:omg.org/CosTrading/PropertyName:1.0"], 0)
_0_CosTrading._ad_PropertyNameSeq = (omniORB.tcInternal.tv_alias, PropertyNameSeq._NP_RepositoryId, "PropertyNameSeq", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:omg.org/CosTrading/PropertyName:1.0"], 0))
_0_CosTrading._tc_PropertyNameSeq = omniORB.tcInternal.createTypeCode(_0_CosTrading._ad_PropertyNameSeq)
omniORB.registerType(PropertyNameSeq._NP_RepositoryId, _0_CosTrading._ad_PropertyNameSeq, _0_CosTrading._tc_PropertyNameSeq)
del PropertyNameSeq

# typedef ... PropertyValue
class PropertyValue:
    _NP_RepositoryId = "IDL:omg.org/CosTrading/PropertyValue:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_CosTrading.PropertyValue = PropertyValue
_0_CosTrading._d_PropertyValue  = omniORB.tcInternal.tv_any
_0_CosTrading._ad_PropertyValue = (omniORB.tcInternal.tv_alias, PropertyValue._NP_RepositoryId, "PropertyValue", omniORB.tcInternal.tv_any)
_0_CosTrading._tc_PropertyValue = omniORB.tcInternal.createTypeCode(_0_CosTrading._ad_PropertyValue)
omniORB.registerType(PropertyValue._NP_RepositoryId, _0_CosTrading._ad_PropertyValue, _0_CosTrading._tc_PropertyValue)
del PropertyValue

# struct Property
_0_CosTrading.Property = omniORB.newEmptyClass()
class Property (omniORB.StructBase):
    _NP_RepositoryId = "IDL:omg.org/CosTrading/Property:1.0"

    def __init__(self, name, value):
        self.name = name
        self.value = value

_0_CosTrading.Property = Property
_0_CosTrading._d_Property  = (omniORB.tcInternal.tv_struct, Property, Property._NP_RepositoryId, "Property", "name", omniORB.typeMapping["IDL:omg.org/CosTrading/PropertyName:1.0"], "value", omniORB.typeMapping["IDL:omg.org/CosTrading/PropertyValue:1.0"])
_0_CosTrading._tc_Property = omniORB.tcInternal.createTypeCode(_0_CosTrading._d_Property)
omniORB.registerType(Property._NP_RepositoryId, _0_CosTrading._d_Property, _0_CosTrading._tc_Property)
del Property

# typedef ... PropertySeq
class PropertySeq:
    _NP_RepositoryId = "IDL:omg.org/CosTrading/PropertySeq:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_CosTrading.PropertySeq = PropertySeq
_0_CosTrading._d_PropertySeq  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:omg.org/CosTrading/Property:1.0"], 0)
_0_CosTrading._ad_PropertySeq = (omniORB.tcInternal.tv_alias, PropertySeq._NP_RepositoryId, "PropertySeq", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:omg.org/CosTrading/Property:1.0"], 0))
_0_CosTrading._tc_PropertySeq = omniORB.tcInternal.createTypeCode(_0_CosTrading._ad_PropertySeq)
omniORB.registerType(PropertySeq._NP_RepositoryId, _0_CosTrading._ad_PropertySeq, _0_CosTrading._tc_PropertySeq)
del PropertySeq

# struct Offer
_0_CosTrading.Offer = omniORB.newEmptyClass()
class Offer (omniORB.StructBase):
    _NP_RepositoryId = "IDL:omg.org/CosTrading/Offer:1.0"

    def __init__(self, reference, properties):
        self.reference = reference
        self.properties = properties

_0_CosTrading.Offer = Offer
_0_CosTrading._d_Offer  = (omniORB.tcInternal.tv_struct, Offer, Offer._NP_RepositoryId, "Offer", "reference", omniORB.typeMapping["IDL:omg.org/CORBA/Object:1.0"], "properties", omniORB.typeMapping["IDL:omg.org/CosTrading/PropertySeq:1.0"])
_0_CosTrading._tc_Offer = omniORB.tcInternal.createTypeCode(_0_CosTrading._d_Offer)
omniORB.registerType(Offer._NP_RepositoryId, _0_CosTrading._d_Offer, _0_CosTrading._tc_Offer)
del Offer

# typedef ... OfferSeq
class OfferSeq:
    _NP_RepositoryId = "IDL:omg.org/CosTrading/OfferSeq:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_CosTrading.OfferSeq = OfferSeq
_0_CosTrading._d_OfferSeq  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:omg.org/CosTrading/Offer:1.0"], 0)
_0_CosTrading._ad_OfferSeq = (omniORB.tcInternal.tv_alias, OfferSeq._NP_RepositoryId, "OfferSeq", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:omg.org/CosTrading/Offer:1.0"], 0))
_0_CosTrading._tc_OfferSeq = omniORB.tcInternal.createTypeCode(_0_CosTrading._ad_OfferSeq)
omniORB.registerType(OfferSeq._NP_RepositoryId, _0_CosTrading._ad_OfferSeq, _0_CosTrading._tc_OfferSeq)
del OfferSeq

# typedef ... OfferId
class OfferId:
    _NP_RepositoryId = "IDL:omg.org/CosTrading/OfferId:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_CosTrading.OfferId = OfferId
_0_CosTrading._d_OfferId  = (omniORB.tcInternal.tv_string,0)
_0_CosTrading._ad_OfferId = (omniORB.tcInternal.tv_alias, OfferId._NP_RepositoryId, "OfferId", (omniORB.tcInternal.tv_string,0))
_0_CosTrading._tc_OfferId = omniORB.tcInternal.createTypeCode(_0_CosTrading._ad_OfferId)
omniORB.registerType(OfferId._NP_RepositoryId, _0_CosTrading._ad_OfferId, _0_CosTrading._tc_OfferId)
del OfferId

# typedef ... OfferIdSeq
class OfferIdSeq:
    _NP_RepositoryId = "IDL:omg.org/CosTrading/OfferIdSeq:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_CosTrading.OfferIdSeq = OfferIdSeq
_0_CosTrading._d_OfferIdSeq  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:omg.org/CosTrading/OfferId:1.0"], 0)
_0_CosTrading._ad_OfferIdSeq = (omniORB.tcInternal.tv_alias, OfferIdSeq._NP_RepositoryId, "OfferIdSeq", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:omg.org/CosTrading/OfferId:1.0"], 0))
_0_CosTrading._tc_OfferIdSeq = omniORB.tcInternal.createTypeCode(_0_CosTrading._ad_OfferIdSeq)
omniORB.registerType(OfferIdSeq._NP_RepositoryId, _0_CosTrading._ad_OfferIdSeq, _0_CosTrading._tc_OfferIdSeq)
del OfferIdSeq

# typedef ... ServiceTypeName
class ServiceTypeName:
    _NP_RepositoryId = "IDL:omg.org/CosTrading/ServiceTypeName:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_CosTrading.ServiceTypeName = ServiceTypeName
_0_CosTrading._d_ServiceTypeName  = omniORB.typeMapping["IDL:omg.org/CosTrading/Istring:1.0"]
_0_CosTrading._ad_ServiceTypeName = (omniORB.tcInternal.tv_alias, ServiceTypeName._NP_RepositoryId, "ServiceTypeName", omniORB.typeCodeMapping["IDL:omg.org/CosTrading/Istring:1.0"]._d)
_0_CosTrading._tc_ServiceTypeName = omniORB.tcInternal.createTypeCode(_0_CosTrading._ad_ServiceTypeName)
omniORB.registerType(ServiceTypeName._NP_RepositoryId, _0_CosTrading._ad_ServiceTypeName, _0_CosTrading._tc_ServiceTypeName)
del ServiceTypeName

# typedef ... Constraint
class Constraint:
    _NP_RepositoryId = "IDL:omg.org/CosTrading/Constraint:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_CosTrading.Constraint = Constraint
_0_CosTrading._d_Constraint  = omniORB.typeMapping["IDL:omg.org/CosTrading/Istring:1.0"]
_0_CosTrading._ad_Constraint = (omniORB.tcInternal.tv_alias, Constraint._NP_RepositoryId, "Constraint", omniORB.typeCodeMapping["IDL:omg.org/CosTrading/Istring:1.0"]._d)
_0_CosTrading._tc_Constraint = omniORB.tcInternal.createTypeCode(_0_CosTrading._ad_Constraint)
omniORB.registerType(Constraint._NP_RepositoryId, _0_CosTrading._ad_Constraint, _0_CosTrading._tc_Constraint)
del Constraint

# enum FollowOption
_0_CosTrading.local_only = omniORB.EnumItem("local_only", 0)
_0_CosTrading.if_no_local = omniORB.EnumItem("if_no_local", 1)
_0_CosTrading.always = omniORB.EnumItem("always", 2)
_0_CosTrading.FollowOption = omniORB.Enum("IDL:omg.org/CosTrading/FollowOption:1.0", (_0_CosTrading.local_only, _0_CosTrading.if_no_local, _0_CosTrading.always,))

_0_CosTrading._d_FollowOption  = (omniORB.tcInternal.tv_enum, _0_CosTrading.FollowOption._NP_RepositoryId, "FollowOption", _0_CosTrading.FollowOption._items)
_0_CosTrading._tc_FollowOption = omniORB.tcInternal.createTypeCode(_0_CosTrading._d_FollowOption)
omniORB.registerType(_0_CosTrading.FollowOption._NP_RepositoryId, _0_CosTrading._d_FollowOption, _0_CosTrading._tc_FollowOption)

# typedef ... LinkName
class LinkName:
    _NP_RepositoryId = "IDL:omg.org/CosTrading/LinkName:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_CosTrading.LinkName = LinkName
_0_CosTrading._d_LinkName  = omniORB.typeMapping["IDL:omg.org/CosTrading/Istring:1.0"]
_0_CosTrading._ad_LinkName = (omniORB.tcInternal.tv_alias, LinkName._NP_RepositoryId, "LinkName", omniORB.typeCodeMapping["IDL:omg.org/CosTrading/Istring:1.0"]._d)
_0_CosTrading._tc_LinkName = omniORB.tcInternal.createTypeCode(_0_CosTrading._ad_LinkName)
omniORB.registerType(LinkName._NP_RepositoryId, _0_CosTrading._ad_LinkName, _0_CosTrading._tc_LinkName)
del LinkName

# typedef ... LinkNameSeq
class LinkNameSeq:
    _NP_RepositoryId = "IDL:omg.org/CosTrading/LinkNameSeq:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_CosTrading.LinkNameSeq = LinkNameSeq
_0_CosTrading._d_LinkNameSeq  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:omg.org/CosTrading/LinkName:1.0"], 0)
_0_CosTrading._ad_LinkNameSeq = (omniORB.tcInternal.tv_alias, LinkNameSeq._NP_RepositoryId, "LinkNameSeq", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:omg.org/CosTrading/LinkName:1.0"], 0))
_0_CosTrading._tc_LinkNameSeq = omniORB.tcInternal.createTypeCode(_0_CosTrading._ad_LinkNameSeq)
omniORB.registerType(LinkNameSeq._NP_RepositoryId, _0_CosTrading._ad_LinkNameSeq, _0_CosTrading._tc_LinkNameSeq)
del LinkNameSeq

# typedef ... TraderName
class TraderName:
    _NP_RepositoryId = "IDL:omg.org/CosTrading/TraderName:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_CosTrading.TraderName = TraderName
_0_CosTrading._d_TraderName  = omniORB.typeMapping["IDL:omg.org/CosTrading/LinkNameSeq:1.0"]
_0_CosTrading._ad_TraderName = (omniORB.tcInternal.tv_alias, TraderName._NP_RepositoryId, "TraderName", omniORB.typeCodeMapping["IDL:omg.org/CosTrading/LinkNameSeq:1.0"]._d)
_0_CosTrading._tc_TraderName = omniORB.tcInternal.createTypeCode(_0_CosTrading._ad_TraderName)
omniORB.registerType(TraderName._NP_RepositoryId, _0_CosTrading._ad_TraderName, _0_CosTrading._tc_TraderName)
del TraderName

# typedef ... PolicyName
class PolicyName:
    _NP_RepositoryId = "IDL:omg.org/CosTrading/PolicyName:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_CosTrading.PolicyName = PolicyName
_0_CosTrading._d_PolicyName  = (omniORB.tcInternal.tv_string,0)
_0_CosTrading._ad_PolicyName = (omniORB.tcInternal.tv_alias, PolicyName._NP_RepositoryId, "PolicyName", (omniORB.tcInternal.tv_string,0))
_0_CosTrading._tc_PolicyName = omniORB.tcInternal.createTypeCode(_0_CosTrading._ad_PolicyName)
omniORB.registerType(PolicyName._NP_RepositoryId, _0_CosTrading._ad_PolicyName, _0_CosTrading._tc_PolicyName)
del PolicyName

# typedef ... PolicyNameSeq
class PolicyNameSeq:
    _NP_RepositoryId = "IDL:omg.org/CosTrading/PolicyNameSeq:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_CosTrading.PolicyNameSeq = PolicyNameSeq
_0_CosTrading._d_PolicyNameSeq  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:omg.org/CosTrading/PolicyName:1.0"], 0)
_0_CosTrading._ad_PolicyNameSeq = (omniORB.tcInternal.tv_alias, PolicyNameSeq._NP_RepositoryId, "PolicyNameSeq", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:omg.org/CosTrading/PolicyName:1.0"], 0))
_0_CosTrading._tc_PolicyNameSeq = omniORB.tcInternal.createTypeCode(_0_CosTrading._ad_PolicyNameSeq)
omniORB.registerType(PolicyNameSeq._NP_RepositoryId, _0_CosTrading._ad_PolicyNameSeq, _0_CosTrading._tc_PolicyNameSeq)
del PolicyNameSeq

# typedef ... PolicyValue
class PolicyValue:
    _NP_RepositoryId = "IDL:omg.org/CosTrading/PolicyValue:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_CosTrading.PolicyValue = PolicyValue
_0_CosTrading._d_PolicyValue  = omniORB.tcInternal.tv_any
_0_CosTrading._ad_PolicyValue = (omniORB.tcInternal.tv_alias, PolicyValue._NP_RepositoryId, "PolicyValue", omniORB.tcInternal.tv_any)
_0_CosTrading._tc_PolicyValue = omniORB.tcInternal.createTypeCode(_0_CosTrading._ad_PolicyValue)
omniORB.registerType(PolicyValue._NP_RepositoryId, _0_CosTrading._ad_PolicyValue, _0_CosTrading._tc_PolicyValue)
del PolicyValue

# struct Policy
_0_CosTrading.Policy = omniORB.newEmptyClass()
class Policy (omniORB.StructBase):
    _NP_RepositoryId = "IDL:omg.org/CosTrading/Policy:1.0"

    def __init__(self, name, value):
        self.name = name
        self.value = value

_0_CosTrading.Policy = Policy
_0_CosTrading._d_Policy  = (omniORB.tcInternal.tv_struct, Policy, Policy._NP_RepositoryId, "Policy", "name", omniORB.typeMapping["IDL:omg.org/CosTrading/PolicyName:1.0"], "value", omniORB.typeMapping["IDL:omg.org/CosTrading/PolicyValue:1.0"])
_0_CosTrading._tc_Policy = omniORB.tcInternal.createTypeCode(_0_CosTrading._d_Policy)
omniORB.registerType(Policy._NP_RepositoryId, _0_CosTrading._d_Policy, _0_CosTrading._tc_Policy)
del Policy

# typedef ... PolicySeq
class PolicySeq:
    _NP_RepositoryId = "IDL:omg.org/CosTrading/PolicySeq:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_CosTrading.PolicySeq = PolicySeq
_0_CosTrading._d_PolicySeq  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:omg.org/CosTrading/Policy:1.0"], 0)
_0_CosTrading._ad_PolicySeq = (omniORB.tcInternal.tv_alias, PolicySeq._NP_RepositoryId, "PolicySeq", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:omg.org/CosTrading/Policy:1.0"], 0))
_0_CosTrading._tc_PolicySeq = omniORB.tcInternal.createTypeCode(_0_CosTrading._ad_PolicySeq)
omniORB.registerType(PolicySeq._NP_RepositoryId, _0_CosTrading._ad_PolicySeq, _0_CosTrading._tc_PolicySeq)
del PolicySeq

# exception UnknownMaxLeft
_0_CosTrading.UnknownMaxLeft = omniORB.newEmptyClass()
class UnknownMaxLeft (CORBA.UserException):
    _NP_RepositoryId = "IDL:omg.org/CosTrading/UnknownMaxLeft:1.0"

    def __init__(self):
        CORBA.UserException.__init__(self)

_0_CosTrading.UnknownMaxLeft = UnknownMaxLeft
_0_CosTrading._d_UnknownMaxLeft  = (omniORB.tcInternal.tv_except, UnknownMaxLeft, UnknownMaxLeft._NP_RepositoryId, "UnknownMaxLeft")
_0_CosTrading._tc_UnknownMaxLeft = omniORB.tcInternal.createTypeCode(_0_CosTrading._d_UnknownMaxLeft)
omniORB.registerType(UnknownMaxLeft._NP_RepositoryId, _0_CosTrading._d_UnknownMaxLeft, _0_CosTrading._tc_UnknownMaxLeft)
del UnknownMaxLeft

# exception NotImplemented
_0_CosTrading.NotImplemented = omniORB.newEmptyClass()
class NotImplemented (CORBA.UserException):
    _NP_RepositoryId = "IDL:omg.org/CosTrading/NotImplemented:1.0"

    def __init__(self):
        CORBA.UserException.__init__(self)

_0_CosTrading.NotImplemented = NotImplemented
_0_CosTrading._d_NotImplemented  = (omniORB.tcInternal.tv_except, NotImplemented, NotImplemented._NP_RepositoryId, "NotImplemented")
_0_CosTrading._tc_NotImplemented = omniORB.tcInternal.createTypeCode(_0_CosTrading._d_NotImplemented)
omniORB.registerType(NotImplemented._NP_RepositoryId, _0_CosTrading._d_NotImplemented, _0_CosTrading._tc_NotImplemented)
del NotImplemented

# exception IllegalServiceType
_0_CosTrading.IllegalServiceType = omniORB.newEmptyClass()
class IllegalServiceType (CORBA.UserException):
    _NP_RepositoryId = "IDL:omg.org/CosTrading/IllegalServiceType:1.0"

    def __init__(self, type):
        CORBA.UserException.__init__(self, type)
        self.type = type

_0_CosTrading.IllegalServiceType = IllegalServiceType
_0_CosTrading._d_IllegalServiceType  = (omniORB.tcInternal.tv_except, IllegalServiceType, IllegalServiceType._NP_RepositoryId, "IllegalServiceType", "type", omniORB.typeMapping["IDL:omg.org/CosTrading/ServiceTypeName:1.0"])
_0_CosTrading._tc_IllegalServiceType = omniORB.tcInternal.createTypeCode(_0_CosTrading._d_IllegalServiceType)
omniORB.registerType(IllegalServiceType._NP_RepositoryId, _0_CosTrading._d_IllegalServiceType, _0_CosTrading._tc_IllegalServiceType)
del IllegalServiceType

# exception UnknownServiceType
_0_CosTrading.UnknownServiceType = omniORB.newEmptyClass()
class UnknownServiceType (CORBA.UserException):
    _NP_RepositoryId = "IDL:omg.org/CosTrading/UnknownServiceType:1.0"

    def __init__(self, type):
        CORBA.UserException.__init__(self, type)
        self.type = type

_0_CosTrading.UnknownServiceType = UnknownServiceType
_0_CosTrading._d_UnknownServiceType  = (omniORB.tcInternal.tv_except, UnknownServiceType, UnknownServiceType._NP_RepositoryId, "UnknownServiceType", "type", omniORB.typeMapping["IDL:omg.org/CosTrading/ServiceTypeName:1.0"])
_0_CosTrading._tc_UnknownServiceType = omniORB.tcInternal.createTypeCode(_0_CosTrading._d_UnknownServiceType)
omniORB.registerType(UnknownServiceType._NP_RepositoryId, _0_CosTrading._d_UnknownServiceType, _0_CosTrading._tc_UnknownServiceType)
del UnknownServiceType

# exception IllegalPropertyName
_0_CosTrading.IllegalPropertyName = omniORB.newEmptyClass()
class IllegalPropertyName (CORBA.UserException):
    _NP_RepositoryId = "IDL:omg.org/CosTrading/IllegalPropertyName:1.0"

    def __init__(self, name):
        CORBA.UserException.__init__(self, name)
        self.name = name

_0_CosTrading.IllegalPropertyName = IllegalPropertyName
_0_CosTrading._d_IllegalPropertyName  = (omniORB.tcInternal.tv_except, IllegalPropertyName, IllegalPropertyName._NP_RepositoryId, "IllegalPropertyName", "name", omniORB.typeMapping["IDL:omg.org/CosTrading/PropertyName:1.0"])
_0_CosTrading._tc_IllegalPropertyName = omniORB.tcInternal.createTypeCode(_0_CosTrading._d_IllegalPropertyName)
omniORB.registerType(IllegalPropertyName._NP_RepositoryId, _0_CosTrading._d_IllegalPropertyName, _0_CosTrading._tc_IllegalPropertyName)
del IllegalPropertyName

# exception DuplicatePropertyName
_0_CosTrading.DuplicatePropertyName = omniORB.newEmptyClass()
class DuplicatePropertyName (CORBA.UserException):
    _NP_RepositoryId = "IDL:omg.org/CosTrading/DuplicatePropertyName:1.0"

    def __init__(self, name):
        CORBA.UserException.__init__(self, name)
        self.name = name

_0_CosTrading.DuplicatePropertyName = DuplicatePropertyName
_0_CosTrading._d_DuplicatePropertyName  = (omniORB.tcInternal.tv_except, DuplicatePropertyName, DuplicatePropertyName._NP_RepositoryId, "DuplicatePropertyName", "name", omniORB.typeMapping["IDL:omg.org/CosTrading/PropertyName:1.0"])
_0_CosTrading._tc_DuplicatePropertyName = omniORB.tcInternal.createTypeCode(_0_CosTrading._d_DuplicatePropertyName)
omniORB.registerType(DuplicatePropertyName._NP_RepositoryId, _0_CosTrading._d_DuplicatePropertyName, _0_CosTrading._tc_DuplicatePropertyName)
del DuplicatePropertyName

# exception PropertyTypeMismatch
_0_CosTrading.PropertyTypeMismatch = omniORB.newEmptyClass()
class PropertyTypeMismatch (CORBA.UserException):
    _NP_RepositoryId = "IDL:omg.org/CosTrading/PropertyTypeMismatch:1.0"

    def __init__(self, type, prop):
        CORBA.UserException.__init__(self, type, prop)
        self.type = type
        self.prop = prop

_0_CosTrading.PropertyTypeMismatch = PropertyTypeMismatch
_0_CosTrading._d_PropertyTypeMismatch  = (omniORB.tcInternal.tv_except, PropertyTypeMismatch, PropertyTypeMismatch._NP_RepositoryId, "PropertyTypeMismatch", "type", omniORB.typeMapping["IDL:omg.org/CosTrading/ServiceTypeName:1.0"], "prop", omniORB.typeMapping["IDL:omg.org/CosTrading/Property:1.0"])
_0_CosTrading._tc_PropertyTypeMismatch = omniORB.tcInternal.createTypeCode(_0_CosTrading._d_PropertyTypeMismatch)
omniORB.registerType(PropertyTypeMismatch._NP_RepositoryId, _0_CosTrading._d_PropertyTypeMismatch, _0_CosTrading._tc_PropertyTypeMismatch)
del PropertyTypeMismatch

# exception MissingMandatoryProperty
_0_CosTrading.MissingMandatoryProperty = omniORB.newEmptyClass()
class MissingMandatoryProperty (CORBA.UserException):
    _NP_RepositoryId = "IDL:omg.org/CosTrading/MissingMandatoryProperty:1.0"

    def __init__(self, type, name):
        CORBA.UserException.__init__(self, type, name)
        self.type = type
        self.name = name

_0_CosTrading.MissingMandatoryProperty = MissingMandatoryProperty
_0_CosTrading._d_MissingMandatoryProperty  = (omniORB.tcInternal.tv_except, MissingMandatoryProperty, MissingMandatoryProperty._NP_RepositoryId, "MissingMandatoryProperty", "type", omniORB.typeMapping["IDL:omg.org/CosTrading/ServiceTypeName:1.0"], "name", omniORB.typeMapping["IDL:omg.org/CosTrading/PropertyName:1.0"])
_0_CosTrading._tc_MissingMandatoryProperty = omniORB.tcInternal.createTypeCode(_0_CosTrading._d_MissingMandatoryProperty)
omniORB.registerType(MissingMandatoryProperty._NP_RepositoryId, _0_CosTrading._d_MissingMandatoryProperty, _0_CosTrading._tc_MissingMandatoryProperty)
del MissingMandatoryProperty

# exception ReadonlyDynamicProperty
_0_CosTrading.ReadonlyDynamicProperty = omniORB.newEmptyClass()
class ReadonlyDynamicProperty (CORBA.UserException):
    _NP_RepositoryId = "IDL:omg.org/CosTrading/ReadonlyDynamicProperty:1.0"

    def __init__(self, type, name):
        CORBA.UserException.__init__(self, type, name)
        self.type = type
        self.name = name

_0_CosTrading.ReadonlyDynamicProperty = ReadonlyDynamicProperty
_0_CosTrading._d_ReadonlyDynamicProperty  = (omniORB.tcInternal.tv_except, ReadonlyDynamicProperty, ReadonlyDynamicProperty._NP_RepositoryId, "ReadonlyDynamicProperty", "type", omniORB.typeMapping["IDL:omg.org/CosTrading/ServiceTypeName:1.0"], "name", omniORB.typeMapping["IDL:omg.org/CosTrading/PropertyName:1.0"])
_0_CosTrading._tc_ReadonlyDynamicProperty = omniORB.tcInternal.createTypeCode(_0_CosTrading._d_ReadonlyDynamicProperty)
omniORB.registerType(ReadonlyDynamicProperty._NP_RepositoryId, _0_CosTrading._d_ReadonlyDynamicProperty, _0_CosTrading._tc_ReadonlyDynamicProperty)
del ReadonlyDynamicProperty

# exception IllegalConstraint
_0_CosTrading.IllegalConstraint = omniORB.newEmptyClass()
class IllegalConstraint (CORBA.UserException):
    _NP_RepositoryId = "IDL:omg.org/CosTrading/IllegalConstraint:1.0"

    def __init__(self, constr):
        CORBA.UserException.__init__(self, constr)
        self.constr = constr

_0_CosTrading.IllegalConstraint = IllegalConstraint
_0_CosTrading._d_IllegalConstraint  = (omniORB.tcInternal.tv_except, IllegalConstraint, IllegalConstraint._NP_RepositoryId, "IllegalConstraint", "constr", omniORB.typeMapping["IDL:omg.org/CosTrading/Constraint:1.0"])
_0_CosTrading._tc_IllegalConstraint = omniORB.tcInternal.createTypeCode(_0_CosTrading._d_IllegalConstraint)
omniORB.registerType(IllegalConstraint._NP_RepositoryId, _0_CosTrading._d_IllegalConstraint, _0_CosTrading._tc_IllegalConstraint)
del IllegalConstraint

# exception InvalidLookupRef
_0_CosTrading.InvalidLookupRef = omniORB.newEmptyClass()
class InvalidLookupRef (CORBA.UserException):
    _NP_RepositoryId = "IDL:omg.org/CosTrading/InvalidLookupRef:1.0"

    def __init__(self, target):
        CORBA.UserException.__init__(self, target)
        self.target = target

_0_CosTrading.InvalidLookupRef = InvalidLookupRef
_0_CosTrading._d_InvalidLookupRef  = (omniORB.tcInternal.tv_except, InvalidLookupRef, InvalidLookupRef._NP_RepositoryId, "InvalidLookupRef", "target", omniORB.typeMapping["IDL:omg.org/CosTrading/Lookup:1.0"])
_0_CosTrading._tc_InvalidLookupRef = omniORB.tcInternal.createTypeCode(_0_CosTrading._d_InvalidLookupRef)
omniORB.registerType(InvalidLookupRef._NP_RepositoryId, _0_CosTrading._d_InvalidLookupRef, _0_CosTrading._tc_InvalidLookupRef)
del InvalidLookupRef

# exception IllegalOfferId
_0_CosTrading.IllegalOfferId = omniORB.newEmptyClass()
class IllegalOfferId (CORBA.UserException):
    _NP_RepositoryId = "IDL:omg.org/CosTrading/IllegalOfferId:1.0"

    def __init__(self, id):
        CORBA.UserException.__init__(self, id)
        self.id = id

_0_CosTrading.IllegalOfferId = IllegalOfferId
_0_CosTrading._d_IllegalOfferId  = (omniORB.tcInternal.tv_except, IllegalOfferId, IllegalOfferId._NP_RepositoryId, "IllegalOfferId", "id", omniORB.typeMapping["IDL:omg.org/CosTrading/OfferId:1.0"])
_0_CosTrading._tc_IllegalOfferId = omniORB.tcInternal.createTypeCode(_0_CosTrading._d_IllegalOfferId)
omniORB.registerType(IllegalOfferId._NP_RepositoryId, _0_CosTrading._d_IllegalOfferId, _0_CosTrading._tc_IllegalOfferId)
del IllegalOfferId

# exception UnknownOfferId
_0_CosTrading.UnknownOfferId = omniORB.newEmptyClass()
class UnknownOfferId (CORBA.UserException):
    _NP_RepositoryId = "IDL:omg.org/CosTrading/UnknownOfferId:1.0"

    def __init__(self, id):
        CORBA.UserException.__init__(self, id)
        self.id = id

_0_CosTrading.UnknownOfferId = UnknownOfferId
_0_CosTrading._d_UnknownOfferId  = (omniORB.tcInternal.tv_except, UnknownOfferId, UnknownOfferId._NP_RepositoryId, "UnknownOfferId", "id", omniORB.typeMapping["IDL:omg.org/CosTrading/OfferId:1.0"])
_0_CosTrading._tc_UnknownOfferId = omniORB.tcInternal.createTypeCode(_0_CosTrading._d_UnknownOfferId)
omniORB.registerType(UnknownOfferId._NP_RepositoryId, _0_CosTrading._d_UnknownOfferId, _0_CosTrading._tc_UnknownOfferId)
del UnknownOfferId

# exception DuplicatePolicyName
_0_CosTrading.DuplicatePolicyName = omniORB.newEmptyClass()
class DuplicatePolicyName (CORBA.UserException):
    _NP_RepositoryId = "IDL:omg.org/CosTrading/DuplicatePolicyName:1.0"

    def __init__(self, name):
        CORBA.UserException.__init__(self, name)
        self.name = name

_0_CosTrading.DuplicatePolicyName = DuplicatePolicyName
_0_CosTrading._d_DuplicatePolicyName  = (omniORB.tcInternal.tv_except, DuplicatePolicyName, DuplicatePolicyName._NP_RepositoryId, "DuplicatePolicyName", "name", omniORB.typeMapping["IDL:omg.org/CosTrading/PolicyName:1.0"])
_0_CosTrading._tc_DuplicatePolicyName = omniORB.tcInternal.createTypeCode(_0_CosTrading._d_DuplicatePolicyName)
omniORB.registerType(DuplicatePolicyName._NP_RepositoryId, _0_CosTrading._d_DuplicatePolicyName, _0_CosTrading._tc_DuplicatePolicyName)
del DuplicatePolicyName

# interface TraderComponents
_0_CosTrading._d_TraderComponents = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosTrading/TraderComponents:1.0", "TraderComponents")
omniORB.typeMapping["IDL:omg.org/CosTrading/TraderComponents:1.0"] = _0_CosTrading._d_TraderComponents
_0_CosTrading.TraderComponents = omniORB.newEmptyClass()
class TraderComponents :
    _NP_RepositoryId = _0_CosTrading._d_TraderComponents[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_CosTrading.TraderComponents = TraderComponents
_0_CosTrading._tc_TraderComponents = omniORB.tcInternal.createTypeCode(_0_CosTrading._d_TraderComponents)
omniORB.registerType(TraderComponents._NP_RepositoryId, _0_CosTrading._d_TraderComponents, _0_CosTrading._tc_TraderComponents)

# TraderComponents operations and attributes
TraderComponents._d__get_lookup_if = ((),(omniORB.typeMapping["IDL:omg.org/CosTrading/Lookup:1.0"],),None)
TraderComponents._d__get_register_if = ((),(omniORB.typeMapping["IDL:omg.org/CosTrading/Register:1.0"],),None)
TraderComponents._d__get_link_if = ((),(omniORB.typeMapping["IDL:omg.org/CosTrading/Link:1.0"],),None)
TraderComponents._d__get_proxy_if = ((),(omniORB.typeMapping["IDL:omg.org/CosTrading/Proxy:1.0"],),None)
TraderComponents._d__get_admin_if = ((),(omniORB.typeMapping["IDL:omg.org/CosTrading/Admin:1.0"],),None)

# TraderComponents object reference
class _objref_TraderComponents (CORBA.Object):
    _NP_RepositoryId = TraderComponents._NP_RepositoryId

    def __init__(self, obj):
        CORBA.Object.__init__(self, obj)

    def _get_lookup_if(self, *args):
        return self._obj.invoke("_get_lookup_if", _0_CosTrading.TraderComponents._d__get_lookup_if, args)

    lookup_if = property(_get_lookup_if)


    def _get_register_if(self, *args):
        return self._obj.invoke("_get_register_if", _0_CosTrading.TraderComponents._d__get_register_if, args)

    register_if = property(_get_register_if)


    def _get_link_if(self, *args):
        return self._obj.invoke("_get_link_if", _0_CosTrading.TraderComponents._d__get_link_if, args)

    link_if = property(_get_link_if)


    def _get_proxy_if(self, *args):
        return self._obj.invoke("_get_proxy_if", _0_CosTrading.TraderComponents._d__get_proxy_if, args)

    proxy_if = property(_get_proxy_if)


    def _get_admin_if(self, *args):
        return self._obj.invoke("_get_admin_if", _0_CosTrading.TraderComponents._d__get_admin_if, args)

    admin_if = property(_get_admin_if)


omniORB.registerObjref(TraderComponents._NP_RepositoryId, _objref_TraderComponents)
_0_CosTrading._objref_TraderComponents = _objref_TraderComponents
del TraderComponents, _objref_TraderComponents

# TraderComponents skeleton
__name__ = "CosTrading__POA"
class TraderComponents (PortableServer.Servant):
    _NP_RepositoryId = _0_CosTrading.TraderComponents._NP_RepositoryId


    _omni_op_d = {"_get_lookup_if": _0_CosTrading.TraderComponents._d__get_lookup_if, "_get_register_if": _0_CosTrading.TraderComponents._d__get_register_if, "_get_link_if": _0_CosTrading.TraderComponents._d__get_link_if, "_get_proxy_if": _0_CosTrading.TraderComponents._d__get_proxy_if, "_get_admin_if": _0_CosTrading.TraderComponents._d__get_admin_if}

TraderComponents._omni_skeleton = TraderComponents
_0_CosTrading__POA.TraderComponents = TraderComponents
omniORB.registerSkeleton(TraderComponents._NP_RepositoryId, TraderComponents)
del TraderComponents
__name__ = "CosTrading"

# interface SupportAttributes
_0_CosTrading._d_SupportAttributes = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosTrading/SupportAttributes:1.0", "SupportAttributes")
omniORB.typeMapping["IDL:omg.org/CosTrading/SupportAttributes:1.0"] = _0_CosTrading._d_SupportAttributes
_0_CosTrading.SupportAttributes = omniORB.newEmptyClass()
class SupportAttributes :
    _NP_RepositoryId = _0_CosTrading._d_SupportAttributes[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_CosTrading.SupportAttributes = SupportAttributes
_0_CosTrading._tc_SupportAttributes = omniORB.tcInternal.createTypeCode(_0_CosTrading._d_SupportAttributes)
omniORB.registerType(SupportAttributes._NP_RepositoryId, _0_CosTrading._d_SupportAttributes, _0_CosTrading._tc_SupportAttributes)

# SupportAttributes operations and attributes
SupportAttributes._d__get_supports_modifiable_properties = ((),(omniORB.tcInternal.tv_boolean,),None)
SupportAttributes._d__get_supports_dynamic_properties = ((),(omniORB.tcInternal.tv_boolean,),None)
SupportAttributes._d__get_supports_proxy_offers = ((),(omniORB.tcInternal.tv_boolean,),None)
SupportAttributes._d__get_type_repos = ((),(omniORB.typeMapping["IDL:omg.org/CosTrading/TypeRepository:1.0"],),None)

# SupportAttributes object reference
class _objref_SupportAttributes (CORBA.Object):
    _NP_RepositoryId = SupportAttributes._NP_RepositoryId

    def __init__(self, obj):
        CORBA.Object.__init__(self, obj)

    def _get_supports_modifiable_properties(self, *args):
        return self._obj.invoke("_get_supports_modifiable_properties", _0_CosTrading.SupportAttributes._d__get_supports_modifiable_properties, args)

    supports_modifiable_properties = property(_get_supports_modifiable_properties)


    def _get_supports_dynamic_properties(self, *args):
        return self._obj.invoke("_get_supports_dynamic_properties", _0_CosTrading.SupportAttributes._d__get_supports_dynamic_properties, args)

    supports_dynamic_properties = property(_get_supports_dynamic_properties)


    def _get_supports_proxy_offers(self, *args):
        return self._obj.invoke("_get_supports_proxy_offers", _0_CosTrading.SupportAttributes._d__get_supports_proxy_offers, args)

    supports_proxy_offers = property(_get_supports_proxy_offers)


    def _get_type_repos(self, *args):
        return self._obj.invoke("_get_type_repos", _0_CosTrading.SupportAttributes._d__get_type_repos, args)

    type_repos = property(_get_type_repos)


omniORB.registerObjref(SupportAttributes._NP_RepositoryId, _objref_SupportAttributes)
_0_CosTrading._objref_SupportAttributes = _objref_SupportAttributes
del SupportAttributes, _objref_SupportAttributes

# SupportAttributes skeleton
__name__ = "CosTrading__POA"
class SupportAttributes (PortableServer.Servant):
    _NP_RepositoryId = _0_CosTrading.SupportAttributes._NP_RepositoryId


    _omni_op_d = {"_get_supports_modifiable_properties": _0_CosTrading.SupportAttributes._d__get_supports_modifiable_properties, "_get_supports_dynamic_properties": _0_CosTrading.SupportAttributes._d__get_supports_dynamic_properties, "_get_supports_proxy_offers": _0_CosTrading.SupportAttributes._d__get_supports_proxy_offers, "_get_type_repos": _0_CosTrading.SupportAttributes._d__get_type_repos}

SupportAttributes._omni_skeleton = SupportAttributes
_0_CosTrading__POA.SupportAttributes = SupportAttributes
omniORB.registerSkeleton(SupportAttributes._NP_RepositoryId, SupportAttributes)
del SupportAttributes
__name__ = "CosTrading"

# interface ImportAttributes
_0_CosTrading._d_ImportAttributes = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosTrading/ImportAttributes:1.0", "ImportAttributes")
omniORB.typeMapping["IDL:omg.org/CosTrading/ImportAttributes:1.0"] = _0_CosTrading._d_ImportAttributes
_0_CosTrading.ImportAttributes = omniORB.newEmptyClass()
class ImportAttributes :
    _NP_RepositoryId = _0_CosTrading._d_ImportAttributes[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_CosTrading.ImportAttributes = ImportAttributes
_0_CosTrading._tc_ImportAttributes = omniORB.tcInternal.createTypeCode(_0_CosTrading._d_ImportAttributes)
omniORB.registerType(ImportAttributes._NP_RepositoryId, _0_CosTrading._d_ImportAttributes, _0_CosTrading._tc_ImportAttributes)

# ImportAttributes operations and attributes
ImportAttributes._d__get_def_search_card = ((),(omniORB.tcInternal.tv_ulong,),None)
ImportAttributes._d__get_max_search_card = ((),(omniORB.tcInternal.tv_ulong,),None)
ImportAttributes._d__get_def_match_card = ((),(omniORB.tcInternal.tv_ulong,),None)
ImportAttributes._d__get_max_match_card = ((),(omniORB.tcInternal.tv_ulong,),None)
ImportAttributes._d__get_def_return_card = ((),(omniORB.tcInternal.tv_ulong,),None)
ImportAttributes._d__get_max_return_card = ((),(omniORB.tcInternal.tv_ulong,),None)
ImportAttributes._d__get_max_list = ((),(omniORB.tcInternal.tv_ulong,),None)
ImportAttributes._d__get_def_hop_count = ((),(omniORB.tcInternal.tv_ulong,),None)
ImportAttributes._d__get_max_hop_count = ((),(omniORB.tcInternal.tv_ulong,),None)
ImportAttributes._d__get_def_follow_policy = ((),(omniORB.typeMapping["IDL:omg.org/CosTrading/FollowOption:1.0"],),None)
ImportAttributes._d__get_max_follow_policy = ((),(omniORB.typeMapping["IDL:omg.org/CosTrading/FollowOption:1.0"],),None)

# ImportAttributes object reference
class _objref_ImportAttributes (CORBA.Object):
    _NP_RepositoryId = ImportAttributes._NP_RepositoryId

    def __init__(self, obj):
        CORBA.Object.__init__(self, obj)

    def _get_def_search_card(self, *args):
        return self._obj.invoke("_get_def_search_card", _0_CosTrading.ImportAttributes._d__get_def_search_card, args)

    def_search_card = property(_get_def_search_card)


    def _get_max_search_card(self, *args):
        return self._obj.invoke("_get_max_search_card", _0_CosTrading.ImportAttributes._d__get_max_search_card, args)

    max_search_card = property(_get_max_search_card)


    def _get_def_match_card(self, *args):
        return self._obj.invoke("_get_def_match_card", _0_CosTrading.ImportAttributes._d__get_def_match_card, args)

    def_match_card = property(_get_def_match_card)


    def _get_max_match_card(self, *args):
        return self._obj.invoke("_get_max_match_card", _0_CosTrading.ImportAttributes._d__get_max_match_card, args)

    max_match_card = property(_get_max_match_card)


    def _get_def_return_card(self, *args):
        return self._obj.invoke("_get_def_return_card", _0_CosTrading.ImportAttributes._d__get_def_return_card, args)

    def_return_card = property(_get_def_return_card)


    def _get_max_return_card(self, *args):
        return self._obj.invoke("_get_max_return_card", _0_CosTrading.ImportAttributes._d__get_max_return_card, args)

    max_return_card = property(_get_max_return_card)


    def _get_max_list(self, *args):
        return self._obj.invoke("_get_max_list", _0_CosTrading.ImportAttributes._d__get_max_list, args)

    max_list = property(_get_max_list)


    def _get_def_hop_count(self, *args):
        return self._obj.invoke("_get_def_hop_count", _0_CosTrading.ImportAttributes._d__get_def_hop_count, args)

    def_hop_count = property(_get_def_hop_count)


    def _get_max_hop_count(self, *args):
        return self._obj.invoke("_get_max_hop_count", _0_CosTrading.ImportAttributes._d__get_max_hop_count, args)

    max_hop_count = property(_get_max_hop_count)


    def _get_def_follow_policy(self, *args):
        return self._obj.invoke("_get_def_follow_policy", _0_CosTrading.ImportAttributes._d__get_def_follow_policy, args)

    def_follow_policy = property(_get_def_follow_policy)


    def _get_max_follow_policy(self, *args):
        return self._obj.invoke("_get_max_follow_policy", _0_CosTrading.ImportAttributes._d__get_max_follow_policy, args)

    max_follow_policy = property(_get_max_follow_policy)


omniORB.registerObjref(ImportAttributes._NP_RepositoryId, _objref_ImportAttributes)
_0_CosTrading._objref_ImportAttributes = _objref_ImportAttributes
del ImportAttributes, _objref_ImportAttributes

# ImportAttributes skeleton
__name__ = "CosTrading__POA"
class ImportAttributes (PortableServer.Servant):
    _NP_RepositoryId = _0_CosTrading.ImportAttributes._NP_RepositoryId


    _omni_op_d = {"_get_def_search_card": _0_CosTrading.ImportAttributes._d__get_def_search_card, "_get_max_search_card": _0_CosTrading.ImportAttributes._d__get_max_search_card, "_get_def_match_card": _0_CosTrading.ImportAttributes._d__get_def_match_card, "_get_max_match_card": _0_CosTrading.ImportAttributes._d__get_max_match_card, "_get_def_return_card": _0_CosTrading.ImportAttributes._d__get_def_return_card, "_get_max_return_card": _0_CosTrading.ImportAttributes._d__get_max_return_card, "_get_max_list": _0_CosTrading.ImportAttributes._d__get_max_list, "_get_def_hop_count": _0_CosTrading.ImportAttributes._d__get_def_hop_count, "_get_max_hop_count": _0_CosTrading.ImportAttributes._d__get_max_hop_count, "_get_def_follow_policy": _0_CosTrading.ImportAttributes._d__get_def_follow_policy, "_get_max_follow_policy": _0_CosTrading.ImportAttributes._d__get_max_follow_policy}

ImportAttributes._omni_skeleton = ImportAttributes
_0_CosTrading__POA.ImportAttributes = ImportAttributes
omniORB.registerSkeleton(ImportAttributes._NP_RepositoryId, ImportAttributes)
del ImportAttributes
__name__ = "CosTrading"

# interface LinkAttributes
_0_CosTrading._d_LinkAttributes = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosTrading/LinkAttributes:1.0", "LinkAttributes")
omniORB.typeMapping["IDL:omg.org/CosTrading/LinkAttributes:1.0"] = _0_CosTrading._d_LinkAttributes
_0_CosTrading.LinkAttributes = omniORB.newEmptyClass()
class LinkAttributes :
    _NP_RepositoryId = _0_CosTrading._d_LinkAttributes[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_CosTrading.LinkAttributes = LinkAttributes
_0_CosTrading._tc_LinkAttributes = omniORB.tcInternal.createTypeCode(_0_CosTrading._d_LinkAttributes)
omniORB.registerType(LinkAttributes._NP_RepositoryId, _0_CosTrading._d_LinkAttributes, _0_CosTrading._tc_LinkAttributes)

# LinkAttributes operations and attributes
LinkAttributes._d__get_max_link_follow_policy = ((),(omniORB.typeMapping["IDL:omg.org/CosTrading/FollowOption:1.0"],),None)

# LinkAttributes object reference
class _objref_LinkAttributes (CORBA.Object):
    _NP_RepositoryId = LinkAttributes._NP_RepositoryId

    def __init__(self, obj):
        CORBA.Object.__init__(self, obj)

    def _get_max_link_follow_policy(self, *args):
        return self._obj.invoke("_get_max_link_follow_policy", _0_CosTrading.LinkAttributes._d__get_max_link_follow_policy, args)

    max_link_follow_policy = property(_get_max_link_follow_policy)


omniORB.registerObjref(LinkAttributes._NP_RepositoryId, _objref_LinkAttributes)
_0_CosTrading._objref_LinkAttributes = _objref_LinkAttributes
del LinkAttributes, _objref_LinkAttributes

# LinkAttributes skeleton
__name__ = "CosTrading__POA"
class LinkAttributes (PortableServer.Servant):
    _NP_RepositoryId = _0_CosTrading.LinkAttributes._NP_RepositoryId


    _omni_op_d = {"_get_max_link_follow_policy": _0_CosTrading.LinkAttributes._d__get_max_link_follow_policy}

LinkAttributes._omni_skeleton = LinkAttributes
_0_CosTrading__POA.LinkAttributes = LinkAttributes
omniORB.registerSkeleton(LinkAttributes._NP_RepositoryId, LinkAttributes)
del LinkAttributes
__name__ = "CosTrading"

# interface Lookup
_0_CosTrading._d_Lookup = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosTrading/Lookup:1.0", "Lookup")
omniORB.typeMapping["IDL:omg.org/CosTrading/Lookup:1.0"] = _0_CosTrading._d_Lookup
_0_CosTrading.Lookup = omniORB.newEmptyClass()
class Lookup (_0_CosTrading.TraderComponents, _0_CosTrading.SupportAttributes, _0_CosTrading.ImportAttributes):
    _NP_RepositoryId = _0_CosTrading._d_Lookup[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil

    
    # typedef ... Preference
    class Preference:
        _NP_RepositoryId = "IDL:omg.org/CosTrading/Lookup/Preference:1.0"
        def __init__(self, *args, **kw):
            raise RuntimeError("Cannot construct objects of this type.")
    _d_Preference  = omniORB.typeMapping["IDL:omg.org/CosTrading/Istring:1.0"]
    _ad_Preference = (omniORB.tcInternal.tv_alias, Preference._NP_RepositoryId, "Preference", omniORB.typeCodeMapping["IDL:omg.org/CosTrading/Istring:1.0"]._d)
    _tc_Preference = omniORB.tcInternal.createTypeCode(_ad_Preference)
    omniORB.registerType(Preference._NP_RepositoryId, _ad_Preference, _tc_Preference)
    
    # enum HowManyProps
    none = omniORB.EnumItem("none", 0)
    some = omniORB.EnumItem("some", 1)
    all = omniORB.EnumItem("all", 2)
    HowManyProps = omniORB.Enum("IDL:omg.org/CosTrading/Lookup/HowManyProps:1.0", (none, some, all,))

    _d_HowManyProps  = (omniORB.tcInternal.tv_enum, HowManyProps._NP_RepositoryId, "HowManyProps", HowManyProps._items)
    _tc_HowManyProps = omniORB.tcInternal.createTypeCode(_d_HowManyProps)
    omniORB.registerType(HowManyProps._NP_RepositoryId, _d_HowManyProps, _tc_HowManyProps)
    
    # union SpecifiedProps
    _0_CosTrading.Lookup.SpecifiedProps = omniORB.newEmptyClass()
    class SpecifiedProps (omniORB.Union):
        _NP_RepositoryId = "IDL:omg.org/CosTrading/Lookup/SpecifiedProps:1.0"
        _NP_ClassName = "CosTrading.Lookup.SpecifiedProps"

    
    SpecifiedProps._m_to_d = {"prop_names": some}
    SpecifiedProps._d_to_m = {some: "prop_names"}
    SpecifiedProps._def_m  = None
    SpecifiedProps._def_d  = None

    _m_SpecifiedProps  = ((some, "prop_names", omniORB.typeMapping["IDL:omg.org/CosTrading/PropertyNameSeq:1.0"]),)
    _d_SpecifiedProps  = _0_CosTrading.Lookup._d_SpecifiedProps = (omniORB.tcInternal.tv_union, SpecifiedProps, SpecifiedProps._NP_RepositoryId, "SpecifiedProps", omniORB.typeMapping["IDL:omg.org/CosTrading/Lookup/HowManyProps:1.0"], -1, _m_SpecifiedProps, None, {some: _m_SpecifiedProps[0]})
    _tc_SpecifiedProps = omniORB.tcInternal.createTypeCode(_d_SpecifiedProps)
    omniORB.registerType(SpecifiedProps._NP_RepositoryId, _d_SpecifiedProps, _tc_SpecifiedProps)
    
    # exception IllegalPreference
    _0_CosTrading.Lookup.IllegalPreference = omniORB.newEmptyClass()
    class IllegalPreference (CORBA.UserException):
        _NP_RepositoryId = "IDL:omg.org/CosTrading/Lookup/IllegalPreference:1.0"

        _NP_ClassName = "CosTrading.Lookup.IllegalPreference"

        def __init__(self, pref):
            CORBA.UserException.__init__(self, pref)
            self.pref = pref
    
    _d_IllegalPreference  = (omniORB.tcInternal.tv_except, IllegalPreference, IllegalPreference._NP_RepositoryId, "IllegalPreference", "pref", omniORB.typeMapping["IDL:omg.org/CosTrading/Lookup/Preference:1.0"])
    _tc_IllegalPreference = omniORB.tcInternal.createTypeCode(_d_IllegalPreference)
    omniORB.registerType(IllegalPreference._NP_RepositoryId, _d_IllegalPreference, _tc_IllegalPreference)
    
    # exception IllegalPolicyName
    _0_CosTrading.Lookup.IllegalPolicyName = omniORB.newEmptyClass()
    class IllegalPolicyName (CORBA.UserException):
        _NP_RepositoryId = "IDL:omg.org/CosTrading/Lookup/IllegalPolicyName:1.0"

        _NP_ClassName = "CosTrading.Lookup.IllegalPolicyName"

        def __init__(self, name):
            CORBA.UserException.__init__(self, name)
            self.name = name
    
    _d_IllegalPolicyName  = (omniORB.tcInternal.tv_except, IllegalPolicyName, IllegalPolicyName._NP_RepositoryId, "IllegalPolicyName", "name", omniORB.typeMapping["IDL:omg.org/CosTrading/PolicyName:1.0"])
    _tc_IllegalPolicyName = omniORB.tcInternal.createTypeCode(_d_IllegalPolicyName)
    omniORB.registerType(IllegalPolicyName._NP_RepositoryId, _d_IllegalPolicyName, _tc_IllegalPolicyName)
    
    # exception PolicyTypeMismatch
    _0_CosTrading.Lookup.PolicyTypeMismatch = omniORB.newEmptyClass()
    class PolicyTypeMismatch (CORBA.UserException):
        _NP_RepositoryId = "IDL:omg.org/CosTrading/Lookup/PolicyTypeMismatch:1.0"

        _NP_ClassName = "CosTrading.Lookup.PolicyTypeMismatch"

        def __init__(self, the_policy):
            CORBA.UserException.__init__(self, the_policy)
            self.the_policy = the_policy
    
    _d_PolicyTypeMismatch  = (omniORB.tcInternal.tv_except, PolicyTypeMismatch, PolicyTypeMismatch._NP_RepositoryId, "PolicyTypeMismatch", "the_policy", omniORB.typeMapping["IDL:omg.org/CosTrading/Policy:1.0"])
    _tc_PolicyTypeMismatch = omniORB.tcInternal.createTypeCode(_d_PolicyTypeMismatch)
    omniORB.registerType(PolicyTypeMismatch._NP_RepositoryId, _d_PolicyTypeMismatch, _tc_PolicyTypeMismatch)
    
    # exception InvalidPolicyValue
    _0_CosTrading.Lookup.InvalidPolicyValue = omniORB.newEmptyClass()
    class InvalidPolicyValue (CORBA.UserException):
        _NP_RepositoryId = "IDL:omg.org/CosTrading/Lookup/InvalidPolicyValue:1.0"

        _NP_ClassName = "CosTrading.Lookup.InvalidPolicyValue"

        def __init__(self, the_policy):
            CORBA.UserException.__init__(self, the_policy)
            self.the_policy = the_policy
    
    _d_InvalidPolicyValue  = (omniORB.tcInternal.tv_except, InvalidPolicyValue, InvalidPolicyValue._NP_RepositoryId, "InvalidPolicyValue", "the_policy", omniORB.typeMapping["IDL:omg.org/CosTrading/Policy:1.0"])
    _tc_InvalidPolicyValue = omniORB.tcInternal.createTypeCode(_d_InvalidPolicyValue)
    omniORB.registerType(InvalidPolicyValue._NP_RepositoryId, _d_InvalidPolicyValue, _tc_InvalidPolicyValue)


_0_CosTrading.Lookup = Lookup
_0_CosTrading._tc_Lookup = omniORB.tcInternal.createTypeCode(_0_CosTrading._d_Lookup)
omniORB.registerType(Lookup._NP_RepositoryId, _0_CosTrading._d_Lookup, _0_CosTrading._tc_Lookup)

# Lookup operations and attributes
Lookup._d_query = ((omniORB.typeMapping["IDL:omg.org/CosTrading/ServiceTypeName:1.0"], omniORB.typeMapping["IDL:omg.org/CosTrading/Constraint:1.0"], omniORB.typeMapping["IDL:omg.org/CosTrading/Lookup/Preference:1.0"], omniORB.typeMapping["IDL:omg.org/CosTrading/PolicySeq:1.0"], omniORB.typeMapping["IDL:omg.org/CosTrading/Lookup/SpecifiedProps:1.0"], omniORB.tcInternal.tv_ulong), (omniORB.typeMapping["IDL:omg.org/CosTrading/OfferSeq:1.0"], omniORB.typeMapping["IDL:omg.org/CosTrading/OfferIterator:1.0"], omniORB.typeMapping["IDL:omg.org/CosTrading/PolicyNameSeq:1.0"]), {_0_CosTrading.IllegalServiceType._NP_RepositoryId: _0_CosTrading._d_IllegalServiceType, _0_CosTrading.UnknownServiceType._NP_RepositoryId: _0_CosTrading._d_UnknownServiceType, _0_CosTrading.IllegalConstraint._NP_RepositoryId: _0_CosTrading._d_IllegalConstraint, _0_CosTrading.Lookup.IllegalPreference._NP_RepositoryId: _0_CosTrading.Lookup._d_IllegalPreference, _0_CosTrading.Lookup.IllegalPolicyName._NP_RepositoryId: _0_CosTrading.Lookup._d_IllegalPolicyName, _0_CosTrading.Lookup.PolicyTypeMismatch._NP_RepositoryId: _0_CosTrading.Lookup._d_PolicyTypeMismatch, _0_CosTrading.Lookup.InvalidPolicyValue._NP_RepositoryId: _0_CosTrading.Lookup._d_InvalidPolicyValue, _0_CosTrading.IllegalPropertyName._NP_RepositoryId: _0_CosTrading._d_IllegalPropertyName, _0_CosTrading.DuplicatePropertyName._NP_RepositoryId: _0_CosTrading._d_DuplicatePropertyName, _0_CosTrading.DuplicatePolicyName._NP_RepositoryId: _0_CosTrading._d_DuplicatePolicyName})

# Lookup object reference
class _objref_Lookup (_0_CosTrading._objref_TraderComponents, _0_CosTrading._objref_SupportAttributes, _0_CosTrading._objref_ImportAttributes):
    _NP_RepositoryId = Lookup._NP_RepositoryId

    def __init__(self, obj):
        _0_CosTrading._objref_TraderComponents.__init__(self, obj)
        _0_CosTrading._objref_SupportAttributes.__init__(self, obj)
        _0_CosTrading._objref_ImportAttributes.__init__(self, obj)

    def query(self, *args):
        return self._obj.invoke("query", _0_CosTrading.Lookup._d_query, args)

omniORB.registerObjref(Lookup._NP_RepositoryId, _objref_Lookup)
_0_CosTrading._objref_Lookup = _objref_Lookup
del Lookup, _objref_Lookup

# Lookup skeleton
__name__ = "CosTrading__POA"
class Lookup (_0_CosTrading__POA.TraderComponents, _0_CosTrading__POA.SupportAttributes, _0_CosTrading__POA.ImportAttributes):
    _NP_RepositoryId = _0_CosTrading.Lookup._NP_RepositoryId


    _omni_op_d = {"query": _0_CosTrading.Lookup._d_query}
    _omni_op_d.update(_0_CosTrading__POA.TraderComponents._omni_op_d)
    _omni_op_d.update(_0_CosTrading__POA.SupportAttributes._omni_op_d)
    _omni_op_d.update(_0_CosTrading__POA.ImportAttributes._omni_op_d)

Lookup._omni_skeleton = Lookup
_0_CosTrading__POA.Lookup = Lookup
omniORB.registerSkeleton(Lookup._NP_RepositoryId, Lookup)
del Lookup
__name__ = "CosTrading"

# interface Register
_0_CosTrading._d_Register = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosTrading/Register:1.0", "Register")
omniORB.typeMapping["IDL:omg.org/CosTrading/Register:1.0"] = _0_CosTrading._d_Register
_0_CosTrading.Register = omniORB.newEmptyClass()
class Register (_0_CosTrading.TraderComponents, _0_CosTrading.SupportAttributes):
    _NP_RepositoryId = _0_CosTrading._d_Register[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil

    
    # struct OfferInfo
    _0_CosTrading.Register.OfferInfo = omniORB.newEmptyClass()
    class OfferInfo (omniORB.StructBase):
        _NP_RepositoryId = "IDL:omg.org/CosTrading/Register/OfferInfo:1.0"

        _NP_ClassName = "CosTrading.Register.OfferInfo"

        def __init__(self, reference, type, properties):
            self.reference = reference
            self.type = type
            self.properties = properties
    
    _d_OfferInfo  = _0_CosTrading.Register._d_OfferInfo = (omniORB.tcInternal.tv_struct, OfferInfo, OfferInfo._NP_RepositoryId, "OfferInfo", "reference", omniORB.typeMapping["IDL:omg.org/CORBA/Object:1.0"], "type", omniORB.typeMapping["IDL:omg.org/CosTrading/ServiceTypeName:1.0"], "properties", omniORB.typeMapping["IDL:omg.org/CosTrading/PropertySeq:1.0"])
    _tc_OfferInfo = omniORB.tcInternal.createTypeCode(_d_OfferInfo)
    omniORB.registerType(OfferInfo._NP_RepositoryId, _d_OfferInfo, _tc_OfferInfo)
    
    # exception InvalidObjectRef
    _0_CosTrading.Register.InvalidObjectRef = omniORB.newEmptyClass()
    class InvalidObjectRef (CORBA.UserException):
        _NP_RepositoryId = "IDL:omg.org/CosTrading/Register/InvalidObjectRef:1.0"

        _NP_ClassName = "CosTrading.Register.InvalidObjectRef"

        def __init__(self, ref):
            CORBA.UserException.__init__(self, ref)
            self.ref = ref
    
    _d_InvalidObjectRef  = (omniORB.tcInternal.tv_except, InvalidObjectRef, InvalidObjectRef._NP_RepositoryId, "InvalidObjectRef", "ref", omniORB.typeMapping["IDL:omg.org/CORBA/Object:1.0"])
    _tc_InvalidObjectRef = omniORB.tcInternal.createTypeCode(_d_InvalidObjectRef)
    omniORB.registerType(InvalidObjectRef._NP_RepositoryId, _d_InvalidObjectRef, _tc_InvalidObjectRef)
    
    # exception UnknownPropertyName
    _0_CosTrading.Register.UnknownPropertyName = omniORB.newEmptyClass()
    class UnknownPropertyName (CORBA.UserException):
        _NP_RepositoryId = "IDL:omg.org/CosTrading/Register/UnknownPropertyName:1.0"

        _NP_ClassName = "CosTrading.Register.UnknownPropertyName"

        def __init__(self, name):
            CORBA.UserException.__init__(self, name)
            self.name = name
    
    _d_UnknownPropertyName  = (omniORB.tcInternal.tv_except, UnknownPropertyName, UnknownPropertyName._NP_RepositoryId, "UnknownPropertyName", "name", omniORB.typeMapping["IDL:omg.org/CosTrading/PropertyName:1.0"])
    _tc_UnknownPropertyName = omniORB.tcInternal.createTypeCode(_d_UnknownPropertyName)
    omniORB.registerType(UnknownPropertyName._NP_RepositoryId, _d_UnknownPropertyName, _tc_UnknownPropertyName)
    
    # exception InterfaceTypeMismatch
    _0_CosTrading.Register.InterfaceTypeMismatch = omniORB.newEmptyClass()
    class InterfaceTypeMismatch (CORBA.UserException):
        _NP_RepositoryId = "IDL:omg.org/CosTrading/Register/InterfaceTypeMismatch:1.0"

        _NP_ClassName = "CosTrading.Register.InterfaceTypeMismatch"

        def __init__(self, type, reference):
            CORBA.UserException.__init__(self, type, reference)
            self.type = type
            self.reference = reference
    
    _d_InterfaceTypeMismatch  = (omniORB.tcInternal.tv_except, InterfaceTypeMismatch, InterfaceTypeMismatch._NP_RepositoryId, "InterfaceTypeMismatch", "type", omniORB.typeMapping["IDL:omg.org/CosTrading/ServiceTypeName:1.0"], "reference", omniORB.typeMapping["IDL:omg.org/CORBA/Object:1.0"])
    _tc_InterfaceTypeMismatch = omniORB.tcInternal.createTypeCode(_d_InterfaceTypeMismatch)
    omniORB.registerType(InterfaceTypeMismatch._NP_RepositoryId, _d_InterfaceTypeMismatch, _tc_InterfaceTypeMismatch)
    
    # exception ProxyOfferId
    _0_CosTrading.Register.ProxyOfferId = omniORB.newEmptyClass()
    class ProxyOfferId (CORBA.UserException):
        _NP_RepositoryId = "IDL:omg.org/CosTrading/Register/ProxyOfferId:1.0"

        _NP_ClassName = "CosTrading.Register.ProxyOfferId"

        def __init__(self, id):
            CORBA.UserException.__init__(self, id)
            self.id = id
    
    _d_ProxyOfferId  = (omniORB.tcInternal.tv_except, ProxyOfferId, ProxyOfferId._NP_RepositoryId, "ProxyOfferId", "id", omniORB.typeMapping["IDL:omg.org/CosTrading/OfferId:1.0"])
    _tc_ProxyOfferId = omniORB.tcInternal.createTypeCode(_d_ProxyOfferId)
    omniORB.registerType(ProxyOfferId._NP_RepositoryId, _d_ProxyOfferId, _tc_ProxyOfferId)
    
    # exception MandatoryProperty
    _0_CosTrading.Register.MandatoryProperty = omniORB.newEmptyClass()
    class MandatoryProperty (CORBA.UserException):
        _NP_RepositoryId = "IDL:omg.org/CosTrading/Register/MandatoryProperty:1.0"

        _NP_ClassName = "CosTrading.Register.MandatoryProperty"

        def __init__(self, type, name):
            CORBA.UserException.__init__(self, type, name)
            self.type = type
            self.name = name
    
    _d_MandatoryProperty  = (omniORB.tcInternal.tv_except, MandatoryProperty, MandatoryProperty._NP_RepositoryId, "MandatoryProperty", "type", omniORB.typeMapping["IDL:omg.org/CosTrading/ServiceTypeName:1.0"], "name", omniORB.typeMapping["IDL:omg.org/CosTrading/PropertyName:1.0"])
    _tc_MandatoryProperty = omniORB.tcInternal.createTypeCode(_d_MandatoryProperty)
    omniORB.registerType(MandatoryProperty._NP_RepositoryId, _d_MandatoryProperty, _tc_MandatoryProperty)
    
    # exception ReadonlyProperty
    _0_CosTrading.Register.ReadonlyProperty = omniORB.newEmptyClass()
    class ReadonlyProperty (CORBA.UserException):
        _NP_RepositoryId = "IDL:omg.org/CosTrading/Register/ReadonlyProperty:1.0"

        _NP_ClassName = "CosTrading.Register.ReadonlyProperty"

        def __init__(self, type, name):
            CORBA.UserException.__init__(self, type, name)
            self.type = type
            self.name = name
    
    _d_ReadonlyProperty  = (omniORB.tcInternal.tv_except, ReadonlyProperty, ReadonlyProperty._NP_RepositoryId, "ReadonlyProperty", "type", omniORB.typeMapping["IDL:omg.org/CosTrading/ServiceTypeName:1.0"], "name", omniORB.typeMapping["IDL:omg.org/CosTrading/PropertyName:1.0"])
    _tc_ReadonlyProperty = omniORB.tcInternal.createTypeCode(_d_ReadonlyProperty)
    omniORB.registerType(ReadonlyProperty._NP_RepositoryId, _d_ReadonlyProperty, _tc_ReadonlyProperty)
    
    # exception NoMatchingOffers
    _0_CosTrading.Register.NoMatchingOffers = omniORB.newEmptyClass()
    class NoMatchingOffers (CORBA.UserException):
        _NP_RepositoryId = "IDL:omg.org/CosTrading/Register/NoMatchingOffers:1.0"

        _NP_ClassName = "CosTrading.Register.NoMatchingOffers"

        def __init__(self, constr):
            CORBA.UserException.__init__(self, constr)
            self.constr = constr
    
    _d_NoMatchingOffers  = (omniORB.tcInternal.tv_except, NoMatchingOffers, NoMatchingOffers._NP_RepositoryId, "NoMatchingOffers", "constr", omniORB.typeMapping["IDL:omg.org/CosTrading/Constraint:1.0"])
    _tc_NoMatchingOffers = omniORB.tcInternal.createTypeCode(_d_NoMatchingOffers)
    omniORB.registerType(NoMatchingOffers._NP_RepositoryId, _d_NoMatchingOffers, _tc_NoMatchingOffers)
    
    # exception IllegalTraderName
    _0_CosTrading.Register.IllegalTraderName = omniORB.newEmptyClass()
    class IllegalTraderName (CORBA.UserException):
        _NP_RepositoryId = "IDL:omg.org/CosTrading/Register/IllegalTraderName:1.0"

        _NP_ClassName = "CosTrading.Register.IllegalTraderName"

        def __init__(self, name):
            CORBA.UserException.__init__(self, name)
            self.name = name
    
    _d_IllegalTraderName  = (omniORB.tcInternal.tv_except, IllegalTraderName, IllegalTraderName._NP_RepositoryId, "IllegalTraderName", "name", omniORB.typeMapping["IDL:omg.org/CosTrading/TraderName:1.0"])
    _tc_IllegalTraderName = omniORB.tcInternal.createTypeCode(_d_IllegalTraderName)
    omniORB.registerType(IllegalTraderName._NP_RepositoryId, _d_IllegalTraderName, _tc_IllegalTraderName)
    
    # exception UnknownTraderName
    _0_CosTrading.Register.UnknownTraderName = omniORB.newEmptyClass()
    class UnknownTraderName (CORBA.UserException):
        _NP_RepositoryId = "IDL:omg.org/CosTrading/Register/UnknownTraderName:1.0"

        _NP_ClassName = "CosTrading.Register.UnknownTraderName"

        def __init__(self, name):
            CORBA.UserException.__init__(self, name)
            self.name = name
    
    _d_UnknownTraderName  = (omniORB.tcInternal.tv_except, UnknownTraderName, UnknownTraderName._NP_RepositoryId, "UnknownTraderName", "name", omniORB.typeMapping["IDL:omg.org/CosTrading/TraderName:1.0"])
    _tc_UnknownTraderName = omniORB.tcInternal.createTypeCode(_d_UnknownTraderName)
    omniORB.registerType(UnknownTraderName._NP_RepositoryId, _d_UnknownTraderName, _tc_UnknownTraderName)
    
    # exception RegisterNotSupported
    _0_CosTrading.Register.RegisterNotSupported = omniORB.newEmptyClass()
    class RegisterNotSupported (CORBA.UserException):
        _NP_RepositoryId = "IDL:omg.org/CosTrading/Register/RegisterNotSupported:1.0"

        _NP_ClassName = "CosTrading.Register.RegisterNotSupported"

        def __init__(self, name):
            CORBA.UserException.__init__(self, name)
            self.name = name
    
    _d_RegisterNotSupported  = (omniORB.tcInternal.tv_except, RegisterNotSupported, RegisterNotSupported._NP_RepositoryId, "RegisterNotSupported", "name", omniORB.typeMapping["IDL:omg.org/CosTrading/TraderName:1.0"])
    _tc_RegisterNotSupported = omniORB.tcInternal.createTypeCode(_d_RegisterNotSupported)
    omniORB.registerType(RegisterNotSupported._NP_RepositoryId, _d_RegisterNotSupported, _tc_RegisterNotSupported)


_0_CosTrading.Register = Register
_0_CosTrading._tc_Register = omniORB.tcInternal.createTypeCode(_0_CosTrading._d_Register)
omniORB.registerType(Register._NP_RepositoryId, _0_CosTrading._d_Register, _0_CosTrading._tc_Register)

# Register operations and attributes
Register._d_export = ((omniORB.typeMapping["IDL:omg.org/CORBA/Object:1.0"], omniORB.typeMapping["IDL:omg.org/CosTrading/ServiceTypeName:1.0"], omniORB.typeMapping["IDL:omg.org/CosTrading/PropertySeq:1.0"]), (omniORB.typeMapping["IDL:omg.org/CosTrading/OfferId:1.0"], ), {_0_CosTrading.Register.InvalidObjectRef._NP_RepositoryId: _0_CosTrading.Register._d_InvalidObjectRef, _0_CosTrading.IllegalServiceType._NP_RepositoryId: _0_CosTrading._d_IllegalServiceType, _0_CosTrading.UnknownServiceType._NP_RepositoryId: _0_CosTrading._d_UnknownServiceType, _0_CosTrading.Register.InterfaceTypeMismatch._NP_RepositoryId: _0_CosTrading.Register._d_InterfaceTypeMismatch, _0_CosTrading.IllegalPropertyName._NP_RepositoryId: _0_CosTrading._d_IllegalPropertyName, _0_CosTrading.PropertyTypeMismatch._NP_RepositoryId: _0_CosTrading._d_PropertyTypeMismatch, _0_CosTrading.ReadonlyDynamicProperty._NP_RepositoryId: _0_CosTrading._d_ReadonlyDynamicProperty, _0_CosTrading.MissingMandatoryProperty._NP_RepositoryId: _0_CosTrading._d_MissingMandatoryProperty, _0_CosTrading.DuplicatePropertyName._NP_RepositoryId: _0_CosTrading._d_DuplicatePropertyName})
Register._d_withdraw = ((omniORB.typeMapping["IDL:omg.org/CosTrading/OfferId:1.0"], ), (), {_0_CosTrading.IllegalOfferId._NP_RepositoryId: _0_CosTrading._d_IllegalOfferId, _0_CosTrading.UnknownOfferId._NP_RepositoryId: _0_CosTrading._d_UnknownOfferId, _0_CosTrading.Register.ProxyOfferId._NP_RepositoryId: _0_CosTrading.Register._d_ProxyOfferId})
Register._d_describe = ((omniORB.typeMapping["IDL:omg.org/CosTrading/OfferId:1.0"], ), (omniORB.typeMapping["IDL:omg.org/CosTrading/Register/OfferInfo:1.0"], ), {_0_CosTrading.IllegalOfferId._NP_RepositoryId: _0_CosTrading._d_IllegalOfferId, _0_CosTrading.UnknownOfferId._NP_RepositoryId: _0_CosTrading._d_UnknownOfferId, _0_CosTrading.Register.ProxyOfferId._NP_RepositoryId: _0_CosTrading.Register._d_ProxyOfferId})
Register._d_modify = ((omniORB.typeMapping["IDL:omg.org/CosTrading/OfferId:1.0"], omniORB.typeMapping["IDL:omg.org/CosTrading/PropertyNameSeq:1.0"], omniORB.typeMapping["IDL:omg.org/CosTrading/PropertySeq:1.0"]), (), {_0_CosTrading.NotImplemented._NP_RepositoryId: _0_CosTrading._d_NotImplemented, _0_CosTrading.IllegalOfferId._NP_RepositoryId: _0_CosTrading._d_IllegalOfferId, _0_CosTrading.UnknownOfferId._NP_RepositoryId: _0_CosTrading._d_UnknownOfferId, _0_CosTrading.Register.ProxyOfferId._NP_RepositoryId: _0_CosTrading.Register._d_ProxyOfferId, _0_CosTrading.IllegalPropertyName._NP_RepositoryId: _0_CosTrading._d_IllegalPropertyName, _0_CosTrading.Register.UnknownPropertyName._NP_RepositoryId: _0_CosTrading.Register._d_UnknownPropertyName, _0_CosTrading.PropertyTypeMismatch._NP_RepositoryId: _0_CosTrading._d_PropertyTypeMismatch, _0_CosTrading.ReadonlyDynamicProperty._NP_RepositoryId: _0_CosTrading._d_ReadonlyDynamicProperty, _0_CosTrading.Register.MandatoryProperty._NP_RepositoryId: _0_CosTrading.Register._d_MandatoryProperty, _0_CosTrading.Register.ReadonlyProperty._NP_RepositoryId: _0_CosTrading.Register._d_ReadonlyProperty, _0_CosTrading.DuplicatePropertyName._NP_RepositoryId: _0_CosTrading._d_DuplicatePropertyName})
Register._d_withdraw_using_constraint = ((omniORB.typeMapping["IDL:omg.org/CosTrading/ServiceTypeName:1.0"], omniORB.typeMapping["IDL:omg.org/CosTrading/Constraint:1.0"]), (), {_0_CosTrading.IllegalServiceType._NP_RepositoryId: _0_CosTrading._d_IllegalServiceType, _0_CosTrading.UnknownServiceType._NP_RepositoryId: _0_CosTrading._d_UnknownServiceType, _0_CosTrading.IllegalConstraint._NP_RepositoryId: _0_CosTrading._d_IllegalConstraint, _0_CosTrading.Register.NoMatchingOffers._NP_RepositoryId: _0_CosTrading.Register._d_NoMatchingOffers})
Register._d_resolve = ((omniORB.typeMapping["IDL:omg.org/CosTrading/TraderName:1.0"], ), (omniORB.typeMapping["IDL:omg.org/CosTrading/Register:1.0"], ), {_0_CosTrading.Register.IllegalTraderName._NP_RepositoryId: _0_CosTrading.Register._d_IllegalTraderName, _0_CosTrading.Register.UnknownTraderName._NP_RepositoryId: _0_CosTrading.Register._d_UnknownTraderName, _0_CosTrading.Register.RegisterNotSupported._NP_RepositoryId: _0_CosTrading.Register._d_RegisterNotSupported})

# Register object reference
class _objref_Register (_0_CosTrading._objref_TraderComponents, _0_CosTrading._objref_SupportAttributes):
    _NP_RepositoryId = Register._NP_RepositoryId

    def __init__(self, obj):
        _0_CosTrading._objref_TraderComponents.__init__(self, obj)
        _0_CosTrading._objref_SupportAttributes.__init__(self, obj)

    def export(self, *args):
        return self._obj.invoke("export", _0_CosTrading.Register._d_export, args)

    def withdraw(self, *args):
        return self._obj.invoke("withdraw", _0_CosTrading.Register._d_withdraw, args)

    def describe(self, *args):
        return self._obj.invoke("describe", _0_CosTrading.Register._d_describe, args)

    def modify(self, *args):
        return self._obj.invoke("modify", _0_CosTrading.Register._d_modify, args)

    def withdraw_using_constraint(self, *args):
        return self._obj.invoke("withdraw_using_constraint", _0_CosTrading.Register._d_withdraw_using_constraint, args)

    def resolve(self, *args):
        return self._obj.invoke("resolve", _0_CosTrading.Register._d_resolve, args)

omniORB.registerObjref(Register._NP_RepositoryId, _objref_Register)
_0_CosTrading._objref_Register = _objref_Register
del Register, _objref_Register

# Register skeleton
__name__ = "CosTrading__POA"
class Register (_0_CosTrading__POA.TraderComponents, _0_CosTrading__POA.SupportAttributes):
    _NP_RepositoryId = _0_CosTrading.Register._NP_RepositoryId


    _omni_op_d = {"export": _0_CosTrading.Register._d_export, "withdraw": _0_CosTrading.Register._d_withdraw, "describe": _0_CosTrading.Register._d_describe, "modify": _0_CosTrading.Register._d_modify, "withdraw_using_constraint": _0_CosTrading.Register._d_withdraw_using_constraint, "resolve": _0_CosTrading.Register._d_resolve}
    _omni_op_d.update(_0_CosTrading__POA.TraderComponents._omni_op_d)
    _omni_op_d.update(_0_CosTrading__POA.SupportAttributes._omni_op_d)

Register._omni_skeleton = Register
_0_CosTrading__POA.Register = Register
omniORB.registerSkeleton(Register._NP_RepositoryId, Register)
del Register
__name__ = "CosTrading"

# interface Link
_0_CosTrading._d_Link = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosTrading/Link:1.0", "Link")
omniORB.typeMapping["IDL:omg.org/CosTrading/Link:1.0"] = _0_CosTrading._d_Link
_0_CosTrading.Link = omniORB.newEmptyClass()
class Link (_0_CosTrading.TraderComponents, _0_CosTrading.SupportAttributes, _0_CosTrading.LinkAttributes):
    _NP_RepositoryId = _0_CosTrading._d_Link[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil

    
    # struct LinkInfo
    _0_CosTrading.Link.LinkInfo = omniORB.newEmptyClass()
    class LinkInfo (omniORB.StructBase):
        _NP_RepositoryId = "IDL:omg.org/CosTrading/Link/LinkInfo:1.0"

        _NP_ClassName = "CosTrading.Link.LinkInfo"

        def __init__(self, target, target_reg, def_pass_on_follow_rule, limiting_follow_rule):
            self.target = target
            self.target_reg = target_reg
            self.def_pass_on_follow_rule = def_pass_on_follow_rule
            self.limiting_follow_rule = limiting_follow_rule
    
    _d_LinkInfo  = _0_CosTrading.Link._d_LinkInfo = (omniORB.tcInternal.tv_struct, LinkInfo, LinkInfo._NP_RepositoryId, "LinkInfo", "target", omniORB.typeMapping["IDL:omg.org/CosTrading/Lookup:1.0"], "target_reg", omniORB.typeMapping["IDL:omg.org/CosTrading/Register:1.0"], "def_pass_on_follow_rule", omniORB.typeMapping["IDL:omg.org/CosTrading/FollowOption:1.0"], "limiting_follow_rule", omniORB.typeMapping["IDL:omg.org/CosTrading/FollowOption:1.0"])
    _tc_LinkInfo = omniORB.tcInternal.createTypeCode(_d_LinkInfo)
    omniORB.registerType(LinkInfo._NP_RepositoryId, _d_LinkInfo, _tc_LinkInfo)
    
    # exception IllegalLinkName
    _0_CosTrading.Link.IllegalLinkName = omniORB.newEmptyClass()
    class IllegalLinkName (CORBA.UserException):
        _NP_RepositoryId = "IDL:omg.org/CosTrading/Link/IllegalLinkName:1.0"

        _NP_ClassName = "CosTrading.Link.IllegalLinkName"

        def __init__(self, name):
            CORBA.UserException.__init__(self, name)
            self.name = name
    
    _d_IllegalLinkName  = (omniORB.tcInternal.tv_except, IllegalLinkName, IllegalLinkName._NP_RepositoryId, "IllegalLinkName", "name", omniORB.typeMapping["IDL:omg.org/CosTrading/LinkName:1.0"])
    _tc_IllegalLinkName = omniORB.tcInternal.createTypeCode(_d_IllegalLinkName)
    omniORB.registerType(IllegalLinkName._NP_RepositoryId, _d_IllegalLinkName, _tc_IllegalLinkName)
    
    # exception UnknownLinkName
    _0_CosTrading.Link.UnknownLinkName = omniORB.newEmptyClass()
    class UnknownLinkName (CORBA.UserException):
        _NP_RepositoryId = "IDL:omg.org/CosTrading/Link/UnknownLinkName:1.0"

        _NP_ClassName = "CosTrading.Link.UnknownLinkName"

        def __init__(self, name):
            CORBA.UserException.__init__(self, name)
            self.name = name
    
    _d_UnknownLinkName  = (omniORB.tcInternal.tv_except, UnknownLinkName, UnknownLinkName._NP_RepositoryId, "UnknownLinkName", "name", omniORB.typeMapping["IDL:omg.org/CosTrading/LinkName:1.0"])
    _tc_UnknownLinkName = omniORB.tcInternal.createTypeCode(_d_UnknownLinkName)
    omniORB.registerType(UnknownLinkName._NP_RepositoryId, _d_UnknownLinkName, _tc_UnknownLinkName)
    
    # exception DuplicateLinkName
    _0_CosTrading.Link.DuplicateLinkName = omniORB.newEmptyClass()
    class DuplicateLinkName (CORBA.UserException):
        _NP_RepositoryId = "IDL:omg.org/CosTrading/Link/DuplicateLinkName:1.0"

        _NP_ClassName = "CosTrading.Link.DuplicateLinkName"

        def __init__(self, name):
            CORBA.UserException.__init__(self, name)
            self.name = name
    
    _d_DuplicateLinkName  = (omniORB.tcInternal.tv_except, DuplicateLinkName, DuplicateLinkName._NP_RepositoryId, "DuplicateLinkName", "name", omniORB.typeMapping["IDL:omg.org/CosTrading/LinkName:1.0"])
    _tc_DuplicateLinkName = omniORB.tcInternal.createTypeCode(_d_DuplicateLinkName)
    omniORB.registerType(DuplicateLinkName._NP_RepositoryId, _d_DuplicateLinkName, _tc_DuplicateLinkName)
    
    # exception DefaultFollowTooPermissive
    _0_CosTrading.Link.DefaultFollowTooPermissive = omniORB.newEmptyClass()
    class DefaultFollowTooPermissive (CORBA.UserException):
        _NP_RepositoryId = "IDL:omg.org/CosTrading/Link/DefaultFollowTooPermissive:1.0"

        _NP_ClassName = "CosTrading.Link.DefaultFollowTooPermissive"

        def __init__(self, def_pass_on_follow_rule, limiting_follow_rule):
            CORBA.UserException.__init__(self, def_pass_on_follow_rule, limiting_follow_rule)
            self.def_pass_on_follow_rule = def_pass_on_follow_rule
            self.limiting_follow_rule = limiting_follow_rule
    
    _d_DefaultFollowTooPermissive  = (omniORB.tcInternal.tv_except, DefaultFollowTooPermissive, DefaultFollowTooPermissive._NP_RepositoryId, "DefaultFollowTooPermissive", "def_pass_on_follow_rule", omniORB.typeMapping["IDL:omg.org/CosTrading/FollowOption:1.0"], "limiting_follow_rule", omniORB.typeMapping["IDL:omg.org/CosTrading/FollowOption:1.0"])
    _tc_DefaultFollowTooPermissive = omniORB.tcInternal.createTypeCode(_d_DefaultFollowTooPermissive)
    omniORB.registerType(DefaultFollowTooPermissive._NP_RepositoryId, _d_DefaultFollowTooPermissive, _tc_DefaultFollowTooPermissive)
    
    # exception LimitingFollowTooPermissive
    _0_CosTrading.Link.LimitingFollowTooPermissive = omniORB.newEmptyClass()
    class LimitingFollowTooPermissive (CORBA.UserException):
        _NP_RepositoryId = "IDL:omg.org/CosTrading/Link/LimitingFollowTooPermissive:1.0"

        _NP_ClassName = "CosTrading.Link.LimitingFollowTooPermissive"

        def __init__(self, limiting_follow_rule, max_link_follow_policy):
            CORBA.UserException.__init__(self, limiting_follow_rule, max_link_follow_policy)
            self.limiting_follow_rule = limiting_follow_rule
            self.max_link_follow_policy = max_link_follow_policy
    
    _d_LimitingFollowTooPermissive  = (omniORB.tcInternal.tv_except, LimitingFollowTooPermissive, LimitingFollowTooPermissive._NP_RepositoryId, "LimitingFollowTooPermissive", "limiting_follow_rule", omniORB.typeMapping["IDL:omg.org/CosTrading/FollowOption:1.0"], "max_link_follow_policy", omniORB.typeMapping["IDL:omg.org/CosTrading/FollowOption:1.0"])
    _tc_LimitingFollowTooPermissive = omniORB.tcInternal.createTypeCode(_d_LimitingFollowTooPermissive)
    omniORB.registerType(LimitingFollowTooPermissive._NP_RepositoryId, _d_LimitingFollowTooPermissive, _tc_LimitingFollowTooPermissive)


_0_CosTrading.Link = Link
_0_CosTrading._tc_Link = omniORB.tcInternal.createTypeCode(_0_CosTrading._d_Link)
omniORB.registerType(Link._NP_RepositoryId, _0_CosTrading._d_Link, _0_CosTrading._tc_Link)

# Link operations and attributes
Link._d_add_link = ((omniORB.typeMapping["IDL:omg.org/CosTrading/LinkName:1.0"], omniORB.typeMapping["IDL:omg.org/CosTrading/Lookup:1.0"], omniORB.typeMapping["IDL:omg.org/CosTrading/FollowOption:1.0"], omniORB.typeMapping["IDL:omg.org/CosTrading/FollowOption:1.0"]), (), {_0_CosTrading.Link.IllegalLinkName._NP_RepositoryId: _0_CosTrading.Link._d_IllegalLinkName, _0_CosTrading.Link.DuplicateLinkName._NP_RepositoryId: _0_CosTrading.Link._d_DuplicateLinkName, _0_CosTrading.InvalidLookupRef._NP_RepositoryId: _0_CosTrading._d_InvalidLookupRef, _0_CosTrading.Link.DefaultFollowTooPermissive._NP_RepositoryId: _0_CosTrading.Link._d_DefaultFollowTooPermissive, _0_CosTrading.Link.LimitingFollowTooPermissive._NP_RepositoryId: _0_CosTrading.Link._d_LimitingFollowTooPermissive})
Link._d_remove_link = ((omniORB.typeMapping["IDL:omg.org/CosTrading/LinkName:1.0"], ), (), {_0_CosTrading.Link.IllegalLinkName._NP_RepositoryId: _0_CosTrading.Link._d_IllegalLinkName, _0_CosTrading.Link.UnknownLinkName._NP_RepositoryId: _0_CosTrading.Link._d_UnknownLinkName})
Link._d_describe_link = ((omniORB.typeMapping["IDL:omg.org/CosTrading/LinkName:1.0"], ), (omniORB.typeMapping["IDL:omg.org/CosTrading/Link/LinkInfo:1.0"], ), {_0_CosTrading.Link.IllegalLinkName._NP_RepositoryId: _0_CosTrading.Link._d_IllegalLinkName, _0_CosTrading.Link.UnknownLinkName._NP_RepositoryId: _0_CosTrading.Link._d_UnknownLinkName})
Link._d_list_links = ((), (omniORB.typeMapping["IDL:omg.org/CosTrading/LinkNameSeq:1.0"], ), None)
Link._d_modify_link = ((omniORB.typeMapping["IDL:omg.org/CosTrading/LinkName:1.0"], omniORB.typeMapping["IDL:omg.org/CosTrading/FollowOption:1.0"], omniORB.typeMapping["IDL:omg.org/CosTrading/FollowOption:1.0"]), (), {_0_CosTrading.Link.IllegalLinkName._NP_RepositoryId: _0_CosTrading.Link._d_IllegalLinkName, _0_CosTrading.Link.UnknownLinkName._NP_RepositoryId: _0_CosTrading.Link._d_UnknownLinkName, _0_CosTrading.Link.DefaultFollowTooPermissive._NP_RepositoryId: _0_CosTrading.Link._d_DefaultFollowTooPermissive, _0_CosTrading.Link.LimitingFollowTooPermissive._NP_RepositoryId: _0_CosTrading.Link._d_LimitingFollowTooPermissive})

# Link object reference
class _objref_Link (_0_CosTrading._objref_TraderComponents, _0_CosTrading._objref_SupportAttributes, _0_CosTrading._objref_LinkAttributes):
    _NP_RepositoryId = Link._NP_RepositoryId

    def __init__(self, obj):
        _0_CosTrading._objref_TraderComponents.__init__(self, obj)
        _0_CosTrading._objref_SupportAttributes.__init__(self, obj)
        _0_CosTrading._objref_LinkAttributes.__init__(self, obj)

    def add_link(self, *args):
        return self._obj.invoke("add_link", _0_CosTrading.Link._d_add_link, args)

    def remove_link(self, *args):
        return self._obj.invoke("remove_link", _0_CosTrading.Link._d_remove_link, args)

    def describe_link(self, *args):
        return self._obj.invoke("describe_link", _0_CosTrading.Link._d_describe_link, args)

    def list_links(self, *args):
        return self._obj.invoke("list_links", _0_CosTrading.Link._d_list_links, args)

    def modify_link(self, *args):
        return self._obj.invoke("modify_link", _0_CosTrading.Link._d_modify_link, args)

omniORB.registerObjref(Link._NP_RepositoryId, _objref_Link)
_0_CosTrading._objref_Link = _objref_Link
del Link, _objref_Link

# Link skeleton
__name__ = "CosTrading__POA"
class Link (_0_CosTrading__POA.TraderComponents, _0_CosTrading__POA.SupportAttributes, _0_CosTrading__POA.LinkAttributes):
    _NP_RepositoryId = _0_CosTrading.Link._NP_RepositoryId


    _omni_op_d = {"add_link": _0_CosTrading.Link._d_add_link, "remove_link": _0_CosTrading.Link._d_remove_link, "describe_link": _0_CosTrading.Link._d_describe_link, "list_links": _0_CosTrading.Link._d_list_links, "modify_link": _0_CosTrading.Link._d_modify_link}
    _omni_op_d.update(_0_CosTrading__POA.TraderComponents._omni_op_d)
    _omni_op_d.update(_0_CosTrading__POA.SupportAttributes._omni_op_d)
    _omni_op_d.update(_0_CosTrading__POA.LinkAttributes._omni_op_d)

Link._omni_skeleton = Link
_0_CosTrading__POA.Link = Link
omniORB.registerSkeleton(Link._NP_RepositoryId, Link)
del Link
__name__ = "CosTrading"

# interface Proxy
_0_CosTrading._d_Proxy = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosTrading/Proxy:1.0", "Proxy")
omniORB.typeMapping["IDL:omg.org/CosTrading/Proxy:1.0"] = _0_CosTrading._d_Proxy
_0_CosTrading.Proxy = omniORB.newEmptyClass()
class Proxy (_0_CosTrading.TraderComponents, _0_CosTrading.SupportAttributes):
    _NP_RepositoryId = _0_CosTrading._d_Proxy[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil

    
    # typedef ... ConstraintRecipe
    class ConstraintRecipe:
        _NP_RepositoryId = "IDL:omg.org/CosTrading/Proxy/ConstraintRecipe:1.0"
        def __init__(self, *args, **kw):
            raise RuntimeError("Cannot construct objects of this type.")
    _d_ConstraintRecipe  = omniORB.typeMapping["IDL:omg.org/CosTrading/Istring:1.0"]
    _ad_ConstraintRecipe = (omniORB.tcInternal.tv_alias, ConstraintRecipe._NP_RepositoryId, "ConstraintRecipe", omniORB.typeCodeMapping["IDL:omg.org/CosTrading/Istring:1.0"]._d)
    _tc_ConstraintRecipe = omniORB.tcInternal.createTypeCode(_ad_ConstraintRecipe)
    omniORB.registerType(ConstraintRecipe._NP_RepositoryId, _ad_ConstraintRecipe, _tc_ConstraintRecipe)
    
    # struct ProxyInfo
    _0_CosTrading.Proxy.ProxyInfo = omniORB.newEmptyClass()
    class ProxyInfo (omniORB.StructBase):
        _NP_RepositoryId = "IDL:omg.org/CosTrading/Proxy/ProxyInfo:1.0"

        _NP_ClassName = "CosTrading.Proxy.ProxyInfo"

        def __init__(self, type, target, properties, if_match_all, recipe, policies_to_pass_on):
            self.type = type
            self.target = target
            self.properties = properties
            self.if_match_all = if_match_all
            self.recipe = recipe
            self.policies_to_pass_on = policies_to_pass_on
    
    _d_ProxyInfo  = _0_CosTrading.Proxy._d_ProxyInfo = (omniORB.tcInternal.tv_struct, ProxyInfo, ProxyInfo._NP_RepositoryId, "ProxyInfo", "type", omniORB.typeMapping["IDL:omg.org/CosTrading/ServiceTypeName:1.0"], "target", omniORB.typeMapping["IDL:omg.org/CosTrading/Lookup:1.0"], "properties", omniORB.typeMapping["IDL:omg.org/CosTrading/PropertySeq:1.0"], "if_match_all", omniORB.tcInternal.tv_boolean, "recipe", omniORB.typeMapping["IDL:omg.org/CosTrading/Proxy/ConstraintRecipe:1.0"], "policies_to_pass_on", omniORB.typeMapping["IDL:omg.org/CosTrading/PolicySeq:1.0"])
    _tc_ProxyInfo = omniORB.tcInternal.createTypeCode(_d_ProxyInfo)
    omniORB.registerType(ProxyInfo._NP_RepositoryId, _d_ProxyInfo, _tc_ProxyInfo)
    
    # exception IllegalRecipe
    _0_CosTrading.Proxy.IllegalRecipe = omniORB.newEmptyClass()
    class IllegalRecipe (CORBA.UserException):
        _NP_RepositoryId = "IDL:omg.org/CosTrading/Proxy/IllegalRecipe:1.0"

        _NP_ClassName = "CosTrading.Proxy.IllegalRecipe"

        def __init__(self, recipe):
            CORBA.UserException.__init__(self, recipe)
            self.recipe = recipe
    
    _d_IllegalRecipe  = (omniORB.tcInternal.tv_except, IllegalRecipe, IllegalRecipe._NP_RepositoryId, "IllegalRecipe", "recipe", omniORB.typeMapping["IDL:omg.org/CosTrading/Proxy/ConstraintRecipe:1.0"])
    _tc_IllegalRecipe = omniORB.tcInternal.createTypeCode(_d_IllegalRecipe)
    omniORB.registerType(IllegalRecipe._NP_RepositoryId, _d_IllegalRecipe, _tc_IllegalRecipe)
    
    # exception NotProxyOfferId
    _0_CosTrading.Proxy.NotProxyOfferId = omniORB.newEmptyClass()
    class NotProxyOfferId (CORBA.UserException):
        _NP_RepositoryId = "IDL:omg.org/CosTrading/Proxy/NotProxyOfferId:1.0"

        _NP_ClassName = "CosTrading.Proxy.NotProxyOfferId"

        def __init__(self, id):
            CORBA.UserException.__init__(self, id)
            self.id = id
    
    _d_NotProxyOfferId  = (omniORB.tcInternal.tv_except, NotProxyOfferId, NotProxyOfferId._NP_RepositoryId, "NotProxyOfferId", "id", omniORB.typeMapping["IDL:omg.org/CosTrading/OfferId:1.0"])
    _tc_NotProxyOfferId = omniORB.tcInternal.createTypeCode(_d_NotProxyOfferId)
    omniORB.registerType(NotProxyOfferId._NP_RepositoryId, _d_NotProxyOfferId, _tc_NotProxyOfferId)


_0_CosTrading.Proxy = Proxy
_0_CosTrading._tc_Proxy = omniORB.tcInternal.createTypeCode(_0_CosTrading._d_Proxy)
omniORB.registerType(Proxy._NP_RepositoryId, _0_CosTrading._d_Proxy, _0_CosTrading._tc_Proxy)

# Proxy operations and attributes
Proxy._d_export_proxy = ((omniORB.typeMapping["IDL:omg.org/CosTrading/Lookup:1.0"], omniORB.typeMapping["IDL:omg.org/CosTrading/ServiceTypeName:1.0"], omniORB.typeMapping["IDL:omg.org/CosTrading/PropertySeq:1.0"], omniORB.tcInternal.tv_boolean, omniORB.typeMapping["IDL:omg.org/CosTrading/Proxy/ConstraintRecipe:1.0"], omniORB.typeMapping["IDL:omg.org/CosTrading/PolicySeq:1.0"]), (omniORB.typeMapping["IDL:omg.org/CosTrading/OfferId:1.0"], ), {_0_CosTrading.IllegalServiceType._NP_RepositoryId: _0_CosTrading._d_IllegalServiceType, _0_CosTrading.UnknownServiceType._NP_RepositoryId: _0_CosTrading._d_UnknownServiceType, _0_CosTrading.InvalidLookupRef._NP_RepositoryId: _0_CosTrading._d_InvalidLookupRef, _0_CosTrading.IllegalPropertyName._NP_RepositoryId: _0_CosTrading._d_IllegalPropertyName, _0_CosTrading.PropertyTypeMismatch._NP_RepositoryId: _0_CosTrading._d_PropertyTypeMismatch, _0_CosTrading.ReadonlyDynamicProperty._NP_RepositoryId: _0_CosTrading._d_ReadonlyDynamicProperty, _0_CosTrading.MissingMandatoryProperty._NP_RepositoryId: _0_CosTrading._d_MissingMandatoryProperty, _0_CosTrading.Proxy.IllegalRecipe._NP_RepositoryId: _0_CosTrading.Proxy._d_IllegalRecipe, _0_CosTrading.DuplicatePropertyName._NP_RepositoryId: _0_CosTrading._d_DuplicatePropertyName, _0_CosTrading.DuplicatePolicyName._NP_RepositoryId: _0_CosTrading._d_DuplicatePolicyName})
Proxy._d_withdraw_proxy = ((omniORB.typeMapping["IDL:omg.org/CosTrading/OfferId:1.0"], ), (), {_0_CosTrading.IllegalOfferId._NP_RepositoryId: _0_CosTrading._d_IllegalOfferId, _0_CosTrading.UnknownOfferId._NP_RepositoryId: _0_CosTrading._d_UnknownOfferId, _0_CosTrading.Proxy.NotProxyOfferId._NP_RepositoryId: _0_CosTrading.Proxy._d_NotProxyOfferId})
Proxy._d_describe_proxy = ((omniORB.typeMapping["IDL:omg.org/CosTrading/OfferId:1.0"], ), (omniORB.typeMapping["IDL:omg.org/CosTrading/Proxy/ProxyInfo:1.0"], ), {_0_CosTrading.IllegalOfferId._NP_RepositoryId: _0_CosTrading._d_IllegalOfferId, _0_CosTrading.UnknownOfferId._NP_RepositoryId: _0_CosTrading._d_UnknownOfferId, _0_CosTrading.Proxy.NotProxyOfferId._NP_RepositoryId: _0_CosTrading.Proxy._d_NotProxyOfferId})

# Proxy object reference
class _objref_Proxy (_0_CosTrading._objref_TraderComponents, _0_CosTrading._objref_SupportAttributes):
    _NP_RepositoryId = Proxy._NP_RepositoryId

    def __init__(self, obj):
        _0_CosTrading._objref_TraderComponents.__init__(self, obj)
        _0_CosTrading._objref_SupportAttributes.__init__(self, obj)

    def export_proxy(self, *args):
        return self._obj.invoke("export_proxy", _0_CosTrading.Proxy._d_export_proxy, args)

    def withdraw_proxy(self, *args):
        return self._obj.invoke("withdraw_proxy", _0_CosTrading.Proxy._d_withdraw_proxy, args)

    def describe_proxy(self, *args):
        return self._obj.invoke("describe_proxy", _0_CosTrading.Proxy._d_describe_proxy, args)

omniORB.registerObjref(Proxy._NP_RepositoryId, _objref_Proxy)
_0_CosTrading._objref_Proxy = _objref_Proxy
del Proxy, _objref_Proxy

# Proxy skeleton
__name__ = "CosTrading__POA"
class Proxy (_0_CosTrading__POA.TraderComponents, _0_CosTrading__POA.SupportAttributes):
    _NP_RepositoryId = _0_CosTrading.Proxy._NP_RepositoryId


    _omni_op_d = {"export_proxy": _0_CosTrading.Proxy._d_export_proxy, "withdraw_proxy": _0_CosTrading.Proxy._d_withdraw_proxy, "describe_proxy": _0_CosTrading.Proxy._d_describe_proxy}
    _omni_op_d.update(_0_CosTrading__POA.TraderComponents._omni_op_d)
    _omni_op_d.update(_0_CosTrading__POA.SupportAttributes._omni_op_d)

Proxy._omni_skeleton = Proxy
_0_CosTrading__POA.Proxy = Proxy
omniORB.registerSkeleton(Proxy._NP_RepositoryId, Proxy)
del Proxy
__name__ = "CosTrading"

# interface Admin
_0_CosTrading._d_Admin = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosTrading/Admin:1.0", "Admin")
omniORB.typeMapping["IDL:omg.org/CosTrading/Admin:1.0"] = _0_CosTrading._d_Admin
_0_CosTrading.Admin = omniORB.newEmptyClass()
class Admin (_0_CosTrading.TraderComponents, _0_CosTrading.SupportAttributes, _0_CosTrading.ImportAttributes, _0_CosTrading.LinkAttributes):
    _NP_RepositoryId = _0_CosTrading._d_Admin[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil

    
    # typedef ... OctetSeq
    class OctetSeq:
        _NP_RepositoryId = "IDL:omg.org/CosTrading/Admin/OctetSeq:1.0"
        def __init__(self, *args, **kw):
            raise RuntimeError("Cannot construct objects of this type.")
    _d_OctetSeq  = (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_octet, 0)
    _ad_OctetSeq = (omniORB.tcInternal.tv_alias, OctetSeq._NP_RepositoryId, "OctetSeq", (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_octet, 0))
    _tc_OctetSeq = omniORB.tcInternal.createTypeCode(_ad_OctetSeq)
    omniORB.registerType(OctetSeq._NP_RepositoryId, _ad_OctetSeq, _tc_OctetSeq)


_0_CosTrading.Admin = Admin
_0_CosTrading._tc_Admin = omniORB.tcInternal.createTypeCode(_0_CosTrading._d_Admin)
omniORB.registerType(Admin._NP_RepositoryId, _0_CosTrading._d_Admin, _0_CosTrading._tc_Admin)

# Admin operations and attributes
Admin._d__get_request_id_stem = ((),(omniORB.typeMapping["IDL:omg.org/CosTrading/Admin/OctetSeq:1.0"],),None)
Admin._d_set_def_search_card = ((omniORB.tcInternal.tv_ulong, ), (omniORB.tcInternal.tv_ulong, ), None)
Admin._d_set_max_search_card = ((omniORB.tcInternal.tv_ulong, ), (omniORB.tcInternal.tv_ulong, ), None)
Admin._d_set_def_match_card = ((omniORB.tcInternal.tv_ulong, ), (omniORB.tcInternal.tv_ulong, ), None)
Admin._d_set_max_match_card = ((omniORB.tcInternal.tv_ulong, ), (omniORB.tcInternal.tv_ulong, ), None)
Admin._d_set_def_return_card = ((omniORB.tcInternal.tv_ulong, ), (omniORB.tcInternal.tv_ulong, ), None)
Admin._d_set_max_return_card = ((omniORB.tcInternal.tv_ulong, ), (omniORB.tcInternal.tv_ulong, ), None)
Admin._d_set_max_list = ((omniORB.tcInternal.tv_ulong, ), (omniORB.tcInternal.tv_ulong, ), None)
Admin._d_set_supports_modifiable_properties = ((omniORB.tcInternal.tv_boolean, ), (omniORB.tcInternal.tv_boolean, ), None)
Admin._d_set_supports_dynamic_properties = ((omniORB.tcInternal.tv_boolean, ), (omniORB.tcInternal.tv_boolean, ), None)
Admin._d_set_supports_proxy_offers = ((omniORB.tcInternal.tv_boolean, ), (omniORB.tcInternal.tv_boolean, ), None)
Admin._d_set_def_hop_count = ((omniORB.tcInternal.tv_ulong, ), (omniORB.tcInternal.tv_ulong, ), None)
Admin._d_set_max_hop_count = ((omniORB.tcInternal.tv_ulong, ), (omniORB.tcInternal.tv_ulong, ), None)
Admin._d_set_def_follow_policy = ((omniORB.typeMapping["IDL:omg.org/CosTrading/FollowOption:1.0"], ), (omniORB.typeMapping["IDL:omg.org/CosTrading/FollowOption:1.0"], ), None)
Admin._d_set_max_follow_policy = ((omniORB.typeMapping["IDL:omg.org/CosTrading/FollowOption:1.0"], ), (omniORB.typeMapping["IDL:omg.org/CosTrading/FollowOption:1.0"], ), None)
Admin._d_set_max_link_follow_policy = ((omniORB.typeMapping["IDL:omg.org/CosTrading/FollowOption:1.0"], ), (omniORB.typeMapping["IDL:omg.org/CosTrading/FollowOption:1.0"], ), None)
Admin._d_set_type_repos = ((omniORB.typeMapping["IDL:omg.org/CosTrading/TypeRepository:1.0"], ), (omniORB.typeMapping["IDL:omg.org/CosTrading/TypeRepository:1.0"], ), None)
Admin._d_set_request_id_stem = ((omniORB.typeMapping["IDL:omg.org/CosTrading/Admin/OctetSeq:1.0"], ), (omniORB.typeMapping["IDL:omg.org/CosTrading/Admin/OctetSeq:1.0"], ), None)
Admin._d_list_offers = ((omniORB.tcInternal.tv_ulong, ), (omniORB.typeMapping["IDL:omg.org/CosTrading/OfferIdSeq:1.0"], omniORB.typeMapping["IDL:omg.org/CosTrading/OfferIdIterator:1.0"]), {_0_CosTrading.NotImplemented._NP_RepositoryId: _0_CosTrading._d_NotImplemented})
Admin._d_list_proxies = ((omniORB.tcInternal.tv_ulong, ), (omniORB.typeMapping["IDL:omg.org/CosTrading/OfferIdSeq:1.0"], omniORB.typeMapping["IDL:omg.org/CosTrading/OfferIdIterator:1.0"]), {_0_CosTrading.NotImplemented._NP_RepositoryId: _0_CosTrading._d_NotImplemented})

# Admin object reference
class _objref_Admin (_0_CosTrading._objref_TraderComponents, _0_CosTrading._objref_SupportAttributes, _0_CosTrading._objref_ImportAttributes, _0_CosTrading._objref_LinkAttributes):
    _NP_RepositoryId = Admin._NP_RepositoryId

    def __init__(self, obj):
        _0_CosTrading._objref_TraderComponents.__init__(self, obj)
        _0_CosTrading._objref_SupportAttributes.__init__(self, obj)
        _0_CosTrading._objref_ImportAttributes.__init__(self, obj)
        _0_CosTrading._objref_LinkAttributes.__init__(self, obj)

    def _get_request_id_stem(self, *args):
        return self._obj.invoke("_get_request_id_stem", _0_CosTrading.Admin._d__get_request_id_stem, args)

    request_id_stem = property(_get_request_id_stem)


    def set_def_search_card(self, *args):
        return self._obj.invoke("set_def_search_card", _0_CosTrading.Admin._d_set_def_search_card, args)

    def set_max_search_card(self, *args):
        return self._obj.invoke("set_max_search_card", _0_CosTrading.Admin._d_set_max_search_card, args)

    def set_def_match_card(self, *args):
        return self._obj.invoke("set_def_match_card", _0_CosTrading.Admin._d_set_def_match_card, args)

    def set_max_match_card(self, *args):
        return self._obj.invoke("set_max_match_card", _0_CosTrading.Admin._d_set_max_match_card, args)

    def set_def_return_card(self, *args):
        return self._obj.invoke("set_def_return_card", _0_CosTrading.Admin._d_set_def_return_card, args)

    def set_max_return_card(self, *args):
        return self._obj.invoke("set_max_return_card", _0_CosTrading.Admin._d_set_max_return_card, args)

    def set_max_list(self, *args):
        return self._obj.invoke("set_max_list", _0_CosTrading.Admin._d_set_max_list, args)

    def set_supports_modifiable_properties(self, *args):
        return self._obj.invoke("set_supports_modifiable_properties", _0_CosTrading.Admin._d_set_supports_modifiable_properties, args)

    def set_supports_dynamic_properties(self, *args):
        return self._obj.invoke("set_supports_dynamic_properties", _0_CosTrading.Admin._d_set_supports_dynamic_properties, args)

    def set_supports_proxy_offers(self, *args):
        return self._obj.invoke("set_supports_proxy_offers", _0_CosTrading.Admin._d_set_supports_proxy_offers, args)

    def set_def_hop_count(self, *args):
        return self._obj.invoke("set_def_hop_count", _0_CosTrading.Admin._d_set_def_hop_count, args)

    def set_max_hop_count(self, *args):
        return self._obj.invoke("set_max_hop_count", _0_CosTrading.Admin._d_set_max_hop_count, args)

    def set_def_follow_policy(self, *args):
        return self._obj.invoke("set_def_follow_policy", _0_CosTrading.Admin._d_set_def_follow_policy, args)

    def set_max_follow_policy(self, *args):
        return self._obj.invoke("set_max_follow_policy", _0_CosTrading.Admin._d_set_max_follow_policy, args)

    def set_max_link_follow_policy(self, *args):
        return self._obj.invoke("set_max_link_follow_policy", _0_CosTrading.Admin._d_set_max_link_follow_policy, args)

    def set_type_repos(self, *args):
        return self._obj.invoke("set_type_repos", _0_CosTrading.Admin._d_set_type_repos, args)

    def set_request_id_stem(self, *args):
        return self._obj.invoke("set_request_id_stem", _0_CosTrading.Admin._d_set_request_id_stem, args)

    def list_offers(self, *args):
        return self._obj.invoke("list_offers", _0_CosTrading.Admin._d_list_offers, args)

    def list_proxies(self, *args):
        return self._obj.invoke("list_proxies", _0_CosTrading.Admin._d_list_proxies, args)

omniORB.registerObjref(Admin._NP_RepositoryId, _objref_Admin)
_0_CosTrading._objref_Admin = _objref_Admin
del Admin, _objref_Admin

# Admin skeleton
__name__ = "CosTrading__POA"
class Admin (_0_CosTrading__POA.TraderComponents, _0_CosTrading__POA.SupportAttributes, _0_CosTrading__POA.ImportAttributes, _0_CosTrading__POA.LinkAttributes):
    _NP_RepositoryId = _0_CosTrading.Admin._NP_RepositoryId


    _omni_op_d = {"_get_request_id_stem": _0_CosTrading.Admin._d__get_request_id_stem, "set_def_search_card": _0_CosTrading.Admin._d_set_def_search_card, "set_max_search_card": _0_CosTrading.Admin._d_set_max_search_card, "set_def_match_card": _0_CosTrading.Admin._d_set_def_match_card, "set_max_match_card": _0_CosTrading.Admin._d_set_max_match_card, "set_def_return_card": _0_CosTrading.Admin._d_set_def_return_card, "set_max_return_card": _0_CosTrading.Admin._d_set_max_return_card, "set_max_list": _0_CosTrading.Admin._d_set_max_list, "set_supports_modifiable_properties": _0_CosTrading.Admin._d_set_supports_modifiable_properties, "set_supports_dynamic_properties": _0_CosTrading.Admin._d_set_supports_dynamic_properties, "set_supports_proxy_offers": _0_CosTrading.Admin._d_set_supports_proxy_offers, "set_def_hop_count": _0_CosTrading.Admin._d_set_def_hop_count, "set_max_hop_count": _0_CosTrading.Admin._d_set_max_hop_count, "set_def_follow_policy": _0_CosTrading.Admin._d_set_def_follow_policy, "set_max_follow_policy": _0_CosTrading.Admin._d_set_max_follow_policy, "set_max_link_follow_policy": _0_CosTrading.Admin._d_set_max_link_follow_policy, "set_type_repos": _0_CosTrading.Admin._d_set_type_repos, "set_request_id_stem": _0_CosTrading.Admin._d_set_request_id_stem, "list_offers": _0_CosTrading.Admin._d_list_offers, "list_proxies": _0_CosTrading.Admin._d_list_proxies}
    _omni_op_d.update(_0_CosTrading__POA.TraderComponents._omni_op_d)
    _omni_op_d.update(_0_CosTrading__POA.SupportAttributes._omni_op_d)
    _omni_op_d.update(_0_CosTrading__POA.ImportAttributes._omni_op_d)
    _omni_op_d.update(_0_CosTrading__POA.LinkAttributes._omni_op_d)

Admin._omni_skeleton = Admin
_0_CosTrading__POA.Admin = Admin
omniORB.registerSkeleton(Admin._NP_RepositoryId, Admin)
del Admin
__name__ = "CosTrading"

# interface OfferIterator
_0_CosTrading._d_OfferIterator = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosTrading/OfferIterator:1.0", "OfferIterator")
omniORB.typeMapping["IDL:omg.org/CosTrading/OfferIterator:1.0"] = _0_CosTrading._d_OfferIterator
_0_CosTrading.OfferIterator = omniORB.newEmptyClass()
class OfferIterator :
    _NP_RepositoryId = _0_CosTrading._d_OfferIterator[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_CosTrading.OfferIterator = OfferIterator
_0_CosTrading._tc_OfferIterator = omniORB.tcInternal.createTypeCode(_0_CosTrading._d_OfferIterator)
omniORB.registerType(OfferIterator._NP_RepositoryId, _0_CosTrading._d_OfferIterator, _0_CosTrading._tc_OfferIterator)

# OfferIterator operations and attributes
OfferIterator._d_max_left = ((), (omniORB.tcInternal.tv_ulong, ), {_0_CosTrading.UnknownMaxLeft._NP_RepositoryId: _0_CosTrading._d_UnknownMaxLeft})
OfferIterator._d_next_n = ((omniORB.tcInternal.tv_ulong, ), (omniORB.tcInternal.tv_boolean, omniORB.typeMapping["IDL:omg.org/CosTrading/OfferSeq:1.0"]), None)
OfferIterator._d_destroy = ((), (), None)

# OfferIterator object reference
class _objref_OfferIterator (CORBA.Object):
    _NP_RepositoryId = OfferIterator._NP_RepositoryId

    def __init__(self, obj):
        CORBA.Object.__init__(self, obj)

    def max_left(self, *args):
        return self._obj.invoke("max_left", _0_CosTrading.OfferIterator._d_max_left, args)

    def next_n(self, *args):
        return self._obj.invoke("next_n", _0_CosTrading.OfferIterator._d_next_n, args)

    def destroy(self, *args):
        return self._obj.invoke("destroy", _0_CosTrading.OfferIterator._d_destroy, args)

omniORB.registerObjref(OfferIterator._NP_RepositoryId, _objref_OfferIterator)
_0_CosTrading._objref_OfferIterator = _objref_OfferIterator
del OfferIterator, _objref_OfferIterator

# OfferIterator skeleton
__name__ = "CosTrading__POA"
class OfferIterator (PortableServer.Servant):
    _NP_RepositoryId = _0_CosTrading.OfferIterator._NP_RepositoryId


    _omni_op_d = {"max_left": _0_CosTrading.OfferIterator._d_max_left, "next_n": _0_CosTrading.OfferIterator._d_next_n, "destroy": _0_CosTrading.OfferIterator._d_destroy}

OfferIterator._omni_skeleton = OfferIterator
_0_CosTrading__POA.OfferIterator = OfferIterator
omniORB.registerSkeleton(OfferIterator._NP_RepositoryId, OfferIterator)
del OfferIterator
__name__ = "CosTrading"

# interface OfferIdIterator
_0_CosTrading._d_OfferIdIterator = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosTrading/OfferIdIterator:1.0", "OfferIdIterator")
omniORB.typeMapping["IDL:omg.org/CosTrading/OfferIdIterator:1.0"] = _0_CosTrading._d_OfferIdIterator
_0_CosTrading.OfferIdIterator = omniORB.newEmptyClass()
class OfferIdIterator :
    _NP_RepositoryId = _0_CosTrading._d_OfferIdIterator[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_CosTrading.OfferIdIterator = OfferIdIterator
_0_CosTrading._tc_OfferIdIterator = omniORB.tcInternal.createTypeCode(_0_CosTrading._d_OfferIdIterator)
omniORB.registerType(OfferIdIterator._NP_RepositoryId, _0_CosTrading._d_OfferIdIterator, _0_CosTrading._tc_OfferIdIterator)

# OfferIdIterator operations and attributes
OfferIdIterator._d_max_left = ((), (omniORB.tcInternal.tv_ulong, ), {_0_CosTrading.UnknownMaxLeft._NP_RepositoryId: _0_CosTrading._d_UnknownMaxLeft})
OfferIdIterator._d_next_n = ((omniORB.tcInternal.tv_ulong, ), (omniORB.tcInternal.tv_boolean, omniORB.typeMapping["IDL:omg.org/CosTrading/OfferIdSeq:1.0"]), None)
OfferIdIterator._d_destroy = ((), (), None)

# OfferIdIterator object reference
class _objref_OfferIdIterator (CORBA.Object):
    _NP_RepositoryId = OfferIdIterator._NP_RepositoryId

    def __init__(self, obj):
        CORBA.Object.__init__(self, obj)

    def max_left(self, *args):
        return self._obj.invoke("max_left", _0_CosTrading.OfferIdIterator._d_max_left, args)

    def next_n(self, *args):
        return self._obj.invoke("next_n", _0_CosTrading.OfferIdIterator._d_next_n, args)

    def destroy(self, *args):
        return self._obj.invoke("destroy", _0_CosTrading.OfferIdIterator._d_destroy, args)

omniORB.registerObjref(OfferIdIterator._NP_RepositoryId, _objref_OfferIdIterator)
_0_CosTrading._objref_OfferIdIterator = _objref_OfferIdIterator
del OfferIdIterator, _objref_OfferIdIterator

# OfferIdIterator skeleton
__name__ = "CosTrading__POA"
class OfferIdIterator (PortableServer.Servant):
    _NP_RepositoryId = _0_CosTrading.OfferIdIterator._NP_RepositoryId


    _omni_op_d = {"max_left": _0_CosTrading.OfferIdIterator._d_max_left, "next_n": _0_CosTrading.OfferIdIterator._d_next_n, "destroy": _0_CosTrading.OfferIdIterator._d_destroy}

OfferIdIterator._omni_skeleton = OfferIdIterator
_0_CosTrading__POA.OfferIdIterator = OfferIdIterator
omniORB.registerSkeleton(OfferIdIterator._NP_RepositoryId, OfferIdIterator)
del OfferIdIterator
__name__ = "CosTrading"

#
# End of module "CosTrading"
#
__name__ = "CosTrading_idl"

_exported_modules = ( "CosTrading", )

# The end.
