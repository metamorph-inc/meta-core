# Python stubs generated by omniidl from ..\..\..\..\..\idl\COS\CosNaming.idl
# DO NOT EDIT THIS FILE!

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA


_omnipy.checkVersion(4,2, __file__, 1)

try:
    property
except NameError:
    def property(*args):
        return None


#
# Start of module "CosNaming"
#
__name__ = "CosNaming"
_0_CosNaming = omniORB.openModule("CosNaming", r"..\..\..\..\..\idl\COS\CosNaming.idl")
_0_CosNaming__POA = omniORB.openModule("CosNaming__POA", r"..\..\..\..\..\idl\COS\CosNaming.idl")


# typedef ... Istring
class Istring:
    _NP_RepositoryId = "IDL:omg.org/CosNaming/Istring:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_CosNaming.Istring = Istring
_0_CosNaming._d_Istring  = (omniORB.tcInternal.tv_string,0)
_0_CosNaming._ad_Istring = (omniORB.tcInternal.tv_alias, Istring._NP_RepositoryId, "Istring", (omniORB.tcInternal.tv_string,0))
_0_CosNaming._tc_Istring = omniORB.tcInternal.createTypeCode(_0_CosNaming._ad_Istring)
omniORB.registerType(Istring._NP_RepositoryId, _0_CosNaming._ad_Istring, _0_CosNaming._tc_Istring)
del Istring

# struct NameComponent
_0_CosNaming.NameComponent = omniORB.newEmptyClass()
class NameComponent (omniORB.StructBase):
    _NP_RepositoryId = "IDL:omg.org/CosNaming/NameComponent:1.0"

    def __init__(self, id, kind):
        self.id = id
        self.kind = kind

_0_CosNaming.NameComponent = NameComponent
_0_CosNaming._d_NameComponent  = (omniORB.tcInternal.tv_struct, NameComponent, NameComponent._NP_RepositoryId, "NameComponent", "id", omniORB.typeMapping["IDL:omg.org/CosNaming/Istring:1.0"], "kind", omniORB.typeMapping["IDL:omg.org/CosNaming/Istring:1.0"])
_0_CosNaming._tc_NameComponent = omniORB.tcInternal.createTypeCode(_0_CosNaming._d_NameComponent)
omniORB.registerType(NameComponent._NP_RepositoryId, _0_CosNaming._d_NameComponent, _0_CosNaming._tc_NameComponent)
del NameComponent

# typedef ... Name
class Name:
    _NP_RepositoryId = "IDL:omg.org/CosNaming/Name:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_CosNaming.Name = Name
_0_CosNaming._d_Name  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:omg.org/CosNaming/NameComponent:1.0"], 0)
_0_CosNaming._ad_Name = (omniORB.tcInternal.tv_alias, Name._NP_RepositoryId, "Name", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:omg.org/CosNaming/NameComponent:1.0"], 0))
_0_CosNaming._tc_Name = omniORB.tcInternal.createTypeCode(_0_CosNaming._ad_Name)
omniORB.registerType(Name._NP_RepositoryId, _0_CosNaming._ad_Name, _0_CosNaming._tc_Name)
del Name

# enum BindingType
_0_CosNaming.nobject = omniORB.EnumItem("nobject", 0)
_0_CosNaming.ncontext = omniORB.EnumItem("ncontext", 1)
_0_CosNaming.BindingType = omniORB.Enum("IDL:omg.org/CosNaming/BindingType:1.0", (_0_CosNaming.nobject, _0_CosNaming.ncontext,))

_0_CosNaming._d_BindingType  = (omniORB.tcInternal.tv_enum, _0_CosNaming.BindingType._NP_RepositoryId, "BindingType", _0_CosNaming.BindingType._items)
_0_CosNaming._tc_BindingType = omniORB.tcInternal.createTypeCode(_0_CosNaming._d_BindingType)
omniORB.registerType(_0_CosNaming.BindingType._NP_RepositoryId, _0_CosNaming._d_BindingType, _0_CosNaming._tc_BindingType)

# struct Binding
_0_CosNaming.Binding = omniORB.newEmptyClass()
class Binding (omniORB.StructBase):
    _NP_RepositoryId = "IDL:omg.org/CosNaming/Binding:1.0"

    def __init__(self, binding_name, binding_type):
        self.binding_name = binding_name
        self.binding_type = binding_type

_0_CosNaming.Binding = Binding
_0_CosNaming._d_Binding  = (omniORB.tcInternal.tv_struct, Binding, Binding._NP_RepositoryId, "Binding", "binding_name", omniORB.typeMapping["IDL:omg.org/CosNaming/Name:1.0"], "binding_type", omniORB.typeMapping["IDL:omg.org/CosNaming/BindingType:1.0"])
_0_CosNaming._tc_Binding = omniORB.tcInternal.createTypeCode(_0_CosNaming._d_Binding)
omniORB.registerType(Binding._NP_RepositoryId, _0_CosNaming._d_Binding, _0_CosNaming._tc_Binding)
del Binding

# typedef ... BindingList
class BindingList:
    _NP_RepositoryId = "IDL:omg.org/CosNaming/BindingList:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_CosNaming.BindingList = BindingList
_0_CosNaming._d_BindingList  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:omg.org/CosNaming/Binding:1.0"], 0)
_0_CosNaming._ad_BindingList = (omniORB.tcInternal.tv_alias, BindingList._NP_RepositoryId, "BindingList", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:omg.org/CosNaming/Binding:1.0"], 0))
_0_CosNaming._tc_BindingList = omniORB.tcInternal.createTypeCode(_0_CosNaming._ad_BindingList)
omniORB.registerType(BindingList._NP_RepositoryId, _0_CosNaming._ad_BindingList, _0_CosNaming._tc_BindingList)
del BindingList

# forward interface BindingIterator;
_0_CosNaming._d_BindingIterator = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosNaming/BindingIterator:1.0", "BindingIterator")
omniORB.typeMapping["IDL:omg.org/CosNaming/BindingIterator:1.0"] = _0_CosNaming._d_BindingIterator

# interface NamingContext
_0_CosNaming._d_NamingContext = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosNaming/NamingContext:1.0", "NamingContext")
omniORB.typeMapping["IDL:omg.org/CosNaming/NamingContext:1.0"] = _0_CosNaming._d_NamingContext
_0_CosNaming.NamingContext = omniORB.newEmptyClass()
class NamingContext :
    _NP_RepositoryId = _0_CosNaming._d_NamingContext[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil

    
    # enum NotFoundReason
    missing_node = omniORB.EnumItem("missing_node", 0)
    not_context = omniORB.EnumItem("not_context", 1)
    not_object = omniORB.EnumItem("not_object", 2)
    NotFoundReason = omniORB.Enum("IDL:omg.org/CosNaming/NamingContext/NotFoundReason:1.0", (missing_node, not_context, not_object,))

    _d_NotFoundReason  = (omniORB.tcInternal.tv_enum, NotFoundReason._NP_RepositoryId, "NotFoundReason", NotFoundReason._items)
    _tc_NotFoundReason = omniORB.tcInternal.createTypeCode(_d_NotFoundReason)
    omniORB.registerType(NotFoundReason._NP_RepositoryId, _d_NotFoundReason, _tc_NotFoundReason)
    
    # exception NotFound
    _0_CosNaming.NamingContext.NotFound = omniORB.newEmptyClass()
    class NotFound (CORBA.UserException):
        _NP_RepositoryId = "IDL:omg.org/CosNaming/NamingContext/NotFound:1.0"

        _NP_ClassName = "CosNaming.NamingContext.NotFound"

        def __init__(self, why, rest_of_name):
            CORBA.UserException.__init__(self, why, rest_of_name)
            self.why = why
            self.rest_of_name = rest_of_name
    
    _d_NotFound  = (omniORB.tcInternal.tv_except, NotFound, NotFound._NP_RepositoryId, "NotFound", "why", omniORB.typeMapping["IDL:omg.org/CosNaming/NamingContext/NotFoundReason:1.0"], "rest_of_name", omniORB.typeMapping["IDL:omg.org/CosNaming/Name:1.0"])
    _tc_NotFound = omniORB.tcInternal.createTypeCode(_d_NotFound)
    omniORB.registerType(NotFound._NP_RepositoryId, _d_NotFound, _tc_NotFound)
    
    # exception CannotProceed
    _0_CosNaming.NamingContext.CannotProceed = omniORB.newEmptyClass()
    class CannotProceed (CORBA.UserException):
        _NP_RepositoryId = "IDL:omg.org/CosNaming/NamingContext/CannotProceed:1.0"

        _NP_ClassName = "CosNaming.NamingContext.CannotProceed"

        def __init__(self, cxt, rest_of_name):
            CORBA.UserException.__init__(self, cxt, rest_of_name)
            self.cxt = cxt
            self.rest_of_name = rest_of_name
    
    _d_CannotProceed  = (omniORB.tcInternal.tv_except, CannotProceed, CannotProceed._NP_RepositoryId, "CannotProceed", "cxt", omniORB.typeMapping["IDL:omg.org/CosNaming/NamingContext:1.0"], "rest_of_name", omniORB.typeMapping["IDL:omg.org/CosNaming/Name:1.0"])
    _tc_CannotProceed = omniORB.tcInternal.createTypeCode(_d_CannotProceed)
    omniORB.registerType(CannotProceed._NP_RepositoryId, _d_CannotProceed, _tc_CannotProceed)
    
    # exception InvalidName
    _0_CosNaming.NamingContext.InvalidName = omniORB.newEmptyClass()
    class InvalidName (CORBA.UserException):
        _NP_RepositoryId = "IDL:omg.org/CosNaming/NamingContext/InvalidName:1.0"

        _NP_ClassName = "CosNaming.NamingContext.InvalidName"

        def __init__(self):
            CORBA.UserException.__init__(self)
    
    _d_InvalidName  = (omniORB.tcInternal.tv_except, InvalidName, InvalidName._NP_RepositoryId, "InvalidName")
    _tc_InvalidName = omniORB.tcInternal.createTypeCode(_d_InvalidName)
    omniORB.registerType(InvalidName._NP_RepositoryId, _d_InvalidName, _tc_InvalidName)
    
    # exception AlreadyBound
    _0_CosNaming.NamingContext.AlreadyBound = omniORB.newEmptyClass()
    class AlreadyBound (CORBA.UserException):
        _NP_RepositoryId = "IDL:omg.org/CosNaming/NamingContext/AlreadyBound:1.0"

        _NP_ClassName = "CosNaming.NamingContext.AlreadyBound"

        def __init__(self):
            CORBA.UserException.__init__(self)
    
    _d_AlreadyBound  = (omniORB.tcInternal.tv_except, AlreadyBound, AlreadyBound._NP_RepositoryId, "AlreadyBound")
    _tc_AlreadyBound = omniORB.tcInternal.createTypeCode(_d_AlreadyBound)
    omniORB.registerType(AlreadyBound._NP_RepositoryId, _d_AlreadyBound, _tc_AlreadyBound)
    
    # exception NotEmpty
    _0_CosNaming.NamingContext.NotEmpty = omniORB.newEmptyClass()
    class NotEmpty (CORBA.UserException):
        _NP_RepositoryId = "IDL:omg.org/CosNaming/NamingContext/NotEmpty:1.0"

        _NP_ClassName = "CosNaming.NamingContext.NotEmpty"

        def __init__(self):
            CORBA.UserException.__init__(self)
    
    _d_NotEmpty  = (omniORB.tcInternal.tv_except, NotEmpty, NotEmpty._NP_RepositoryId, "NotEmpty")
    _tc_NotEmpty = omniORB.tcInternal.createTypeCode(_d_NotEmpty)
    omniORB.registerType(NotEmpty._NP_RepositoryId, _d_NotEmpty, _tc_NotEmpty)


_0_CosNaming.NamingContext = NamingContext
_0_CosNaming._tc_NamingContext = omniORB.tcInternal.createTypeCode(_0_CosNaming._d_NamingContext)
omniORB.registerType(NamingContext._NP_RepositoryId, _0_CosNaming._d_NamingContext, _0_CosNaming._tc_NamingContext)

# NamingContext operations and attributes
NamingContext._d_bind = ((omniORB.typeMapping["IDL:omg.org/CosNaming/Name:1.0"], omniORB.typeMapping["IDL:omg.org/CORBA/Object:1.0"]), (), {_0_CosNaming.NamingContext.NotFound._NP_RepositoryId: _0_CosNaming.NamingContext._d_NotFound, _0_CosNaming.NamingContext.CannotProceed._NP_RepositoryId: _0_CosNaming.NamingContext._d_CannotProceed, _0_CosNaming.NamingContext.InvalidName._NP_RepositoryId: _0_CosNaming.NamingContext._d_InvalidName, _0_CosNaming.NamingContext.AlreadyBound._NP_RepositoryId: _0_CosNaming.NamingContext._d_AlreadyBound})
NamingContext._d_rebind = ((omniORB.typeMapping["IDL:omg.org/CosNaming/Name:1.0"], omniORB.typeMapping["IDL:omg.org/CORBA/Object:1.0"]), (), {_0_CosNaming.NamingContext.NotFound._NP_RepositoryId: _0_CosNaming.NamingContext._d_NotFound, _0_CosNaming.NamingContext.CannotProceed._NP_RepositoryId: _0_CosNaming.NamingContext._d_CannotProceed, _0_CosNaming.NamingContext.InvalidName._NP_RepositoryId: _0_CosNaming.NamingContext._d_InvalidName})
NamingContext._d_bind_context = ((omniORB.typeMapping["IDL:omg.org/CosNaming/Name:1.0"], omniORB.typeMapping["IDL:omg.org/CosNaming/NamingContext:1.0"]), (), {_0_CosNaming.NamingContext.NotFound._NP_RepositoryId: _0_CosNaming.NamingContext._d_NotFound, _0_CosNaming.NamingContext.CannotProceed._NP_RepositoryId: _0_CosNaming.NamingContext._d_CannotProceed, _0_CosNaming.NamingContext.InvalidName._NP_RepositoryId: _0_CosNaming.NamingContext._d_InvalidName, _0_CosNaming.NamingContext.AlreadyBound._NP_RepositoryId: _0_CosNaming.NamingContext._d_AlreadyBound})
NamingContext._d_rebind_context = ((omniORB.typeMapping["IDL:omg.org/CosNaming/Name:1.0"], omniORB.typeMapping["IDL:omg.org/CosNaming/NamingContext:1.0"]), (), {_0_CosNaming.NamingContext.NotFound._NP_RepositoryId: _0_CosNaming.NamingContext._d_NotFound, _0_CosNaming.NamingContext.CannotProceed._NP_RepositoryId: _0_CosNaming.NamingContext._d_CannotProceed, _0_CosNaming.NamingContext.InvalidName._NP_RepositoryId: _0_CosNaming.NamingContext._d_InvalidName})
NamingContext._d_resolve = ((omniORB.typeMapping["IDL:omg.org/CosNaming/Name:1.0"], ), (omniORB.typeMapping["IDL:omg.org/CORBA/Object:1.0"], ), {_0_CosNaming.NamingContext.NotFound._NP_RepositoryId: _0_CosNaming.NamingContext._d_NotFound, _0_CosNaming.NamingContext.CannotProceed._NP_RepositoryId: _0_CosNaming.NamingContext._d_CannotProceed, _0_CosNaming.NamingContext.InvalidName._NP_RepositoryId: _0_CosNaming.NamingContext._d_InvalidName})
NamingContext._d_unbind = ((omniORB.typeMapping["IDL:omg.org/CosNaming/Name:1.0"], ), (), {_0_CosNaming.NamingContext.NotFound._NP_RepositoryId: _0_CosNaming.NamingContext._d_NotFound, _0_CosNaming.NamingContext.CannotProceed._NP_RepositoryId: _0_CosNaming.NamingContext._d_CannotProceed, _0_CosNaming.NamingContext.InvalidName._NP_RepositoryId: _0_CosNaming.NamingContext._d_InvalidName})
NamingContext._d_new_context = ((), (omniORB.typeMapping["IDL:omg.org/CosNaming/NamingContext:1.0"], ), None)
NamingContext._d_bind_new_context = ((omniORB.typeMapping["IDL:omg.org/CosNaming/Name:1.0"], ), (omniORB.typeMapping["IDL:omg.org/CosNaming/NamingContext:1.0"], ), {_0_CosNaming.NamingContext.NotFound._NP_RepositoryId: _0_CosNaming.NamingContext._d_NotFound, _0_CosNaming.NamingContext.CannotProceed._NP_RepositoryId: _0_CosNaming.NamingContext._d_CannotProceed, _0_CosNaming.NamingContext.InvalidName._NP_RepositoryId: _0_CosNaming.NamingContext._d_InvalidName, _0_CosNaming.NamingContext.AlreadyBound._NP_RepositoryId: _0_CosNaming.NamingContext._d_AlreadyBound})
NamingContext._d_destroy = ((), (), {_0_CosNaming.NamingContext.NotEmpty._NP_RepositoryId: _0_CosNaming.NamingContext._d_NotEmpty})
NamingContext._d_list = ((omniORB.tcInternal.tv_ulong, ), (omniORB.typeMapping["IDL:omg.org/CosNaming/BindingList:1.0"], omniORB.typeMapping["IDL:omg.org/CosNaming/BindingIterator:1.0"]), None)

# NamingContext object reference
class _objref_NamingContext (CORBA.Object):
    _NP_RepositoryId = NamingContext._NP_RepositoryId

    def __init__(self, obj):
        CORBA.Object.__init__(self, obj)

    def bind(self, *args):
        return self._obj.invoke("bind", _0_CosNaming.NamingContext._d_bind, args)

    def rebind(self, *args):
        return self._obj.invoke("rebind", _0_CosNaming.NamingContext._d_rebind, args)

    def bind_context(self, *args):
        return self._obj.invoke("bind_context", _0_CosNaming.NamingContext._d_bind_context, args)

    def rebind_context(self, *args):
        return self._obj.invoke("rebind_context", _0_CosNaming.NamingContext._d_rebind_context, args)

    def resolve(self, *args):
        return self._obj.invoke("resolve", _0_CosNaming.NamingContext._d_resolve, args)

    def unbind(self, *args):
        return self._obj.invoke("unbind", _0_CosNaming.NamingContext._d_unbind, args)

    def new_context(self, *args):
        return self._obj.invoke("new_context", _0_CosNaming.NamingContext._d_new_context, args)

    def bind_new_context(self, *args):
        return self._obj.invoke("bind_new_context", _0_CosNaming.NamingContext._d_bind_new_context, args)

    def destroy(self, *args):
        return self._obj.invoke("destroy", _0_CosNaming.NamingContext._d_destroy, args)

    def list(self, *args):
        return self._obj.invoke("list", _0_CosNaming.NamingContext._d_list, args)

omniORB.registerObjref(NamingContext._NP_RepositoryId, _objref_NamingContext)
_0_CosNaming._objref_NamingContext = _objref_NamingContext
del NamingContext, _objref_NamingContext

# NamingContext skeleton
__name__ = "CosNaming__POA"
class NamingContext (PortableServer.Servant):
    _NP_RepositoryId = _0_CosNaming.NamingContext._NP_RepositoryId


    _omni_op_d = {"bind": _0_CosNaming.NamingContext._d_bind, "rebind": _0_CosNaming.NamingContext._d_rebind, "bind_context": _0_CosNaming.NamingContext._d_bind_context, "rebind_context": _0_CosNaming.NamingContext._d_rebind_context, "resolve": _0_CosNaming.NamingContext._d_resolve, "unbind": _0_CosNaming.NamingContext._d_unbind, "new_context": _0_CosNaming.NamingContext._d_new_context, "bind_new_context": _0_CosNaming.NamingContext._d_bind_new_context, "destroy": _0_CosNaming.NamingContext._d_destroy, "list": _0_CosNaming.NamingContext._d_list}

NamingContext._omni_skeleton = NamingContext
_0_CosNaming__POA.NamingContext = NamingContext
omniORB.registerSkeleton(NamingContext._NP_RepositoryId, NamingContext)
del NamingContext
__name__ = "CosNaming"

# interface BindingIterator
_0_CosNaming._d_BindingIterator = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosNaming/BindingIterator:1.0", "BindingIterator")
omniORB.typeMapping["IDL:omg.org/CosNaming/BindingIterator:1.0"] = _0_CosNaming._d_BindingIterator
_0_CosNaming.BindingIterator = omniORB.newEmptyClass()
class BindingIterator :
    _NP_RepositoryId = _0_CosNaming._d_BindingIterator[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_CosNaming.BindingIterator = BindingIterator
_0_CosNaming._tc_BindingIterator = omniORB.tcInternal.createTypeCode(_0_CosNaming._d_BindingIterator)
omniORB.registerType(BindingIterator._NP_RepositoryId, _0_CosNaming._d_BindingIterator, _0_CosNaming._tc_BindingIterator)

# BindingIterator operations and attributes
BindingIterator._d_next_one = ((), (omniORB.tcInternal.tv_boolean, omniORB.typeMapping["IDL:omg.org/CosNaming/Binding:1.0"]), None)
BindingIterator._d_next_n = ((omniORB.tcInternal.tv_ulong, ), (omniORB.tcInternal.tv_boolean, omniORB.typeMapping["IDL:omg.org/CosNaming/BindingList:1.0"]), None)
BindingIterator._d_destroy = ((), (), None)

# BindingIterator object reference
class _objref_BindingIterator (CORBA.Object):
    _NP_RepositoryId = BindingIterator._NP_RepositoryId

    def __init__(self, obj):
        CORBA.Object.__init__(self, obj)

    def next_one(self, *args):
        return self._obj.invoke("next_one", _0_CosNaming.BindingIterator._d_next_one, args)

    def next_n(self, *args):
        return self._obj.invoke("next_n", _0_CosNaming.BindingIterator._d_next_n, args)

    def destroy(self, *args):
        return self._obj.invoke("destroy", _0_CosNaming.BindingIterator._d_destroy, args)

omniORB.registerObjref(BindingIterator._NP_RepositoryId, _objref_BindingIterator)
_0_CosNaming._objref_BindingIterator = _objref_BindingIterator
del BindingIterator, _objref_BindingIterator

# BindingIterator skeleton
__name__ = "CosNaming__POA"
class BindingIterator (PortableServer.Servant):
    _NP_RepositoryId = _0_CosNaming.BindingIterator._NP_RepositoryId


    _omni_op_d = {"next_one": _0_CosNaming.BindingIterator._d_next_one, "next_n": _0_CosNaming.BindingIterator._d_next_n, "destroy": _0_CosNaming.BindingIterator._d_destroy}

BindingIterator._omni_skeleton = BindingIterator
_0_CosNaming__POA.BindingIterator = BindingIterator
omniORB.registerSkeleton(BindingIterator._NP_RepositoryId, BindingIterator)
del BindingIterator
__name__ = "CosNaming"

# interface NamingContextExt
_0_CosNaming._d_NamingContextExt = (omniORB.tcInternal.tv_objref, "IDL:omg.org/CosNaming/NamingContextExt:1.0", "NamingContextExt")
omniORB.typeMapping["IDL:omg.org/CosNaming/NamingContextExt:1.0"] = _0_CosNaming._d_NamingContextExt
_0_CosNaming.NamingContextExt = omniORB.newEmptyClass()
class NamingContextExt (_0_CosNaming.NamingContext):
    _NP_RepositoryId = _0_CosNaming._d_NamingContextExt[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil

    
    # typedef ... StringName
    class StringName:
        _NP_RepositoryId = "IDL:omg.org/CosNaming/NamingContextExt/StringName:1.0"
        def __init__(self, *args, **kw):
            raise RuntimeError("Cannot construct objects of this type.")
    _d_StringName  = (omniORB.tcInternal.tv_string,0)
    _ad_StringName = (omniORB.tcInternal.tv_alias, StringName._NP_RepositoryId, "StringName", (omniORB.tcInternal.tv_string,0))
    _tc_StringName = omniORB.tcInternal.createTypeCode(_ad_StringName)
    omniORB.registerType(StringName._NP_RepositoryId, _ad_StringName, _tc_StringName)
    
    # typedef ... Address
    class Address:
        _NP_RepositoryId = "IDL:omg.org/CosNaming/NamingContextExt/Address:1.0"
        def __init__(self, *args, **kw):
            raise RuntimeError("Cannot construct objects of this type.")
    _d_Address  = (omniORB.tcInternal.tv_string,0)
    _ad_Address = (omniORB.tcInternal.tv_alias, Address._NP_RepositoryId, "Address", (omniORB.tcInternal.tv_string,0))
    _tc_Address = omniORB.tcInternal.createTypeCode(_ad_Address)
    omniORB.registerType(Address._NP_RepositoryId, _ad_Address, _tc_Address)
    
    # typedef ... URLString
    class URLString:
        _NP_RepositoryId = "IDL:omg.org/CosNaming/NamingContextExt/URLString:1.0"
        def __init__(self, *args, **kw):
            raise RuntimeError("Cannot construct objects of this type.")
    _d_URLString  = (omniORB.tcInternal.tv_string,0)
    _ad_URLString = (omniORB.tcInternal.tv_alias, URLString._NP_RepositoryId, "URLString", (omniORB.tcInternal.tv_string,0))
    _tc_URLString = omniORB.tcInternal.createTypeCode(_ad_URLString)
    omniORB.registerType(URLString._NP_RepositoryId, _ad_URLString, _tc_URLString)
    
    # exception InvalidAddress
    _0_CosNaming.NamingContextExt.InvalidAddress = omniORB.newEmptyClass()
    class InvalidAddress (CORBA.UserException):
        _NP_RepositoryId = "IDL:omg.org/CosNaming/NamingContextExt/InvalidAddress:1.0"

        _NP_ClassName = "CosNaming.NamingContextExt.InvalidAddress"

        def __init__(self):
            CORBA.UserException.__init__(self)
    
    _d_InvalidAddress  = (omniORB.tcInternal.tv_except, InvalidAddress, InvalidAddress._NP_RepositoryId, "InvalidAddress")
    _tc_InvalidAddress = omniORB.tcInternal.createTypeCode(_d_InvalidAddress)
    omniORB.registerType(InvalidAddress._NP_RepositoryId, _d_InvalidAddress, _tc_InvalidAddress)


_0_CosNaming.NamingContextExt = NamingContextExt
_0_CosNaming._tc_NamingContextExt = omniORB.tcInternal.createTypeCode(_0_CosNaming._d_NamingContextExt)
omniORB.registerType(NamingContextExt._NP_RepositoryId, _0_CosNaming._d_NamingContextExt, _0_CosNaming._tc_NamingContextExt)

# NamingContextExt operations and attributes
NamingContextExt._d_to_string = ((omniORB.typeMapping["IDL:omg.org/CosNaming/Name:1.0"], ), (omniORB.typeMapping["IDL:omg.org/CosNaming/NamingContextExt/StringName:1.0"], ), {_0_CosNaming.NamingContext.InvalidName._NP_RepositoryId: _0_CosNaming.NamingContext._d_InvalidName})
NamingContextExt._d_to_name = ((omniORB.typeMapping["IDL:omg.org/CosNaming/NamingContextExt/StringName:1.0"], ), (omniORB.typeMapping["IDL:omg.org/CosNaming/Name:1.0"], ), {_0_CosNaming.NamingContext.InvalidName._NP_RepositoryId: _0_CosNaming.NamingContext._d_InvalidName})
NamingContextExt._d_to_url = ((omniORB.typeMapping["IDL:omg.org/CosNaming/NamingContextExt/Address:1.0"], omniORB.typeMapping["IDL:omg.org/CosNaming/NamingContextExt/StringName:1.0"]), (omniORB.typeMapping["IDL:omg.org/CosNaming/NamingContextExt/URLString:1.0"], ), {_0_CosNaming.NamingContextExt.InvalidAddress._NP_RepositoryId: _0_CosNaming.NamingContextExt._d_InvalidAddress, _0_CosNaming.NamingContext.InvalidName._NP_RepositoryId: _0_CosNaming.NamingContext._d_InvalidName})
NamingContextExt._d_resolve_str = ((omniORB.typeMapping["IDL:omg.org/CosNaming/NamingContextExt/StringName:1.0"], ), (omniORB.typeMapping["IDL:omg.org/CORBA/Object:1.0"], ), {_0_CosNaming.NamingContext.NotFound._NP_RepositoryId: _0_CosNaming.NamingContext._d_NotFound, _0_CosNaming.NamingContext.CannotProceed._NP_RepositoryId: _0_CosNaming.NamingContext._d_CannotProceed, _0_CosNaming.NamingContext.InvalidName._NP_RepositoryId: _0_CosNaming.NamingContext._d_InvalidName, _0_CosNaming.NamingContext.AlreadyBound._NP_RepositoryId: _0_CosNaming.NamingContext._d_AlreadyBound})

# NamingContextExt object reference
class _objref_NamingContextExt (_0_CosNaming._objref_NamingContext):
    _NP_RepositoryId = NamingContextExt._NP_RepositoryId

    def __init__(self, obj):
        _0_CosNaming._objref_NamingContext.__init__(self, obj)

    def to_string(self, *args):
        return self._obj.invoke("to_string", _0_CosNaming.NamingContextExt._d_to_string, args)

    def to_name(self, *args):
        return self._obj.invoke("to_name", _0_CosNaming.NamingContextExt._d_to_name, args)

    def to_url(self, *args):
        return self._obj.invoke("to_url", _0_CosNaming.NamingContextExt._d_to_url, args)

    def resolve_str(self, *args):
        return self._obj.invoke("resolve_str", _0_CosNaming.NamingContextExt._d_resolve_str, args)

omniORB.registerObjref(NamingContextExt._NP_RepositoryId, _objref_NamingContextExt)
_0_CosNaming._objref_NamingContextExt = _objref_NamingContextExt
del NamingContextExt, _objref_NamingContextExt

# NamingContextExt skeleton
__name__ = "CosNaming__POA"
class NamingContextExt (_0_CosNaming__POA.NamingContext):
    _NP_RepositoryId = _0_CosNaming.NamingContextExt._NP_RepositoryId


    _omni_op_d = {"to_string": _0_CosNaming.NamingContextExt._d_to_string, "to_name": _0_CosNaming.NamingContextExt._d_to_name, "to_url": _0_CosNaming.NamingContextExt._d_to_url, "resolve_str": _0_CosNaming.NamingContextExt._d_resolve_str}
    _omni_op_d.update(_0_CosNaming__POA.NamingContext._omni_op_d)

NamingContextExt._omni_skeleton = NamingContextExt
_0_CosNaming__POA.NamingContextExt = NamingContextExt
omniORB.registerSkeleton(NamingContextExt._NP_RepositoryId, NamingContextExt)
del NamingContextExt
__name__ = "CosNaming"

#
# End of module "CosNaming"
#
__name__ = "CosNaming_idl"

_exported_modules = ( "CosNaming", )

# The end.
