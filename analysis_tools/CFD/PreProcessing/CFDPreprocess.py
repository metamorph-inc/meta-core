'''
version 5.7

Created on Aug 1, 2013

@author: Ozgur Yapar
'''

import os
import re
import shutil 
from numpy import *
import xml.etree.ElementTree as ET
import json
import math

def makeFolder(directory):
    if not os.path.exists(directory):
        os.makedirs(directory)


#define necessary variables

currentDir = str(os.getcwd())
mainDir = currentDir.replace("\PreProcessing", "")
preProcessDir = os.path.join(mainDir,"PreProcessing")
STLDir = os.path.join(mainDir, "STL_ASCII")
CFDDir = os.path.join(mainDir,"CFD")
openfoamDir = os.path.join(CFDDir,"OpenFoam")
caseDir = os.path.join(openfoamDir,"case")
zeroDir = os.path.join(caseDir, "0")
constantDir = os.path.join(caseDir, "constant")
systemDir = os.path.join(caseDir, "system")
polyMeshDir = os.path.join(constantDir, "polyMesh")
triSurfaceDir = os.path.join(constantDir, "triSurface")
logDir = os.path.join(mainDir,"log")

#define necessary file names

logFileName = "CFDPreprocess.txt"
hydroFile = "hydrostatics.json"
manifestFile = "testbench_manifest.json"
xmlMetricsName = "CADAssembly_metrics.xml"
CFDConfigFile = "CFDConfig.json"


class PreProcessing:
    
    def tier1():
          
        #create all needed directories
        dirCreate = os.path.join(openfoamDir, "case", "postProcessing", "forceDividedByWeight", "0")
        makeFolder(dirCreate)

        global stlName
        stlName = 'None'
        
        #create Allrun.sh file
        allRun = open(caseDir + "\Allrun.sh", "wb")
        allRun.write("#!/bin/bash\n\n")
        allRun.write("cd ..\n")
        allRun.write("cd ..\n")
        allRun.write("cd ..\n")
        allRun.write("cd PreProcessing\n")
        allRun.write("\n")
        allRun.write("python CFDUpdate.py")   
        allRun.close()

        #make log file
        logFile = open(os.path.join(logDir,logFileName), "w")
                
        #method to get number from line
        def getNumOrFloat(str):
            num = re.sub("[^-0-9.]", " ", str)
            if re.search("\.", num):
                return float(num)    
            else:
                return int(num)
                    
        #method to get directory of file needed
        def getDirectory(fileName):
            for dirpath, dirnames, filenames in os.walk("."):
                for filename in [f for f in filenames if f == fileName]:
                    return (os.path.join(dirpath, filename))
              
        fReadInput = open(os.path.join(CFDDir,"CFDConfig.json"), "r")
    
        VelBool = False
    
        for line in fReadInput:    
            if "VehicleVelocity" in line:
                Velocity = abs(getNumOrFloat(line))
                VelBool = True
    
        if not VelBool:
            logFile.write("Not all parameters defined in CFDConfig.json.")
            logFile.close()
            print("Not all parameters defined in CFDConfig.json.")
            quit()

        # Convert velocity from m/s to knots
        Velocity = Velocity * 1.94384
        
        # Drag will be the same units as the Displacement (Weight)
        if Velocity < 10:
            Drag = (-0.00004*pow(Velocity, 3) + 0.0025*pow(Velocity, 2) - 0.0029*Velocity)
        else:
            Drag = (0.000145*pow(Velocity, 3) - 0.00785*pow(Velocity, 2) + 0.1343*Velocity - 0.5210)
        
        os.chdir(dirCreate)   
        strDrag = str(Drag) 
        foutTier1 = open("forceDividedByWeight.dat", "w")
        foutTier1.write(strDrag)
        foutTier1.close()   
        

     
    def tier3():

        fReadInput = open(os.path.join(CFDDir,"CFDConfig.json"), "r")
    
        single = False
        four = False
    
        for line in fReadInput:    
            if "Core" in line and "single_dash_core" in line:
                single = True
            elif "Core" in line and "four_dash_cores" in line:
                four = True

        #make log file
        logFile = open(os.path.join(logDir,logFileName), "w")
        
        #create main "case" directory 
        makeFolder(caseDir)
        
        #create "case/0", "case/constant", "case/system", "case/constant/triSurface" and "case/constant/ployMesh" directories         
        makeFolder(zeroDir)
        makeFolder(constantDir)
        makeFolder(systemDir)
        makeFolder(triSurfaceDir)
        makeFolder(polyMeshDir)
        
        #create Allrun.sh file
        allRun = open(caseDir + "\Allrun.sh", "wb")
        allRun.write("#!/bin/bash\n\n")
        allRun.write("alias of22='. /opt/openfoam220/etc/bashrc'\n")
        allRun.write("of22\n\n")
        allRun.write(". $WM_PROJECT_DIR/bin/tools/RunFunctions\n\n")
        allRun.write("runApplication blockMesh\n")
        allRun.write("runApplication snappyHexMesh -overwrite\n")
        allRun.write("transformPoints -scale \"(0.001 0.001 0.001)\"\n")
        allRun.write("runApplication checkMesh\n")
        allRun.write("cp 0/alpha1.org 0/alpha1\n")
        allRun.write("cp 0/U.org 0/U\n")
        allRun.write("runApplication setFields\n\n")
        if four:
            allRun.write("decomposePar\n")
            allRun.write("mpirun -np 4 interFoam -parallel\n")
            allRun.write("reconstructPar\n")
        elif single:
            allRun.write("runApplication interFoam\n\n")
        allRun.write("cd ..\n")
        allRun.write("cd ..\n")
        allRun.write("cd ..\n")
        allRun.write("cd PreProcessing\n")
        allRun.write("if ( glxinfo ); then\n")
        allRun.write("  export PATH=/opt/ParaView-4.1.0-Linux-64bit/bin/:$PATH\n")
        allRun.write("  export PYTHONPATH=\"/opt/ParaView-4.1.0-Linux-64bit/lib/paraview-4.1/:/opt/ParaView-4.1.0-Linux-64bit/lib/paraview-4.1/site-packages:/opt/ParaView-4.1.0-Linux-64bit/lib/paraview-4.1/site-packages/vtk\"\n")
        allRun.write("  export LD_LIBRARY_PATH=\"/opt/ParaView-4.1.0-Linux-64bit/lib/:/opt/ParaView-4.1.0-Linux-64bit/lib/paraview-4.1/\"\n")
        allRun.write("else\n")
        allRun.write("  python CFDtakeOutMovie.py\n")
        allRun.write("fi\n")
        allRun.write("\n")
        allRun.write("python CFDUpdate.py\n")
        allRun.write("\n")
        allRun.close()

        #create "alpha1.org" file
        alpha1 = open(os.path.join(zeroDir, "alpha1.org"), "w")
        alpha1.write("/*--------------------------------*- C++ -*----------------------------------*\\\n")
        alpha1.write("| =========                 |                                                 |\n")
        alpha1.write("| \\\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |\n")
        alpha1.write("|  \\\    /   O peration     | Version:  2.1.x                                 |\n")
        alpha1.write("|   \\\  /    A nd           | Web:      www.OpenFOAM.org                      |\n")
        alpha1.write("|    \\\/     M anipulation  |                                                 |\n")
        alpha1.write("\*---------------------------------------------------------------------------*/\n")
        alpha1.write("FoamFile\n")
        alpha1.write("{\n")
        alpha1.write("    version     2.0;\n")
        alpha1.write("    format      ascii;\n")
        alpha1.write("    class       volScalarField;\n")
        alpha1.write("    location    \"0\";\n")
        alpha1.write("    object      alpha;\n")
        alpha1.write("}\n")
        alpha1.write("// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //\n\n")
        alpha1.write("dimensions      [0 0 0 0 0 0 0];\n\n")
        alpha1.write("internalField   uniform 0;\n\n")
        alpha1.write("boundaryField\n")
        alpha1.write("{\n")
        alpha1.write("    inlet_water\n")
        alpha1.write("    {\n")
        alpha1.write("        type            fixedValue;\n")
        alpha1.write("        value           uniform 1;\n")
        alpha1.write("    }\n\n")
        alpha1.write("    inlet_air\n")
        alpha1.write("    {\n")
        alpha1.write("        type            fixedValue;\n")
        alpha1.write("        value           uniform 0;\n")
        alpha1.write("    }\n\n")
        alpha1.write("    outlet\n")
        alpha1.write("    {\n")
        alpha1.write("        type            zeroGradient;\n")
        alpha1.write("    }\n\n")
        alpha1.write("    front\n")
        alpha1.write("    {\n")
        alpha1.write("        type            symmetryPlane;\n")
        alpha1.write("    }\n\n")
        alpha1.write("    back\n")
        alpha1.write("    {\n")
        alpha1.write("        type            symmetryPlane;\n")
        alpha1.write("    }\n\n")
        alpha1.write("    bottom\n")
        alpha1.write("    {\n")
        alpha1.write("        type            symmetryPlane;\n")
        alpha1.write("    }\n\n")
        alpha1.write("    atmosphere\n")
        alpha1.write("    {\n")
        alpha1.write("        type            inletOutlet;\n")
        alpha1.write("        inletValue      uniform 0;\n")
        alpha1.write("        value           uniform 0;\n")
        alpha1.write("    }\n\n")
        alpha1.write("    hull_PRT0001\n")
        alpha1.write("    {\n")
        alpha1.write("        type            zeroGradient;\n")
        alpha1.write("    }\n")
        alpha1.write("}\n\n")
        alpha1.write("// ************************************************************************* //")
        alpha1.close()
        
        #create "k" file
        k = open(zeroDir + "\k", "w")
        k.write("/*--------------------------------*- C++ -*----------------------------------*\\\n")
        k.write("| =========                 |                                                 |\n")
        k.write("| \\\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |\n")
        k.write("|  \\\    /   O peration     | Version:  2.1.x                                 |\n")
        k.write("|   \\\  /    A nd           | Web:      www.OpenFOAM.org                      |\n")
        k.write("|    \\\/     M anipulation  |                                                 |\n")
        k.write("\*---------------------------------------------------------------------------*/\n")
        k.write("FoamFile\n")
        k.write("{\n")
        k.write("    version     2.0;\n")
        k.write("    format      ascii;\n")
        k.write("    class       volScalarField;\n")
        k.write("    location    \"0\";\n")
        k.write("    object      k;\n")
        k.write("}\n")
        k.write("// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //\n\n")
        k.write("dimensions      [0 2 -2 0 0 0 0];\n\n")
        k.write("internalField   uniform 0.00015;\n\n")
        k.write("boundaryField\n")
        k.write("{\n")
        k.write("    inlet_water\n")
        k.write("    {\n")
        k.write("        type            fixedValue;\n")
        k.write("        value           uniform 0.00015;\n")
        k.write("    }\n\n")
        k.write("    inlet_air\n")
        k.write("    {\n")
        k.write("        type            fixedValue;\n")
        k.write("        value           uniform 0.00015;\n")
        k.write("    }\n\n")
        k.write("    outlet\n")
        k.write("    {\n")
        k.write("        type            zeroGradient;\n")
        k.write("    }\n\n")
        k.write("    front\n")
        k.write("    {\n")
        k.write("        type            symmetryPlane;\n")
        k.write("    }\n\n")
        k.write("    back\n")
        k.write("    {\n")
        k.write("        type            symmetryPlane;\n")
        k.write("    }\n\n")
        k.write("    bottom\n")
        k.write("    {\n")
        k.write("        type            symmetryPlane;\n")
        k.write("    }\n\n")
        k.write("    atmosphere\n")
        k.write("    {\n")
        k.write("        type            inletOutlet;\n")
        k.write("        inletValue      uniform 0.00015;\n")
        k.write("        value           uniform 0.00015;\n")
        k.write("    }\n\n")
        k.write("    hull_PRT0001\n")
        k.write("    {\n")
        k.write("        type            kqRWallFunction;\n")
        k.write("        value           uniform 0.00015;\n")
        k.write("    }\n")
        k.write("}\n\n")
        k.write("// ************************************************************************* //")
        k.close()
        
        #create "nut" file
        nut = open(zeroDir + "/nut", "w")
        nut.write("/*--------------------------------*- C++ -*----------------------------------*\\\n")
        nut.write("| =========                 |                                                 |\n")
        nut.write("| \\\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |\n")
        nut.write("|  \\\    /   O peration     | Version:  2.1.x                                 |\n")
        nut.write("|   \\\  /    A nd           | Web:      www.OpenFOAM.org                      |\n")
        nut.write("|    \\\/     M anipulation  |                                                 |\n")
        nut.write("\*---------------------------------------------------------------------------*/\n")
        nut.write("FoamFile\n")
        nut.write("{\n")
        nut.write("    version     2.0;\n")
        nut.write("    format      ascii;\n")
        nut.write("    class       volScalarField;\n")
        nut.write("    location    \"0\";\n")
        nut.write("    object      nut;\n")
        nut.write("}\n")
        nut.write("// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //\n\n")
        nut.write("dimensions      [0 2 -1 0 0 0 0];\n\n")
        nut.write("internalField   uniform 5e-07;\n\n")
        nut.write("boundaryField\n")
        nut.write("{\n")
        nut.write("    inlet_water\n")
        nut.write("    {\n")
        nut.write("        type            fixedValue;\n")
        nut.write("        value           uniform 5e-07;\n")
        nut.write("    }\n\n")
        nut.write("    inlet_air\n")
        nut.write("    {\n")
        nut.write("        type            fixedValue;\n")
        nut.write("        value           uniform 5e-07;\n")
        nut.write("    }\n\n")
        nut.write("    outlet\n")
        nut.write("    {\n")
        nut.write("        type            zeroGradient;\n")
        nut.write("    }\n\n")
        nut.write("    front\n")
        nut.write("    {\n")
        nut.write("        type            symmetryPlane;\n")
        nut.write("    }\n\n")
        nut.write("    back\n")
        nut.write("    {\n")
        nut.write("        type            symmetryPlane;\n")
        nut.write("    }\n\n")
        nut.write("    bottom\n")
        nut.write("    {\n")
        nut.write("        type            symmetryPlane;\n")
        nut.write("    }\n\n")
        nut.write("    atmosphere\n")
        nut.write("    {\n")
        nut.write("        type            zeroGradient;\n")
        nut.write("    }\n\n")
        nut.write("    hull_PRT0001\n")
        nut.write("    {\n")
        nut.write("        type            nutkWallFunction;\n")
        nut.write("        value           uniform 0;\n")
        nut.write("    }\n")
        nut.write("}\n\n")
        nut.write("// ************************************************************************* //")
        nut.close()
        
        #create "omega" file 
        omega = open(zeroDir + "\omega", "w")
        omega.write("/*--------------------------------*- C++ -*----------------------------------*\\\n")
        omega.write("| =========                 |                                                 |\n")
        omega.write("| \\\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |\n")
        omega.write("|  \\\    /   O peration     | Version:  2.1.x                                 |\n")
        omega.write("|   \\\  /    A nd           | Web:      www.OpenFOAM.org                      |\n")
        omega.write("|    \\\/     M anipulation  |                                                 |\n")
        omega.write("\*---------------------------------------------------------------------------*/\n")
        omega.write("FoamFile\n")
        omega.write("{\n")
        omega.write("    version     2.0;\n")
        omega.write("    format      ascii;\n")
        omega.write("    class       volScalarField;\n\n")
        omega.write("    object      omega;\n")
        omega.write("}\n")
        omega.write("// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //\n\n")
        omega.write("dimensions      [0 0 -1 0 0 0 0];\n\n")
        omega.write("internalField   uniform 2;\n\n")
        omega.write("boundaryField\n")
        omega.write("{\n")
        omega.write("    inlet_water\n")
        omega.write("    {\n")
        omega.write("        type            fixedValue;\n")
        omega.write("        value           uniform 2;\n")
        omega.write("    }\n\n")
        omega.write("    inlet_air\n")
        omega.write("    {\n")
        omega.write("        type            fixedValue;\n")
        omega.write("        value           uniform 2;\n")
        omega.write("    }\n\n")
        omega.write("    outlet\n")
        omega.write("    {\n")
        omega.write("        type            zeroGradient;\n")
        omega.write("    }\n\n")
        omega.write("    front\n")
        omega.write("    {\n")
        omega.write("        type            symmetryPlane;\n")
        omega.write("    }\n\n")
        omega.write("    back\n")
        omega.write("    {\n")
        omega.write("        type            symmetryPlane;\n")
        omega.write("    }\n\n")
        omega.write("    bottom\n")
        omega.write("    {\n")
        omega.write("        type            symmetryPlane;\n")
        omega.write("    }\n\n")
        omega.write("    atmosphere\n")
        omega.write("    {\n")
        omega.write("        type            inletOutlet;\n")
        omega.write("        inletValue      uniform 2;\n")
        omega.write("        value           uniform 2;\n")
        omega.write("    }\n\n")
        omega.write("    hull_PRT0001\n")
        omega.write("    {\n")
        omega.write("        type            omegaWallFunction;\n")
        omega.write("        value           uniform 2;\n")
        omega.write("    }\n")
        omega.write("}\n\n")
        omega.write("// ************************************************************************* //")
        omega.close()
        
        #create "p_rgh" file
        p_rgh = open(zeroDir + "\p_rgh", "w")
        p_rgh.write("/*--------------------------------*- C++ -*----------------------------------*\\\n")
        p_rgh.write("| =========                 |                                                 |\n")
        p_rgh.write("| \\\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |\n")
        p_rgh.write("|  \\\    /   O peration     | Version:  2.2.0                                 |\n")
        p_rgh.write("|   \\\  /    A nd           | Web:      www.OpenFOAM.org                      |\n")
        p_rgh.write("|    \\\/     M anipulation  |                                                 |\n")
        p_rgh.write("\*---------------------------------------------------------------------------*/\n")
        p_rgh.write("FoamFile\n")
        p_rgh.write("{\n")
        p_rgh.write("    version     2.0;\n")
        p_rgh.write("    format      ascii;\n")
        p_rgh.write("    class       volScalarField;\n")
        p_rgh.write("    location    \"0\";\n")
        p_rgh.write("    object      p_rgh;\n")
        p_rgh.write("}\n")
        p_rgh.write("// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //\n\n")
        p_rgh.write("dimensions      [1 -1 -2 0 0 0 0];\n\n")
        p_rgh.write("internalField   uniform 3.92;\n\n")
        p_rgh.write("boundaryField\n")
        p_rgh.write("{\n")
        p_rgh.write("    inlet_water\n")
        p_rgh.write("    {\n")
        p_rgh.write("        type            buoyantPressure;\n")
        p_rgh.write("        gradient        uniform 0;\n")
        p_rgh.write("        value           uniform 0;\n")
        p_rgh.write("    }\n\n")
        p_rgh.write("    inlet_air\n")
        p_rgh.write("    {\n")
        p_rgh.write("        type            buoyantPressure;\n")
        p_rgh.write("        gradient        uniform 0;\n")
        p_rgh.write("        value           uniform 0;\n")
        p_rgh.write("    }\n\n")
        p_rgh.write("    outlet\n")
        p_rgh.write("    {\n")
        p_rgh.write("        type            zeroGradient;\n")
        p_rgh.write("    }\n\n")    
        p_rgh.write("    atmosphere\n")
        p_rgh.write("    {\n")
        p_rgh.write("        type            totalPressure;\n")
        p_rgh.write("        rho             rho;\n")
        p_rgh.write("        psi             none;\n")
        p_rgh.write("        gamma           1;\n")
        p_rgh.write("        p0              uniform 0;\n")
        p_rgh.write("        value           uniform 0;\n")
        p_rgh.write("    }\n\n")
        p_rgh.write("    front\n")
        p_rgh.write("    {\n")
        p_rgh.write("        type            symmetryPlane;\n")
        p_rgh.write("    }\n\n")
        p_rgh.write("    back\n")
        p_rgh.write("    {\n")
        p_rgh.write("        type            symmetryPlane;\n")
        p_rgh.write("    }\n\n")
        p_rgh.write("    bottom\n")
        p_rgh.write("    {\n")
        p_rgh.write("        type            symmetryPlane;\n")
        p_rgh.write("    }\n\n")
        p_rgh.write("    hull_PRT0001\n")
        p_rgh.write("    {\n")
        p_rgh.write("        type            buoyantPressure;\n")
        p_rgh.write("        gradient        uniform 0;\n")
        p_rgh.write("        value           uniform 3.92;\n")
        p_rgh.write("    }\n")
        p_rgh.write("}\n\n")
        p_rgh.write("// ************************************************************************* //")
        p_rgh.close()
        
        #create "U.org" file
        U = open(os.path.join(zeroDir, "U.org"), "w")
        U.write("/*--------------------------------*- C++ -*----------------------------------*\\\n")
        U.write("| =========                 |                                                 |\n")
        U.write("| \\\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |\n")
        U.write("|  \\\    /   O peration     | Version:  2.1.x                                 |\n")
        U.write("|   \\\  /    A nd           | Web:      www.OpenFOAM.org                      |\n")
        U.write("|    \\\/     M anipulation  |                                                 |\n")
        U.write("\*---------------------------------------------------------------------------*/\n")
        U.write("FoamFile\n")
        U.write("{\n")
        U.write("    version     2.0;\n")
        U.write("    format      ascii;\n")
        U.write("    class       volVectorField;\n")
        U.write("    location    \"0\";\n")
        U.write("    object      U;\n")
        U.write("}\n")
        U.write("// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //\n\n")
        U.write("dimensions      [0 1 -1 0 0 0 0];\n\n")
        U.write("internalField   uniform (1 0 0);\n\n")
        U.write("boundaryField\n")
        U.write("{\n")
        U.write("    inlet_water\n")
        U.write("    {\n")
        U.write("        type            fixedValue;\n")
        U.write("        value           $internalField;\n")
        U.write("    }\n\n")
        U.write("    inlet_air\n")
        U.write("    {\n")
        U.write("        type            fixedValue;\n")
        U.write("        value           $internalField;\n")
        U.write("    }\n\n")
        U.write("    outlet\n")
        U.write("    {\n")
        U.write("        type            zeroGradient;\n")
        U.write("    }\n\n")    
        U.write("    atmosphere\n")
        U.write("    {\n")
        U.write("        type            pressureInletOutletVelocity;\n")
        U.write("        value           uniform (0 0 0);\n")
        U.write("    }\n\n")
        U.write("    front\n")
        U.write("    {\n")
        U.write("        type            symmetryPlane;\n")
        U.write("    }\n\n")
        U.write("    back\n")
        U.write("    {\n")
        U.write("        type            symmetryPlane;\n")
        U.write("    }\n\n")
        U.write("    bottom\n")
        U.write("    {\n")
        U.write("        type            symmetryPlane;\n")
        U.write("    }\n\n")
        U.write("    hull_PRT0001\n")
        U.write("    {\n")
        U.write("        type            fixedValue;\n")
        U.write("        value           uniform (0 0 0);\n")
        U.write("    }\n")
        U.write("}\n\n")
        U.write("// ************************************************************************* //")
        U.close()
        
        #create "g" file 
        g = open(constantDir + "\g", "w")
        g.write("/*--------------------------------*- C++ -*----------------------------------*\\\n")
        g.write("| =========                 |                                                 |\n")
        g.write("| \\\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |\n")
        g.write("|  \\\    /   O peration     | Version:  1.7.1                                 |\n")
        g.write("|   \\\  /    A nd           | Web:      www.OpenFOAM.com                      |\n")
        g.write("|    \\\/     M anipulation  |                                                 |\n")
        g.write("\*---------------------------------------------------------------------------*/\n")
        g.write("FoamFile\n")
        g.write("{\n")
        g.write("    version     2.0;\n")
        g.write("    format      ascii;\n")
        g.write("    class       uniformDimensionedVectorField;\n")
        g.write("    location    \"constant\";\n")
        g.write("    object      g;\n")
        g.write("}\n")
        g.write("// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //\n\n")
        g.write("dimensions      [0 1 -2 0 0 0 0];\n")
        g.write("value           ( 0 0 -9.81 );\n\n")
        g.write("// ************************************************************************* //")
        g.close()
        
        #create "RASProperties" file
        RASProperties = open(constantDir + "\RASProperties", "w")
        RASProperties.write("/*--------------------------------*- C++ -*----------------------------------*\\\n")
        RASProperties.write("| =========                 |                                                 |\n")
        RASProperties.write("| \\\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |\n")
        RASProperties.write("|  \\\    /   O peration     | Version:  1.7.1                                 |\n")
        RASProperties.write("|   \\\  /    A nd           | Web:      www.OpenFOAM.com                      |\n")
        RASProperties.write("|    \\\/     M anipulation  |                                                 |\n")
        RASProperties.write("\*---------------------------------------------------------------------------*/\n")
        RASProperties.write("FoamFile\n")
        RASProperties.write("{\n")
        RASProperties.write("    version     2.0;\n")
        RASProperties.write("    format      ascii;\n")
        RASProperties.write("    class       dictionary;\n")
        RASProperties.write("    location    \"constant\";\n")
        RASProperties.write("    object      RASProperties;\n")
        RASProperties.write("}\n")
        RASProperties.write("// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //\n\n")
        RASProperties.write("RASModel        kOmegaSST;\n\n")
        RASProperties.write("turbulence      on;\n\n")
        RASProperties.write("printCoeffs     on;\n\n")
        RASProperties.write("// ************************************************************************* //")
        RASProperties.close()
        
        #create "transportProperties" file
        transportProperties = open(constantDir + "/transportProperties", "w")
        transportProperties.write("/*--------------------------------*- C++ -*----------------------------------*\\\n")
        transportProperties.write("| =========                 |                                                 |\n")
        transportProperties.write("| \\\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |\n")
        transportProperties.write("|  \\\    /   O peration     | Version:  1.7.1                                 |\n")
        transportProperties.write("|   \\\  /    A nd           | Web:      www.OpenFOAM.com                      |\n")
        transportProperties.write("|    \\\/     M anipulation  |                                                 |\n")
        transportProperties.write("\*---------------------------------------------------------------------------*/\n")
        transportProperties.write("FoamFile\n")
        transportProperties.write("{\n")
        transportProperties.write("    version     2.0;\n")
        transportProperties.write("    format      ascii;\n")
        transportProperties.write("    class       dictionary;\n")
        transportProperties.write("    location    \"constant\";\n")
        transportProperties.write("    object      transportProperties;\n")
        transportProperties.write("}\n")
        transportProperties.write("// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //\n\n")
        transportProperties.write("twoPhase\n")
        transportProperties.write("{\n")
        transportProperties.write("    transportModel  twoPhase;\n")
        transportProperties.write("    phase1          phase1;\n")
        transportProperties.write("    phase2          phase2;\n")
        transportProperties.write("}\n\n")
        transportProperties.write("phase1\n")
        transportProperties.write("{\n")
        transportProperties.write("    transportModel  Newtonian;\n")
        transportProperties.write("    nu              nu [ 0 2 -1 0 0 0 0 ] 1e-06;\n")
        transportProperties.write("    rho             rho [ 1 -3 0 0 0 0 0 ] 1000;\n")
        transportProperties.write("    CrossPowerLawCoeffs\n")
        transportProperties.write("    {\n")
        transportProperties.write("        nu0             nu0 [ 0 2 -1 0 0 0 0 ] 1e-06;\n")
        transportProperties.write("        nuInf           nuInf [ 0 2 -1 0 0 0 0 ] 1e-06;\n")
        transportProperties.write("        m               m [ 0 0 1 0 0 0 0 ] 1;\n")
        transportProperties.write("        n               n [ 0 0 0 0 0 0 0 ] 0;\n")
        transportProperties.write("    }\n\n")
        transportProperties.write("    BirdCarreauCoeffs\n")
        transportProperties.write("    {\n")
        transportProperties.write("        nu0             nu0 [ 0 2 -1 0 0 0 0 ] 0.0142515;\n")
        transportProperties.write("        nuInf           nuInf [ 0 2 -1 0 0 0 0 ] 1e-06;\n")
        transportProperties.write("        k               k [ 0 0 1 0 0 0 0 ] 99.6;\n")
        transportProperties.write("        n               n [ 0 0 0 0 0 0 0 ] 0.1003;\n")
        transportProperties.write("    }\n")
        transportProperties.write("}\n\n")
        transportProperties.write("phase2\n")
        transportProperties.write("{\n")
        transportProperties.write("    transportModel  Newtonian;\n")
        transportProperties.write("    nu              nu [ 0 2 -1 0 0 0 0 ] 1.48e-05;\n")
        transportProperties.write("    rho             rho [ 1 -3 0 0 0 0 0 ] 1;\n")
        transportProperties.write("    CrossPowerLawCoeffs\n")
        transportProperties.write("    {\n")
        transportProperties.write("        nu0             nu0 [ 0 2 -1 0 0 0 0 ] 1e-06;\n")
        transportProperties.write("        nuInf           nuInf [ 0 2 -1 0 0 0 0 ] 1e-06;\n")
        transportProperties.write("        m               m [ 0 0 1 0 0 0 0 ] 1;\n")
        transportProperties.write("        n               n [ 0 0 0 0 0 0 0 ] 0;\n")
        transportProperties.write("    }\n\n")
        transportProperties.write("    BirdCarreauCoeffs\n")
        transportProperties.write("    {\n")
        transportProperties.write("        nu0             nu0 [ 0 2 -1 0 0 0 0 ] 0.0142515;\n")
        transportProperties.write("        nuInf           nuInf [ 0 2 -1 0 0 0 0 ] 1e-06;\n")
        transportProperties.write("        k               k [ 0 0 1 0 0 0 0 ] 99.6;\n")
        transportProperties.write("        n               n [ 0 0 0 0 0 0 0 ] 0.1003;\n")
        transportProperties.write("    }\n")
        transportProperties.write("}\n\n")    
        transportProperties.write("sigma           sigma [ 1 0 -2 0 0 0 0 ] 0.07;\n\n")
        transportProperties.write("transportModel  Newtonian;\n")
        transportProperties.write("nu              nu [ 0 2 -1 0 0 0 0 ] 1e-06;\n\n")
        transportProperties.write("// ************************************************************************* //")
        transportProperties.close()
        
        #create "turbulenceProperties" file
        turbulenceProperties = open(os.path.join(constantDir, "turbulenceProperties"), "w")
        turbulenceProperties.write("/*--------------------------------*- C++ -*----------------------------------*\\\n")
        turbulenceProperties.write("| =========                 |                                                 |\n")
        turbulenceProperties.write("| \\\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |\n")
        turbulenceProperties.write("|  \\\    /   O peration     | Version:  1.7.1                                 |\n")
        turbulenceProperties.write("|   \\\  /    A nd           | Web:      www.OpenFOAM.com                      |\n")
        turbulenceProperties.write("|    \\\/     M anipulation  |                                                 |\n")
        turbulenceProperties.write("\*---------------------------------------------------------------------------*/\n")
        turbulenceProperties.write("FoamFile\n")
        turbulenceProperties.write("{\n")
        turbulenceProperties.write("    version     2.0;\n")
        turbulenceProperties.write("    format      ascii;\n")
        turbulenceProperties.write("    class       dictionary;\n")
        turbulenceProperties.write("    location    \"constant\";\n")
        turbulenceProperties.write("    object      turbulenceProperties;\n")
        turbulenceProperties.write("}\n")
        turbulenceProperties.write("// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //\n\n")
        turbulenceProperties.write("simulationType  RASModel;\n\n\n")
        turbulenceProperties.write("// ************************************************************************* //")    
        turbulenceProperties.close()
        
        #create "blockMeshDict" file
        blockMeshDict = open(os.path.join(polyMeshDir, "blockMeshDict"), "w")
        blockMeshDict.write("/*--------------------------------*- C++ -*----------------------------------*\\\n")
        blockMeshDict.write("| =========                 |                                                 |\n")
        blockMeshDict.write("| \\\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |\n")
        blockMeshDict.write("|  \\\    /   O peration     | Version:  2.1.x                                |\n")
        blockMeshDict.write("|   \\\  /    A nd           | Web:      www.OpenFOAM.org                     |\n")
        blockMeshDict.write("|    \\\/     M anipulation  |                                                 |\n")
        blockMeshDict.write("\*---------------------------------------------------------------------------*/\n")
        blockMeshDict.write("FoamFile\n")
        blockMeshDict.write("{\n")
        blockMeshDict.write("    version     2.0;\n")
        blockMeshDict.write("    format      ascii;\n")
        blockMeshDict.write("    class       dictionary;\n")
        blockMeshDict.write("    object      blockMeshDict;\n")
        blockMeshDict.write("}\n")
        blockMeshDict.write("// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //\n\n")
        blockMeshDict.write("convertToMeters 1;\n\n")
        blockMeshDict.write("vertices\n")
        blockMeshDict.write("(\n")
        blockMeshDict.write("    (" + negCDX + " " + negCDY + " " + negCDZ + ")" + "\n")
        blockMeshDict.write("    (" + posCDX + " " + negCDY + " " + negCDZ + ")" + "\n")
        blockMeshDict.write("    (" + posCDX + " " + posCDY + " " + negCDZ + ")" + "\n")
        blockMeshDict.write("    (" + negCDX + " " + posCDY + " " + negCDZ + ")" + "\n")
        blockMeshDict.write("    (" + negCDX + " " + negCDY + " " + "0" + ")" + "\n")
        blockMeshDict.write("    (" + posCDX + " " + negCDY + " " + "0" + ")" + "\n")
        blockMeshDict.write("    (" + posCDX + " " + posCDY + " " + "0" + ")" + "\n")
        blockMeshDict.write("    (" + negCDX + " " + posCDY + " " + "0" + ")" + "\n")
        blockMeshDict.write("    (" + negCDX + " " + negCDY + " " + posCDZ + ")" + "\n")   
        blockMeshDict.write("    (" + posCDX + " " + negCDY + " " + posCDZ + ")" + "\n")
        blockMeshDict.write("    (" + posCDX + " " + posCDY + " " + posCDZ + ")" + "\n")
        blockMeshDict.write("    (" + negCDX + " " + posCDY + " " + posCDZ + ")" + "\n")  
        blockMeshDict.write(");\n\n")
        blockMeshDict.write("blocks\n")
        blockMeshDict.write("(\n")
        blockMeshDict.write("    hex (0 1 2 3 4 5 6 7) (" + ElemX + " " + ElemY + " "  + posElemZ + ") simpleGrading (1 1 1)" + "\n")
        blockMeshDict.write("    hex (4 5 6 7 8 9 10 11) (" + ElemX + " " + ElemY + " "  + negElemZ + ") simpleGrading (1 1 1)" + "\n")
        blockMeshDict.write(");\n\n")
        blockMeshDict.write("edges\n")
        blockMeshDict.write("(\n")
        blockMeshDict.write(");\n\n")
        blockMeshDict.write("boundary\n")
        blockMeshDict.write("(\n")
        blockMeshDict.write("    inlet_water\n")
        blockMeshDict.write("    {\n")
        blockMeshDict.write("        type patch;\n")
        blockMeshDict.write("        faces\n")
        blockMeshDict.write("        (\n")
        blockMeshDict.write("            (0 4 7 3)\n")
        blockMeshDict.write("        );\n")
        blockMeshDict.write("    }\n\n")
        blockMeshDict.write("    inlet_air\n")
        blockMeshDict.write("    {\n")
        blockMeshDict.write("        type patch;\n")
        blockMeshDict.write("        faces\n")
        blockMeshDict.write("        (\n")
        blockMeshDict.write("            (4 8 11 7)\n")
        blockMeshDict.write("        );\n")  
        blockMeshDict.write("    }\n\n")  
        blockMeshDict.write("    outlet\n")
        blockMeshDict.write("    {\n")
        blockMeshDict.write("        type patch;\n")
        blockMeshDict.write("        faces\n")
        blockMeshDict.write("        (\n")
        blockMeshDict.write("            (2 6 5 1)\n")
        blockMeshDict.write("            (6 10 9 5)\n")
        blockMeshDict.write("        );\n")   
        blockMeshDict.write("    }\n\n")     
        blockMeshDict.write("    atmosphere\n")
        blockMeshDict.write("    {\n")
        blockMeshDict.write("        type patch;\n")
        blockMeshDict.write("        faces\n")
        blockMeshDict.write("        (\n")
        blockMeshDict.write("            (8 9 10 11)\n")
        blockMeshDict.write("        );\n")    
        blockMeshDict.write("    }\n\n")
        blockMeshDict.write("    front\n")
        blockMeshDict.write("    {\n")
        blockMeshDict.write("        type symmetryPlane;\n")
        blockMeshDict.write("        faces\n")
        blockMeshDict.write("        (\n")
        blockMeshDict.write("            (1 5 4 0)\n")
        blockMeshDict.write("            (5 9 8 4)\n")
        blockMeshDict.write("        );\n")  
        blockMeshDict.write("    }\n\n")
        blockMeshDict.write("    back\n")
        blockMeshDict.write("    {\n")
        blockMeshDict.write("        type symmetryPlane;\n")
        blockMeshDict.write("        faces\n")
        blockMeshDict.write("        (\n")
        blockMeshDict.write("            (3 7 6 2)\n")
        blockMeshDict.write("            (7 11 10 6)\n")
        blockMeshDict.write("        );\n")   
        blockMeshDict.write("    }\n\n")   
        blockMeshDict.write("    bottom\n")
        blockMeshDict.write("    {\n")
        blockMeshDict.write("        type symmetryPlane;\n")
        blockMeshDict.write("        faces\n")
        blockMeshDict.write("        (\n")
        blockMeshDict.write("            (0 3 2 1)\n")
        blockMeshDict.write("        );\n")   
        blockMeshDict.write("    }\n")
        blockMeshDict.write(");\n\n\n")
        blockMeshDict.write("// ************************************************************************* //")
        blockMeshDict.close()
        
        #create "controlDict" file
        controlDict = open(systemDir + "\controlDict", "w")
        controlDict.write("/*--------------------------------*- C++ -*----------------------------------*\\\n")
        controlDict.write("| =========                 |                                                 |\n")
        controlDict.write("| \\\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |\n")
        controlDict.write("|  \\\    /   O peration     | Version:  1.7.1                                 |\n")
        controlDict.write("|   \\\  /    A nd           | Web:      www.OpenFOAM.com                      |\n")
        controlDict.write("|    \\\/     M anipulation  |                                                 |\n")
        controlDict.write("\*---------------------------------------------------------------------------*/\n")
        controlDict.write("FoamFile\n")
        controlDict.write("{\n")
        controlDict.write("    version     2.0;\n")
        controlDict.write("    format      ascii;\n")
        controlDict.write("    class       dictionary;\n")
        controlDict.write("    location    \"system\";\n")
        controlDict.write("    object      controlDict;\n")
        controlDict.write("}\n")
        controlDict.write("// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //\n\n")
        controlDict.write("application     interFoam;\n\n")
        controlDict.write("startFrom       latestTime;\n\n")
        controlDict.write("startTime       0;\n\n")
        controlDict.write("stopAt          endTime;\n\n")
        controlDict.write("endTime         " + simTime + ";\n\n")
        controlDict.write("deltaT          0.001;\n\n")
        controlDict.write("writeControl    adjustableRunTime;\n\n")
        controlDict.write("writeInterval   0.05;\n\n")
        controlDict.write("purgeWrite      0;\n\n")
        controlDict.write("writeFormat     ascii;\n\n")
        controlDict.write("writePrecision  6;\n\n")
        controlDict.write("writeCompression uncompressed;\n\n")
        controlDict.write("timeFormat      general;\n\n")
        controlDict.write("timePrecision   6;\n\n")
        controlDict.write("runTimeModifiable yes;\n\n")
        controlDict.write("adjustTimeStep  on;\n\n")
        controlDict.write("maxCo           0.5;\n")
        controlDict.write("maxAlphaCo      0.5;\n\n")
        controlDict.write("maxDeltaT       1;\n\n")
        controlDict.write("functions\n")
        controlDict.write("{\n")
        controlDict.write("    forces\n")
        controlDict.write("    {\n")
        controlDict.write("        type forces;\n")
        controlDict.write("        functionObjectLibs (\"libforces.so\");\n")
        controlDict.write("        patches (hull_PRT0001);\n")
        controlDict.write("        rhoName rho;\n")
        controlDict.write("        rhoInf 1000;\n")
        controlDict.write("        CofR (0 0 0);\n")
        controlDict.write("        outputControl timeStep;\n")
        controlDict.write("        outputInterval 1;\n")
        controlDict.write("        log    true;\n")
        controlDict.write("    }\n")
        controlDict.write("}\n\n")
        controlDict.write("libs\n")
        controlDict.write("(\n")
        controlDict.write("    \"libOpenFOAM.so\"\n")
        controlDict.write("    \"libfvMotionSolvers.so\"\n")
        controlDict.write("    \"libforces.so\"\n")
        controlDict.write(");\n\n")
        controlDict.write("// ************************************************************************* //")
        controlDict.close()
        
        #make "decomposeParDict" file
        decomposeParDict = open(systemDir + "\decomposeParDict", "w")
        decomposeParDict.write("/*--------------------------------*- C++ -*----------------------------------*\\\n")
        decomposeParDict.write("| =========                 |                                                 |\n")
        decomposeParDict.write("| \\\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |\n")
        decomposeParDict.write("|  \\\    /   O peration     | Version:  1.7.1                                 |\n")
        decomposeParDict.write("|   \\\  /    A nd           | Web:      www.OpenFOAM.com                      |\n")
        decomposeParDict.write("|    \\\/     M anipulation  |                                                 |\n")
        decomposeParDict.write("\*---------------------------------------------------------------------------*/\n")
        decomposeParDict.write("FoamFile\n")
        decomposeParDict.write("{\n")
        decomposeParDict.write("    version     2.0;\n")
        decomposeParDict.write("    format      ascii;\n")
        decomposeParDict.write("    class       dictionary;\n")
        decomposeParDict.write("    location    \"system\";\n")
        decomposeParDict.write("    object      decomposeParDict;\n")
        decomposeParDict.write("}\n")
        decomposeParDict.write("// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //\n\n")    
        decomposeParDict.write("numberOfSubdomains 4;\n\n")
        decomposeParDict.write("method          simple;\n\n")
        decomposeParDict.write("simpleCoeffs\n")
        decomposeParDict.write("{\n")
        decomposeParDict.write("    n               ( 2 2 1 );\n")
        decomposeParDict.write("    delta           0.001;\n")
        decomposeParDict.write("}\n\n")
        decomposeParDict.write("hierarchicalCoeffs\n")
        decomposeParDict.write("{\n")
        decomposeParDict.write("    n               ( 1 1 1 );\n")
        decomposeParDict.write("    delta           0.001;\n")
        decomposeParDict.write("    order           xyz;\n")
        decomposeParDict.write("}\n\n")
        decomposeParDict.write("manualCoeffs\n")
        decomposeParDict.write("{\n")
        decomposeParDict.write("    dataFile        \"\";\n")
        decomposeParDict.write("}\n\n")
        decomposeParDict.write("distributed     no;\n\n")
        decomposeParDict.write("roots           ( );\n\n\n")
        decomposeParDict.write("// ************************************************************************* //")
        decomposeParDict.close()
        
        #create "extrudeMeshDict" file
        extrudeMeshDict = open(systemDir + "\extrudeMeshDict", "w")
        extrudeMeshDict.write("/*--------------------------------*- C++ -*----------------------------------*\\\n")
        extrudeMeshDict.write("| =========                 |                                                 |\n")
        extrudeMeshDict.write("| \\\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |\n")
        extrudeMeshDict.write("|  \\\    /   O peration     | Version:  2.1.1                                 |\n")
        extrudeMeshDict.write("|   \\\  /    A nd           | Web:      www.OpenFOAM.org                      |\n")
        extrudeMeshDict.write("|    \\\/     M anipulation  |                                                 |\n")
        extrudeMeshDict.write("\*---------------------------------------------------------------------------*/\n")
        extrudeMeshDict.write("FoamFile\n")
        extrudeMeshDict.write("{\n")
        extrudeMeshDict.write("    version     2.0;\n")
        extrudeMeshDict.write("    format      ascii;\n")
        extrudeMeshDict.write("    class       dictionary;\n")
        extrudeMeshDict.write("    object      extrudeProperties;\n")
        extrudeMeshDict.write("}\n")
        extrudeMeshDict.write("// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //\n\n")    
        extrudeMeshDict.write("// What to extrude:\n")
        extrudeMeshDict.write("//      patch   : from patch of another case ('sourceCase')\n\n")
        extrudeMeshDict.write("constructFrom patch;\n")
        extrudeMeshDict.write("sourceCase \".\";\n")
        extrudeMeshDict.write("sourcePatches (front);\n\n")
        extrudeMeshDict.write("// If construct from patch: patch to use for back (can be same as sourcePatch)\n")
        extrudeMeshDict.write("exposedPatchName back;\n\n")
        extrudeMeshDict.write("// Flip surface normals before usage.\n")
        extrudeMeshDict.write("flipNormals false;\n\n")
        extrudeMeshDict.write("//- Linear extrusion in point-normal direction\n")
        extrudeMeshDict.write("extrudeModel        linearNormal;\n\n")
        extrudeMeshDict.write("nLayers             1;\n\n")
        extrudeMeshDict.write("expansionRatio      1.0;\n\n")
        extrudeMeshDict.write("linearNormalCoeffs\n")
        extrudeMeshDict.write("{\n")
        extrudeMeshDict.write("    thickness       0.004;\n")
        extrudeMeshDict.write("}\n\n")
        extrudeMeshDict.write("// Do front and back need to be merged? Usually only makes sense for 360\n")
        extrudeMeshDict.write("// degree wedges.\n")
        extrudeMeshDict.write("mergeFaces false;\n\n\n")
        extrudeMeshDict.write("// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //")
        extrudeMeshDict.close()
        
        #create "fvSchemes" file
        fvSchemes = open(os.path.join(systemDir, "fvSchemes"), "w")
        fvSchemes.write("/*--------------------------------*- C++ -*----------------------------------*\\\n")
        fvSchemes.write("| =========                 |                                                 |\n")
        fvSchemes.write("| \\\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |\n")
        fvSchemes.write("|  \\\    /   O peration     | Version:  1.7.1                                 |\n")
        fvSchemes.write("|   \\\  /    A nd           | Web:      www.OpenFOAM.com                      |\n")
        fvSchemes.write("|    \\\/     M anipulation  |                                                 |\n")
        fvSchemes.write("\*---------------------------------------------------------------------------*/\n")
        fvSchemes.write("FoamFile\n")
        fvSchemes.write("{\n")
        fvSchemes.write("    version     2.0;\n")
        fvSchemes.write("    format      ascii;\n")
        fvSchemes.write("    class       dictionary;\n")
        fvSchemes.write("    location    \"system\";\n")
        fvSchemes.write("    object      fvSchemes;\n")
        fvSchemes.write("}\n")
        fvSchemes.write("// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //\n\n")         
        fvSchemes.write("ddtSchemes\n")
        fvSchemes.write("{\n")
        fvSchemes.write("    default         Euler;\n")
        fvSchemes.write("}\n\n")
        fvSchemes.write("gradSchemes\n")
        fvSchemes.write("{\n")
        fvSchemes.write("    default         Gauss linear;\n")
        fvSchemes.write("    grad(U)         cellLimited Gauss linear 1.0;\n")
        fvSchemes.write("}\n\n")
        fvSchemes.write("divSchemes\n")
        fvSchemes.write("{\n")
        fvSchemes.write('    div(rho*phi,U)  Gauss linearUpwind grad(U);\n')
        fvSchemes.write("    div(phi,alpha)  Gauss vanLeer;\n")
        fvSchemes.write("    div(phirb,alpha) Gauss interfaceCompression;\n")
        fvSchemes.write("    div(phi,k)      Gauss upwind;\n")
        fvSchemes.write("    div(phi,omega) Gauss upwind;\n")
        fvSchemes.write("    div(phi,R)      Gauss upwind;\n")
        fvSchemes.write("    div(R)          Gauss linear;\n")
        fvSchemes.write("    div(phi,nuTilda) Gauss upwind;\n")
        fvSchemes.write("    div((nuEff*dev(grad(U).T()))) Gauss linear;\n")
        fvSchemes.write("    div((muEff*dev(T(grad(U))))) Gauss linear;\n")
        fvSchemes.write("    div((nuEff*dev(T(grad(U))))) Gauss linear;\n")
        fvSchemes.write("}\n\n")
        fvSchemes.write("laplacianSchemes\n")
        fvSchemes.write("{\n")
        fvSchemes.write("    default         Gauss linear corrected;\n")
        fvSchemes.write("}\n\n")
        fvSchemes.write("interpolationSchemes\n")
        fvSchemes.write("{\n")
        fvSchemes.write("    default         linear;\n")
        fvSchemes.write("}\n\n")
        fvSchemes.write("snGradSchemes\n")
        fvSchemes.write("{\n")
        fvSchemes.write("    default         corrected;\n")
        fvSchemes.write("}\n\n")
        fvSchemes.write("fluxRequired\n")
        fvSchemes.write("{\n")
        fvSchemes.write("    default         no;\n")
        fvSchemes.write("    p_rgh;\n")
        fvSchemes.write("    pcorr;\n")
        fvSchemes.write("    alpha;\n")
        fvSchemes.write("}\n\n\n")
        fvSchemes.write("// ************************************************************************* //")
        fvSchemes.close()
        
        #create "fvSolution" file
        fvSolution = open(os.path.join(systemDir, "fvSolution"), "w")
        fvSolution.write("/*--------------------------------*- C++ -*----------------------------------*\\\n")
        fvSolution.write("| =========                 |                                                 |\n")
        fvSolution.write("| \\\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |\n")
        fvSolution.write("|  \\\    /   O peration     | Version:  1.7.1                                 |\n")
        fvSolution.write("|   \\\  /    A nd           | Web:      www.OpenFOAM.com                      |\n")
        fvSolution.write("|    \\\/     M anipulation  |                                                 |\n")
        fvSolution.write("\*---------------------------------------------------------------------------*/\n")
        fvSolution.write("FoamFile\n")
        fvSolution.write("{\n")
        fvSolution.write("    version     2.0;\n")
        fvSolution.write("    format      ascii;\n")
        fvSolution.write("    class       dictionary;\n")
        fvSolution.write("    location    \"system\";\n")
        fvSolution.write("    object      fvSolution;\n")
        fvSolution.write("}\n")
        fvSolution.write("// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //\n\n")         
        fvSolution.write("solvers\n")
        fvSolution.write("{\n")
        fvSolution.write("    pcorr\n")
        fvSolution.write("    {\n")
        fvSolution.write("       solver          PCG;\n")
        fvSolution.write("       preconditioner\n")
        fvSolution.write("        {\n")
        fvSolution.write("            preconditioner  GAMG;\n")
        fvSolution.write("            tolerance       1e-05;\n")
        fvSolution.write("            relTol          0;\n")
        fvSolution.write("            smoother        DICGaussSeidel;\n")
        fvSolution.write("            nPreSweeps      0;\n")
        fvSolution.write("            nPostSweeps     2;\n")
        fvSolution.write("            nBottomSweeps   2;\n")
        fvSolution.write("            cacheAgglomeration false;\n")
        fvSolution.write("            nCellsInCoarsestLevel 10;\n")
        fvSolution.write("            agglomerator    faceAreaPair;\n")
        fvSolution.write("            mergeLevels     1;\n")
        fvSolution.write("        }\n")
        fvSolution.write("        tolerance       1e-10;\n")
        fvSolution.write("        relTol          0;\n")
        fvSolution.write("        maxIter         100;\n")
        fvSolution.write("    }\n\n")
        fvSolution.write("    p_rgh\n")
        fvSolution.write("    {\n")
        fvSolution.write("        solver          GAMG;\n")
        fvSolution.write("        tolerance       1e-08;\n")
        fvSolution.write("        relTol          0.01;\n")
        fvSolution.write("        smoother        DIC;\n")
        fvSolution.write("        nPreSweeps      0;\n")
        fvSolution.write("        nPostSweeps     2;\n")
        fvSolution.write("        nFinestSweeps   2;\n")
        fvSolution.write("        cacheAgglomeration true;\n")
        fvSolution.write("        nCellsInCoarsestLevel 10;\n")
        fvSolution.write("        agglomerator    faceAreaPair;\n")
        fvSolution.write("        mergeLevels     1;\n")
        fvSolution.write("    }\n\n")
        fvSolution.write("    p_rghFinal\n")
        fvSolution.write("    {\n")
        fvSolution.write("        solver          PCG;\n")
        fvSolution.write("        preconditioner\n")
        fvSolution.write("        {\n")
        fvSolution.write("            preconditioner  GAMG;\n")
        fvSolution.write("            tolerance       2e-09;\n")
        fvSolution.write("            relTol          0;\n")
        fvSolution.write("            nVcycles        2;\n")
        fvSolution.write("            smoother        DICGaussSeidel;\n")
        fvSolution.write("            nPreSweeps      2;\n")
        fvSolution.write("            nPostSweeps     2;\n")
        fvSolution.write("            nFinestSweeps   2;\n")
        fvSolution.write("            cacheAgglomeration true;\n")
        fvSolution.write("            nCellsInCoarsestLevel 10;\n")
        fvSolution.write("            agglomerator    faceAreaPair;\n")
        fvSolution.write("            mergeLevels     1;\n")
        fvSolution.write("        }\n")
        fvSolution.write("        tolerance       2e-09;\n")
        fvSolution.write("        relTol          0;\n")
        fvSolution.write("        maxIter         20;\n")
        fvSolution.write("    }\n\n")
        fvSolution.write("    cellDisplacement\n")
        fvSolution.write("    {\n")
        fvSolution.write("        solver          GAMG;\n")
        fvSolution.write("        tolerance       1e-5;\n")
        fvSolution.write("        relTol          0;\n")
        fvSolution.write("        smoother        GaussSeidel;\n")
        fvSolution.write("        cacheAgglomeration true;\n")
        fvSolution.write("        nCellsInCoarsestLevel 10;\n")
        fvSolution.write("        agglomerator    faceAreaPair;\n")
        fvSolution.write("        mergeLevels     1;\n")
        fvSolution.write("    }\n\n")
        fvSolution.write("    U\n")
        fvSolution.write("    {\n")
        fvSolution.write("        solver          PBiCG;\n")
        fvSolution.write("        preconditioner  DILU;\n")
        fvSolution.write("        tolerance       1e-06;\n")
        fvSolution.write("        relTol          0;\n")
        fvSolution.write("    }\n")
        fvSolution.write("    UFinal\n")
        fvSolution.write("    {\n")
        fvSolution.write("        solver          PBiCG;\n")
        fvSolution.write("        preconditioner  DILU;\n")
        fvSolution.write("        tolerance       1e-06;\n")
        fvSolution.write("        relTol          0;\n")
        fvSolution.write("    }\n\n")
        fvSolution.write("    k\n")
        fvSolution.write("    {\n")
        fvSolution.write("        solver          PBiCG;\n")
        fvSolution.write("        preconditioner  DILU;\n")
        fvSolution.write("        tolerance       1e-08;\n")
        fvSolution.write("        relTol          0;\n")
        fvSolution.write("    }\n\n")    
        fvSolution.write("    kFinal\n")
        fvSolution.write("    {\n")
        fvSolution.write("        solver          PBiCG;\n")
        fvSolution.write("        preconditioner  DILU;\n")
        fvSolution.write("        tolerance       1e-08;\n")
        fvSolution.write("        relTol          0;\n")
        fvSolution.write("    }\n\n")        
        fvSolution.write("    omega\n")
        fvSolution.write("    {\n")
        fvSolution.write("        solver          PBiCG;\n")
        fvSolution.write("        preconditioner  DILU;\n")
        fvSolution.write("        tolerance       1e-08;\n")
        fvSolution.write("        relTol          0;\n")
        fvSolution.write("    }\n\n")      
        fvSolution.write("    omegaFinal\n")
        fvSolution.write("    {\n")
        fvSolution.write("        solver          PBiCG;\n")
        fvSolution.write("        preconditioner  DILU;\n")
        fvSolution.write("        tolerance       1e-08;\n")
        fvSolution.write("        relTol          0;\n")
        fvSolution.write("    }\n\n")     
        fvSolution.write("    R\n")
        fvSolution.write("    {\n")
        fvSolution.write("        solver          PBiCG;\n")
        fvSolution.write("        preconditioner  DILU;\n")
        fvSolution.write("        tolerance       1e-08;\n")
        fvSolution.write("        relTol          0;\n")
        fvSolution.write("    }\n\n")       
        fvSolution.write("    nuTilda\n")
        fvSolution.write("    {\n")
        fvSolution.write("        solver          PBiCG;\n")
        fvSolution.write("        preconditioner  DILU;\n")
        fvSolution.write("        tolerance       1e-08;\n")
        fvSolution.write("        relTol          0;\n")
        fvSolution.write("    }\n")   
        fvSolution.write("}\n\n")   
        fvSolution.write("PIMPLE\n")
        fvSolution.write("{\n")
        fvSolution.write("    momentumPredictor yes;\n")
        fvSolution.write("    nCorrectors     3;\n")
        fvSolution.write("    nNonOrthogonalCorrectors 0;\n")
        fvSolution.write("    nAlphaCorr      1;\n")
        fvSolution.write("    nAlphaSubCycles 4;\n")
        fvSolution.write("    cAlpha          2;\n")
        fvSolution.write("}\n\n\n")
        fvSolution.write("// ************************************************************************* //")
        fvSolution.close()
        
        #create "setFieldsDict" file
        setFieldsDict = open(systemDir + "\setFieldsDict", "w")
        setFieldsDict.write("/*--------------------------------*- C++ -*----------------------------------*\\\n")
        setFieldsDict.write("| =========                 |                                                 |\n")
        setFieldsDict.write("| \\\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |\n")
        setFieldsDict.write("|  \\\    /   O peration     | Version:  1.7.1                                 |\n")
        setFieldsDict.write("|   \\\  /    A nd           | Web:      www.OpenFOAM.com                      |\n")
        setFieldsDict.write("|    \\\/     M anipulation  |                                                 |\n")
        setFieldsDict.write("\*---------------------------------------------------------------------------*/\n")
        setFieldsDict.write("FoamFile\n")
        setFieldsDict.write("{\n")
        setFieldsDict.write("    version     2.0;\n")
        setFieldsDict.write("    format      ascii;\n")
        setFieldsDict.write("    class       dictionary;\n")
        setFieldsDict.write("    location    \"system\";\n")
        setFieldsDict.write("    object      setFieldsDict;\n")
        setFieldsDict.write("}\n")
        setFieldsDict.write("// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //\n\n") 
        setFieldsDict.write("defaultFieldValues\n")
        setFieldsDict.write("(\n")
        setFieldsDict.write("    volScalarFieldValue alpha1 0\n")
        setFieldsDict.write(");\n\n")
        setFieldsDict.write("regions\n")
        setFieldsDict.write("(\n")
        setFieldsDict.write("    boxToCell\n")
        setFieldsDict.write("    {\n")
        setFieldsDict.write("        box (-1000 -1000 -1000) (1000 1000  0);\n")
        setFieldsDict.write("        fieldValues\n")
        setFieldsDict.write("        (\n")
        setFieldsDict.write("            volScalarFieldValue alpha1 1\n")
        setFieldsDict.write("        );\n")
        setFieldsDict.write("    }\n")
        setFieldsDict.write(");\n\n\n")
        setFieldsDict.write("// ************************************************************************* //")
        setFieldsDict.close()
        
        #create "snappyHexMeshDict" file
        snappy = open(systemDir + "\snappyHexMeshDict", "w")
        snappy.write("/*--------------------------------*- C++ -*----------------------------------*\\\n")
        snappy.write("| =========                 |                                                 |\n")
        snappy.write("| \\\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |\n")
        snappy.write("|  \\\    /   O peration     | Version:  2.2.0                                 |\n")
        snappy.write("|   \\\  /    A nd           | Web:      www.OpenFOAM.org                      |\n")
        snappy.write("|    \\\/     M anipulation  |                                                 |\n")
        snappy.write("\*---------------------------------------------------------------------------*/\n")
        snappy.write("FoamFile\n")
        snappy.write("{\n")
        snappy.write("    version     2.0;\n")
        snappy.write("    format      ascii;\n")
        snappy.write("    class       dictionary;\n")
        snappy.write("    object      autoHexMeshDict;\n")
        snappy.write("}\n\n")
        snappy.write("// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //\n\n")
        snappy.write("// Which of the steps to run\n")
        snappy.write("castellatedMesh true;\n")
        snappy.write("snap            true;\n")
        snappy.write("addLayers       false;\n\n\n")
        snappy.write("// Geometry. Definition of all surfaces. All surfaces are of class\n")
        snappy.write("// searchableSurface.\n")
        snappy.write("// Surfaces are used\n")
        snappy.write("// - to specify refinement for any mesh cell intersecting it\n")
        snappy.write("// - to specify refinement for any mesh cell inside/outside/near\n")
        snappy.write("// - to 'snap' the mesh boundary to the surface\n")
        snappy.write("geometry\n")
        snappy.write("{\n")
        snappy.write("    ifv.stl\n")
        snappy.write("    {\n")
        snappy.write("        type triSurfaceMesh;\n")
        snappy.write("        name hull;\n\n")
        snappy.write("        patchInfo\n")
        snappy.write("        {\n")
        snappy.write("            type wall;\n")
        snappy.write("        }\n")
        snappy.write("    }\n\n")
        snappy.write("    box1\n")
        snappy.write("    {\n")
        snappy.write("        type searchableBox;\n")
        snappy.write("        min (" + negCDXsnap2 + " " + negCDYsnap2 + " "  + negCDZsnap2 + ");\n")
        snappy.write("        max (" + posCDXsnap2 + " " + posCDYsnap2 + " "  + posCDZsnap2 + ");\n")
        snappy.write("    }\n\n")
        snappy.write("    box2\n")
        snappy.write("    {\n")
        snappy.write("        type searchableBox;\n")
        snappy.write("        min (" + negCDXsnap1 + " " + negCDYsnap1 + " "  + negCDZsnap1 + ");\n")
        snappy.write("        max (" + posCDXsnap1 + " " + posCDYsnap1 + " "  + posCDZsnap1 + ");\n")
        snappy.write("    }\n\n")
        snappy.write("    box3\n")
        snappy.write("    {\n")
        snappy.write("        type searchableBox;\n")
        snappy.write("        min (-100000 -100000" + " "  + negCDZsnap0 + ");\n")
        snappy.write("        max ( 100000  100000" + " "  + posCDZsnap0 + ");\n")
        snappy.write("    }\n\n")    
        snappy.write("};\n\n\n\n")
        snappy.write("// Settings for the castellatedMesh generation.\n")
        snappy.write("castellatedMeshControls\n")
        snappy.write("{\n\n")
        snappy.write("    // Refinement parameters\n")
        snappy.write("    // ~~~~~~~~~~~~~~~~~~~~~\n\n")
        snappy.write("    // If local number of cells is >= maxLocalCells on any processor\n")
        snappy.write("    // switches from from refinement followed by balancing\n")
        snappy.write("    // (current method) to (weighted) balancing before refinement.\n")
        snappy.write("    maxLocalCells 100000;\n\n")
        snappy.write("    // Overall cell limit (approximately). Refinement will stop immediately\n")
        snappy.write("    // upon reaching this number so a refinement level might not complete.\n")
        snappy.write("    // Note that this is the number of cells before removing the part which\n")
        snappy.write("    // is not 'visible' from the keepPoint. The final number of cells might\n")
        snappy.write("    // actually be a lot less.\n")
        snappy.write("    maxGlobalCells 2000000;\n\n")
        snappy.write("    // The surface refinement loop might spend lots of iterations refining just a\n")        
        snappy.write("    // few cells. This setting will cause refinement to stop if <= minimumRefine\n")        
        snappy.write("    // are selected for refinement. Note: it will at least do one iteration\n")        
        snappy.write("    // (unless the number of cells to refine is 0)\n")
        snappy.write("    minRefinementCells 0;\n\n")        
        snappy.write("    // Number of buffer layers between different levels.\n")
        snappy.write("    // 1 means normal 2:1 refinement restriction, larger means slower\n")        
        snappy.write("    // refinement.\n")        
        snappy.write("    nCellsBetweenLevels 3;\n\n\n\n")        
        snappy.write("    // Explicit feature edge refinement\n")        
        snappy.write("    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n")        
        snappy.write("    // Specifies a level for any cell intersected by its edges.\n")        
        snappy.write("    // This is a featureEdgeMesh, read from constant/triSurface for now.\n")        
        snappy.write("    features\n")
        snappy.write("    (\n")
        snappy.write("        // {\n")
        snappy.write("        //     file \"wigley-scaled.eMesh\";\n")
        snappy.write("        //     level 3;\n")
        snappy.write("        // }\n")
        snappy.write("    );\n\n\n\n")
        snappy.write("    // Surface based refinement\n")
        snappy.write("    // ~~~~~~~~~~~~~~~~~~~~~~~~\n\n")
        snappy.write("    // Specifies two levels for every surface. The first is the minimum level,\n")
        snappy.write("    // every cell intersecting a surface gets refined up to the minimum level.\n")
        snappy.write("    // The second level is the maximum level. Cells that 'see' multiple\n")
        snappy.write("    // intersections where the intersections make an\n")
        snappy.write("    // angle > resolveFeatureAngle get refined up to the maximum level.\n\n")
        snappy.write("    refinementSurfaces\n")
        snappy.write("    {\n")
        snappy.write("        hull\n")
        snappy.write("        {\n")
        snappy.write("            // Surface-wise min and max refinement level\n")
        snappy.write("            level (3 3);\n")
        snappy.write("        }\n")
        snappy.write("    }\n\n")
        snappy.write("    resolveFeatureAngle 45;\n\n\n")
        snappy.write("    // Region-wise refinement\n")
        snappy.write("    // ~~~~~~~~~~~~~~~~~~~~~~\n\n")
        snappy.write("    // Specifies refinement level for cells in relation to a surface. One of\n")
        snappy.write("    // three modes\n")
        snappy.write("    // - distance. 'levels' specifies per distance to the surface the\n")
        snappy.write("    //   wanted refinement level. The distances need to be specified in\n")
        snappy.write("    //   descending order.\n")
        snappy.write("    // - inside. 'levels' is only one entry and only the level is used. All\n")
        snappy.write("    //   cells inside the surface get refined up to the level. The surface\n")
        snappy.write("    //   needs to be closed for this to be possible.\n")
        snappy.write("    // - outside. Same but cells outside.\n\n")
        snappy.write("    refinementRegions\n")
        snappy.write("    {\n")
        snappy.write("        box1\n")
        snappy.write("        {\n")
        snappy.write("            mode inside;\n")
        snappy.write("            levels ((1e15 1));\n")
        snappy.write("        }\n")
        snappy.write("        box2\n")
        snappy.write("        {\n")
        snappy.write("            mode inside;\n")
        snappy.write("            levels ((1e15 2));\n")
        snappy.write("        }\n")
        snappy.write("        box3\n")
        snappy.write("       {\n")
        snappy.write("            mode inside;\n")
        snappy.write("            levels ((1e15 2));\n")
        snappy.write("        }\n")
        snappy.write("    }\n\n\n")
        snappy.write("    // Mesh selection\n")
        snappy.write("    // ~~~~~~~~~~~~~~\n\n")
        snappy.write("    // After refinement patches get added for all refinementSurfaces and\n")
        snappy.write("    // all cells intersecting the surfaces get put into these patches. The\n")
        snappy.write("    // section reachable from the locationInMesh is kept.\n")
        snappy.write("    // NOTE: This point should never be on a face, always inside a cell, even\n")
        snappy.write("    // after refinement.\n")
        snappy.write("    locationInMesh (" + forSnappy + " " + "0 0);\n\n\n")
        snappy.write("    // Whether any faceZones (as specified in the refinementSurfaces)\n")
        snappy.write("    // are only on the boundary of corresponding cellZones or also allow\n")
        snappy.write("    // free-standing zone faces. Not used if there are no faceZones.\n")
        snappy.write("    allowFreeStandingZoneFaces true;\n")
        snappy.write("}\n\n\n\n")
        snappy.write("// Settings for the snapping.\n")
        snappy.write("snapControls\n")
        snappy.write("{\n")
        snappy.write("    //- Number of patch smoothing iterations before finding correspondence\n")
        snappy.write("    //  to surface\n")
        snappy.write("    nSmoothPatch 3;\n\n")
        snappy.write("    //- Relative distance for points to be attracted by surface feature point\n")
        snappy.write("    //  or edge. True distance is this factor times local\n")
        snappy.write("    //  maximum edge length.\n")
        snappy.write("    //  tolerance 4.0;\n")
        snappy.write("    tolerance 1.0;\n\n")
        snappy.write("    //- Number of mesh displacement relaxation iterations.\n")
        snappy.write("    nSolveIter 300;\n\n")
        snappy.write("    //- Maximum number of snapping relaxation iterations. Should stop\n")
        snappy.write("    //  before upon reaching a correct mesh.\n")
        snappy.write("    nRelaxIter 5;\n")
        snappy.write("}\n\n\n\n")
        snappy.write("// Settings for the layer addition.\n")
        snappy.write("addLayersControls\n")
        snappy.write("{\n\n")
        snappy.write("    // Are the thickness parameters below relative to the undistorted\n")
        snappy.write("    // size of the refined cell outside layer (true) or absolute sizes (false).\n")
        snappy.write("    relativeSizes true;\n\n")
        snappy.write("    // Per final patch (so not geometry!) the layer information\n")
        snappy.write("    layers\n")
        snappy.write("    {\n")
        snappy.write("        hull\n")
        snappy.write("        {\n")
        snappy.write("            nSurfaceLayers 1;\n\n")
        snappy.write("        }\n")
        snappy.write("    }\n\n")
        snappy.write("    // Expansion factor for layer mesh\n")
        snappy.write("    expansionRatio 1.0;\n\n\n")
        snappy.write("    // Wanted thickness of final added cell layer. If multiple layers\n")
        snappy.write("    // is the thickness of the layer furthest away from the wall.\n")
        snappy.write("    // See relativeSizes parameter.\n")
        snappy.write("    finalLayerThickness 0.3;\n\n")
        snappy.write("    // Minimum thickness of cell layer. If for any reason layer\n")
        snappy.write("    // cannot be above minThickness do not add layer.\n")
        snappy.write("    // See relativeSizes parameter.\n")
        snappy.write("    minThickness 0.25;\n\n")
        snappy.write("    // If points get not extruded do nGrow layers of connected faces that are\n")
        snappy.write("    // also not grown. This helps convergence of the layer addition process\n")
        snappy.write("    // close to features.\n")
        snappy.write("    // Note: changed(corrected) w.r.t 17x! (didn't do anything in 17x)\n")
        snappy.write("    nGrow 0;\n\n\n")
        snappy.write("    // Advanced settings\n\n")
        snappy.write("    // When not to extrude surface. 0 is flat surface, 90 is when two faces\n")
        snappy.write("    // are perpendicular\n")
        snappy.write("    featureAngle 60;\n\n")
        snappy.write("    // Maximum number of snapping relaxation iterations. Should stop\n")
        snappy.write("    // before upon reaching a correct mesh.\n")
        snappy.write("    nRelaxIter 5;\n\n")
        snappy.write("    // Number of smoothing iterations of surface normals\n")
        snappy.write("    nSmoothSurfaceNormals 1;\n\n")
        snappy.write("    // Number of smoothing iterations of interior mesh movement direction\n")
        snappy.write("    nSmoothNormals 3;\n\n")
        snappy.write("    // Smooth layer thickness over surface patches\n")
        snappy.write("    nSmoothThickness 10;\n\n")
        snappy.write("    // Stop layer growth on highly warped cells\n")
        snappy.write("    maxFaceThicknessRatio 0.5;\n\n")
        snappy.write("    // Reduce layer growth where ratio thickness to medial\n")
        snappy.write("    // distance is large\n")
        snappy.write("    maxThicknessToMedialRatio 0.3;\n\n")
        snappy.write("    // Angle used to pick up medial axis points\n")
        snappy.write("    // Note: changed(corrected) w.r.t 17x! 90 degrees corresponds to 130 in 17x.\n")
        snappy.write("    minMedianAxisAngle 90;\n\n")
        snappy.write("    // Create buffer region for new layer terminations\n")
        snappy.write("    nBufferCellsNoExtrude 0;\n\n\n")
        snappy.write("    // Overall max number of layer addition iterations. The mesher will exit\n")
        snappy.write("    // if it reaches this number of iterations; possibly with an illegal\n")
        snappy.write("    // mesh.\n")
        snappy.write("    nLayerIter 50;\n\n")
        snappy.write("    // Max number of iterations after which relaxed meshQuality controls\n")
        snappy.write("    // get used. Up to nRelaxIter it uses the settings in meshQualityControls,\n")
        snappy.write("    // after nRelaxIter it uses the values in meshQualityControls::relaxed.\n")
        snappy.write("    nRelaxedIter 20;\n")
        snappy.write("}\n\n\n\n")
        snappy.write("// Generic mesh quality settings. At any undoable phase these determine\n")
        snappy.write("// where to undo.\n")
        snappy.write("meshQualityControls\n")
        snappy.write("{\n")
        snappy.write("    //- Maximum non-orthogonality allowed. Set to 180 to disable.\n")
        snappy.write("    maxNonOrtho 65;\n\n")
        snappy.write("    //- Max skewness allowed. Set to <0 to disable.\n")
        snappy.write("    maxBoundarySkewness 20;\n")
        snappy.write("    maxInternalSkewness 4;\n\n")
        snappy.write("    //- Max concaveness allowed. Is angle (in degrees) below which concavity\n")
        snappy.write("    //  is allowed. 0 is straight face, <0 would be convex face.\n")
        snappy.write("    //  Set to 180 to disable.\n")
        snappy.write("    maxConcave 80;\n\n")
        snappy.write("    //- Minimum pyramid volume. Is absolute volume of cell pyramid.\n")
        snappy.write("    //  Set to a sensible fraction of the smallest cell volume expected.\n")
        snappy.write("    //  Set to very negative number (e.g. -1E30) to disable.\n")
        snappy.write("    minVol 1e-13;\n\n")
        snappy.write("    //- Minimum quality of the tet formed by the face-centre\n")
        snappy.write("    //  and variable base point minimum decomposition triangles and\n")
        snappy.write("    //  the cell centre.  Set to very negative number (e.g. -1E30) to\n")
        snappy.write("    //  disable.\n")
        snappy.write("    //     <0 = inside out tet,\n")
        snappy.write("    //      0 = flat tet\n")
        snappy.write("    //      1 = regular tet\n")
        snappy.write("    minTetQuality 1e-30;\n\n")
        snappy.write("    //- Minimum face area. Set to <0 to disable.\n")
        snappy.write("    minArea -1;\n\n")
        snappy.write("    //- Minimum face twist. Set to <-1 to disable. dot product of face normal\n")
        snappy.write("    //- and face centre triangles normal\n")
        snappy.write("    minTwist 0.05;\n\n")
        snappy.write("    //- minimum normalised cell determinant\n")
        snappy.write("    //- 1 = hex, <= 0 = folded or flattened illegal cell\n")
        snappy.write("    minDeterminant 0.001;\n\n")
        snappy.write("    //- minFaceWeight (0 -> 0.5)\n")
        snappy.write("    minFaceWeight 0.05;\n\n")
        snappy.write("    //- minVolRatio (0 -> 1)\n")
        snappy.write("    minVolRatio 0.01;\n\n")
        snappy.write("    //must be >0 for Fluent compatibility\n")
        snappy.write("    minTriangleTwist -1;\n\n")
        snappy.write("    //- if >0 : preserve single cells with all points on the surface if the\n")
        snappy.write("    //  resulting volume after snapping (by approximation) is larger than\n")
        snappy.write("    //  minVolCollapseRatio times old volume (i.e. not collapsed to flat cell).\n")
        snappy.write("    //  If <0 : delete always.\n")
        snappy.write("    //minVolCollapseRatio 0.5;\n\n\n")
        snappy.write("    // Advanced\n\n")
        snappy.write("    //- Number of error distribution iterations\n")
        snappy.write("    nSmoothScale 4;\n")
        snappy.write("    //- amount to scale back displacement at error points\n")
        snappy.write("    errorReduction 0.75;\n\n\n\n")
        snappy.write("    // Optional : some meshing phases allow usage of relaxed rules.\n")
        snappy.write("    // See e.g. addLayersControls::nRelaxedIter.\n")
        snappy.write("    relaxed\n")
        snappy.write("    {\n")
        snappy.write("        //- Maximum non-orthogonality allowed. Set to 180 to disable.\n")
        snappy.write("        maxNonOrtho 75;\n")
        snappy.write("    }\n")
        snappy.write("}\n\n\n")
        snappy.write("// Advanced\n\n")
        snappy.write("// Flags for optional output\n")
        snappy.write("// 0 : only write final meshes\n")
        snappy.write("// 1 : write intermediate meshes\n")
        snappy.write("// 2 : write volScalarField with cellLevel for postprocessing\n")
        snappy.write("// 4 : write current intersections as .obj files\n")
        snappy.write("debug 0;\n\n\n")
        snappy.write("// Merge tolerance. Is fraction of overall bounding box of initial mesh.\n")
        snappy.write("// Note: the write tolerance needs to be higher than this.\n")
        snappy.write("mergeTolerance 1E-6;\n\n\n")
        snappy.write("// ************************************************************************* //")
        snappy.close()

        
        #get stl file name
        global stlName
        for root, dirs, files in os.walk(STLDir):
            for file in files:
                if file.endswith('.stl'):
                    if file.find(name) >= 0:
                        stlName =  file                  
                
        #copy stl file from STL to triSurface 
        shutil.copy2(STLDir + "\\" + stlName, triSurfaceDir)       
        
        #read from stl file and create keyWord
        stl = open(STLDir + "\\" + stlName, "r")
        firstLine = stl.readline()
        word = firstLine.strip().split()[1]
        keyWord = "hull_" + word
        
        #edit snappyHexMeshDict 
        with open(os.path.join(systemDir, "snappyHexMeshDict"), "r") as file1:
            data1 = file1.readlines()
            data1[31] = "    " + stlName + "\n"
            
        with open(os.path.join(systemDir, "snappyHexMeshDict"), "w") as file1:
            file1.writelines(data1)
        
        #write keyWord to other files
        with open(os.path.join(zeroDir, "alpha1.org"), "r") as file1:
            data1 = file1.readlines()
            data1[62] = "    " + keyWord + "\n"
    
        with open(os.path.join(zeroDir, "alpha1.org"), "w") as file1:
            file1.writelines(data1)
        
        with open(os.path.join(zeroDir, "k"), "r") as file1:
            data1 = file1.readlines()
            data1[62] = "    " + keyWord + "\n"
    
        with open(os.path.join(zeroDir, "k"), "w") as file1:
            file1.writelines(data1)    
    
        with open(os.path.join(zeroDir,"nut"), "r") as file1:
            data1 = file1.readlines()
            data1[60] = "    " + keyWord + "\n"
    
        with open(os.path.join(zeroDir, "nut"), "w") as file1:
            file1.writelines(data1) 
            
        with open(os.path.join(zeroDir, "omega"), "r") as file1:
            data1 = file1.readlines()
            data1[62] = "    " + keyWord + "\n"
    
        with open(os.path.join(zeroDir, "omega"), "w") as file1:
            file1.writelines(data1)           
    
        with open(os.path.join(zeroDir, "p_rgh"), "r") as file1:
            data1 = file1.readlines()
            data1[67] = "    " + keyWord + "\n"
    
        with open(os.path.join(zeroDir, "p_rgh"), "w") as file1:
            file1.writelines(data1)
            
        with open(os.path.join(zeroDir, "U.org"), "r") as file1:
            data1 = file1.readlines()
            data1[61] = "    " + keyWord + "\n"
    
        with open(os.path.join(zeroDir, "U.org"), "w") as file1:
            file1.writelines(data1)        
    
        with open(os.path.join(systemDir, "controlDict"), "r") as file1:
            data1 = file1.readlines()
            data1[60] = "        patches (" + keyWord + ");\n"
    
        with open(os.path.join(systemDir, "controlDict"), "w") as file1:
            file1.writelines(data1)    
            
        def getNumOrFloat(str):
            num = re.sub("[^-0-9.]", " ", str)
            if re.search("\.", num):
                return float(num)    
            else:
                return int(num)
    
        #method to get directory of file needed
        def getDirectory(fileName):
            for dirpath, dirnames, filenames in os.walk("."):
                for filename in [f for f in filenames if f == fileName]:
                    return (os.path.join(dirpath, filename))
        
        #currentDir = str(os.getcwd())
        fReadInput = open(os.path.join(CFDDir,"CFDConfig.json"), "r")
    
        VelBool = False
        TempBool = False
        TypeBool = False
    
        for line in fReadInput:
    
            if "VehicleVelocity" in line:
                Velocity = abs(getNumOrFloat(line))
                VelBool = True
    
            if "FluidTemperature" in line:
                Temp = getNumOrFloat(line)
                if Temp > 50:
                    Temp = 50
                if Temp < 0:
                    Temp = 0
                TempBool= True
    
    
            if "Fresh" in line:
                Density = 1000
                KinematicViscosity = (3.13644e-8*pow(Temp, 6) - 6.73205e-6*pow(Temp, 5) + \
                                     0.000646944*pow(Temp, 4) - 0.038599752*pow(Temp, 3) + \
                                     1.710464664*pow(Temp, 2) - 62.39134315*Temp + 1791.890646)/(1e9)
                TypeBool = True
               
            if "Salt" in line:
                Density = 1035
                KinematicViscosity = (3.60307e-8*pow(Temp, 6) - 7.44496e-6*pow(Temp, 5) + \
                                     0.000687357*pow(Temp, 4) - 0.039687765*pow(Temp, 3) + \
                                     1.731174042*pow(Temp, 2) - 63.34362953*Temp + 1854.227926)/(1e9)
                TypeBool = True
    
    
        if not VelBool or not TypeBool or not TempBool:
            print("Not all parameters defined in CFDConfig.json.")
            logFile.write("Not all parameters defined in CFDConfig.json.")
            logFile.close()
            quit()

        with open(os.path.join(zeroDir, "U.org"), "r") as file1:
            data1 = file1.readlines()
            data1[19] = "internalField   uniform (" + str(Velocity) + " 0 0);\n"
    
        with open(os.path.join(zeroDir, "U.org"), "w") as file1:
            file1.writelines(data1)

        with open(os.path.join(constantDir, "transportProperties"), "r") as file1:
            data1 = file1.readlines()
            data1[27] = "    nu              nu [ 0 2 -1 0 0 0 0 ]  " + str(KinematicViscosity) + ";\n"
            data1[28] = "    rho             rho [ 1 -3 0 0 0 0 0 ] " + str(Density) + ";\n"
    
        with open(os.path.join(constantDir, "transportProperties"), "w") as file1:
            file1.writelines(data1)
    
    
    def tier5():

        fReadInput = open(os.path.join(CFDDir,"CFDConfig.json"), "r")
    
        single = False
        four = False
    
        for line in fReadInput:    
            if "Core" in line and "single_dash_core" in line:
                single = True
            elif "Core" in line and "four_dash_cores" in line:
                four = True

        #make log file
        logFile = open(os.path.join(logDir,logFileName), "w")
        
        #create main "case" directory 
        makeFolder(caseDir)
        
        #create "case/0", "case/constant", "case/system", "case/constant/triSurface" and "case/constant/ployMesh" directories         
        makeFolder(zeroDir)
        makeFolder(constantDir)
        makeFolder(systemDir)
        makeFolder(triSurfaceDir)
        makeFolder(polyMeshDir)
        
        #create Allrun.sh file
        allRun = open(caseDir + "\Allrun.sh", "wb")
        allRun.write("#!/bin/bash\n\n")
        allRun.write("alias of22='. /opt/openfoam220/etc/bashrc'\n")
        allRun.write("of22\n\n")
        allRun.write(". $WM_PROJECT_DIR/bin/tools/RunFunctions\n\n")
        allRun.write("runApplication blockMesh\n")
        allRun.write("runApplication snappyHexMesh -overwrite\n")
        allRun.write("transformPoints -scale \"(0.001 0.001 0.001)\"\n")
        allRun.write("runApplication checkMesh\n")
        allRun.write("cp 0/alpha1.org 0/alpha1\n")
        allRun.write("cp 0/U.org 0/U\n")
        allRun.write("runApplication setWaveField\n")
        allRun.write("runApplication relaxationZoneLayout\n\n")
        if four:
            allRun.write("decomposePar\n")
            allRun.write("mpirun -np 4 waveFoam -parallel\n")
            allRun.write("reconstructPar\n")
        elif single:
            allRun.write("runApplication waveFoam\n\n")
        allRun.write("cd ..\n")
        allRun.write("cd ..\n")
        allRun.write("cd ..\n")
        allRun.write("cd PreProcessing\n")
        allRun.write("export PATH=/opt/ParaView-4.1.0-Linux-64bit/bin/:$PATH\n")
        allRun.write("export PYTHONPATH=\"/opt/ParaView-4.1.0-Linux-64bit/lib/paraview-4.1/:/opt/ParaView-4.1.0-Linux-64bit/lib/paraview-4.1/site-packages:/opt/ParaView-4.1.0-Linux-64bit/lib/paraview-4.1/site-packages/vtk\"\n")
        allRun.write("export LD_LIBRARY_PATH=\"/opt/ParaView-4.1.0-Linux-64bit/lib/:/opt/ParaView-4.1.0-Linux-64bit/lib/paraview-4.1/\"\n")
        allRun.write("\n")
        allRun.write("python CFDUpdate.py\n")
        allRun.write("\n")
        allRun.close()
        

        #create "alpha1.org" file
        alpha1 = open(os.path.join(zeroDir, "alpha1.org"), "w")
        alpha1.write("/*--------------------------------*- C++ -*----------------------------------*\\\n")
        alpha1.write("| =========                 |                                                 |\n")
        alpha1.write("| \\\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |\n")
        alpha1.write("|  \\\    /   O peration     | Version:  2.1.x                                 |\n")
        alpha1.write("|   \\\  /    A nd           | Web:      www.OpenFOAM.org                      |\n")
        alpha1.write("|    \\\/     M anipulation  |                                                 |\n")
        alpha1.write("\*---------------------------------------------------------------------------*/\n")
        alpha1.write("FoamFile\n")
        alpha1.write("{\n")
        alpha1.write("    version     2.0;\n")
        alpha1.write("    format      ascii;\n")
        alpha1.write("    class       volScalarField;\n")
        alpha1.write("    location    \"0\";\n")
        alpha1.write("    object      alpha;\n")
        alpha1.write("}\n")
        alpha1.write("// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //\n\n")
        alpha1.write("dimensions      [0 0 0 0 0 0 0];\n\n")
        alpha1.write("internalField   uniform 0;\n\n")
        alpha1.write("boundaryField\n")
        alpha1.write("{\n")
        alpha1.write("    inlet\n")
        alpha1.write("    {\n")
        alpha1.write("        type            waveAlpha;\n")
        alpha1.write("        refValue        uniform 0;\n")
        alpha1.write("        refGrad         uniform 0;\n")
        alpha1.write("        valueFraction   uniform 1;\n")
        alpha1.write("        value           uniform 0;\n")
        alpha1.write("    }\n\n")
        alpha1.write("    inlet_air\n")
        alpha1.write("    {\n")
        alpha1.write("        type            fixedValue;\n")
        alpha1.write("        value           uniform 0;\n")
        alpha1.write("    }\n\n")
        alpha1.write("    outlet\n")
        alpha1.write("    {\n")
        alpha1.write("        type            zeroGradient;\n")
        alpha1.write("    }\n\n")
        alpha1.write("    front\n")
        alpha1.write("    {\n")
        alpha1.write("        type            symmetryPlane;\n")
        alpha1.write("    }\n\n")
        alpha1.write("    back\n")
        alpha1.write("    {\n")
        alpha1.write("        type            symmetryPlane;\n")
        alpha1.write("    }\n\n")
        alpha1.write("    bottom\n")
        alpha1.write("    {\n")
        alpha1.write("        type            symmetryPlane;\n")
        alpha1.write("    }\n\n")
        alpha1.write("    atmosphere\n")
        alpha1.write("    {\n")
        alpha1.write("        type            inletOutlet;\n")
        alpha1.write("        inletValue      uniform 0;\n")
        alpha1.write("        value           uniform 0;\n")
        alpha1.write("    }\n\n")
        alpha1.write("    hull_PRT0001\n")
        alpha1.write("    {\n")
        alpha1.write("        type            zeroGradient;\n")
        alpha1.write("    }\n")
        alpha1.write("}\n\n")
        alpha1.write("// ************************************************************************* //")
        alpha1.close()
        
        #create "k" file
        k = open(zeroDir + "\k", "w")
        k.write("/*--------------------------------*- C++ -*----------------------------------*\\\n")
        k.write("| =========                 |                                                 |\n")
        k.write("| \\\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |\n")
        k.write("|  \\\    /   O peration     | Version:  2.1.x                                 |\n")
        k.write("|   \\\  /    A nd           | Web:      www.OpenFOAM.org                      |\n")
        k.write("|    \\\/     M anipulation  |                                                 |\n")
        k.write("\*---------------------------------------------------------------------------*/\n")
        k.write("FoamFile\n")
        k.write("{\n")
        k.write("    version     2.0;\n")
        k.write("    format      ascii;\n")
        k.write("    class       volScalarField;\n")
        k.write("    location    \"0\";\n")
        k.write("    object      k;\n")
        k.write("}\n")
        k.write("// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //\n\n")
        k.write("dimensions      [0 2 -2 0 0 0 0];\n\n")
        k.write("internalField   uniform 0.00015;\n\n")
        k.write("boundaryField\n")
        k.write("{\n")
        k.write("    inlet\n")
        k.write("    {\n")
        k.write("        type            fixedValue;\n")
        k.write("        value           uniform 0.00015;\n")
        k.write("    }\n\n")
        k.write("    inlet_air\n")
        k.write("    {\n")
        k.write("        type            fixedValue;\n")
        k.write("        value           uniform 0.00015;\n")
        k.write("    }\n\n")
        k.write("    outlet\n")
        k.write("    {\n")
        k.write("        type            zeroGradient;\n")
        k.write("    }\n\n")
        k.write("    front\n")
        k.write("    {\n")
        k.write("        type            symmetryPlane;\n")
        k.write("    }\n\n")
        k.write("    back\n")
        k.write("    {\n")
        k.write("        type            symmetryPlane;\n")
        k.write("    }\n\n")
        k.write("    bottom\n")
        k.write("    {\n")
        k.write("        type            symmetryPlane;\n")
        k.write("    }\n\n")
        k.write("    atmosphere\n")
        k.write("    {\n")
        k.write("        type            inletOutlet;\n")
        k.write("        inletValue      uniform 0.00015;\n")
        k.write("        value           uniform 0.00015;\n")
        k.write("    }\n\n")
        k.write("    hull_PRT0001\n")
        k.write("    {\n")
        k.write("        type            kqRWallFunction;\n")
        k.write("        value           uniform 0.00015;\n")
        k.write("    }\n")
        k.write("}\n\n")
        k.write("// ************************************************************************* //")
        k.close()
        
        #create "nut" file
        nut = open(os.path.join(zeroDir, "nut"), "w")
        nut.write("/*--------------------------------*- C++ -*----------------------------------*\\\n")
        nut.write("| =========                 |                                                 |\n")
        nut.write("| \\\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |\n")
        nut.write("|  \\\    /   O peration     | Version:  2.1.x                                 |\n")
        nut.write("|   \\\  /    A nd           | Web:      www.OpenFOAM.org                      |\n")
        nut.write("|    \\\/     M anipulation  |                                                 |\n")
        nut.write("\*---------------------------------------------------------------------------*/\n")
        nut.write("FoamFile\n")
        nut.write("{\n")
        nut.write("    version     2.0;\n")
        nut.write("    format      ascii;\n")
        nut.write("    class       volScalarField;\n")
        nut.write("    location    \"0\";\n")
        nut.write("    object      nut;\n")
        nut.write("}\n")
        nut.write("// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //\n\n")
        nut.write("dimensions      [0 2 -1 0 0 0 0];\n\n")
        nut.write("internalField   uniform 5e-07;\n\n")
        nut.write("boundaryField\n")
        nut.write("{\n")
        nut.write("    inlet\n")
        nut.write("    {\n")
        nut.write("        type            fixedValue;\n")
        nut.write("        value           uniform 5e-07;\n")
        nut.write("    }\n\n")
        nut.write("    inlet_air\n")
        nut.write("    {\n")
        nut.write("        type            fixedValue;\n")
        nut.write("        value           uniform 5e-07;\n")
        nut.write("    }\n\n")
        nut.write("    outlet\n")
        nut.write("    {\n")
        nut.write("        type            zeroGradient;\n")
        nut.write("    }\n\n")
        nut.write("    front\n")
        nut.write("    {\n")
        nut.write("        type            symmetryPlane;\n")
        nut.write("    }\n\n")
        nut.write("    back\n")
        nut.write("    {\n")
        nut.write("        type            symmetryPlane;\n")
        nut.write("    }\n\n")
        nut.write("    bottom\n")
        nut.write("    {\n")
        nut.write("        type            symmetryPlane;\n")
        nut.write("    }\n\n")
        nut.write("    atmosphere\n")
        nut.write("    {\n")
        nut.write("        type            zeroGradient;\n")
        nut.write("    }\n\n")
        nut.write("    hull_PRT0001\n")
        nut.write("    {\n")
        nut.write("        type            nutkWallFunction;\n")
        nut.write("        value           uniform 0;\n")
        nut.write("    }\n")
        nut.write("}\n\n")
        nut.write("// ************************************************************************* //")
        nut.close()
        
        #create "omega" file 
        omega = open(zeroDir + "\omega", "w")
        omega.write("/*--------------------------------*- C++ -*----------------------------------*\\\n")
        omega.write("| =========                 |                                                 |\n")
        omega.write("| \\\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |\n")
        omega.write("|  \\\    /   O peration     | Version:  2.1.x                                 |\n")
        omega.write("|   \\\  /    A nd           | Web:      www.OpenFOAM.org                      |\n")
        omega.write("|    \\\/     M anipulation  |                                                 |\n")
        omega.write("\*---------------------------------------------------------------------------*/\n")
        omega.write("FoamFile\n")
        omega.write("{\n")
        omega.write("    version     2.0;\n")
        omega.write("    format      ascii;\n")
        omega.write("    class       volScalarField;\n\n")
        omega.write("    object      omega;\n")
        omega.write("}\n")
        omega.write("// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //\n\n")
        omega.write("dimensions      [0 0 -1 0 0 0 0];\n\n")
        omega.write("internalField   uniform 2;\n\n")
        omega.write("boundaryField\n")
        omega.write("{\n")
        omega.write("    inlet\n")
        omega.write("    {\n")
        omega.write("        type            fixedValue;\n")
        omega.write("        value           uniform 2;\n")
        omega.write("    }\n\n")
        omega.write("    inlet_air\n")
        omega.write("    {\n")
        omega.write("        type            fixedValue;\n")
        omega.write("        value           uniform 2;\n")
        omega.write("    }\n\n")
        omega.write("    outlet\n")
        omega.write("    {\n")
        omega.write("        type            zeroGradient;\n")
        omega.write("    }\n\n")
        omega.write("    front\n")
        omega.write("    {\n")
        omega.write("        type            symmetryPlane;\n")
        omega.write("    }\n\n")
        omega.write("    back\n")
        omega.write("    {\n")
        omega.write("        type            symmetryPlane;\n")
        omega.write("    }\n\n")
        omega.write("    bottom\n")
        omega.write("    {\n")
        omega.write("        type            symmetryPlane;\n")
        omega.write("    }\n\n")
        omega.write("    atmosphere\n")
        omega.write("    {\n")
        omega.write("        type            inletOutlet;\n")
        omega.write("        inletValue      uniform 2;\n")
        omega.write("        value           uniform 2;\n")
        omega.write("    }\n\n")
        omega.write("    hull_PRT0001\n")
        omega.write("    {\n")
        omega.write("        type            omegaWallFunction;\n")
        omega.write("        value           uniform 2;\n")
        omega.write("    }\n")
        omega.write("}\n\n")
        omega.write("// ************************************************************************* //")
        omega.close()
        
        #create "p_rgh" file
        p_rgh = open(zeroDir + "\p_rgh", "w")
        p_rgh.write("/*--------------------------------*- C++ -*----------------------------------*\\\n")
        p_rgh.write("| =========                 |                                                 |\n")
        p_rgh.write("| \\\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |\n")
        p_rgh.write("|  \\\    /   O peration     | Version:  2.2.0                                 |\n")
        p_rgh.write("|   \\\  /    A nd           | Web:      www.OpenFOAM.org                      |\n")
        p_rgh.write("|    \\\/     M anipulation  |                                                 |\n")
        p_rgh.write("\*---------------------------------------------------------------------------*/\n")
        p_rgh.write("FoamFile\n")
        p_rgh.write("{\n")
        p_rgh.write("    version     2.0;\n")
        p_rgh.write("    format      ascii;\n")
        p_rgh.write("    class       volScalarField;\n")
        p_rgh.write("    location    \"0\";\n")
        p_rgh.write("    object      p_rgh;\n")
        p_rgh.write("}\n")
        p_rgh.write("// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //\n\n")
        p_rgh.write("dimensions      [1 -1 -2 0 0 0 0];\n\n")
        p_rgh.write("internalField   uniform 0;\n\n")
        p_rgh.write("boundaryField\n")
        p_rgh.write("{\n")
        p_rgh.write("    inlet\n")
        p_rgh.write("    {\n")
        p_rgh.write("        type            buoyantPressure;\n")
        p_rgh.write("        gradient        uniform 0;\n")
        p_rgh.write("        value           uniform 0;\n")
        p_rgh.write("    }\n\n")
        p_rgh.write("    inlet_air\n")
        p_rgh.write("    {\n")
        p_rgh.write("        type            buoyantPressure;\n")
        p_rgh.write("        gradient        uniform 0;\n")
        p_rgh.write("        value           uniform 0;\n")
        p_rgh.write("    }\n\n")
        p_rgh.write("    outlet\n")
        p_rgh.write("    {\n")
        p_rgh.write("        type            zeroGradient;\n")
        p_rgh.write("    }\n\n")    
        p_rgh.write("    atmosphere\n")
        p_rgh.write("    {\n")
        p_rgh.write("        type            totalPressure;\n")
        p_rgh.write("        rho             rho;\n")
        p_rgh.write("        psi             none;\n")
        p_rgh.write("        gamma           1;\n")
        p_rgh.write("        p0              uniform 0;\n")
        p_rgh.write("        value           uniform 0;\n")
        p_rgh.write("    }\n\n")
        p_rgh.write("    front\n")
        p_rgh.write("    {\n")
        p_rgh.write("        type            symmetryPlane;\n")
        p_rgh.write("    }\n\n")
        p_rgh.write("    back\n")
        p_rgh.write("    {\n")
        p_rgh.write("        type            symmetryPlane;\n")
        p_rgh.write("    }\n\n")
        p_rgh.write("    bottom\n")
        p_rgh.write("    {\n")
        p_rgh.write("        type            symmetryPlane;\n")
        p_rgh.write("    }\n\n")
        p_rgh.write("    hull_PRT0001\n")
        p_rgh.write("    {\n")
        p_rgh.write("        type            buoyantPressure;\n")
        p_rgh.write("        gradient        uniform 0;\n")
        p_rgh.write("        value           uniform 0;\n")
        p_rgh.write("    }\n")
        p_rgh.write("}\n\n")
        p_rgh.write("// ************************************************************************* //")
        p_rgh.close()
        
        #create "U.org" file
        U = open(os.path.join(zeroDir, "U.org"), "w")
        U.write("/*--------------------------------*- C++ -*----------------------------------*\\\n")
        U.write("| =========                 |                                                 |\n")
        U.write("| \\\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |\n")
        U.write("|  \\\    /   O peration     | Version:  2.1.x                                 |\n")
        U.write("|   \\\  /    A nd           | Web:      www.OpenFOAM.org                      |\n")
        U.write("|    \\\/     M anipulation  |                                                 |\n")
        U.write("\*---------------------------------------------------------------------------*/\n")
        U.write("FoamFile\n")
        U.write("{\n")
        U.write("    version     2.0;\n")
        U.write("    format      ascii;\n")
        U.write("    class       volVectorField;\n")
        U.write("    location    \"0\";\n")
        U.write("    object      U;\n")
        U.write("}\n")
        U.write("// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //\n\n")
        U.write("dimensions      [0 1 -1 0 0 0 0];\n\n")
        U.write("internalField   uniform (1 0 0);\n\n")
        U.write("boundaryField\n")
        U.write("{\n")
        U.write("    inlet\n")
        U.write("    {\n")
        U.write("        type            waveVelocity;\n")
        U.write("        refValue        uniform (0 0 0);\n")
        U.write("        refGradient     uniform (0 0 0);\n")
        U.write("        valueFraction   uniform 1;\n")
        U.write("        value           uniform (0 0 0);\n")
        U.write("    }\n\n")
        U.write("    inlet_air\n")
        U.write("    {\n")
        U.write("        type            fixedValue;\n")
        U.write("        value           $internalField;\n")
        U.write("    }\n\n")
        U.write("    outlet\n")
        U.write("    {\n")
        U.write("        type            zeroGradient;\n")
        U.write("    }\n\n")    
        U.write("    atmosphere\n")
        U.write("    {\n")
        U.write("        type            pressureInletOutletVelocity;\n")
        U.write("        value           uniform (0 0 0);\n")
        U.write("    }\n\n")
        U.write("    front\n")
        U.write("    {\n")
        U.write("        type            symmetryPlane;\n")
        U.write("    }\n\n")
        U.write("    back\n")
        U.write("    {\n")
        U.write("        type            symmetryPlane;\n")
        U.write("    }\n\n")
        U.write("    bottom\n")
        U.write("    {\n")
        U.write("        type            symmetryPlane;\n")
        U.write("    }\n\n")
        U.write("    hull_PRT0001\n")
        U.write("    {\n")
        U.write("        type            fixedValue;\n")
        U.write("        value           uniform (0 0 0);\n")
        U.write("    }\n")
        U.write("}\n\n")
        U.write("// ************************************************************************* //")
        U.close()
        
        #create "g" file 
        g = open(constantDir + "\g", "w")
        g.write("/*--------------------------------*- C++ -*----------------------------------*\\\n")
        g.write("| =========                 |                                                 |\n")
        g.write("| \\\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |\n")
        g.write("|  \\\    /   O peration     | Version:  1.7.1                                 |\n")
        g.write("|   \\\  /    A nd           | Web:      www.OpenFOAM.com                      |\n")
        g.write("|    \\\/     M anipulation  |                                                 |\n")
        g.write("\*---------------------------------------------------------------------------*/\n")
        g.write("FoamFile\n")
        g.write("{\n")
        g.write("    version     2.0;\n")
        g.write("    format      ascii;\n")
        g.write("    class       uniformDimensionedVectorField;\n")
        g.write("    location    \"constant\";\n")
        g.write("    object      g;\n")
        g.write("}\n")
        g.write("// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //\n\n")
        g.write("dimensions      [0 1 -2 0 0 0 0];\n")
        g.write("value           ( 0 0 -9.81 );\n\n")
        g.write("// ************************************************************************* //")
        g.close()
        
        #create "RASProperties" file
        RASProperties = open(constantDir + "\RASProperties", "w")
        RASProperties.write("/*--------------------------------*- C++ -*----------------------------------*\\\n")
        RASProperties.write("| =========                 |                                                 |\n")
        RASProperties.write("| \\\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |\n")
        RASProperties.write("|  \\\    /   O peration     | Version:  1.7.1                                 |\n")
        RASProperties.write("|   \\\  /    A nd           | Web:      www.OpenFOAM.com                      |\n")
        RASProperties.write("|    \\\/     M anipulation  |                                                 |\n")
        RASProperties.write("\*---------------------------------------------------------------------------*/\n")
        RASProperties.write("FoamFile\n")
        RASProperties.write("{\n")
        RASProperties.write("    version     2.0;\n")
        RASProperties.write("    format      ascii;\n")
        RASProperties.write("    class       dictionary;\n")
        RASProperties.write("    location    \"constant\";\n")
        RASProperties.write("    object      RASProperties;\n")
        RASProperties.write("}\n")
        RASProperties.write("// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //\n\n")
        RASProperties.write("RASModel        kOmegaSST;\n\n")
        RASProperties.write("turbulence      on;\n\n")
        RASProperties.write("printCoeffs     on;\n\n")
        RASProperties.write("// ************************************************************************* //")
        RASProperties.close()
        
        #create "transportProperties" file
        transportProperties = open(os.path.join(constantDir, "transportProperties"), "w")
        transportProperties.write("/*--------------------------------*- C++ -*----------------------------------*\\\n")
        transportProperties.write("| =========                 |                                                 |\n")
        transportProperties.write("| \\\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |\n")
        transportProperties.write("|  \\\    /   O peration     | Version:  1.7.1                                 |\n")
        transportProperties.write("|   \\\  /    A nd           | Web:      www.OpenFOAM.com                      |\n")
        transportProperties.write("|    \\\/     M anipulation  |                                                 |\n")
        transportProperties.write("\*---------------------------------------------------------------------------*/\n")
        transportProperties.write("FoamFile\n")
        transportProperties.write("{\n")
        transportProperties.write("    version     2.0;\n")
        transportProperties.write("    format      ascii;\n")
        transportProperties.write("    class       dictionary;\n")
        transportProperties.write("    location    \"constant\";\n")
        transportProperties.write("    object      transportProperties;\n")
        transportProperties.write("}\n")
        transportProperties.write("// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //\n\n")
        transportProperties.write("twoPhase\n")
        transportProperties.write("{\n")
        transportProperties.write("    transportModel  twoPhase;\n")
        transportProperties.write("    phase1          phase1;\n")
        transportProperties.write("    phase2          phase2;\n")
        transportProperties.write("}\n\n")
        transportProperties.write("phase1\n")
        transportProperties.write("{\n")
        transportProperties.write("    transportModel  Newtonian;\n")
        transportProperties.write("    nu              nu [ 0 2 -1 0 0 0 0 ] 1e-06;\n")
        transportProperties.write("    rho             rho [ 1 -3 0 0 0 0 0 ] 1000;\n")
        transportProperties.write("    CrossPowerLawCoeffs\n")
        transportProperties.write("    {\n")
        transportProperties.write("        nu0             nu0 [ 0 2 -1 0 0 0 0 ] 1e-06;\n")
        transportProperties.write("        nuInf           nuInf [ 0 2 -1 0 0 0 0 ] 1e-06;\n")
        transportProperties.write("        m               m [ 0 0 1 0 0 0 0 ] 1;\n")
        transportProperties.write("        n               n [ 0 0 0 0 0 0 0 ] 0;\n")
        transportProperties.write("    }\n\n")
        transportProperties.write("    BirdCarreauCoeffs\n")
        transportProperties.write("    {\n")
        transportProperties.write("        nu0             nu0 [ 0 2 -1 0 0 0 0 ] 0.0142515;\n")
        transportProperties.write("        nuInf           nuInf [ 0 2 -1 0 0 0 0 ] 1e-06;\n")
        transportProperties.write("        k               k [ 0 0 1 0 0 0 0 ] 99.6;\n")
        transportProperties.write("        n               n [ 0 0 0 0 0 0 0 ] 0.1003;\n")
        transportProperties.write("    }\n")
        transportProperties.write("}\n\n")
        transportProperties.write("phase2\n")
        transportProperties.write("{\n")
        transportProperties.write("    transportModel  Newtonian;\n")
        transportProperties.write("    nu              nu [ 0 2 -1 0 0 0 0 ] 1.48e-05;\n")
        transportProperties.write("    rho             rho [ 1 -3 0 0 0 0 0 ] 1;\n")
        transportProperties.write("    CrossPowerLawCoeffs\n")
        transportProperties.write("    {\n")
        transportProperties.write("        nu0             nu0 [ 0 2 -1 0 0 0 0 ] 1e-06;\n")
        transportProperties.write("        nuInf           nuInf [ 0 2 -1 0 0 0 0 ] 1e-06;\n")
        transportProperties.write("        m               m [ 0 0 1 0 0 0 0 ] 1;\n")
        transportProperties.write("        n               n [ 0 0 0 0 0 0 0 ] 0;\n")
        transportProperties.write("    }\n\n")
        transportProperties.write("    BirdCarreauCoeffs\n")
        transportProperties.write("    {\n")
        transportProperties.write("        nu0             nu0 [ 0 2 -1 0 0 0 0 ] 0.0142515;\n")
        transportProperties.write("        nuInf           nuInf [ 0 2 -1 0 0 0 0 ] 1e-06;\n")
        transportProperties.write("        k               k [ 0 0 1 0 0 0 0 ] 99.6;\n")
        transportProperties.write("        n               n [ 0 0 0 0 0 0 0 ] 0.1003;\n")
        transportProperties.write("    }\n")
        transportProperties.write("}\n\n")    
        transportProperties.write("sigma           sigma [ 1 0 -2 0 0 0 0 ] 0.07;\n\n")
        transportProperties.write("transportModel  Newtonian;\n")
        transportProperties.write("nu              nu [ 0 2 -1 0 0 0 0 ] 1e-06;\n\n")
        transportProperties.write("// ************************************************************************* //")
        transportProperties.close()
        
        #create "turbulenceProperties" file
        turbulenceProperties = open(os.path.join(constantDir, "turbulenceProperties"), "w")
        turbulenceProperties.write("/*--------------------------------*- C++ -*----------------------------------*\\\n")
        turbulenceProperties.write("| =========                 |                                                 |\n")
        turbulenceProperties.write("| \\\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |\n")
        turbulenceProperties.write("|  \\\    /   O peration     | Version:  1.7.1                                 |\n")
        turbulenceProperties.write("|   \\\  /    A nd           | Web:      www.OpenFOAM.com                      |\n")
        turbulenceProperties.write("|    \\\/     M anipulation  |                                                 |\n")
        turbulenceProperties.write("\*---------------------------------------------------------------------------*/\n")
        turbulenceProperties.write("FoamFile\n")
        turbulenceProperties.write("{\n")
        turbulenceProperties.write("    version     2.0;\n")
        turbulenceProperties.write("    format      ascii;\n")
        turbulenceProperties.write("    class       dictionary;\n")
        turbulenceProperties.write("    location    \"constant\";\n")
        turbulenceProperties.write("    object      turbulenceProperties;\n")
        turbulenceProperties.write("}\n")
        turbulenceProperties.write("// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //\n\n")
        turbulenceProperties.write("simulationType  RASModel;\n\n\n")
        turbulenceProperties.write("// ************************************************************************* //")    
        turbulenceProperties.close()

        #create "waveProperties" file
        wave = open(constantDir + "\waveProperties" , "w")
        wave.write("/*--------------------------------*- C++ -*----------------------------------*\\\n")
        wave.write("| =========                 |                                                 |\n")
        wave.write("| \\\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |\n")
        wave.write("|  \\\    /   O peration     | Version:  1.5                                   |\n")
        wave.write("|   \\\  /    A nd           | Web:      http://www.OpenFOAM.org               |\n")
        wave.write("|    \\\/     M anipulation  |                                                 |\n")
        wave.write("\*---------------------------------------------------------------------------*/\n")
        wave.write("FoamFile\n")
        wave.write("{\n")
        wave.write("    version     2.0;\n")
        wave.write("    format      ascii;\n")
        wave.write("    class       dictionary;\n")
        wave.write("    object      environmentalProperties;\n")
        wave.write("}\n")
        wave.write("// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //\n\n")
        wave.write("timeShift       0.0;\n\n")
        wave.write("seaLevel        0.00;\n\n")
        wave.write("// A list of the relaxation zones in the simulation. The parameters are given\n")
        wave.write("// in <name>Coeffs below.\n")
        wave.write("relaxationNames (inlet outlet);\n\n")
        wave.write("initializationName inlet;\n\n")
        wave.write("pName p_rgh;\n\n")
        wave.write("inletCoeffs\n")
        wave.write("{\n")
        wave.write("    // Wave type to be used at boundary \"inlet\" and in relaxation zone \"inlet\"\n")
        wave.write("    waveType    combinedWaves;\n")
        wave.write("    combinedWaveNames (potentialCurrent stokesFirst); \n\n")
        wave.write("    // Specifications on the relaxation zone shape and relaxation scheme\n")
        wave.write("    relaxationZone\n")
        wave.write("    {\n")
        wave.write("        relaxationScheme Spatial;\n")
        wave.write("        relaxationShape  Rectangular;\n")
        wave.write("        beachType        Empty;\n\n")
        wave.write("        relaxType   INLET;\n")
        wave.write("        startX      (-70 -50 0);\n")
        wave.write("        endX        (-50  50 0);\n")
        wave.write("        orientation (1 0 0);\n")
        wave.write("    }\n")
        wave.write("}\n\n")
        wave.write("potentialCurrentCoeffs\n")
        wave.write("{\n")
        wave.write("    U           (1 0 0);\n")
        wave.write("    waveType    potentialCurrent;\n")
        wave.write("    Tsoft       0;\n")
        wave.write("};\n\n")
        wave.write("stokesFirstCoeffs\n")
        wave.write("{\n")
        wave.write("    waveType    stokesFirst;\n\n")
        wave.write("    // Ramp time of 0 s\n")
        wave.write("    Tsoft       0;\n\n")
        wave.write("    // Water depth at the boundary and in the relaxation zone\n")
        wave.write("    depth       20.0;\n\n")
        wave.write("    // Cyclic wave frequency\n")
        wave.write("    omega       1;\n\n")
        wave.write("    // Phase shift in the wave\n")
        wave.write("    phi         0.000000;\n\n")
        wave.write("    // Wave number vector, k. \n")
        wave.write("    waveNumber  (0.3 0 0);\n\n")
        wave.write("    // Wave height\n")
        wave.write("    height      1.2;\n")
        wave.write("};\n\n\n")
        wave.write("outletCoeffs\n")
        wave.write("{\n")
        wave.write("    waveType    combinedWaves;\n")
        wave.write("    combinedWaveNames (potentialCurrent);  \n")
        wave.write("//    combinedWaveNames (potentialCurrent stokesFirst);  \n\n")
        wave.write("    relaxationZone\n")
        wave.write("    {\n")
        wave.write("        relaxationScheme Spatial;\n")
        wave.write("        relaxationShape  Rectangular;\n")
        wave.write("        beachType        Empty; \n\n")
        wave.write("        relaxType   OUTLET;\n")
        wave.write("        startX      (75  -50  0);\n")
        wave.write("        endX        (110 50  0);\n")
        wave.write("        orientation (1 0 0);\n")
        wave.write("    }\n")
        wave.write("};\n\n\n\n")
        wave.write("// ************************************************************************* //")
        wave.close()
        
        #create "blockMeshDict" file
        blockMeshDict = open(os.path.join(polyMeshDir, "blockMeshDict"), "w")
        blockMeshDict.write("/*--------------------------------*- C++ -*----------------------------------*\\\n")
        blockMeshDict.write("| =========                 |                                                 |\n")
        blockMeshDict.write("| \\\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |\n")
        blockMeshDict.write("|  \\\    /   O peration     | Version:  2.1.x                                |\n")
        blockMeshDict.write("|   \\\  /    A nd           | Web:      www.OpenFOAM.org                     |\n")
        blockMeshDict.write("|    \\\/     M anipulation  |                                                 |\n")
        blockMeshDict.write("\*---------------------------------------------------------------------------*/\n")
        blockMeshDict.write("FoamFile\n")
        blockMeshDict.write("{\n")
        blockMeshDict.write("    version     2.0;\n")
        blockMeshDict.write("    format      ascii;\n")
        blockMeshDict.write("    class       dictionary;\n")
        blockMeshDict.write("    object      blockMeshDict;\n")
        blockMeshDict.write("}\n")
        blockMeshDict.write("// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //\n\n")
        blockMeshDict.write("convertToMeters 1;\n\n")
        blockMeshDict.write("vertices\n")
        blockMeshDict.write("(\n")
        blockMeshDict.write("    (" + negCDX + " " + negCDY + " " + negCDZ + ")" + "\n")
        blockMeshDict.write("    (" + posCDX + " " + negCDY + " " + negCDZ + ")" + "\n")
        blockMeshDict.write("    (" + posCDX + " " + posCDY + " " + negCDZ + ")" + "\n")
        blockMeshDict.write("    (" + negCDX + " " + posCDY + " " + negCDZ + ")" + "\n")
        blockMeshDict.write("    (" + negCDX + " " + negCDY + " " + "0" + ")" + "\n")
        blockMeshDict.write("    (" + posCDX + " " + negCDY + " " + "0" + ")" + "\n")
        blockMeshDict.write("    (" + posCDX + " " + posCDY + " " + "0" + ")" + "\n")
        blockMeshDict.write("    (" + negCDX + " " + posCDY + " " + "0" + ")" + "\n")
        blockMeshDict.write("    (" + negCDX + " " + negCDY + " " + posCDZ + ")" + "\n")   
        blockMeshDict.write("    (" + posCDX + " " + negCDY + " " + posCDZ + ")" + "\n")
        blockMeshDict.write("    (" + posCDX + " " + posCDY + " " + posCDZ + ")" + "\n")
        blockMeshDict.write("    (" + negCDX + " " + posCDY + " " + posCDZ + ")" + "\n")  
        blockMeshDict.write(");\n\n")
        blockMeshDict.write("blocks\n")
        blockMeshDict.write("(\n")
        blockMeshDict.write("    hex (0 1 2 3 4 5 6 7) (" + ElemX + " " + ElemY + " "  + posElemZ + ") simpleGrading (1 1 1)" + "\n")
        blockMeshDict.write("    hex (4 5 6 7 8 9 10 11) (" + ElemX + " " + ElemY + " "  + negElemZ + ") simpleGrading (1 1 1)" + "\n")
        blockMeshDict.write(");\n\n")
        blockMeshDict.write("edges\n")
        blockMeshDict.write("(\n")
        blockMeshDict.write(");\n\n")
        blockMeshDict.write("boundary\n")
        blockMeshDict.write("(\n")
        blockMeshDict.write("    inlet\n")
        blockMeshDict.write("    {\n")
        blockMeshDict.write("        type patch;\n")
        blockMeshDict.write("        faces\n")
        blockMeshDict.write("        (\n")
        blockMeshDict.write("            (0 4 7 3)\n")
        blockMeshDict.write("        );\n")
        blockMeshDict.write("    }\n\n")
        blockMeshDict.write("    inlet_air\n")
        blockMeshDict.write("    {\n")
        blockMeshDict.write("        type patch;\n")
        blockMeshDict.write("        faces\n")
        blockMeshDict.write("        (\n")
        blockMeshDict.write("            (4 8 11 7)\n")
        blockMeshDict.write("        );\n")  
        blockMeshDict.write("    }\n\n")  
        blockMeshDict.write("    outlet\n")
        blockMeshDict.write("    {\n")
        blockMeshDict.write("        type patch;\n")
        blockMeshDict.write("        faces\n")
        blockMeshDict.write("        (\n")
        blockMeshDict.write("            (2 6 5 1)\n")
        blockMeshDict.write("            (6 10 9 5)\n")
        blockMeshDict.write("        );\n")   
        blockMeshDict.write("    }\n\n")     
        blockMeshDict.write("    atmosphere\n")
        blockMeshDict.write("    {\n")
        blockMeshDict.write("        type patch;\n")
        blockMeshDict.write("        faces\n")
        blockMeshDict.write("        (\n")
        blockMeshDict.write("            (8 9 10 11)\n")
        blockMeshDict.write("        );\n")    
        blockMeshDict.write("    }\n\n")
        blockMeshDict.write("    front\n")
        blockMeshDict.write("    {\n")
        blockMeshDict.write("        type symmetryPlane;\n")
        blockMeshDict.write("        faces\n")
        blockMeshDict.write("        (\n")
        blockMeshDict.write("            (1 5 4 0)\n")
        blockMeshDict.write("            (5 9 8 4)\n")
        blockMeshDict.write("        );\n")  
        blockMeshDict.write("    }\n\n")
        blockMeshDict.write("    back\n")
        blockMeshDict.write("    {\n")
        blockMeshDict.write("        type symmetryPlane;\n")
        blockMeshDict.write("        faces\n")
        blockMeshDict.write("        (\n")
        blockMeshDict.write("            (3 7 6 2)\n")
        blockMeshDict.write("            (7 11 10 6)\n")
        blockMeshDict.write("        );\n")   
        blockMeshDict.write("    }\n\n")   
        blockMeshDict.write("    bottom\n")
        blockMeshDict.write("    {\n")
        blockMeshDict.write("        type symmetryPlane;\n")
        blockMeshDict.write("        faces\n")
        blockMeshDict.write("        (\n")
        blockMeshDict.write("            (0 3 2 1)\n")
        blockMeshDict.write("        );\n")   
        blockMeshDict.write("    }\n")
        blockMeshDict.write(");\n\n\n")
        blockMeshDict.write("// ************************************************************************* //")
        blockMeshDict.close()
        
        #create "controlDict" file
        controlDict = open(systemDir + "\controlDict", "w")
        controlDict.write("/*--------------------------------*- C++ -*----------------------------------*\\\n")
        controlDict.write("| =========                 |                                                 |\n")
        controlDict.write("| \\\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |\n")
        controlDict.write("|  \\\    /   O peration     | Version:  1.7.1                                 |\n")
        controlDict.write("|   \\\  /    A nd           | Web:      www.OpenFOAM.com                      |\n")
        controlDict.write("|    \\\/     M anipulation  |                                                 |\n")
        controlDict.write("\*---------------------------------------------------------------------------*/\n")
        controlDict.write("FoamFile\n")
        controlDict.write("{\n")
        controlDict.write("    version     2.0;\n")
        controlDict.write("    format      ascii;\n")
        controlDict.write("    class       dictionary;\n")
        controlDict.write("    location    \"system\";\n")
        controlDict.write("    object      controlDict;\n")
        controlDict.write("}\n")
        controlDict.write("// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //\n\n")
        controlDict.write("application     interFoam;\n\n")
        controlDict.write("startFrom       latestTime;\n\n")
        controlDict.write("startTime       0;\n\n")
        controlDict.write("stopAt          endTime;\n\n")
        controlDict.write("endTime         " + simTime + ";\n\n")
        controlDict.write("deltaT          0.001;\n\n")
        controlDict.write("writeControl    adjustableRunTime;\n\n")
        controlDict.write("writeInterval   0.05;\n\n")
        controlDict.write("purgeWrite      0;\n\n")
        controlDict.write("writeFormat     ascii;\n\n")
        controlDict.write("writePrecision  6;\n\n")
        controlDict.write("writeCompression uncompressed;\n\n")
        controlDict.write("timeFormat      general;\n\n")
        controlDict.write("timePrecision   6;\n\n")
        controlDict.write("runTimeModifiable yes;\n\n")
        controlDict.write("adjustTimeStep  on;\n\n")
        controlDict.write("maxCo           0.5;\n")
        controlDict.write("maxAlphaCo      0.5;\n\n")
        controlDict.write("maxDeltaT       1;\n\n")
        controlDict.write("functions\n")
        controlDict.write("{\n")
        controlDict.write("    forces\n")
        controlDict.write("    {\n")
        controlDict.write("        type forces;\n")
        controlDict.write("        functionObjectLibs (\"libforces.so\");\n")
        controlDict.write("        patches (hull_PRT0001);\n")
        controlDict.write("        rhoName rho;\n")
        controlDict.write("        rhoInf 1000;\n")
        controlDict.write("        CofR (0 0 0);\n")
        controlDict.write("        outputControl timeStep;\n")
        controlDict.write("        outputInterval 1;\n")
        controlDict.write("        log    true;\n")
        controlDict.write("    }\n")
        controlDict.write("}\n\n")
        controlDict.write("libs\n")
        controlDict.write("(\n")
        controlDict.write("    \"libOpenFOAM.so\"\n")
        controlDict.write("    \"libfvMotionSolvers.so\"\n")
        controlDict.write("    \"libforces.so\"\n")
        controlDict.write(");\n\n")
        controlDict.write("// ************************************************************************* //")
        controlDict.close()
        
        #make "decomposeParDict" file
        decomposeParDict = open(systemDir + "\decomposeParDict", "w")
        decomposeParDict.write("/*--------------------------------*- C++ -*----------------------------------*\\\n")
        decomposeParDict.write("| =========                 |                                                 |\n")
        decomposeParDict.write("| \\\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |\n")
        decomposeParDict.write("|  \\\    /   O peration     | Version:  1.7.1                                 |\n")
        decomposeParDict.write("|   \\\  /    A nd           | Web:      www.OpenFOAM.com                      |\n")
        decomposeParDict.write("|    \\\/     M anipulation  |                                                 |\n")
        decomposeParDict.write("\*---------------------------------------------------------------------------*/\n")
        decomposeParDict.write("FoamFile\n")
        decomposeParDict.write("{\n")
        decomposeParDict.write("    version     2.0;\n")
        decomposeParDict.write("    format      ascii;\n")
        decomposeParDict.write("    class       dictionary;\n")
        decomposeParDict.write("    location    \"system\";\n")
        decomposeParDict.write("    object      decomposeParDict;\n")
        decomposeParDict.write("}\n")
        decomposeParDict.write("// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //\n\n")    
        decomposeParDict.write("numberOfSubdomains 4;\n\n")
        decomposeParDict.write("method          simple;\n\n")
        decomposeParDict.write("simpleCoeffs\n")
        decomposeParDict.write("{\n")
        decomposeParDict.write("    n               ( 2 2 1 );\n")
        decomposeParDict.write("    delta           0.001;\n")
        decomposeParDict.write("}\n\n")
        decomposeParDict.write("hierarchicalCoeffs\n")
        decomposeParDict.write("{\n")
        decomposeParDict.write("    n               ( 1 1 1 );\n")
        decomposeParDict.write("    delta           0.001;\n")
        decomposeParDict.write("    order           xyz;\n")
        decomposeParDict.write("}\n\n")
        decomposeParDict.write("manualCoeffs\n")
        decomposeParDict.write("{\n")
        decomposeParDict.write("    dataFile        \"\";\n")
        decomposeParDict.write("}\n\n")
        decomposeParDict.write("distributed     no;\n\n")
        decomposeParDict.write("roots           ( );\n\n\n")
        decomposeParDict.write("// ************************************************************************* //")
        decomposeParDict.close()
        
        #create "extrudeMeshDict" file
        extrudeMeshDict = open(systemDir + "\extrudeMeshDict", "w")
        extrudeMeshDict.write("/*--------------------------------*- C++ -*----------------------------------*\\\n")
        extrudeMeshDict.write("| =========                 |                                                 |\n")
        extrudeMeshDict.write("| \\\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |\n")
        extrudeMeshDict.write("|  \\\    /   O peration     | Version:  2.1.1                                 |\n")
        extrudeMeshDict.write("|   \\\  /    A nd           | Web:      www.OpenFOAM.org                      |\n")
        extrudeMeshDict.write("|    \\\/     M anipulation  |                                                 |\n")
        extrudeMeshDict.write("\*---------------------------------------------------------------------------*/\n")
        extrudeMeshDict.write("FoamFile\n")
        extrudeMeshDict.write("{\n")
        extrudeMeshDict.write("    version     2.0;\n")
        extrudeMeshDict.write("    format      ascii;\n")
        extrudeMeshDict.write("    class       dictionary;\n")
        extrudeMeshDict.write("    object      extrudeProperties;\n")
        extrudeMeshDict.write("}\n")
        extrudeMeshDict.write("// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //\n\n")    
        extrudeMeshDict.write("// What to extrude:\n")
        extrudeMeshDict.write("//      patch   : from patch of another case ('sourceCase')\n\n")
        extrudeMeshDict.write("constructFrom patch;\n")
        extrudeMeshDict.write("sourceCase \".\";\n")
        extrudeMeshDict.write("sourcePatches (front);\n\n")
        extrudeMeshDict.write("// If construct from patch: patch to use for back (can be same as sourcePatch)\n")
        extrudeMeshDict.write("exposedPatchName back;\n\n")
        extrudeMeshDict.write("// Flip surface normals before usage.\n")
        extrudeMeshDict.write("flipNormals false;\n\n")
        extrudeMeshDict.write("//- Linear extrusion in point-normal direction\n")
        extrudeMeshDict.write("extrudeModel        linearNormal;\n\n")
        extrudeMeshDict.write("nLayers             1;\n\n")
        extrudeMeshDict.write("expansionRatio      1.0;\n\n")
        extrudeMeshDict.write("linearNormalCoeffs\n")
        extrudeMeshDict.write("{\n")
        extrudeMeshDict.write("    thickness       0.004;\n")
        extrudeMeshDict.write("}\n\n")
        extrudeMeshDict.write("// Do front and back need to be merged? Usually only makes sense for 360\n")
        extrudeMeshDict.write("// degree wedges.\n")
        extrudeMeshDict.write("mergeFaces false;\n\n\n")
        extrudeMeshDict.write("// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //")
        extrudeMeshDict.close()
        
        #create "fvSchemes" file
        fvSchemes = open(os.path.join(systemDir, "fvSchemes"), "w")
        fvSchemes.write("/*--------------------------------*- C++ -*----------------------------------*\\\n")
        fvSchemes.write("| =========                 |                                                 |\n")
        fvSchemes.write("| \\\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |\n")
        fvSchemes.write("|  \\\    /   O peration     | Version:  1.7.1                                 |\n")
        fvSchemes.write("|   \\\  /    A nd           | Web:      www.OpenFOAM.com                      |\n")
        fvSchemes.write("|    \\\/     M anipulation  |                                                 |\n")
        fvSchemes.write("\*---------------------------------------------------------------------------*/\n")
        fvSchemes.write("FoamFile\n")
        fvSchemes.write("{\n")
        fvSchemes.write("    version     2.0;\n")
        fvSchemes.write("    format      ascii;\n")
        fvSchemes.write("    class       dictionary;\n")
        fvSchemes.write("    location    \"system\";\n")
        fvSchemes.write("    object      fvSchemes;\n")
        fvSchemes.write("}\n")
        fvSchemes.write("// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //\n\n")         
        fvSchemes.write("ddtSchemes\n")
        fvSchemes.write("{\n")
        fvSchemes.write("    default         Euler;\n")
        fvSchemes.write("}\n\n")
        fvSchemes.write("gradSchemes\n")
        fvSchemes.write("{\n")
        fvSchemes.write("    default         Gauss linear;\n")
        fvSchemes.write("    grad(U)         cellLimited Gauss linear 1.0;\n")
        fvSchemes.write("}\n\n")
        fvSchemes.write("divSchemes\n")
        fvSchemes.write("{\n")
        fvSchemes.write('    div(rho*phi,U)  Gauss linearUpwind grad(U);\n')
        fvSchemes.write("    div(phi,alpha)  Gauss vanLeer;\n")
        fvSchemes.write("    div(phirb,alpha) Gauss interfaceCompression;\n")
        fvSchemes.write("    div(phi,k)      Gauss upwind;\n")
        fvSchemes.write("    div(phi,omega) Gauss upwind;\n")
        fvSchemes.write("    div(phi,R)      Gauss upwind;\n")
        fvSchemes.write("    div(R)          Gauss linear;\n")
        fvSchemes.write("    div(phi,nuTilda) Gauss upwind;\n")
        fvSchemes.write("    div((nuEff*dev(grad(U).T()))) Gauss linear;\n")
        fvSchemes.write("    div((muEff*dev(T(grad(U))))) Gauss linear;\n")
        fvSchemes.write("    div((nuEff*dev(T(grad(U))))) Gauss linear;\n")
        fvSchemes.write("}\n\n")
        fvSchemes.write("laplacianSchemes\n")
        fvSchemes.write("{\n")
        fvSchemes.write("    default         Gauss linear corrected;\n")
        fvSchemes.write("}\n\n")
        fvSchemes.write("interpolationSchemes\n")
        fvSchemes.write("{\n")
        fvSchemes.write("    default         linear;\n")
        fvSchemes.write("}\n\n")
        fvSchemes.write("snGradSchemes\n")
        fvSchemes.write("{\n")
        fvSchemes.write("    default         corrected;\n")
        fvSchemes.write("}\n\n")
        fvSchemes.write("fluxRequired\n")
        fvSchemes.write("{\n")
        fvSchemes.write("    default         no;\n")
        fvSchemes.write("    p_rgh;\n")
        fvSchemes.write("    pcorr;\n")
        fvSchemes.write("    alpha;\n")
        fvSchemes.write("}\n\n\n")
        fvSchemes.write("// ************************************************************************* //")
        fvSchemes.close()
        
        #create "fvSolution" file
        fvSolution = open(os.path.join(systemDir, "fvSolution"), "w")
        fvSolution.write("/*--------------------------------*- C++ -*----------------------------------*\\\n")
        fvSolution.write("| =========                 |                                                 |\n")
        fvSolution.write("| \\\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |\n")
        fvSolution.write("|  \\\    /   O peration     | Version:  1.7.1                                 |\n")
        fvSolution.write("|   \\\  /    A nd           | Web:      www.OpenFOAM.com                      |\n")
        fvSolution.write("|    \\\/     M anipulation  |                                                 |\n")
        fvSolution.write("\*---------------------------------------------------------------------------*/\n")
        fvSolution.write("FoamFile\n")
        fvSolution.write("{\n")
        fvSolution.write("    version     2.0;\n")
        fvSolution.write("    format      ascii;\n")
        fvSolution.write("    class       dictionary;\n")
        fvSolution.write("    location    \"system\";\n")
        fvSolution.write("    object      fvSolution;\n")
        fvSolution.write("}\n")
        fvSolution.write("// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //\n\n")         
        fvSolution.write("solvers\n")
        fvSolution.write("{\n")
        fvSolution.write("    pcorr\n")
        fvSolution.write("    {\n")
        fvSolution.write("       solver          PCG;\n")
        fvSolution.write("       preconditioner\n")
        fvSolution.write("        {\n")
        fvSolution.write("            preconditioner  GAMG;\n")
        fvSolution.write("            tolerance       1e-05;\n")
        fvSolution.write("            relTol          0;\n")
        fvSolution.write("            smoother        DICGaussSeidel;\n")
        fvSolution.write("            nPreSweeps      0;\n")
        fvSolution.write("            nPostSweeps     2;\n")
        fvSolution.write("            nBottomSweeps   2;\n")
        fvSolution.write("            cacheAgglomeration false;\n")
        fvSolution.write("            nCellsInCoarsestLevel 10;\n")
        fvSolution.write("            agglomerator    faceAreaPair;\n")
        fvSolution.write("            mergeLevels     1;\n")
        fvSolution.write("        }\n")
        fvSolution.write("        tolerance       1e-10;\n")
        fvSolution.write("        relTol          0;\n")
        fvSolution.write("        maxIter         100;\n")
        fvSolution.write("    }\n\n")
        fvSolution.write("    p_rgh\n")
        fvSolution.write("    {\n")
        fvSolution.write("        solver          GAMG;\n")
        fvSolution.write("        tolerance       1e-08;\n")
        fvSolution.write("        relTol          0.01;\n")
        fvSolution.write("        smoother        DIC;\n")
        fvSolution.write("        nPreSweeps      0;\n")
        fvSolution.write("        nPostSweeps     2;\n")
        fvSolution.write("        nFinestSweeps   2;\n")
        fvSolution.write("        cacheAgglomeration true;\n")
        fvSolution.write("        nCellsInCoarsestLevel 10;\n")
        fvSolution.write("        agglomerator    faceAreaPair;\n")
        fvSolution.write("        mergeLevels     1;\n")
        fvSolution.write("    }\n\n")
        fvSolution.write("    p_rghFinal\n")
        fvSolution.write("    {\n")
        fvSolution.write("        solver          PCG;\n")
        fvSolution.write("        preconditioner\n")
        fvSolution.write("        {\n")
        fvSolution.write("            preconditioner  GAMG;\n")
        fvSolution.write("            tolerance       2e-09;\n")
        fvSolution.write("            relTol          0;\n")
        fvSolution.write("            nVcycles        2;\n")
        fvSolution.write("            smoother        DICGaussSeidel;\n")
        fvSolution.write("            nPreSweeps      2;\n")
        fvSolution.write("            nPostSweeps     2;\n")
        fvSolution.write("            nFinestSweeps   2;\n")
        fvSolution.write("            cacheAgglomeration true;\n")
        fvSolution.write("            nCellsInCoarsestLevel 10;\n")
        fvSolution.write("            agglomerator    faceAreaPair;\n")
        fvSolution.write("            mergeLevels     1;\n")
        fvSolution.write("        }\n")
        fvSolution.write("        tolerance       2e-09;\n")
        fvSolution.write("        relTol          0;\n")
        fvSolution.write("        maxIter         20;\n")
        fvSolution.write("    }\n\n")
        fvSolution.write("    cellDisplacement\n")
        fvSolution.write("    {\n")
        fvSolution.write("        solver          GAMG;\n")
        fvSolution.write("        tolerance       1e-5;\n")
        fvSolution.write("        relTol          0;\n")
        fvSolution.write("        smoother        GaussSeidel;\n")
        fvSolution.write("        cacheAgglomeration true;\n")
        fvSolution.write("        nCellsInCoarsestLevel 10;\n")
        fvSolution.write("        agglomerator    faceAreaPair;\n")
        fvSolution.write("        mergeLevels     1;\n")
        fvSolution.write("    }\n\n")
        fvSolution.write("    U\n")
        fvSolution.write("    {\n")
        fvSolution.write("        solver          PBiCG;\n")
        fvSolution.write("        preconditioner  DILU;\n")
        fvSolution.write("        tolerance       1e-06;\n")
        fvSolution.write("        relTol          0;\n")
        fvSolution.write("    }\n")
        fvSolution.write("    UFinal\n")
        fvSolution.write("    {\n")
        fvSolution.write("        solver          PBiCG;\n")
        fvSolution.write("        preconditioner  DILU;\n")
        fvSolution.write("        tolerance       1e-06;\n")
        fvSolution.write("        relTol          0;\n")
        fvSolution.write("    }\n\n")
        fvSolution.write("    k\n")
        fvSolution.write("    {\n")
        fvSolution.write("        solver          PBiCG;\n")
        fvSolution.write("        preconditioner  DILU;\n")
        fvSolution.write("        tolerance       1e-08;\n")
        fvSolution.write("        relTol          0;\n")
        fvSolution.write("    }\n\n")    
        fvSolution.write("    kFinal\n")
        fvSolution.write("    {\n")
        fvSolution.write("        solver          PBiCG;\n")
        fvSolution.write("        preconditioner  DILU;\n")
        fvSolution.write("        tolerance       1e-08;\n")
        fvSolution.write("        relTol          0;\n")
        fvSolution.write("    }\n\n")        
        fvSolution.write("    omega\n")
        fvSolution.write("    {\n")
        fvSolution.write("        solver          PBiCG;\n")
        fvSolution.write("        preconditioner  DILU;\n")
        fvSolution.write("        tolerance       1e-08;\n")
        fvSolution.write("        relTol          0;\n")
        fvSolution.write("    }\n\n")      
        fvSolution.write("    omegaFinal\n")
        fvSolution.write("    {\n")
        fvSolution.write("        solver          PBiCG;\n")
        fvSolution.write("        preconditioner  DILU;\n")
        fvSolution.write("        tolerance       1e-08;\n")
        fvSolution.write("        relTol          0;\n")
        fvSolution.write("    }\n\n")     
        fvSolution.write("    R\n")
        fvSolution.write("    {\n")
        fvSolution.write("        solver          PBiCG;\n")
        fvSolution.write("        preconditioner  DILU;\n")
        fvSolution.write("        tolerance       1e-08;\n")
        fvSolution.write("        relTol          0;\n")
        fvSolution.write("    }\n\n")       
        fvSolution.write("    nuTilda\n")
        fvSolution.write("    {\n")
        fvSolution.write("        solver          PBiCG;\n")
        fvSolution.write("        preconditioner  DILU;\n")
        fvSolution.write("        tolerance       1e-08;\n")
        fvSolution.write("        relTol          0;\n")
        fvSolution.write("    }\n")   
        fvSolution.write("}\n\n")   
        fvSolution.write("PIMPLE\n")
        fvSolution.write("{\n")
        fvSolution.write("    momentumPredictor yes;\n")
        fvSolution.write("    nCorrectors     3;\n")
        fvSolution.write("    nNonOrthogonalCorrectors 0;\n")
        fvSolution.write("    nAlphaCorr      1;\n")
        fvSolution.write("    nAlphaSubCycles 4;\n")
        fvSolution.write("    cAlpha          2;\n")
        fvSolution.write("}\n\n\n")
        fvSolution.write("// ************************************************************************* //")
        fvSolution.close()
        
        #create "setFieldsDict" file
        setFieldsDict = open(systemDir + "\setFieldsDict", "w")
        setFieldsDict.write("/*--------------------------------*- C++ -*----------------------------------*\\\n")
        setFieldsDict.write("| =========                 |                                                 |\n")
        setFieldsDict.write("| \\\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |\n")
        setFieldsDict.write("|  \\\    /   O peration     | Version:  1.7.1                                 |\n")
        setFieldsDict.write("|   \\\  /    A nd           | Web:      www.OpenFOAM.com                      |\n")
        setFieldsDict.write("|    \\\/     M anipulation  |                                                 |\n")
        setFieldsDict.write("\*---------------------------------------------------------------------------*/\n")
        setFieldsDict.write("FoamFile\n")
        setFieldsDict.write("{\n")
        setFieldsDict.write("    version     2.0;\n")
        setFieldsDict.write("    format      ascii;\n")
        setFieldsDict.write("    class       dictionary;\n")
        setFieldsDict.write("    location    \"system\";\n")
        setFieldsDict.write("    object      setFieldsDict;\n")
        setFieldsDict.write("}\n")
        setFieldsDict.write("// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //\n\n") 
        setFieldsDict.write("defaultFieldValues\n")
        setFieldsDict.write("(\n")
        setFieldsDict.write("    volScalarFieldValue alpha1 0\n")
        setFieldsDict.write(");\n\n")
        setFieldsDict.write("regions\n")
        setFieldsDict.write("(\n")
        setFieldsDict.write("    boxToCell\n")
        setFieldsDict.write("    {\n")
        setFieldsDict.write("        box (-1000 -1000 -1000) (1000 1000  0);\n")
        setFieldsDict.write("        fieldValues\n")
        setFieldsDict.write("        (\n")
        setFieldsDict.write("            volScalarFieldValue alpha1 1\n")
        setFieldsDict.write("        );\n")
        setFieldsDict.write("    }\n")
        setFieldsDict.write(");\n\n\n")
        setFieldsDict.write("// ************************************************************************* //")
        setFieldsDict.close()
        
        #create "snappyHexMeshDict" file
        snappy = open(systemDir + "\snappyHexMeshDict", "w")
        snappy.write("/*--------------------------------*- C++ -*----------------------------------*\\\n")
        snappy.write("| =========                 |                                                 |\n")
        snappy.write("| \\\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |\n")
        snappy.write("|  \\\    /   O peration     | Version:  2.2.0                                 |\n")
        snappy.write("|   \\\  /    A nd           | Web:      www.OpenFOAM.org                      |\n")
        snappy.write("|    \\\/     M anipulation  |                                                 |\n")
        snappy.write("\*---------------------------------------------------------------------------*/\n")
        snappy.write("FoamFile\n")
        snappy.write("{\n")
        snappy.write("    version     2.0;\n")
        snappy.write("    format      ascii;\n")
        snappy.write("    class       dictionary;\n")
        snappy.write("    object      autoHexMeshDict;\n")
        snappy.write("}\n\n")
        snappy.write("// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //\n\n")
        snappy.write("// Which of the steps to run\n")
        snappy.write("castellatedMesh true;\n")
        snappy.write("snap            true;\n")
        snappy.write("addLayers       false;\n\n\n")
        snappy.write("// Geometry. Definition of all surfaces. All surfaces are of class\n")
        snappy.write("// searchableSurface.\n")
        snappy.write("// Surfaces are used\n")
        snappy.write("// - to specify refinement for any mesh cell intersecting it\n")
        snappy.write("// - to specify refinement for any mesh cell inside/outside/near\n")
        snappy.write("// - to 'snap' the mesh boundary to the surface\n")
        snappy.write("geometry\n")
        snappy.write("{\n")
        snappy.write("    ifv.stl\n")
        snappy.write("    {\n")
        snappy.write("        type triSurfaceMesh;\n")
        snappy.write("        name hull;\n\n")
        snappy.write("        patchInfo\n")
        snappy.write("        {\n")
        snappy.write("            type wall;\n")
        snappy.write("        }\n")
        snappy.write("    }\n\n")
        snappy.write("    box1\n")
        snappy.write("    {\n")
        snappy.write("        type searchableBox;\n")
        snappy.write("        min (" + negCDXsnap2 + " " + negCDYsnap2 + " "  + negCDZsnap2 + ");\n")
        snappy.write("        max (" + posCDXsnap2 + " " + posCDYsnap2 + " "  + posCDZsnap2 + ");\n")
        snappy.write("    }\n\n")
        snappy.write("    box2\n")
        snappy.write("    {\n")
        snappy.write("        type searchableBox;\n")
        snappy.write("        min (" + negCDXsnap1 + " " + negCDYsnap1 + " "  + negCDZsnap1 + ");\n")
        snappy.write("        max (" + posCDXsnap1 + " " + posCDYsnap1 + " "  + posCDZsnap1 + ");\n")
        snappy.write("    }\n\n")
        snappy.write("    box3\n")
        snappy.write("    {\n")
        snappy.write("        type searchableBox;\n")
        snappy.write("        min (-100000 -100000" + " "  + negCDZsnap0 + ");\n")
        snappy.write("        max ( 100000  100000" + " "  + posCDZsnap0 + ");\n")      
        snappy.write("    }\n\n")    
        snappy.write("};\n\n\n\n")
        snappy.write("// Settings for the castellatedMesh generation.\n")
        snappy.write("castellatedMeshControls\n")
        snappy.write("{\n\n")
        snappy.write("    // Refinement parameters\n")
        snappy.write("    // ~~~~~~~~~~~~~~~~~~~~~\n\n")
        snappy.write("    // If local number of cells is >= maxLocalCells on any processor\n")
        snappy.write("    // switches from from refinement followed by balancing\n")
        snappy.write("    // (current method) to (weighted) balancing before refinement.\n")
        snappy.write("    maxLocalCells 100000;\n\n")
        snappy.write("    // Overall cell limit (approximately). Refinement will stop immediately\n")
        snappy.write("    // upon reaching this number so a refinement level might not complete.\n")
        snappy.write("    // Note that this is the number of cells before removing the part which\n")
        snappy.write("    // is not 'visible' from the keepPoint. The final number of cells might\n")
        snappy.write("    // actually be a lot less.\n")
        snappy.write("    maxGlobalCells 2000000;\n\n")
        snappy.write("    // The surface refinement loop might spend lots of iterations refining just a\n")        
        snappy.write("    // few cells. This setting will cause refinement to stop if <= minimumRefine\n")        
        snappy.write("    // are selected for refinement. Note: it will at least do one iteration\n")        
        snappy.write("    // (unless the number of cells to refine is 0)\n")
        snappy.write("    minRefinementCells 0;\n\n")        
        snappy.write("    // Number of buffer layers between different levels.\n")
        snappy.write("    // 1 means normal 2:1 refinement restriction, larger means slower\n")        
        snappy.write("    // refinement.\n")        
        snappy.write("    nCellsBetweenLevels 3;\n\n\n\n")        
        snappy.write("    // Explicit feature edge refinement\n")        
        snappy.write("    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n")        
        snappy.write("    // Specifies a level for any cell intersected by its edges.\n")        
        snappy.write("    // This is a featureEdgeMesh, read from constant/triSurface for now.\n")        
        snappy.write("    features\n")
        snappy.write("    (\n")
        snappy.write("        // {\n")
        snappy.write("        //     file \"wigley-scaled.eMesh\";\n")
        snappy.write("        //     level 3;\n")
        snappy.write("        // }\n")
        snappy.write("    );\n\n\n\n")
        snappy.write("    // Surface based refinement\n")
        snappy.write("    // ~~~~~~~~~~~~~~~~~~~~~~~~\n\n")
        snappy.write("    // Specifies two levels for every surface. The first is the minimum level,\n")
        snappy.write("    // every cell intersecting a surface gets refined up to the minimum level.\n")
        snappy.write("    // The second level is the maximum level. Cells that 'see' multiple\n")
        snappy.write("    // intersections where the intersections make an\n")
        snappy.write("    // angle > resolveFeatureAngle get refined up to the maximum level.\n\n")
        snappy.write("    refinementSurfaces\n")
        snappy.write("    {\n")
        snappy.write("        hull\n")
        snappy.write("        {\n")
        snappy.write("            // Surface-wise min and max refinement level\n")
        snappy.write("            level (3 3);\n")
        snappy.write("        }\n")
        snappy.write("    }\n\n")
        snappy.write("    resolveFeatureAngle 45;\n\n\n")
        snappy.write("    // Region-wise refinement\n")
        snappy.write("    // ~~~~~~~~~~~~~~~~~~~~~~\n\n")
        snappy.write("    // Specifies refinement level for cells in relation to a surface. One of\n")
        snappy.write("    // three modes\n")
        snappy.write("    // - distance. 'levels' specifies per distance to the surface the\n")
        snappy.write("    //   wanted refinement level. The distances need to be specified in\n")
        snappy.write("    //   descending order.\n")
        snappy.write("    // - inside. 'levels' is only one entry and only the level is used. All\n")
        snappy.write("    //   cells inside the surface get refined up to the level. The surface\n")
        snappy.write("    //   needs to be closed for this to be possible.\n")
        snappy.write("    // - outside. Same but cells outside.\n\n")
        snappy.write("    refinementRegions\n")
        snappy.write("    {\n")
        snappy.write("        box1\n")
        snappy.write("        {\n")
        snappy.write("            mode inside;\n")
        snappy.write("            levels ((1e15 1));\n")
        snappy.write("        }\n")
        snappy.write("        box2\n")
        snappy.write("        {\n")
        snappy.write("            mode inside;\n")
        snappy.write("            levels ((1e15 2));\n")
        snappy.write("        }\n")
        snappy.write("        box3\n")
        snappy.write("       {\n")
        snappy.write("            mode inside;\n")
        snappy.write("            levels ((1e15 2));\n")
        snappy.write("        }\n")
        snappy.write("    }\n\n\n")
        snappy.write("    // Mesh selection\n")
        snappy.write("    // ~~~~~~~~~~~~~~\n\n")
        snappy.write("    // After refinement patches get added for all refinementSurfaces and\n")
        snappy.write("    // all cells intersecting the surfaces get put into these patches. The\n")
        snappy.write("    // section reachable from the locationInMesh is kept.\n")
        snappy.write("    // NOTE: This point should never be on a face, always inside a cell, even\n")
        snappy.write("    // after refinement.\n")
        snappy.write("    locationInMesh (" + forSnappy + " " + "0 0);\n\n\n")
        snappy.write("    // Whether any faceZones (as specified in the refinementSurfaces)\n")
        snappy.write("    // are only on the boundary of corresponding cellZones or also allow\n")
        snappy.write("    // free-standing zone faces. Not used if there are no faceZones.\n")
        snappy.write("    allowFreeStandingZoneFaces true;\n")
        snappy.write("}\n\n\n\n")
        snappy.write("// Settings for the snapping.\n")
        snappy.write("snapControls\n")
        snappy.write("{\n")
        snappy.write("    //- Number of patch smoothing iterations before finding correspondence\n")
        snappy.write("    //  to surface\n")
        snappy.write("    nSmoothPatch 3;\n\n")
        snappy.write("    //- Relative distance for points to be attracted by surface feature point\n")
        snappy.write("    //  or edge. True distance is this factor times local\n")
        snappy.write("    //  maximum edge length.\n")
        snappy.write("    //  tolerance 4.0;\n")
        snappy.write("    tolerance 1.0;\n\n")
        snappy.write("    //- Number of mesh displacement relaxation iterations.\n")
        snappy.write("    nSolveIter 300;\n\n")
        snappy.write("    //- Maximum number of snapping relaxation iterations. Should stop\n")
        snappy.write("    //  before upon reaching a correct mesh.\n")
        snappy.write("    nRelaxIter 5;\n")
        snappy.write("}\n\n\n\n")
        snappy.write("// Settings for the layer addition.\n")
        snappy.write("addLayersControls\n")
        snappy.write("{\n\n")
        snappy.write("    // Are the thickness parameters below relative to the undistorted\n")
        snappy.write("    // size of the refined cell outside layer (true) or absolute sizes (false).\n")
        snappy.write("    relativeSizes true;\n\n")
        snappy.write("    // Per final patch (so not geometry!) the layer information\n")
        snappy.write("    layers\n")
        snappy.write("    {\n")
        snappy.write("        hull\n")
        snappy.write("        {\n")
        snappy.write("            nSurfaceLayers 1;\n\n")
        snappy.write("        }\n")
        snappy.write("    }\n\n")
        snappy.write("    // Expansion factor for layer mesh\n")
        snappy.write("    expansionRatio 1.0;\n\n\n")
        snappy.write("    // Wanted thickness of final added cell layer. If multiple layers\n")
        snappy.write("    // is the thickness of the layer furthest away from the wall.\n")
        snappy.write("    // See relativeSizes parameter.\n")
        snappy.write("    finalLayerThickness 0.3;\n\n")
        snappy.write("    // Minimum thickness of cell layer. If for any reason layer\n")
        snappy.write("    // cannot be above minThickness do not add layer.\n")
        snappy.write("    // See relativeSizes parameter.\n")
        snappy.write("    minThickness 0.25;\n\n")
        snappy.write("    // If points get not extruded do nGrow layers of connected faces that are\n")
        snappy.write("    // also not grown. This helps convergence of the layer addition process\n")
        snappy.write("    // close to features.\n")
        snappy.write("    // Note: changed(corrected) w.r.t 17x! (didn't do anything in 17x)\n")
        snappy.write("    nGrow 0;\n\n\n")
        snappy.write("    // Advanced settings\n\n")
        snappy.write("    // When not to extrude surface. 0 is flat surface, 90 is when two faces\n")
        snappy.write("    // are perpendicular\n")
        snappy.write("    featureAngle 60;\n\n")
        snappy.write("    // Maximum number of snapping relaxation iterations. Should stop\n")
        snappy.write("    // before upon reaching a correct mesh.\n")
        snappy.write("    nRelaxIter 5;\n\n")
        snappy.write("    // Number of smoothing iterations of surface normals\n")
        snappy.write("    nSmoothSurfaceNormals 1;\n\n")
        snappy.write("    // Number of smoothing iterations of interior mesh movement direction\n")
        snappy.write("    nSmoothNormals 3;\n\n")
        snappy.write("    // Smooth layer thickness over surface patches\n")
        snappy.write("    nSmoothThickness 10;\n\n")
        snappy.write("    // Stop layer growth on highly warped cells\n")
        snappy.write("    maxFaceThicknessRatio 0.5;\n\n")
        snappy.write("    // Reduce layer growth where ratio thickness to medial\n")
        snappy.write("    // distance is large\n")
        snappy.write("    maxThicknessToMedialRatio 0.3;\n\n")
        snappy.write("    // Angle used to pick up medial axis points\n")
        snappy.write("    // Note: changed(corrected) w.r.t 17x! 90 degrees corresponds to 130 in 17x.\n")
        snappy.write("    minMedianAxisAngle 90;\n\n")
        snappy.write("    // Create buffer region for new layer terminations\n")
        snappy.write("    nBufferCellsNoExtrude 0;\n\n\n")
        snappy.write("    // Overall max number of layer addition iterations. The mesher will exit\n")
        snappy.write("    // if it reaches this number of iterations; possibly with an illegal\n")
        snappy.write("    // mesh.\n")
        snappy.write("    nLayerIter 50;\n\n")
        snappy.write("    // Max number of iterations after which relaxed meshQuality controls\n")
        snappy.write("    // get used. Up to nRelaxIter it uses the settings in meshQualityControls,\n")
        snappy.write("    // after nRelaxIter it uses the values in meshQualityControls::relaxed.\n")
        snappy.write("    nRelaxedIter 20;\n")
        snappy.write("}\n\n\n\n")
        snappy.write("// Generic mesh quality settings. At any undoable phase these determine\n")
        snappy.write("// where to undo.\n")
        snappy.write("meshQualityControls\n")
        snappy.write("{\n")
        snappy.write("    //- Maximum non-orthogonality allowed. Set to 180 to disable.\n")
        snappy.write("    maxNonOrtho 65;\n\n")
        snappy.write("    //- Max skewness allowed. Set to <0 to disable.\n")
        snappy.write("    maxBoundarySkewness 20;\n")
        snappy.write("    maxInternalSkewness 4;\n\n")
        snappy.write("    //- Max concaveness allowed. Is angle (in degrees) below which concavity\n")
        snappy.write("    //  is allowed. 0 is straight face, <0 would be convex face.\n")
        snappy.write("    //  Set to 180 to disable.\n")
        snappy.write("    maxConcave 80;\n\n")
        snappy.write("    //- Minimum pyramid volume. Is absolute volume of cell pyramid.\n")
        snappy.write("    //  Set to a sensible fraction of the smallest cell volume expected.\n")
        snappy.write("    //  Set to very negative number (e.g. -1E30) to disable.\n")
        snappy.write("    minVol 1e-13;\n\n")
        snappy.write("    //- Minimum quality of the tet formed by the face-centre\n")
        snappy.write("    //  and variable base point minimum decomposition triangles and\n")
        snappy.write("    //  the cell centre.  Set to very negative number (e.g. -1E30) to\n")
        snappy.write("    //  disable.\n")
        snappy.write("    //     <0 = inside out tet,\n")
        snappy.write("    //      0 = flat tet\n")
        snappy.write("    //      1 = regular tet\n")
        snappy.write("    minTetQuality 1e-30;\n\n")
        snappy.write("    //- Minimum face area. Set to <0 to disable.\n")
        snappy.write("    minArea -1;\n\n")
        snappy.write("    //- Minimum face twist. Set to <-1 to disable. dot product of face normal\n")
        snappy.write("    //- and face centre triangles normal\n")
        snappy.write("    minTwist 0.05;\n\n")
        snappy.write("    //- minimum normalised cell determinant\n")
        snappy.write("    //- 1 = hex, <= 0 = folded or flattened illegal cell\n")
        snappy.write("    minDeterminant 0.001;\n\n")
        snappy.write("    //- minFaceWeight (0 -> 0.5)\n")
        snappy.write("    minFaceWeight 0.05;\n\n")
        snappy.write("    //- minVolRatio (0 -> 1)\n")
        snappy.write("    minVolRatio 0.01;\n\n")
        snappy.write("    //must be >0 for Fluent compatibility\n")
        snappy.write("    minTriangleTwist -1;\n\n")
        snappy.write("    //- if >0 : preserve single cells with all points on the surface if the\n")
        snappy.write("    //  resulting volume after snapping (by approximation) is larger than\n")
        snappy.write("    //  minVolCollapseRatio times old volume (i.e. not collapsed to flat cell).\n")
        snappy.write("    //  If <0 : delete always.\n")
        snappy.write("    //minVolCollapseRatio 0.5;\n\n\n")
        snappy.write("    // Advanced\n\n")
        snappy.write("    //- Number of error distribution iterations\n")
        snappy.write("    nSmoothScale 4;\n")
        snappy.write("    //- amount to scale back displacement at error points\n")
        snappy.write("    errorReduction 0.75;\n\n\n\n")
        snappy.write("    // Optional : some meshing phases allow usage of relaxed rules.\n")
        snappy.write("    // See e.g. addLayersControls::nRelaxedIter.\n")
        snappy.write("    relaxed\n")
        snappy.write("    {\n")
        snappy.write("        //- Maximum non-orthogonality allowed. Set to 180 to disable.\n")
        snappy.write("        maxNonOrtho 75;\n")
        snappy.write("    }\n")
        snappy.write("}\n\n\n")
        snappy.write("// Advanced\n\n")
        snappy.write("// Flags for optional output\n")
        snappy.write("// 0 : only write final meshes\n")
        snappy.write("// 1 : write intermediate meshes\n")
        snappy.write("// 2 : write volScalarField with cellLevel for postprocessing\n")
        snappy.write("// 4 : write current intersections as .obj files\n")
        snappy.write("debug 0;\n\n\n")
        snappy.write("// Merge tolerance. Is fraction of overall bounding box of initial mesh.\n")
        snappy.write("// Note: the write tolerance needs to be higher than this.\n")
        snappy.write("mergeTolerance 1E-6;\n\n\n")
        snappy.write("// ************************************************************************* //")
        snappy.close()
        
        
        #get stl file name
        global stlName
        for root, dirs, files in os.walk(STLDir):
            for file in files:
                if file.endswith('.stl'):
                    if file.find(name) >= 0:
                        stlName =  file
                  
                
        #copy stl file from STL to triSurface 
        shutil.copy2(STLDir + "\\" + stlName, triSurfaceDir )
        
        
        #read from stl file and create keyWord
        stl = open(STLDir + "\\" + stlName, "r")
        firstLine = stl.readline()
        word = firstLine.strip().split()[1]
        keyWord = "hull_" + word
        
        #edit snappyHexMeshDict 
        with open(os.path.join(systemDir, "snappyHexMeshDict"), "r") as file1:
            data1 = file1.readlines()
            data1[31] = "    " + stlName + "\n"
            
        with open(os.path.join(systemDir, "snappyHexMeshDict"), "w") as file1:
            file1.writelines(data1)
        
        
        #write keyWord to other files
        with open(os.path.join(zeroDir, "alpha1.org"), "r") as file1:
            data1 = file1.readlines()
            data1[65] = "    " + keyWord + "\n"
    
        with open(os.path.join(zeroDir, "alpha1.org"), "w") as file1:
            file1.writelines(data1)
        
        with open(os.path.join(zeroDir, "k"), "r") as file1:
            data1 = file1.readlines()
            data1[62] = "    " + keyWord + "\n"
    
        with open(os.path.join(zeroDir, "k"), "w") as file1:
            file1.writelines(data1)    
    
        with open(os.path.join(zeroDir,"nut"), "r") as file1:
            data1 = file1.readlines()
            data1[60] = "    " + keyWord + "\n"
    
        with open(os.path.join(zeroDir, "nut"), "w") as file1:
            file1.writelines(data1) 
            
        with open(os.path.join(zeroDir, "omega"), "r") as file1:
            data1 = file1.readlines()
            data1[62] = "    " + keyWord + "\n"
    
        with open(os.path.join(zeroDir, "omega"), "w") as file1:
            file1.writelines(data1)           
    
        with open(os.path.join(zeroDir, "p_rgh"), "r") as file1:
            data1 = file1.readlines()
            data1[67] = "    " + keyWord + "\n"
    
        with open(os.path.join(zeroDir, "p_rgh"), "w") as file1:
            file1.writelines(data1)
            
        with open(os.path.join(zeroDir, "U.org"), "r") as file1:
            data1 = file1.readlines()
            data1[64] = "    " + keyWord + "\n"
    
        with open(os.path.join(zeroDir, "U.org"), "w") as file1:
            file1.writelines(data1)        
    
        with open(os.path.join(systemDir, "controlDict"), "r") as file1:
            data1 = file1.readlines()
            data1[60] = "        patches (" + keyWord + ");\n"
    
        with open(os.path.join(systemDir, "controlDict"), "w") as file1:
            file1.writelines(data1)    
            
        def getNumOrFloat(str):
            num = re.sub("[^-0-9.]", " ", str)
            if re.search("\.", num):
                return float(num)    
            else:
                return int(num)

        fReadInput = open(CFDDir + "\CFDConfig.json", "r")
    
        VelBool = False
        TempBool = False
        TypeBool = False
        FreqBool = False
        NumBool = False
        HeightBool = False
    
        for line in fReadInput:
    
            if "VehicleVelocity" in line:
                Velocity = abs(getNumOrFloat(line))
                VelBool = True
    
            if "FluidTemperature" in line:
                Temp = getNumOrFloat(line)
                if Temp > 50:
                    Temp = 50
                if Temp < 0:
                    Temp = 0
                TempBool= True
                
            if "WaveFrequency" in line:
                WaveFreq = abs(getNumOrFloat(line))
                FreqBool = True
            
            if "WaveNumber" in line:
                WaveNum = abs(getNumOrFloat(line))
                NumBool = True
                
            if "WaveHeight" in line:
                WaveHeight = abs(getNumOrFloat(line))
                HeightBool = True
    
            if "Fresh" in line:
                Density = 1000
                KinematicViscosity = (3.13644e-8*pow(Temp, 6) - 6.73205e-6*pow(Temp, 5) + \
                                     0.000646944*pow(Temp, 4) - 0.038599752*pow(Temp, 3) + \
                                     1.710464664*pow(Temp, 2) - 62.39134315*Temp + 1791.890646)/(1e9)
                TypeBool = True
    
            if "Salt" in line:
                Density = 1035
                KinematicViscosity = (3.60307e-8*pow(Temp, 6) - 7.44496e-6*pow(Temp, 5) + \
                                     0.000687357*pow(Temp, 4) - 0.039687765*pow(Temp, 3) + \
                                     1.731174042*pow(Temp, 2) - 63.34362953*Temp + 1854.227926)/(1e9)
                TypeBool = True
    
    
        if not VelBool or not TypeBool or not TempBool or not FreqBool or not NumBool or not HeightBool:
            print("Not all parameters defined in CFDConfig.json.")
            logFile.write("Not all parameters defined in CFDConfig.json.")
            logFile.close()
            quit()

        with open(os.path.join(constantDir, "waveProperties"), "r") as file1:
            data1 = file1.readlines()
            data1[50] = "    U           (" + str(Velocity) + " 0 0);\n";
            data1[66] = "    omega       " + str(WaveFreq) + ";\n"
            data1[72] = "    waveNumber  (" + str(WaveNum) + " 0 0);\n"
            data1[75] = "    height      " + str(WaveHeight) + ";\n"
    
        with open(os.path.join(constantDir, "waveProperties"), "w") as file1:
            file1.writelines(data1)

    
        with open(os.path.join(constantDir, "transportProperties"), "r") as file1:
            data1 = file1.readlines()
            data1[27] = "    nu              nu [ 0 2 -1 0 0 0 0 ]  " + str(KinematicViscosity) + ";\n"
            data1[28] = "    rho             rho [ 1 -3 0 0 0 0 0 ] " + str(Density) + ";\n"
    
        with open(os.path.join(constantDir, "transportProperties"), "w") as file1:
            file1.writelines(data1)



    def prepareSTL():
        
        #make log file
        logFile = open(os.path.join(logDir,logFileName), "w")

        hydroPath = os.path.join(mainDir, hydroFile)
        with open(hydroPath, 'r') as hydro_json_data:
            data = json.load(hydro_json_data)
        hydroResults = data["Data"]
        for cs in hydroResults:
            waterLinePrimeSign = cs["WaterLine"]
            waterLineUnit = cs["WaterLineUnits"]

        waterLinePrime = abs(float(waterLinePrimeSign))

        if waterLineUnit == 'mm':
            conversionFactor = 1
        elif waterLineUnit == 'm':
            conversionFactor = 1000
        elif totalMass == 'inch':
            conversionFactor = 25.4
        else:
            raise ValueError("Unit cannot be recognized")

        waterLine = waterLinePrime*conversionFactor

##        if waterLine == 0:
##            waterLine = 1000
##
##        manifestPath = os.path.join(mainDir, manifestFile)
##        with open(manifestPath, 'r') as json_data:
##            data = json.load(json_data)
##        ourResults = data["TestBench"]
##        if str(ourResults.lower()) == 'wigley_hull':
##            waterLine = 250
            
        os.chdir(triSurfaceDir)
        
        stlBool = False
        for files in os.listdir("."):
            if files.endswith(".stl"):
                STLfile = files
                stlBool = True
         
        if stlBool is False:
            print("STL file not found")
            logFile.write("STL file not found.")
            logFile.close()
        
        f = open(STLfile,'r')
        
         
        x = []
        y = []
        z = []
        partName = "" 
        facetX = []
        facetY = []
        facetZ = []
    
    
        
        for line in f:
            strarray = line.split()
            
            if strarray[0] == "solid":
                partName = str(strarray[1])
        
                
            if strarray[0] == "facet":
                facetX.append(double(strarray[2])) 
                facetY.append(double(strarray[3]))
                facetZ.append(double(strarray[4]))
                
                
            if strarray[0] =="vertex":
        
                x.append(double(strarray[1]))
                y.append(double(strarray[2]))
                z.append(double(strarray[3]))
                
        
        def findAverage(list):               
            return abs(max(list) - min(list))/2
             
        def findDeltaPos(avg, extrema):
            return abs(avg - extrema)
        
        def findDeltaNeg(avg, extrema):
            return - avg - extrema
            
        xAvg = findAverage(x)  
        yAvg = findAverage(y)
        zAvg = findAverage(z)
        
    
        xMinEdit = findDeltaNeg(xAvg, min(x))
        xMaxEdit = findDeltaPos(xAvg, max(x))
        yMinEdit = findDeltaNeg(yAvg, min(y))
        yMaxEdit = findDeltaPos(yAvg, max(y))
##        zMinEdit = findDeltaNeg(zAvg, min(z))
##        zMaxEdit = findDeltaPos(zAvg, max(z))
        zMinEdit = 0
        zMaxEdit = 0
    
            
        xMin = min(x)
        xMax = max(x)
        yMin = min(y)
        yMax = max(y)
        zMin = min(z)
        zMax = max(z)
                
    
        
        newX = []
        newY = []
        newZ = []
        newZAdjusted = []
        
        for number in x:
            if number >= 0:
                newX.append(double(number - xMaxEdit))
            else:
                newX.append(double(number + xMinEdit))
        
        for number in y:
            if number >= 0:
                newY.append(double(number - yMaxEdit))
            else:
                newY.append(double(number + yMinEdit))
                
        for number in z:
            if number >= 0:
                newZ.append(double(number - zMaxEdit))
            else:
                newZ.append(double(number + zMinEdit))
                

        newZVal = -float(waterLine)

        if waterLine == 0:
            waterLine = 1000
            newZVal = -float(waterLine) - min(newZ)

        manifestPath = os.path.join(mainDir, manifestFile)
        with open(manifestPath, 'r') as json_data:
            data = json.load(json_data)
        ourResults = data["TestBench"]
        if str(ourResults.lower()) == 'wigley_hull':
            waterLine = 250
            newZVal = -float(waterLine) - min(newZ)
        
        for number in newZ:
            newZAdjusted.append(double(number + newZVal))
        
        
          
        fout = open(STLfile, "w")
        
        fout.write("solid " + partName + "\n")
        
        for idx, item in enumerate(facetX):
            fout.write("  facet normal " + str(facetX[idx]) + " " + str(facetY[idx]) + " " + str(facetZ[idx]) + "\n")
            fout.write("    outer loop\n")
            
            for i in range(0,3):
                fout.write("      vertex " + str(newX[idx*3+i]) + " " + str(newY[idx*3+i]) + " " + str(newZAdjusted[idx*3+i]) + "\n")
                
            fout.write("    endloop\n")
            fout.write("  endfacet\n")
        
        fout.write("endsolid " + partName)
        
        os.chdir(mainDir)

    
    logFile = open(os.path.join(logDir,logFileName), "w")
    
    if not os.path.exists("testbench_manifest.json"):
        logFile.write("testbench_manifest.json does not exist. Terminating.")
        logFile.close()
        print("testbench_manifest.json does not exist. Terminating.")
        quit()

    global name    
    name = ""  
     
    if not os.path.exists("CADAssembly.xml"):
            logFile.write("CADAssembly.xml does not exist. Terminating.")
            logFile.close()
            print("CADAssembly.xml does not exist. Terminating.")
            quit()
    else:

        #read XML and write again 
        xmlData = ""
        fileOpen = open("CADAssembly.xml", "r")
        for line in fileOpen:
            line = line.replace("utf-16", "utf-8")
            xmlData = xmlData + line

            
        fileWrite = open("CADAssembly.xml", "w")
        fileWrite.write(xmlData)
        fileWrite.close()
        
        config = ET.parse("CADAssembly.xml")
        root = config.getroot()
        for Assembly in root.findall("Assembly"):
            for CADComponent in Assembly.findall("CADComponent"):
                if CADComponent.get("Type") == "ASSEMBLY":
                    name  = str(CADComponent.get("Name"))
                    name  = name.lower()
                
        filesThere = False
        simTimeBool = False
        finenessBool = False

        global simTime
        global fineness                

        fReadInput = open(CFDDir + "\CFDConfig.json", "r")

        def getNumOrFloat(str):
            num = re.sub("[^-0-9.]", " ", str)
            if re.search("\.", num):
                return float(num)    
            else:
                return int(num)

        for line in fReadInput:

            if "SimulationTime" in line:
                simTime = str(abs(getNumOrFloat(line)))
                simTimeBool= True

            if "MeshFineness" in line:
                MeshFineness = abs(getNumOrFloat(line))
                finenessBool = True
                if MeshFineness == 1:
                    fineness = 4
                elif MeshFineness == 2:
                    fineness = 8
                elif MeshFineness == 3:
                    fineness = 16
                    

        if simTimeBool == False:
            simTime = str(20)

        if finenessBool == False:
            fineness = 8
            

    if not os.path.exists("CADAssembly_metrics.xml"):
            logFile.write("CADAssembly_metrics.xml does not exist. Terminating.")
            logFile.close()
            print("CADAssembly_metrics.xml does not exist. Terminating.")
            quit()
    else:

        xmlMetricsPath = os.path.join(mainDir, xmlMetricsName)
        treeMetrics = ET.parse(xmlMetricsPath)
        xmlMetricsRoot = treeMetrics.getroot()
        metricComponentsXML = xmlMetricsRoot.find('MetricComponents')
        metricComponentXML = metricComponentsXML.find('MetricComponent')
        metricBBXML = metricComponentXML.find('BoundingBox')
        
        BBX = float(metricBBXML.get('X'))
        BBY = float(metricBBXML.get('Y'))
        BBZ = float(metricBBXML.get('Z'))

        modBBX = math.modf(BBX)
        modBBY = math.modf(BBY)
        modBBZ = math.modf(BBZ)

        intBBX = modBBX[1]
        intBBY = modBBY[1]
        intBBZ = modBBZ[1]

        cellSize = max(int(intBBX)/int(fineness),int(intBBY)/int(fineness),int(intBBZ)/int(fineness))

        global posCDX
        global negCDX
        global posCDY
        global negCDY
        global posCDZ
        global negCDZ
        global posCDZsnap0
        global negCDZsnap0
        global posCDXsnap1
        global negCDXsnap1
        global posCDYsnap1
        global negCDYsnap1
        global posCDZsnap1
        global negCDZsnap1
        global posCDXsnap2
        global negCDXsnap2
        global posCDYsnap2
        global negCDYsnap2
        global posCDZsnap2
        global negCDZsnap2
        global forSnappy

        forSnappy = str(2*intBBX)

        posCDX = str(3*intBBX)[:-2]
        negCDX = str(-2*intBBX)[:-2]
        posCDY = str(5*intBBY)[:-2]
        negCDY = str(-5*intBBY)[:-2]
        posCDZ = str(2*intBBZ)[:-2]
        negCDZ = str(-3*intBBZ)[:-2]

        posCDZsnap0 = str(0.2*intBBZ)[:-2]
        negCDZsnap0 = str(-0.5*intBBZ)[:-2]

        posCDXsnap1 = str(1.5*intBBX)[:-2]
        negCDXsnap1 = str(-1.5*intBBX)[:-2]
        posCDYsnap1 = str(2.5*intBBY)[:-2]
        negCDYsnap1 = str(-2.5*intBBY)[:-2]
        posCDZsnap1 = str(0.5*intBBZ)[:-2]
        negCDZsnap1 = str(-1.5*intBBZ)[:-2]

        posCDXsnap2 = str(10*intBBX)[:-2]
        negCDXsnap2 = str(-10*intBBX)[:-2]
        posCDYsnap2 = str(2.5*intBBY)[:-2]
        negCDYsnap2 = str(-2.5*intBBY)[:-2]
        posCDZsnap2 = str(0.5*intBBZ)[:-2]
        negCDZsnap2 = str(-1*intBBZ)[:-2]

        global ElemX
        global ElemY
        global posElemZ
        global negElemZ

        floatNoElemX = (-float(negCDX)+float(posCDX))/cellSize
        floatNoElemY = (-float(negCDY)+float(posCDY))/cellSize
        floatNoElemZ = (-float(negCDZ)+float(posCDZ))/cellSize

        modFloatNoElemX = math.modf(floatNoElemX)
        modFloatNoElemY = math.modf(floatNoElemY)
        posModFloatNoElemZ = math.modf(floatNoElemZ*3/5)
        negModFloatNoElemZ = math.modf(floatNoElemZ*2/5)

        ElemX = str(modFloatNoElemX[1])[:-2]
        ElemY = str(modFloatNoElemY[1])[:-2]
        posElemZ = str(posModFloatNoElemZ[1])[:-2]
        negElemZ = str(negModFloatNoElemZ[1])[:-2]
        
        
    if not os.path.exists("STL_ASCII"):
        logFile.write("STL_ASCII folder does not exist. Terminating.")
        logFile.close()
        print("STL_ASCII folder does not exist. Terminating.")
        quit()
        
    else: 
        os.chdir(STLDir)
        STLfiles = []
        for files in os.listdir("."):
            if files.endswith(".stl"):
                files = str(files)
                files.replace(".stl", "")
                STLfiles.append(str(files))
            
        
        filesThere = False
        for stl in STLfiles:
            if name in stl:
                filesThere = True

                
        if filesThere == False:
            logFile.write("Required STL files is missing in STL_ASCII folder. Terminating.")
            logFile.close()
            print("Required STL files is missing in STL_ASCII folder. Terminating.")
            quit()        
                        
    
        os.chdir(mainDir)
        
    if not os.path.exists("CFD"):
        print("CFD folder does not exist. Terminating.")
        logFile.write("CFD folder does not exist. Terminating.")
        logFile.close()
        quit()
    
    dirCFD = os.path.join(mainDir, "CFD")
    os.chdir(dirCFD)
    
    if not os.path.exists("CFDConfig.json"):
        print("CFDConfig.json does not exist. Terminating.")
        logFile.write("CFDConfig.json does not exist. Terminating.")
        logFile.close()
        quit()
    
    if not os.path.exists("ComputedValues.xml"):
        print("ComputedValues.xml does not exist. Terminating.")
        logFile.write("ComputedValues.xml does not exist. Terminating.")
        logFile.close()
        quit()
        
    if not os.path.exists("OpenFoam"):
        print("OpenFoam folder does not exist. Creating OpenFoam folder.")
        logFile.write("OpenFoam folder does not exist. Creating OpenFoam folder.")
        
        os.makedirs(os.path.join(dirCFD, "OpenFoam"))
        
    os.chdir(mainDir)
    
    tierBool = False

    manifestPath = os.path.join(mainDir, manifestFile)
    with open(manifestPath, 'r') as json_data:
        data = json.load(json_data)
    ourResults = data["TestBench"]
    if str(ourResults.lower()) == 'wigley_hull_quick':
        simTime = str(0.1)
   
    fReadInput = open(os.path.join(CFDDir, CFDConfigFile), "r")   

    for line in fReadInput:
        if "\"Tier\": 1," in line:
            tier1()
            tierBool = True
            break
        if "\"Tier\": 3," in line:
            tier3()
            prepareSTL()
            tierBool = True 
            break
        if "\"Tier\": 5," in line:
            tier5()  
            prepareSTL()
            tierBool = True
            break
        
    if tierBool is False:
        print("Tier not defined in CFDConfig.json. Terminating.")
        logFile.write("Tier not defined in CFDConfig.json. Terminating.")
        logFile.close()
        quit()
        

    logFile.write("Success!")
    logFile.close()
    
    os.chdir(CFDDir)


    
    #generate CFDUpdate script
    post = open(os.path.join(preProcessDir, "CFDUpdate.py"), "w")
    post.write("'''\n")
    post.write("Created on Aug 1, 2013\n")
    post.write("\n")
    post.write("@author: Ozgur Yapar\n")
    post.write("'''\n")
    post.write("import os\n")
    post.write("import re\n")
    post.write("import xml.etree.ElementTree as ET\n")
    post.write("import json\n")
    post.write("import shutil \n")
    post.write("import glob\n")
    post.write("import traceback\n")
    post.write("from numpy import *\n")
    post.write("from CFDforHydrostatics import calculateWeightinN\n")
    post.write("from CFDstlManipulation import scaleSTL\n")
    post.write("try:\n")
    post.write("    from CFDcreateSimVideo import createSimVid\n")
    post.write("except:\n")
    post.write("    traceback.print_exc()\n")
    post.write("\n")
    post.write("getCurDir = str(os.getcwd())\n")
    post.write("dirHydro = getCurDir.replace(\"/PreProcessing\", \"\")\n")        
    post.write("\n")
    post.write("hydroFile = 'hydrostatics.json'\n")
    post.write("hydroPath = os.path.join(dirHydro, hydroFile)\n")
    post.write("\n")
    post.write("with open(hydroPath, 'r') as hydro_json_data:\n")
    post.write("    data = json.load(hydro_json_data)\n")
    post.write("hydroResults = data[\"Data\"]\n")
    post.write("for cs in hydroResults:\n")
    post.write("    wettedSurfaceAreaPrime = cs[\"ReferenceArea\"]\n")
    post.write("    wettedSurfaceAreaUnit = cs[\"ReferenceAreaUnits\"]\n")
    post.write("\n")
    post.write("manifestFile = 'testbench_manifest.json'\n")
    post.write("hmanifestPath = os.path.join(dirHydro, manifestFile)\n")
    post.write("\n")
    post.write("with open(hmanifestPath, 'r') as manifest_json_data:\n")
    post.write("    data = json.load(manifest_json_data)\n")
    post.write("testbenchName = data[\"TestBench\"]\n")
    post.write("\n")
    post.write("if wettedSurfaceAreaUnit == 'mm^2':\n")
    post.write("    conversionFactor = 1e-6\n")
    post.write("elif wettedSurfaceAreaUnit == 'm^2':\n")
    post.write("    conversionFactor = 1\n")
    post.write("elif wettedSurfaceAreaUnit == 'inch^2':\n")
    post.write("    conversionFactor = 0.00064516\n")
    post.write("else:\n")
    post.write("    raise ValueError(\"Unit cannot be recognized\")\n")
    post.write("\n")
    post.write("wettedSurfaceArea = float(wettedSurfaceAreaPrime)*float(conversionFactor)\n")
    post.write("\n")
    post.write("if wettedSurfaceArea == 0:\n")
    post.write("    wettedSurfaceArea = 47\n")
    post.write("\n")
    post.write("if testbenchName.lower() == 'wigley_hull' or testbenchName.lower() == 'wigley_hull_quick':\n")
    post.write("    wettedSurfaceArea = 2.3796\n")
    post.write("if testbenchName.lower() == 'wigley_hull_quick':\n")
    post.write("    quick = True\n")
    post.write("else:\n")
    post.write("    quick = False\n")
    post.write("\n")
    post.write("class PostProcessing:\n")
    post.write("\n")
    post.write("        \n")
    post.write("    \n")
    post.write("    def tier1():\n")
    post.write("        def getNumOrFloat(str):\n")
    post.write("            num = re.sub(\"[^-0-9.]\", \" \", str)\n")
    post.write("            if re.search(\"\.\", num):\n")
    post.write("                return float(num)\n")
    post.write("            \n")
    post.write("        def getDirectory(fileName):\n")
    post.write("            for dirpath, dirnames, filenames in os.walk(\".\"):\n")
    post.write("                for filename in [f for f in filenames if f == fileName]:\n")
    post.write("                    return (os.path.join(dirpath, filename))\n")
    post.write("    \n")
    post.write("        dir1 = getDirectory(\"forceDividedByWeight.dat\")\n")
    post.write("    \n")
    post.write("        fin = open(dir1, \"r\")\n")
    post.write("        fout = open(str(os.getcwd()) + \"/OpenFoam/case/forceOutput.dat\", \"w\")\n")
    post.write("    \n")
    post.write("        line = fin.readline()\n")
    post.write("        totalAverage = 0\n")
    post.write("        dragForce = 0\n")
    post.write("        for line in fin: #get every line from file\n")
    post.write("            words = line.split()\n")
    post.write("    \n")
    post.write("    \n")
    post.write("    \n")
    post.write("        getCurDir = str(os.getcwd())\n")
    post.write("        dirWeightCase = getCurDir.replace(\"/CFD\", \"/PreProcessing\")\n")
    post.write("        os.chdir(dirWeightCase)\n")
    post.write("        weight = calculateWeightinN()\n")
    post.write("        dirAfterWeightCase = getCurDir.replace(\"/PreProcessing\", \"\")\n")
    post.write("        os.chdir(dirAfterWeightCase)\n")
    post.write("        dragForce = float(line)*float(weight)\n")
    post.write("        totalAverage = dragForce\n")
    post.write("        strAvg = str(totalAverage)\n")
    post.write("        fout.write(\"Total Average: \" + strAvg + \" N\")\n")
    post.write("    \n")
    post.write("        fout.close()\n")
    post.write("        \n")
    post.write("        #open CFDConfig and read parameters     \n")
    post.write("        dir = str(os.getcwd())\n")
    post.write("        mainDir = dir.replace(\"/case\", \"\")\n")
    post.write("        dirCFD = mainDir.replace(\"/CFD\", \"\")\n")
    post.write("        \n")
    post.write("        velocity = 0\n")
    post.write("        density = 0\n")
    post.write("                \n")
    post.write("     \n")
    post.write("        \n")
    post.write("        configFile = open(dirCFD + \"/CFD/CFDConfig.json\", \"r\")\n")
    post.write("        for line in configFile:\n")
    post.write("            if \"VehicleVelocity\" in line:\n")
    post.write("                velocity = abs(getNumOrFloat(line))\n")
    post.write("            \n")
    post.write("        #calculate drag\n")
    post.write("        drag = (totalAverage/(0.5 * 1000 * pow(velocity, 2) * wettedSurfaceArea))        \n")
    post.write("        \n")
    post.write("        #read JSON file and get ID(s)\n")
    post.write("        dirSummary = mainDir.replace(\"/CFD\", \"\")\n")
    post.write("    \n")
    post.write("        \n")
    post.write("        idArray = []\n")
    post.write("        file = open(dirSummary + \"/testbench_manifest.json\")\n")
    post.write("        results = json.load(file)\n")
    post.write("        ourResults = results[\"Metrics\"]\n")
    post.write("        for rs in ourResults:\n")
    post.write("            idArray.append(rs[\"GMEID\"])\n")
    post.write("    \n")
    post.write("    \n")
    post.write("        #find corresponding ID in xml file \n")
    post.write("        MetricID = 0\n")
    post.write("        config = ET.parse(mainDir + \"/ComputedValues.xml\")\n")
    post.write("        root = config.getroot()\n")
    post.write("        for Component in root.findall(\"Component\"):\n")
    post.write("            for Metrics in Component.findall(\"Metrics\"):\n")
    post.write("                for Metric in Metrics.findall(\"Metric\"):\n")
    post.write("                    for ID in idArray:\n")
    post.write("                        if Metric.get(\"MetricID\") == ID and Metric.get(\"Type\") == \"CoefficientOfDrag\":\n")
    post.write("                            MetricID = Metric.get(\"MetricID\")\n")
    post.write("                            #print MetricID\n")
    post.write("            \n")
    post.write("                        \n")
    post.write("        #change \"Value\" and dump back to JSON+\n")
    post.write("        fileOut = open(dirSummary + \"/testbench_manifest.json\", \"w\")    \n")
    post.write("        for rs in ourResults:\n")
    post.write("            if rs[\"GMEID\"] == MetricID:\n")
    post.write("                rs[\"Value\"] = str(drag)\n")
    post.write("        json.dump(results, fileOut, indent=2)        \n")
    post.write("        fileOut.close()\n")
    post.write("    \n")
    post.write("        \n")
    post.write("        curDir = os.getcwd()\n")
    post.write("        foamFile = open(curDir + \"/OpenFoam/case/file.foam\", \"w\")\n")
    post.write("        foamFile.close()\n")
    post.write("        \n")
    post.write("        \n")
    post.write("        \n")
    post.write("        \n")
    post.write("        \n")
    post.write("    def tier3():  \n")
    post.write("        def getNumOrFloat(str):\n")
    post.write("            num = re.sub(\"[^-0-9.]\", \" \", str)\n")
    post.write("            if re.search(\"\.\", num):\n")
    post.write("                return float(num)\n")
    post.write("            \n")
    post.write("        def getDirectory(fileName):\n")
    post.write("            for dirpath, dirnames, filenames in os.walk(\".\"):\n")
    post.write("                for filename in [f for f in filenames if f == fileName]:\n")
    post.write("                    return (os.path.join(dirpath, filename))\n")
    post.write("    \n")
    post.write("        dir1 = getDirectory(\"forces.dat\")\n")
    post.write("    \n")
    post.write("        fin = open(dir1, \"r\")\n")
    post.write("        fout = open(str(os.getcwd()) + \"/OpenFoam/case/forceOutput.dat\", \"w\")\n")
    post.write("    \n")
    post.write("        line = fin.readline()\n")
    post.write("        lineAverage = 0\n")
    post.write("        totalCount = 0\n")
    post.write("        totalAverage = 0\n")
    post.write("        lineCount = 0\n")
    post.write("        for line in fin: #get every line from file\n")
    post.write("            words = line.split()\n")
    post.write("            if words[0] != None:\n")
    post.write("                time = float(words[0]) #check the first digit in file\n")
    post.write("    \n")
    post.write("    \n")
    post.write("                if time >= steadyTime: #continue of time is greater than 10 secs\n")
    post.write("                    lineCount += 1\n")
    post.write("                    line = line.replace(\"(\", \" \") #remove all special characters\n")
    post.write("                    line = line.replace(\")\", \" \")\n")
    post.write("                    line = line.replace(\",\", \" \")\n")
    post.write("                    wordCount = 0 #this is used to keep track of the number needed for calculations\n")
    post.write("                    wordSum = 0 #this is the sum of the values in each line\n")
    post.write("                    for word in line.split(' '): #get each 'word' from line\n")
    post.write("                        wordCount += 1\n")
    post.write("                        if wordCount == 3 or wordCount == 8:\n")
    post.write("                            number = float(word)\n")
    post.write("                            wordSum += number\n")
    post.write("                    totalCount += wordSum\n")
    post.write("    \n")
    post.write("        try:\n")
    post.write("            totalAverage = (totalCount/lineCount)\n")
    post.write("            if time < simTime:\n")
    post.write("                raise\n")
    post.write("        except:\n")
    post.write("            print \"ERROR: Analysis has been failed prematurely. If you are running a multi-core job, please try to submit a single-core job.\"\n")
    post.write("            print \"       If you are running a single-core job, please try to submit your job again.\"\n")
    post.write("            raise\n")
    post.write("        strAvg = str(totalAverage)\n")
    post.write("        fout.write(\"Total Average: \" + strAvg + \" N\")\n")
    post.write("    \n")
    post.write("        fout.close()\n")
    post.write("        \n")
    post.write("        #open CFDConfig and read parameters     \n")
    post.write("        dir = str(os.getcwd())\n")
    post.write("        mainDir = dir.replace(\"/case\", \"\")\n")
    post.write("        dirCFD = mainDir.replace(\"/CFD\", \"\")\n")
    post.write("        \n")
    post.write("        velocity = 0\n")
    post.write("        density = 0\n")
    post.write("        \n")
    post.write("\n")
    post.write("        \n")
    post.write("        configFile = open(dirCFD + \"/CFD/CFDConfig.json\", \"r\")\n")
    post.write("        for line in configFile:\n")
    post.write("            if \"VehicleVelocity\" in line:\n")
    post.write("                velocity = abs(getNumOrFloat(line))\n")
    post.write("            if \"Salt\" in line:\n")
    post.write("                density = 1035\n")
    post.write("            if \"Fresh\" in line:\n")
    post.write("                density = 1000\n")
    post.write("            \n")
    post.write("        #calculate drag\n")
    post.write("        drag = totalAverage/(0.5 * density * pow(velocity, 2) * wettedSurfaceArea)        \n")
    post.write("        \n")
    post.write("        #read JSON file and get ID(s)\n")
    post.write("        dirSummary = mainDir.replace(\"/CFD\", \"\")\n")
    post.write("\n")
    post.write("        \n")
    post.write("        idArray = []\n")
    post.write("        file = open(dirSummary + \"/testbench_manifest.json\")\n")
    post.write("        results = json.load(file)\n")
    post.write("        ourResults = results[\"Metrics\"]\n")
    post.write("        for rs in ourResults:\n")
    post.write("            idArray.append(rs[\"GMEID\"])\n")
    post.write("    \n")
    post.write("    \n")
    post.write("        #find corresponding ID in xml file \n")
    post.write("        MetricID = 0\n")
    post.write("        config = ET.parse(mainDir + \"/ComputedValues.xml\")\n")
    post.write("        root = config.getroot()\n")
    post.write("        for Component in root.findall(\"Component\"):\n")
    post.write("            for Metrics in Component.findall(\"Metrics\"):\n")
    post.write("                for Metric in Metrics.findall(\"Metric\"):\n")
    post.write("                    for ID in idArray:\n")
    post.write("                        if Metric.get(\"MetricID\") == ID and Metric.get(\"Type\") == \"CoefficientOfDrag\":\n")
    post.write("                            MetricID = Metric.get(\"MetricID\")\n")
    post.write("                            #print MetricID\n")
    post.write("            \n")
    post.write("                        \n")
    post.write("        #change \"Value\" and dump back to JSON+\n")
    post.write("        fileOut = open(dirSummary + \"/testbench_manifest.json\", \"w\")    \n")
    post.write("        for rs in ourResults:\n")
    post.write("            if rs[\"GMEID\"] == MetricID:\n")
    post.write("                rs[\"Value\"] = str(drag)\n")
    post.write("        json.dump(results, fileOut, indent=2)        \n")
    post.write("        fileOut.close()\n")
    post.write("        \n")
    post.write("        curDir = os.getcwd()\n")
    post.write("        \n")
    post.write("        foamFile = open(curDir + \"/OpenFoam/case/file.foam\", \"w\")\n")
    post.write("        foamFile.close()\n")
    post.write("\n")
    post.write("\n")
    post.write("    def tier5(): \n")
    post.write("\n")
    post.write("\n")
    post.write("        \n")
    post.write("        def getNumOrFloat(str):\n")
    post.write("            num = re.sub(\"[^-0-9.]\", \" \", str)\n")
    post.write("            if re.search(\"\.\", num):\n")
    post.write("                return float(num)\n")
    post.write("            \n")
    post.write("        def getDirectory(fileName):\n")
    post.write("            for dirpath, dirnames, filenames in os.walk(\".\"):\n")
    post.write("                for filename in [f for f in filenames if f == fileName]:\n")
    post.write("                    return (os.path.join(dirpath, filename))\n")
    post.write("    \n")
    post.write("        dir1 = getDirectory(\"forces.dat\")\n")
    post.write("    \n")
    post.write("        fin = open(dir1, \"r\")\n")
    post.write("        \n")
    post.write("        fout = open(str(os.getcwd()) + \"/OpenFoam/case/forceOutput.dat\", \"w\")\n")
    post.write("    \n")
    post.write("        line = fin.readline()\n")
    post.write("        lineAverage = 0\n")
    post.write("        totalCount = 0\n")
    post.write("        totalAverage = 0\n")
    post.write("        lineCount = 0\n")
    post.write("        for line in fin: #get every line from file\n")
    post.write("            words = line.split()\n")
    post.write("            if words[0] != None:\n")
    post.write("                time = float(words[0]) #check the first digit in file\n")
    post.write("    \n")
    post.write("    \n")
    post.write("                if time >= steadyTime: #continue of time is greater than 0.05 secs\n")
    post.write("                    lineCount += 1\n")
    post.write("                    line = line.replace(\"(\", \" \") #remove all special characters\n")
    post.write("                    line = line.replace(\")\", \" \")\n")
    post.write("                    line = line.replace(\",\", \" \")\n")
    post.write("                    wordCount = 0 #this is used to keep track of the number needed for calculations\n")
    post.write("                    wordSum = 0 #this is the sum of the values in each line\n")
    post.write("                    for word in line.split(' '): #get each 'word' from line\n")
    post.write("                        wordCount += 1\n")
    post.write("                        if wordCount == 3 or wordCount == 8:\n")
    post.write("                            number = float(word)\n")
    post.write("                            wordSum += number\n")
    post.write("                    totalCount += wordSum\n")
    post.write("    \n")
    post.write("        try:\n")
    post.write("            totalAverage = (totalCount/lineCount)\n")
    post.write("            if time < simTime:\n")
    post.write("                raise\n")
    post.write("        except:\n")
    post.write("            print \"ERROR: Analysis has been failed prematurely. If you are running a multi-core job, please try to submit a single-core job.\"\n")
    post.write("            print \"       If you are running a single-core job, please try to submit your job again.\"\n")
    post.write("            raise\n")
    post.write("        strAvg = str(totalAverage)\n")
    post.write("        fout.write(\"Total Average: \" + strAvg + \" N\")\n")
    post.write("    \n")
    post.write("        fout.close()\n")
    post.write("        \n")
    post.write("        #open CFDConfig and read parameters     \n")
    post.write("        dir = str(os.getcwd())\n")
    post.write("        mainDir = dir.replace(\"/case\", \"\")\n")
    post.write("        dirCFD = mainDir.replace(\"/CFD\", \"\")\n")
    post.write("        \n")
    post.write("        velocity = 0\n")
    post.write("        density = 0\n")
    post.write("                \n")
    post.write("       \n")
    post.write("        \n")
    post.write("        configFile = open(dirCFD + \"/CFD/CFDConfig.json\", \"r\")\n")
    post.write("        for line in configFile:\n")
    post.write("            if \"VehicleVelocity\" in line:\n")
    post.write("                velocity = abs(getNumOrFloat(line))\n")
    post.write("            if \"Salt\" in line:\n")
    post.write("                density = 1035\n")
    post.write("            if \"Fresh\" in line:\n")
    post.write("                density = 1000\n")
    post.write("            \n")
    post.write("        #calculate drag\n")
    post.write("        drag = totalAverage/(0.5 * density * pow(velocity, 2) * wettedSurfaceArea)        \n")
    post.write("        \n")
    post.write("        #read JSON file and get ID(s)\n")
    post.write("        dirSummary = mainDir.replace(\"/CFD\", \"\")\n")
    post.write("    \n")
    post.write("        \n")
    post.write("        idArray = []\n")
    post.write("        file = open(dirSummary + \"/testbench_manifest.json\")\n")
    post.write("        results = json.load(file)\n")
    post.write("        ourResults = results[\"Metrics\"]\n")
    post.write("        for rs in ourResults:\n")
    post.write("            idArray.append(rs[\"GMEID\"])\n")
    post.write("    \n")
    post.write("    \n")
    post.write("        #find corresponding ID in xml file \n")
    post.write("        MetricID = 0\n")
    post.write("        config = ET.parse(mainDir + \"/ComputedValues.xml\")\n")
    post.write("        root = config.getroot()\n")
    post.write("        for Component in root.findall(\"Component\"):\n")
    post.write("            for Metrics in Component.findall(\"Metrics\"):\n")
    post.write("                for Metric in Metrics.findall(\"Metric\"):\n")
    post.write("                    for ID in idArray:\n")
    post.write("                        if Metric.get(\"MetricID\") == ID and Metric.get(\"Type\") == \"CoefficientOfDrag\":\n")
    post.write("                            MetricID = Metric.get(\"MetricID\")\n")
    post.write("                            MetricBool = True\n")
    post.write("                            #print MetricID\n")
    post.write("\n")
    post.write("            \n")
    post.write("                        \n")
    post.write("        #change \"Value\" and dump back to JSON+\n")
    post.write("        fileOut = open(dirSummary + \"/testbench_manifest.json\", \"w\")    \n")
    post.write("        for rs in ourResults:\n")
    post.write("            if rs[\"GMEID\"] == MetricID:\n")
    post.write("                rs[\"Value\"] = str(drag)\n")
    post.write("        json.dump(results, fileOut, indent=2)        \n")
    post.write("        fileOut.close()\n")
    post.write("        \n")
    post.write("        curDir = os.getcwd()\n")
    post.write("        foamFile = open(curDir + \"/OpenFoam/case/file.foam\", \"w\")\n")
    post.write("        foamFile.close()\n")
    post.write("        \n")
    post.write("        \n")
    post.write("  \n")
    post.write("\n")
    post.write("\n")
    post.write("\n")
    post.write("    #decide which tier to work on\n")
    post.write("\n")
    post.write("    getCurDir = str(os.getcwd())\n")
    post.write("    newDirCFDConfig = getCurDir.replace(\"/PreProcessing\", \"\")\n")
    post.write("    newDirNeeded = os.path.join(newDirCFDConfig, \"CFD\")\n")
    post.write("    newOFLogDir = getCurDir.replace(\"/PreProcessing\", \"/CFD/OpenFoam/OpenFoamLog\")\n")
    post.write("    if not os.path.exists(newOFLogDir):\n")
    post.write("        os.makedirs(newOFLogDir)\n")
    post.write("\n")
    post.write("    files = glob.iglob(os.path.join(newDirNeeded, \"OpenFoam\", \"case\"))\n")
    post.write("    for logFile in files:\n")
    post.write("        if logFile.startswith('log.'):\n")
    post.write("            shutil.copyfile(logFile, newOFLogDir)\n")
    post.write("\n")
    post.write("    os.chdir(os.path.join(newDirNeeded, \"OpenFoam\", \"case\"))\n")
    post.write("    for logFile in glob.glob(\"log.*\"):\n")
    post.write("        shutil.move(logFile, newOFLogDir)\n")
    post.write("    os.chdir(newDirNeeded)\n")
    post.write("        \n")
    post.write("    \n")
    post.write("    tierBool = False\n")
    post.write("    \n")
    post.write("    fReadInput = open(newDirCFDConfig + \"/CFD/CFDConfig.json\", \"r\")   \n")
    post.write("    fReadInput2 = open(newDirCFDConfig + \"/CFD/CFDConfig.json\", \"r\")   \n")
    post.write("\n")
    post.write("    def getNumOrFloat(str):\n")
    post.write("        num = re.sub(\"[^-0-9.]\", \" \", str)\n")
    post.write("        if re.search(\"\.\", num):\n")
    post.write("            return float(num)\n")
    post.write("\n")
    post.write("\n")
    post.write("    global simTime\n")
    post.write("    global steadyTime\n")
    post.write("\n")
    post.write("    simTime = 2\n")
    post.write("    steadyTime = 1\n")
    post.write("\n")
    post.write("    for line in fReadInput:\n")
    post.write("\n")
    post.write("        if \"SimulationTime\" in line:\n")
    post.write("            simTime = abs(getNumOrFloat(line))\n")
    post.write("            steadyTime = simTime/2\n")
    post.write("\n")
    post.write("        if quick:\n")
    post.write("            steadyTime = 0\n")
    post.write("\n")
    post.write("    for line in fReadInput2:\n")
    post.write("\n")
    post.write("        if \"\\\"Tier\\\": 1,\" in line:\n")
    post.write("            tier1()\n")
    post.write("            tierBool = True\n")
    post.write("            break\n")
    post.write("        if \"\\\"Tier\\\": 3,\" in line:\n")
    post.write("            tier3()\n")
    post.write("            tierBool = True \n")
    post.write("            break\n")
    post.write("        if \"\\\"Tier\\\": 5,\" in line:\n")
    post.write("            tier5()  \n")
    post.write("            tierBool = True\n")
    post.write("            break\n")
    post.write("        \n")
    post.write("    if tierBool is False:\n")
    post.write("        print \"Tier not defined in CFDConfig.json\" \n")
    post.write("        \n")
    post.write("\n")
    post.write("    if not \"\\\"Tier\\\": 1,\" in line:\n")
    post.write("        scaleSTL()\n")
    post.write("\n")
    post.write("    reportFile = 'testbench_manifest.json'\n")
    post.write("    reportPath = os.path.join(newDirCFDConfig, reportFile)\n")
    post.write("    usrInput = False\n")
    post.write("    try:\n")
    post.write("        with open(reportPath, 'r') as json_data:\n")
    post.write("            data = json.load(json_data)\n")
    post.write("        usrInput = data[\"CopyTestResults\"]\n")
    post.write("    except:\n")
    post.write("        pass\n")
    post.write("\n")
    post.write("    try:\n")
    post.write("        createSimVid()\n")
    post.write("    except:\n")
    post.write("        traceback.print_exc()\n")
    post.write("\n")
    post.write("    dirForces = os.path.join(newDirNeeded, \"OpenFoam\", \"case\", \"forceOutput.dat\")\n")
    post.write("    forces = open(dirForces, \"r\")\n")
    post.write("    forcesString = \"\"\n")
    post.write("    for line in forces:\n")
    post.write("        forcesString = forcesString + line\n")
    post.write("    dirDeleteCase = os.path.join(newDirNeeded, \"OpenFoam\", \"case\")\n")
    post.write("    if not usrInput:\n")
    post.write("        shutil.rmtree(dirDeleteCase)\n")
    post.write("        os.makedirs(dirDeleteCase)\n")
    post.write("    forcesOut = open(dirForces, \"w\")\n")
    post.write("    forcesOut.write(forcesString)\n")
    post.write("    dragForceOutput = float(forcesString[15:-2])\n")
    post.write("\n")
    post.write("    #open CFDConfig and read parameters     \n")
    post.write("\n")
    post.write("    mainDir = dirDeleteCase.replace(\"/case\", \"\")\n")
    post.write("    dirCFD = mainDir.replace(\"/OpenFoam\", \"\")\n")
    post.write("    \n")
    post.write("    velocity = 0\n")
    post.write("\n")
    post.write("    configFile = open(newDirNeeded + \"/CFDConfig.json\", \"r\")\n")
    post.write("    for line in configFile:\n")
    post.write("        if \"VehicleVelocity\" in line:\n")
    post.write("            velocity = abs(getNumOrFloat(line))\n")
    post.write("\n")
    post.write("    hydroFile = 'hydrostatics.json'\n")
    post.write("    hydroPath = os.path.join(newDirCFDConfig, hydroFile)\n")
    post.write("    with open(hydroPath, 'r') as hydro_json_data:\n")
    post.write("        data = json.load(hydro_json_data)\n")
    post.write("    hydroResults = data[\"Data\"]\n")
    post.write("    CG_X = data[\"CG_X\"]\n")
    post.write("    CG_Y = data[\"CG_Y\"]\n")
    post.write("    CG_Z = data[\"CG_Z\"]\n")
    post.write("    CG_Units = data[\"CG_Units\"]\n")
    post.write("    DisplacedVolume = data[\"DisplacedVolume\"]\n")
    post.write("    DisplacedVolumeUnits = data[\"DisplacedVolumeUnits\"]\n")
    post.write("    HydrostaticVolume = data[\"HydrostaticVolume\"]\n")
    post.write("    HydrostaticVolumeUnits = data[\"HydrostaticVolumeUnits\"]\n")
    post.write("    for cs in hydroResults:\n")
    post.write("        CB_X = cs[\"CB_X\"]\n")
    post.write("        CB_Y = cs[\"CB_Y\"]\n")
    post.write("        CB_Z = cs[\"CB_Z\"]\n")
    post.write("        CB_Units = cs[\"CB_Units\"]\n")
    post.write("        Roll = cs[\"Roll\"]\n")
    post.write("        Pitch = cs[\"Pitch\"]\n")
    post.write("        Yaw = cs[\"Yaw\"]\n")
    post.write("        RollPitchYawUnits = cs[\"RollPitchYawUnits\"]\n")
    post.write("        RightingMomentArm = cs[\"RightingMomentArm\"]\n")
    post.write("        RightingMomentArmUnits = cs[\"RightingMomentArmUnits\"]\n")
    post.write("        ReferenceArea  = cs[\"ReferenceArea\"]\n")
    post.write("        ReferenceAreaUnits = cs[\"ReferenceAreaUnits\"]\n")
    post.write("        Waterline = cs[\"WaterLine\"]\n")
    post.write("        WaterlineUnits = cs[\"WaterLineUnits\"]\n")
    post.write("    weight = calculateWeightinN()\n")
    post.write("    gravitationalAccel = 9.80665\n")
    post.write("    mass = float(weight)/float(gravitationalAccel)\n")
    post.write("\n")
    post.write("    reportFile = 'testbench_manifest.json'\n")
    post.write("    reportPath = os.path.join(newDirCFDConfig, reportFile)\n")
    post.write("    with open(reportPath, 'r') as json_data:\n")
    post.write("        data = json.load(json_data)\n")
    post.write("    ourResults = data[\"Metrics\"]\n")
    post.write("    for cs in ourResults:\n")
    post.write("        if str(cs[\"Name\"].lower()) == 'cb_x':\n")
    post.write("            cs[\"Value\"] = CB_X\n")
    post.write("            cs[\"Unit\"] = CB_Units\n")
    post.write("        if str(cs[\"Name\"].lower()) == 'cb_y':\n")
    post.write("            cs[\"Value\"] = CB_Y\n")
    post.write("            cs[\"Unit\"] = CB_Units\n")
    post.write("        if str(cs[\"Name\"].lower()) == 'cb_z':\n")
    post.write("            cs[\"Value\"] = CB_Z\n")
    post.write("            cs[\"Unit\"] = CB_Units\n")
    post.write("        if str(cs[\"Name\"].lower()) == 'cg_x':\n")
    post.write("            cs[\"Value\"] = CG_X\n")
    post.write("            cs[\"Unit\"] = CG_Units\n")
    post.write("        if str(cs[\"Name\"].lower()) == 'cg_y':\n")
    post.write("            cs[\"Value\"] = CG_Y\n")
    post.write("            cs[\"Unit\"] = CG_Units\n")
    post.write("        if str(cs[\"Name\"].lower()) == 'cg_z':\n")
    post.write("            cs[\"Value\"] = CG_Z\n")
    post.write("            cs[\"Unit\"] = CG_Units\n")
    post.write("        if str(cs[\"Name\"].lower()) == 'reference_area':\n")
    post.write("            if ReferenceArea == \"0\":\n")
    post.write("                ReferenceArea = \"47000000\"\n")
    post.write("                ReferenceAreaUnits = \"mm^2\"\n")
    post.write("            if testbenchName.lower() == \"wigley_hull\":\n")
    post.write("                ReferenceArea = \"2379600\"\n")
    post.write("                ReferenceAreaUnits = \"mm^2\"\n")
    post.write("            cs[\"Value\"] = ReferenceArea\n")
    post.write("            cs[\"Unit\"] = ReferenceAreaUnits\n")
    post.write("        if str(cs[\"Name\"].lower()) == 'waterline':\n")
    post.write("            if Waterline == \"0\":\n")
    post.write("                Waterline = \"1000\"\n")
    post.write("                WaterlineUnits = \"mm\"\n")
    post.write("            if testbenchName.lower() == \"wigley_hull\" or testbenchName.lower() == \"wigley_hull_quick\":\n")
    post.write("                Waterline = \"250\"\n")
    post.write("                WaterlineUnits = \"mm\"\n")
    post.write("            cs[\"Value\"] = Waterline\n")
    post.write("            cs[\"Unit\"] = WaterlineUnits\n")
    post.write("        if str(cs[\"Name\"].lower()) == 'righting_moment_arm':\n")
    post.write("            cs[\"Value\"] = RightingMomentArm\n")
    post.write("            cs[\"Unit\"] = RightingMomentArmUnits\n")
    post.write("        if str(cs[\"Name\"].lower()) == 'displaced_volume':\n")
    post.write("            cs[\"Value\"] = DisplacedVolume\n")
    post.write("            cs[\"Unit\"] = DisplacedVolumeUnits\n")
    post.write("        if str(cs[\"Name\"].lower()) == 'hydrostatic_volume':\n")
    post.write("            cs[\"Value\"] = HydrostaticVolume\n")
    post.write("            cs[\"Unit\"] = HydrostaticVolumeUnits\n")
    post.write("        if str(cs[\"Name\"].lower()) == 'roll':\n")
    post.write("            cs[\"Value\"] = Roll\n")
    post.write("            cs[\"Unit\"] = RollPitchYawUnits\n")
    post.write("        if str(cs[\"Name\"].lower()) == 'pitch':\n")
    post.write("            cs[\"Value\"] = Pitch\n")
    post.write("            cs[\"Unit\"] = RollPitchYawUnits\n")
    post.write("        if str(cs[\"Name\"].lower()) == 'yaw':\n")
    post.write("            cs[\"Value\"] = Yaw\n")
    post.write("            cs[\"Unit\"] = RollPitchYawUnits\n")
    post.write("        if str(cs[\"Name\"].lower()) == 'mass':\n")
    post.write("            cs[\"Value\"] = mass\n")
    post.write("            cs[\"Unit\"] = 'kg'\n")
    post.write("        if str(cs[\"Name\"].lower()) == 'drag_force':\n")
    post.write("            cs[\"Value\"] = dragForceOutput\n")
    post.write("            cs[\"Unit\"] = 'N'\n")
    post.write("        if str(cs[\"Name\"].lower()) == 'velocity':\n")
    post.write("            cs[\"Value\"] = velocity\n")
    post.write("            cs[\"Unit\"] = 'm/s'\n")
    post.write("    with open(reportPath, 'wb') as file_out:\n")
    post.write("        json.dump(data, file_out, indent=4)\n")
    post.write("\n")
    post.write("    os.chdir(newOFLogDir)\n")
    post.write("    for logFile in glob.glob(\"log.*\"):\n")
    post.write("        shutil.move(logFile, os.path.join(newDirNeeded, \"OpenFoam\", \"case\"))\n")
    post.write("\n")
    post.close()

    # generate CFDforHydrostatics module
    hydro = open(os.path.join(preProcessDir, "CFDforHydrostatics.py"), "w")
    hydro.write("'''\n")
    hydro.write("Created on Dec 20, 2013\n")
    hydro.write("\n")
    hydro.write("@author: Ozgur Yapar\n")
    hydro.write("'''\n")
    hydro.write("import os\n")
    hydro.write("import re\n")
    hydro.write("import xml.etree.ElementTree as ET\n")
    hydro.write("import json\n")
    hydro.write("import shutil \n")
    hydro.write("import glob\n")
    hydro.write("from numpy import *\n")
    hydro.write("\n")
    hydro.write("getCurDir = str(os.getcwd())\n")
    hydro.write("configDir = getCurDir.replace(\"/PreProcessing\", \"/CFD\")\n")
    hydro.write("metricsDir = getCurDir.replace(\"/PreProcessing\", \"\")\n")
    hydro.write("\n")
    hydro.write("def parseMetrics(): \n")
    hydro.write("   cadAssemblyMetricsFile = 'CADAssembly_metrics.xml'\n")
    hydro.write("   massReportPath = os.path.join(metricsDir, cadAssemblyMetricsFile)\n")
    hydro.write("   tree = ET.parse(massReportPath)\n")
    hydro.write("   xmlMetricsRoot = tree.getroot()\n")
    hydro.write("   metricComponentsXML = xmlMetricsRoot.find('MetricComponents')\n")
    hydro.write("   metricComponentXML = metricComponentsXML.find('MetricComponent')\n")
    hydro.write("   scalarsXML = metricComponentXML.find('Scalars')\n")
    hydro.write("   scalarXML = scalarsXML.findall('Scalar')\n")
    hydro.write("   return scalarXML\n")
    hydro.write("\n")
    hydro.write("def parseConfig(): \n")
    hydro.write("   configFile = 'CFDConfig.json'\n")
    hydro.write("   configReportPath = os.path.join(configDir, configFile)\n")
    hydro.write("   fReadInput = open(configReportPath, \"r\")\n")
    hydro.write("   return fReadInput\n")
    hydro.write("\n")
    hydro.write("def calculateWeightinN(): \n")
    hydro.write("   massMetric = parseMetrics()\n")
    hydro.write("   for key in massMetric:\n")
    hydro.write("       if key.get('Name') == 'Mass':\n")
    hydro.write("           totalMass = key.get('Value')\n")
    hydro.write("           totalMassUnit = key.get('Unit')\n")
    hydro.write("           if totalMassUnit == 'kg':\n")
    hydro.write("               conversionFactor = 1\n")
    hydro.write("           elif totalMass == 'g':\n")
    hydro.write("               conversionFactor = 0.001\n")
    hydro.write("           elif totalMass == 'ton':\n")
    hydro.write("               conversionFactor = 1000\n")
    hydro.write("           else:\n")
    hydro.write("               raise ValueError(\"Unit cannot be recognized\")\n")
    hydro.write("\n")
    hydro.write("   gravitationalAccel = 9.80665\n")
    hydro.write("   convertedTotalWeightinN = float(totalMass)*float(conversionFactor)*float(gravitationalAccel)\n")
    hydro.write("   return convertedTotalWeightinN\n")
    hydro.write("\n")
    hydro.write("def calculateDispl(): \n")
    hydro.write("   displMetric = parseConfig()\n")
    hydro.write("   Density = 1000\n")
    hydro.write("   for line in displMetric:\n")
    hydro.write("       if \"Fresh\" in line:\n")
    hydro.write("           Density = 1000\n")
    hydro.write("       elif \"Salt\" in line:\n")
    hydro.write("           Density = 1035\n")
    hydro.write("\n")
    hydro.write("   Weight = calculateWeightinN()\n")
    hydro.write("   gravitationalAccel = 9.80665\n")
    hydro.write("   Mass = float(Weight)/float(gravitationalAccel)\n")
    hydro.write("   Displacement = float(Mass)/float(Density)\n")
    hydro.write("\n")
    hydro.write("   return Displacement\n")
    hydro.write("\n")
    hydro.close()

    # generate CFDforHydrostatics module
    stl = open(os.path.join(preProcessDir, "CFDstlManipulation.py"), "w")
    stl.write("'''\n")
    stl.write("Created on Jan 16, 2014\n")
    stl.write("\n")
    stl.write("@author: Ozgur Yapar\n")
    stl.write("'''\n")
    stl.write("import os\n")
    stl.write("import re\n")
    stl.write("import xml.etree.ElementTree as ET\n")
    stl.write("import json\n")
    stl.write("import shutil \n")
    stl.write("import glob\n")
    stl.write("from numpy import *\n")
    stl.write("\n")
    stl.write("def scaleSTL(): \n")
    stl.write("    getCurDir = str(os.getcwd())\n")
    stl.write("    newDir = getCurDir.replace(\"/PreProcessing\", \"\")\n")
    stl.write("    dirFoam = os.path.join(newDir, \"OpenFoam\")\n")
    stl.write("    os.chdir(os.path.join(dirFoam, \"case\", \"constant\", \"triSurface\"))\n")
    stl.write("\n")
    stl.write("    stlBool = False\n")
    stl.write("    for files in os.listdir(\".\"):\n")
    stl.write("        if files.endswith(\".stl\"):\n")
    stl.write("            STLfile = files\n")
    stl.write("            stlBool = True\n")
    stl.write("    f = open(STLfile,'r')\n")
    stl.write("    x = []\n")
    stl.write("    y = []\n")
    stl.write("    z = []\n")
    stl.write("    partName = \"\"\n")
    stl.write("    facetX = []\n")
    stl.write("    facetY = []\n")
    stl.write("    facetZ = []\n")
    stl.write("\n")
    stl.write("    for line in f:\n")
    stl.write("        strarray = line.split()\n")
    stl.write("\n")
    stl.write("        if strarray[0] == \"solid\":\n")
    stl.write("            partName = str(strarray[1])\n")
    stl.write("\n")
    stl.write("        if strarray[0] == \"facet\":\n")
    stl.write("            facetX.append(double(strarray[2]))\n")
    stl.write("            facetY.append(double(strarray[3]))\n")
    stl.write("            facetZ.append(double(strarray[4]))\n")
    stl.write("\n")
    stl.write("        if strarray[0] ==\"vertex\":\n")
    stl.write("            x.append(double(strarray[1]))\n")
    stl.write("            y.append(double(strarray[2]))\n")
    stl.write("            z.append(double(strarray[3]))\n")
    stl.write("\n")
    stl.write("    newX = []\n")
    stl.write("    newY = []\n")
    stl.write("    newZ = []\n")
    stl.write("    newZAdjusted = []\n")
    stl.write("\n")
    stl.write("    for number in x:\n")
    stl.write("        newX.append(double(number/1000))\n")
    stl.write("\n")
    stl.write("    for number in y:\n")
    stl.write("        newY.append(double(number/1000))\n")
    stl.write("\n")
    stl.write("    for number in z:\n")
    stl.write("        newZ.append(double(number/1000))\n")
    stl.write("\n")
    stl.write("    fout = open(STLfile, \"w\")\n")
    stl.write("    fout.write(\"solid \" + partName + \"\\n\")\n")
    stl.write("\n")
    stl.write("    for idx, item in enumerate(facetX):\n")
    stl.write("        fout.write(\"  facet normal \" + str(facetX[idx]) + \" \" + str(facetY[idx]) + \" \" + str(facetZ[idx]) + \"\\n\")\n")
    stl.write("        fout.write(\"    outer loop\\n\")\n")
    stl.write("\n")
    stl.write("        for i in range(0,3):\n")
    stl.write("            fout.write(\"      vertex \" + str(newX[idx*3+i]) + \" \" + str(newY[idx*3+i]) + \" \" + str(newZ[idx*3+i]) + \"\\n\")\n")
    stl.write("\n")
    stl.write("        fout.write(\"    endloop\\n\")\n")
    stl.write("        fout.write(\"  endfacet\\n\")\n")
    stl.write("\n")
    stl.write("    fout.write(\"endsolid \" + partName)\n")
    stl.write("\n")
    stl.write("\n")
    stl.write("\n")
    stl.write("def moveSTL(): \n")
    stl.write("    getCurDir = str(os.getcwd())\n")
    stl.write("    newDir = getCurDir.replace(\"/PreProcessing\", \"\")\n")
    stl.write("    dirFoam = os.path.join(newDir, \"OpenFoam\")\n")
    stl.write("    os.chdir(os.path.join(dirFoam, \"case\", \"constant\", \"triSurface\"))\n")
    stl.write("\n")
    stl.write("    hydroFile = 'hydrostatics.json'\n")
    stl.write("    hydroPath = os.path.join(newDir, hydroFile)\n")
    stl.write("    with open(hydroPath, 'r') as hydro_json_data:\n")
    stl.write("        data = json.load(hydro_json_data)\n")
    stl.write("    hydroResults = data[\"Data\"]\n")
    stl.write("\n")
    stl.write("    for cs in hydroResults:\n")
    stl.write("        waterLinePrime = cs[\"WaterLine\"]\n")
    stl.write("        waterLineUnit = cs[\"WaterLineUnits\"]\n")
    stl.write("\n")
    stl.write("    if waterLineUnit == 'mm':\n")
    stl.write("        conversionFactor = 1\n")
    stl.write("    elif waterLineUnit == 'm':\n")
    stl.write("        conversionFactor = 1000\n")
    stl.write("    elif totalMass == 'inch':\n")
    stl.write("        conversionFactor = 25.4\n")
    stl.write("    else:\n")
    stl.write("        raise ValueError(\"Unit cannot be recognized\")\n")
    stl.write("\n")
    stl.write("    waterLine = waterLinePrime*conversionFactor\n")
    stl.write("\n")
    stl.write("    stlBool = False\n")
    stl.write("    for files in os.listdir(\".\"):\n")
    stl.write("        if files.endswith(\".stl\"):\n")
    stl.write("            STLfile = files\n")
    stl.write("            stlBool = True\n")
    stl.write("    f = open(STLfile,'r')\n")
    stl.write("    x = []\n")
    stl.write("    y = []\n")
    stl.write("    z = []\n")
    stl.write("    partName = \"\"\n")
    stl.write("    facetX = []\n")
    stl.write("    facetY = []\n")
    stl.write("    facetZ = []\n")
    stl.write("\n")
    stl.write("    for line in f:\n")
    stl.write("        strarray = line.split()\n")
    stl.write("\n")
    stl.write("        if strarray[0] == \"solid\":\n")
    stl.write("            partName = str(strarray[1])\n")
    stl.write("\n")
    stl.write("        if strarray[0] == \"facet\":\n")
    stl.write("            facetX.append(double(strarray[2]))\n")
    stl.write("            facetY.append(double(strarray[3]))\n")
    stl.write("            facetZ.append(double(strarray[4]))\n")
    stl.write("\n")
    stl.write("        if strarray[0] ==\"vertex\":\n")
    stl.write("            x.append(double(strarray[1]))\n")
    stl.write("            y.append(double(strarray[2]))\n")
    stl.write("            z.append(double(strarray[3]))\n")
    stl.write("\n")
    stl.write("    def findAverage(list):\n")
    stl.write("        return abs(max(list) - min(list))/2\n")
    stl.write("\n")
    stl.write("    def findDeltaPos(avg, extrema):\n")
    stl.write("        return abs(avg - extrema)\n")
    stl.write("\n")
    stl.write("    def findDeltaNeg(avg, extrema):\n")
    stl.write("        return - avg - extrema\n")
    stl.write("\n")
    stl.write("    xAvg = findAverage(x)\n")
    stl.write("    yAvg = findAverage(y)\n")
    stl.write("    zAvg = findAverage(z)\n")
    stl.write("\n")
    stl.write("    xMinEdit = findDeltaNeg(xAvg, min(x))\n")
    stl.write("    xMaxEdit = findDeltaPos(xAvg, max(x))\n")
    stl.write("    yMinEdit = findDeltaNeg(yAvg, min(y))\n")
    stl.write("    yMaxEdit = findDeltaPos(yAvg, max(y))\n")
    stl.write("    zMinEdit = findDeltaNeg(zAvg, min(z))\n")
    stl.write("    zMaxEdit = findDeltaPos(zAvg, max(z))\n")
    stl.write("\n")
    stl.write("    xMin = min(x)\n")
    stl.write("    xMax = max(x)\n")
    stl.write("    yMin = min(y)\n")
    stl.write("    yMax = max(y)\n")
    stl.write("    zMin = min(z)\n")
    stl.write("    zMax = max(z)\n")
    stl.write("\n")
    stl.write("    newX = []\n")
    stl.write("    newY = []\n")
    stl.write("    newZ = []\n")
    stl.write("    newZAdjusted = []\n")
    stl.write("\n")
    stl.write("\n")
    stl.write("\n")
    stl.write("\n")
    stl.write("    for number in x:\n")
    stl.write("        if number >= 0:\n")
    stl.write("            newX.append(double(number - xMaxEdit))\n")
    stl.write("        else:\n")
    stl.write("            newX.append(double(number + xMinEdit))\n")
    stl.write("\n")
    stl.write("\n")
    stl.write("    for number in y:\n")
    stl.write("        if number >= 0:\n")
    stl.write("            newY.append(double(number - yMaxEdit))\n")
    stl.write("        else:\n")
    stl.write("            newY.append(double(number + yMinEdit))\n")
    stl.write("\n")
    stl.write("\n")
    stl.write("    for number in z:\n")
    stl.write("        if number >= 0:\n")
    stl.write("            newZ.append(double(number - zMaxEdit))\n")
    stl.write("        else:\n")
    stl.write("            newZ.append(double(number + zMinEdit))\n")
    stl.write("\n")
    stl.write("\n")
    stl.write("    fout = open(STLfile, \"w\")\n")
    stl.write("    fout.write(\"solid \" + partName + \"\\n\")\n")
    stl.write("\n")
    stl.write("    for idx, item in enumerate(facetX):\n")
    stl.write("        fout.write(\"  facet normal \" + str(facetX[idx]) + \" \" + str(facetY[idx]) + \" \" + str(facetZ[idx]) + \"\\n\")\n")
    stl.write("        fout.write(\"    outer loop\\n\")\n")
    stl.write("\n")
    stl.write("        for i in range(0,3):\n")
    stl.write("            fout.write(\"      vertex \" + str(newX[idx*3+i]) + \" \" + str(newY[idx*3+i]) + \" \" + str(newZ[idx*3+i]) + \"\\n\")\n")
    stl.write("\n")
    stl.write("        fout.write(\"    endloop\\n\")\n")
    stl.write("        fout.write(\"  endfacet\\n\")\n")
    stl.write("\n")
    stl.write("    fout.write(\"endsolid \" + partName)\n")
    stl.write("\n")
    stl.write("\n")
    stl.write("\n")
    stl.close()

     # generate CFDcreateSimVideo module
    sim = open(os.path.join(preProcessDir, "CFDcreateSimVideo.py"), "w")
    sim.write("'''\n")
    sim.write("Created on Feb 17, 2014\n")
    sim.write("\n")
    sim.write("@author: Ozgur Yapar\n")
    sim.write("'''\n")
    sim.write("import os\n")
    sim.write("import re\n")
    sim.write("import xml.etree.ElementTree as ET\n")
    sim.write("import json\n")
    sim.write("import shutil \n")
    sim.write("import glob\n")
    sim.write("from numpy import *\n")
    sim.write("from paraview.simple import *\n")
    sim.write("import sys, traceback\n")
    sim.write("\n")
    sim.write("dir = str(os.getcwd())\n")
    sim.write("mainDir = dir.replace(\"/PreProcessing\", \"\")\n")
    sim.write("foamFile = os.path.join(mainDir,\"CFD\", \"OpenFoam\",\"case\",\"file.foam\")\n")
    sim.write("video = str(os.path.join(mainDir,\"CFDsim.avi\"))\n")
    sim.write("os.chdir(mainDir)\n")
    sim.write("stlFile = os.path.join(mainDir,\"CFD\", \"OpenFoam\",\"case\",\"constant\",\"triSurface\",'" + stlName + "')\n")
    sim.write("\n")
    sim.write("def createSimVid(): \n")
    sim.write("    paraview.simple._DisableFirstRenderCameraReset()\n")
    sim.write("\n")
    sim.write("    foam_foam = OpenFOAMReader( FileName = foamFile )\n")
    sim.write("\n")
    sim.write("    AnimationScene1 = GetAnimationScene()\n")
    sim.write("    AnimationScene1.EndTime =" + simTime + "\n")
    sim.write("    AnimationScene1.PlayMode = 'Snap To TimeSteps'\n")
    sim.write("\n")
    sim.write("    foam_foam.CellArrays = ['U', 'alpha', 'alpha1', 'cellLevel', 'k', 'nut', 'omega', 'p', 'p_rgh', 'relaxationZoneLayout', 'relaxationZoneSigmaValue', 'relaxationZoneWeightOnComputed']\n")
    sim.write("    foam_foam.MeshRegions = ['internalMesh']\n")
    sim.write("    foam_foam.PointArrays = ['pointLevel']\n")
    sim.write("\n")
    sim.write("    RenderView1 = GetRenderView()\n")
    sim.write("    RenderView1.ViewSize = [ 1728,1080 ]\n")
    sim.write("    RenderView1.CenterOfRotation = [10.0, 0.0, 0.0]\n")
    sim.write("\n")
    sim.write("    DataRepresentation1 = Show()\n")
    sim.write("    DataRepresentation1.EdgeColor = [0.0, 0.0, 0.5000076295109483]\n")
    sim.write("    DataRepresentation1.SelectionPointFieldDataArrayName = 'alpha'\n")
    sim.write("    DataRepresentation1.SelectionCellFieldDataArrayName = 'alpha'\n")
    sim.write("    DataRepresentation1.ScalarOpacityUnitDistance = 1.4222584245191905\n")
    sim.write("    DataRepresentation1.ExtractedBlockIndex = 1\n")
    sim.write("    DataRepresentation1.ScaleFactor = 9.0\n")
    sim.write("\n")
    sim.write("    RenderView1.CameraViewUp = [-0.24196092254935425, 0.4226285261387719, 0.8734071449517886]\n")
    sim.write("    RenderView1.CameraPosition = [-92.03091997849921, -207.53239283970197, 72.1560547673532]\n")
    sim.write("    RenderView1.CameraClippingRange = [123.54999256344136, 392.25987918881947]\n")
    sim.write("    RenderView1.CameraFocalPoint = [10.0, 0.0, 0.0]\n")
    sim.write("    RenderView1.CameraParallelScale = 62.69968101992226\n")
    sim.write("\n")
    sim.write("    AnimationScene1.AnimationTime = 0.05\n")
    sim.write("\n")
    sim.write("    Contour1 = Contour( PointMergeMethod=\"Uniform Binning\" )\n")
    sim.write("\n")
    sim.write("    Contour1.PointMergeMethod = \"Uniform Binning\"\n")
    sim.write("    Contour1.ContourBy = ['POINTS', 'p']\n")
    sim.write("    Contour1.Isosurfaces = [78965.49755859375]\n")
    sim.write("\n")
    sim.write("    Contour1.Isosurfaces = [0.5]\n")
    sim.write("    Contour1.ContourBy = ['POINTS', 'alpha1']\n")
    sim.write("\n")
    sim.write("    DataRepresentation2 = Show()\n")
    sim.write("    DataRepresentation2.ScaleFactor = 9.0\n")
    sim.write("    DataRepresentation2.EdgeColor = [0.0, 0.0, 0.5000076295109483]\n")
    sim.write("    DataRepresentation2.SelectionPointFieldDataArrayName = 'alpha1'\n")
    sim.write("    DataRepresentation2.SelectionCellFieldDataArrayName = 'p'\n")
    sim.write("\n")
    sim.write("    DataRepresentation1.Visibility = 0\n")
    sim.write("\n")
    sim.write("    RenderView1.CameraClippingRange = [133.58741443930393, 379.5471142608526]\n")
    sim.write("\n")
    sim.write("    newcomponent_assembly_asm_meter_stl = STLReader( FileNames=[stlFile] )\n")
    sim.write("\n")
    sim.write("    DataRepresentation3 = Show()\n")
    sim.write("    DataRepresentation3.EdgeColor = [0.0, 0.0, 0.5000076295109483]\n")
    sim.write("    DataRepresentation3.ColorAttributeType = 'CELL_DATA'\n")
    sim.write("    DataRepresentation3.SelectionCellFieldDataArrayName = 'STLSolidLabeling'\n")
    sim.write("    DataRepresentation3.ColorArrayName = ('CELL_DATA', 'STLSolidLabeling')\n")
    sim.write("    DataRepresentation3.ScaleFactor = 0.9425800323486329\n")
    sim.write("\n")
    sim.write("    a1_STLSolidLabeling_PVLookupTable = GetLookupTableForArray( \"STLSolidLabeling\", 1, RGBPoints=[0.0, 0.23, 0.299, 0.754, 5e-17, 0.865, 0.865, 0.865, 1e-16, 0.706, 0.016, 0.15], VectorMode='Magnitude', NanColor=[0.25, 0.0, 0.0], ColorSpace='Diverging', ScalarRangeInitialized=1.0 )\n")
    sim.write("\n")
    sim.write("    a1_STLSolidLabeling_PiecewiseFunction = CreatePiecewiseFunction( Points=[0.0, 0.0, 0.5, 0.0, 1e-16, 1.0, 0.5, 0.0] )\n")
    sim.write("\n")
    sim.write("    DataRepresentation3.LookupTable = a1_STLSolidLabeling_PVLookupTable\n")
    sim.write("\n")
    sim.write("    a1_STLSolidLabeling_PVLookupTable.ScalarOpacityFunction = a1_STLSolidLabeling_PiecewiseFunction\n")
    sim.write("\n")
    sim.write("    RenderView1.CameraPosition = [-37.59817717955858, -96.81539289230652, 33.66133207578796]\n")
    sim.write("    RenderView1.CameraClippingRange = [5.056621222295114, 249.17997138778614]\n")
    sim.write("\n")
    sim.write("    a3_U_PVLookupTable = GetLookupTableForArray( \"U\", 3, RGBPoints=[0.0, 0.23, 0.299, 0.754, 3.164343547750124, 0.865, 0.865, 0.865, 6.328687095500248, 0.706, 0.016, 0.15], VectorMode='Magnitude', NanColor=[0.25, 0.0, 0.0], ColorSpace='Diverging', ScalarRangeInitialized=1.0 )\n")
    sim.write("\n")
    sim.write("    a3_U_PiecewiseFunction = CreatePiecewiseFunction( Points=[0.0, 0.0, 0.5, 0.0, 6.328687095500248, 1.0, 0.5, 0.0] )\n")
    sim.write("\n")
    sim.write("    DataRepresentation2.ColorArrayName = ('POINT_DATA', 'U')\n")
    sim.write("    DataRepresentation2.LookupTable = a3_U_PVLookupTable\n")
    sim.write("\n")
    sim.write("    ScalarBarWidgetRepresentation1 = CreateScalarBar( ComponentTitle='Magnitude', Title='U', Enabled=1, LabelFontSize=12, LookupTable=a3_U_PVLookupTable, TitleFontSize=12 )\n")
    sim.write("    GetRenderView().Representations.append(ScalarBarWidgetRepresentation1)\n")
    sim.write("\n")
    sim.write("    WriteAnimation(video, Magnification=1, Quality=10, FrameRate=20.000000)\n")
    sim.write("    a3_U_PVLookupTable.ScalarOpacityFunction = a3_U_PiecewiseFunction\n")
    sim.write("\n")
    sim.write("    Render()\n")
    sim.write("\n")
    sim.write("createSimVid()\n")
    sim.write("\n")
    sim.close()

        # generate CFDtakeOutMovie module
    take = open(os.path.join(preProcessDir, "CFDtakeOutMovie.py"), "w")
    take.write("'''\n")
    take.write("Created on Apr 22, 2013\n")
    take.write("\n")
    take.write("@author: Ozgur Yapar\n")
    take.write("'''\n")
    take.write("\n")
    take.write("with open('CFDUpdate.py', 'r') as file:\n")
    take.write("    data = file.readlines()\n")
    take.write("for i in range(len(data)):\n")
    take.write("    if \"from CFDcreateSimVideo import createSimVid\" in data[i]:\n")
    take.write("        data[i] = str(\"    nogpu"+r"\n"+"\")"+"\n")
    take.write("    if \"createSimVid()\" in data[i]:\n")
    take.write("        data[i] = str(\"        nogpu"+r"\n"+"\")"+"\n")
    take.write("with open('CFDUpdate.py', 'w') as file:\n")
    take.write("    data = file.writelines( data )\n")
    take.write("\n")
    take.close()
    
    print("Success!")
    
