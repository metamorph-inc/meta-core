/*****************  Example Input ***************************
SubCase
	ID = 1
	Constraint_ID = 259
	Load_ID = 559
***********************************************************/
###########################
# vSubCase Class
###########################
CLASS vSubCase

	CLASSWIDE STRING	c_ClassName[32],			@
						c_SUBCASE[32],				@	
						c_CONSTRAINT_ID[32],		@	
						c_LOAD_ID[32]										
	
						###########################################
						#  SubCase (Should be only one of these)
						###########################################		
						# SubCase should always be one.  Capture count for error checking
	CLASSWIDE INTEGER	count,									@
						count_temp,								@
						iD(VIRTUAL),							@
						constraint_ID(VIRTUAL),					@
						load_ID(VIRTUAL)	
				
	CLASSWIDE STRING  errorMsg[1024] 
	CLASSWIDE INTEGER errorLevel				
################################################################################
FUNCTION initialize()
	c_ClassName = "vSubCase"
	
	c_SUBCASE =						"SubCase"
	c_CONSTRAINT_ID =				"Constraint_ID"
	c_LOAD_ID =						"Load_ID"	
	
	count = 0
	count_temp = 0
END FUNCTION
################################################################################
FUNCTION allocateArrays()
	IF ( count > 0 ) THEN
		sys_allocate_array ( iD, 					1, count )
		sys_allocate_array ( constraint_ID, 		1, count )
		sys_allocate_array ( load_ID, 				1, count )			
	END IF
END FUNCTION
################################################################################
FUNCTION get_c_SUBCASE()
	RETURN c_SUBCASE
END FUNCTION
################################################################################
FUNCTION increment_Count()
	count += 1
END FUNCTION
################################################################################
FUNCTION readNameValuePairs( 	modelFile,						@
							in_out_LineNum,					@
							in_out_Buffer)						
	INTEGER modelFile

	INTEGER in_out_LineNum
	STRING	in_out_Buffer[]
	
	STRING  functionName[64] 
	functionName = c_ClassName // ".readNameValuePairs"	

	LOGICAL equalsSignFound = TRUE
	LOGICAL	shouldContinue
	STRING  buffer[2028]	
	
	INTEGER length	

	STRING nameField[128]
	STRING valueField[128]	
	
	count_temp += 1	
	
	buffer = ""
	WHILE ( equalsSignFound )	

		INTEGER textReadStatus
		textReadStatus = text_read_string( modelFile, buffer, length )
		IF ( textReadStatus != 0 ) THEN
			buffer = ""
			IF ( textReadStatus == -1 ) THEN
				equalsSignFound = FALSE
			ENDIF
		ELSE		
			in_out_LineNum += 1
			shouldContinue = FALSE			
			
			buffer = vModelDefinitionReader.getBufferNoComments( in_out_LineNum, buffer, shouldContinue )			
			# shouldContinue == TRUE means that the line was blank or contained only a comment
			If (shouldContinue ) THEN CONTINUE 
			
			IF ( str_index( buffer, "=" ) == 0 ) THEN
				equalsSignFound = FALSE					
			ELSE
				nameField = str_token( buffer,"=", 1, TRUE )		
				valueField = str_token( buffer,"=", 2, TRUE )

				SWITCH ( nameField )
					CASE (vConstants.get_c_ID())
					  iD(count_temp) =  vCommon.ID_toInt(valueField)
					  IF ( iD(count_temp) < 0 ) THEN
							errorMsg = "Could not convert to a positive non-zero integer, String: " // valueField // ", Line number: " // str_from_integer(in_out_LineNum)
							errorLevel = vLogger.get_ci_ERROR()
							vLogger.addErrorMessage(  errorLevel, functionName, errorMsg )									
									
					  END IF

					CASE (c_CONSTRAINT_ID)
					  constraint_ID(count_temp) =  vCommon.ID_toInt(valueField)
					  IF (  constraint_ID(count_temp) < 0 ) THEN 
							errorMsg = "Could not convert to a positive non-zero integer, String: " // valueField // ", Line number: " // str_from_integer(in_out_LineNum)
							errorLevel = vLogger.get_ci_ERROR()
							vLogger.addErrorMessage(  errorLevel, functionName, errorMsg )									
					  END IF
					  
					CASE (c_LOAD_ID)
					  load_ID(count_temp) =  vCommon.ID_toInt(valueField)
					  IF (  load_ID(count_temp) < 0 ) THEN
							errorMsg = "Could not convert to a positive non-zero integer, String: " // valueField // ", Line number: " // str_from_integer(in_out_LineNum)
							errorLevel = vLogger.get_ci_ERROR()
							vLogger.addErrorMessage(  errorLevel, functionName, errorMsg )									
					  END IF 				  
							  
					DEFAULT
							errorMsg = "Unexpected name-value pair: " // buffer // ", Line number: "  // str_from_integer(in_out_LineNum)
							errorLevel = vLogger.get_ci_ERROR()
							vLogger.addErrorMessage(  errorLevel, functionName, errorMsg )									
				END SWITCH
				
				#WRITE ( "                         in_out_ErrorMessages_current" // str_from_integer(in_out_ErrorMessages_current) )
				
			END IF
		END IF
	END WHILE

	in_out_Buffer = buffer

	WRITE ( "Function: " // functionName  // ", Returned Buffer: " // buffer )	
	
END FUNCTION
################################################################################
FUNCTION logData()

	text_write_string( vLogger.getChannel(), "")
	text_write_string( vLogger.getChannel(), "-------- Begin " // c_SUBCASE // " --------")	
	text_write_string( vLogger.getChannel(), "   Count: " // str_from_integer(count))
	INTEGER i
		
	FOR ( i = 1 TO count )
		text_write_string( vLogger.getChannel(), "")	
		text_write_string( vLogger.getChannel(), "   " //vConstants.get_c_ID() 	// " = " // vCommon.ID_toStr (iD(i)) )
		text_write_string( vLogger.getChannel(), "   " // c_CONSTRAINT_ID 		// " = " // vCommon.ID_toStr (constraint_ID(i)) )
		text_write_string( vLogger.getChannel(), "   " // c_LOAD_ID 			// " = " // vCommon.ID_toStr (load_ID(i)) )			
	END FOR		

	text_write_string( vLogger.getChannel(), "-------- END " // c_SUBCASE // " --------")			
END FUNCTION
################################################################################
FUNCTION getIndex ( in_ID )

	INTEGER in_ID
	INTEGER i
	FOR ( i = 1 TO count )
		IF ( in_ID == id(i)) THEN Return i
	END FOR
	
	return vConstants.get_ci_Undefined()
END FUNCTION
#################################################################################
END CLASS