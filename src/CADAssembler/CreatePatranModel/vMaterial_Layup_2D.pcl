/*****************  Example Input ***************************
Material_Layup_2D
	ID = 1
	# Only up to 100 layers are supported
	Layer_2D_ID = 1
	Layer_2D_ID = 2	
	Layer_2D_ID = 3
	Layer_2D_ID = 4		

***********************************************************/
###########################
# vMaterial_Layup_2D Class
###########################
CLASS vMaterial_Layup_2D

	CLASSWIDE STRING	c_ClassName[32],			@
						c_Material_Layup_2D[32],	@	
						c_Layer_2D_ID[32],			@
						c_NAME_IN_PATRAN_MODEL[32]

						###########################################
						#  Material_Layup_2D 
						###########################################		
	CLASSWIDE INTEGER	count,									@
						count_temp,								@
						iD(VIRTUAL),							@
						count_layer_2D_IDs(VIRTUAL),			@
						layer_2D_IDs(VIRTUAL)				
				
	CLASSWIDE STRING	inModelMaterialName[32](VIRTUAL)

	CLASSWIDE REAL		totalLaminateThickness(VIRTUAL)
	
	CLASSWIDE INTEGER   globalPly_ID_counter
		
				
	CLASSWIDE INTEGER   max_Num_Layers			
	CLASSWIDE STRING  	errorMsg[1024] 
	CLASSWIDE INTEGER 	errorLevel				
################################################################################
FUNCTION initialize()
	c_ClassName = "vMaterial_Layup_2D"
	
	c_Material_Layup_2D =		"Material_Layup_2D"
	c_Layer_2D_ID =				"Layer_2D_ID"	
	c_NAME_IN_PATRAN_MODEL	= 	"Name_in_Patran_Model"	


	globalPly_ID_counter = 0
	
	count = 0
	count_temp = 0

	max_Num_Layers = 100
			
END FUNCTION
################################################################################
FUNCTION allocateArrays()
	IF ( count > 0 ) THEN
		sys_allocate_array ( iD, 					1, count )
		sys_allocate_array ( count_layer_2D_IDs, 	1, count )
		sys_allocate_array ( layer_2D_IDs, 			1, count, 1, max_Num_Layers )
		sys_allocate_array ( inModelMaterialName, 	1, count )
		sys_allocate_array ( totalLaminateThickness, 	1, count )		
		totalLaminateThickness
	END IF
	
	INTEGER i, j
	
	FOR ( i = 1 to count )
		iD(i) = vConstants.get_ci_Undefined()
		count_layer_2D_IDs(i) = 0
		FOR ( j = 1 to max_Num_Layers )
			layer_2D_IDs(i,j) = vConstants.get_ci_Undefined()
		END FOR 
		totalLaminateThickness(i) = vConstants.get_cr_Undefined()
	END FOR

END FUNCTION
################################################################################
FUNCTION get_c_Material_Layup_2D()
	RETURN c_Material_Layup_2D
END FUNCTION
################################################################################
FUNCTION increment_Count()
	count += 1
END FUNCTION
################################################################################
FUNCTION get_Count()
	return count
END FUNCTION
################################################################################
FUNCTION getIndex ( in_ID )

	INTEGER in_ID
	INTEGER i
	FOR ( i = 1 TO count )
		IF ( in_ID == id(i)) THEN Return i
	END FOR
	
	return vConstants.get_ci_Undefined()
END FUNCTION
################################################################################
FUNCTION get_Count_Layer_2D_IDs( in_Index)
	INTEGER in_Index
	return count_layer_2D_IDs(in_Index)
END FUNCTION
################################################################################
FUNCTION get_layer_2D_IDs( in_Index, out_layer_2D_IDs)
	INTEGER in_Index
	INTEGER i
	INTEGER out_layer_2D_IDs()
	FOR (i = 1 TO count_layer_2D_IDs(in_Index) )
		out_layer_2D_IDs(i) = layer_2D_IDs(in_Index,i)
	END FOR
END FUNCTION	
################################################################################
FUNCTION get_Max_Num_Layers()
	return max_Num_Layers
END FUNCTION
################################################################################
FUNCTION get_inModelMaterialName( in_Index)
	INTEGER in_Index
	return inModelMaterialName(in_Index)
END FUNCTION
################################################################################
FUNCTION get_TotalLaminateThickness(in_Index)
	INTEGER in_Index
	return totalLaminateThickness(in_Index)
END FUNCTION
################################################################################
# vMaterial.setInModelMaterialName() MUST be called before calling this function
FUNCTION  setInModelMaterialName()
	INTEGER i
	
	INTEGER layer_2D_index
	INTEGER material_ID
	INTEGER material_index
	
	FOR ( i = 1 TO count )
		IF (  count_layer_2D_IDs(i) < 1 ) THEN
			# this error will be caught later when vMaterial_Layup_2D.check() is called
			Continue
		END IF 
	
		IF ( count_layer_2D_IDs(i) > 1 ) THEN
			inModelMaterialName(i) = vCommon.buildNameString ( "M_L", iD(i), "_Laminate_Layup", 31 )
		Else
			# For this case, there would be only one Layer_2D_ID, the check function in this file assures at least one
			layer_2D_index = vLayer_2D.getIndex(layer_2D_IDs(i,1))
			material_ID = vLayer_2D.get_Material_ID(layer_2D_index)
			material_index = vMaterial.getIndex(material_ID)
			inModelMaterialName(i) = vMaterial.get_InModelMaterialName(material_index)	
		END IF
	END FOR
END FUNCTION
################################################################################
FUNCTION readNameValuePairs( modelFile,			@
							in_out_LineNum,		@
							in_out_Buffer )						
	INTEGER modelFile

	INTEGER in_out_LineNum
	STRING	in_out_Buffer[]
	
	STRING  functionName[64] 
	functionName = c_ClassName // ".readNameValuePairs"	

	LOGICAL equalsSignFound = TRUE
	LOGICAL	shouldContinue
	STRING  buffer[2028]	
	
	INTEGER length	

	STRING nameField[128]
	STRING valueField[128]	
	
	count_temp += 1	
	INTEGER realStatus = 0
	buffer = ""
	WHILE ( equalsSignFound )	

		INTEGER textReadStatus
		textReadStatus = text_read_string( modelFile, buffer, length )
		IF ( textReadStatus != 0 ) THEN
			buffer = ""
			IF ( textReadStatus == -1 ) THEN
				equalsSignFound = FALSE
			ENDIF
		ELSE		
			in_out_LineNum += 1
			shouldContinue = FALSE			
			
			buffer = vModelDefinitionReader.getBufferNoComments( in_out_LineNum, buffer, shouldContinue )			
			# shouldContinue == TRUE means that the line was blank or contained only a comment
			If (shouldContinue ) THEN CONTINUE 
			
			IF ( str_index( buffer, "=" ) == 0 ) THEN
				equalsSignFound = FALSE					
			ELSE
				nameField = str_token( buffer,"=", 1, TRUE )		
				valueField = str_token( buffer,"=", 2, TRUE )

				SWITCH ( nameField )
					CASE (vConstants.get_c_ID())
					  iD(count_temp) =  vCommon.ID_toInt(valueField)
					  IF ( iD(count_temp) < 0 ) THEN
							errorMsg = "Could not convert to a positive non-zero integer, String: " // valueField // ", Line number: " // str_from_integer(in_out_LineNum)
							errorLevel = vLogger.get_ci_ERROR()
							vLogger.addErrorMessage(  errorLevel, functionName, errorMsg )																		
					  END IF
				  
					CASE (c_Layer_2D_ID)
					  count_layer_2D_IDs(count_temp) += 1 
					  INTEGER count_Layer_IDs_temp
					  count_Layer_IDs_temp = count_layer_2D_IDs(count_temp)
					  
					  IF ( count_Layer_IDs_temp > max_Num_Layers ) THEN
							errorMsg = "Exceeded maximum of " // str_from_integer(max_Num_Layers) // " Layer_2D_IDs. valueField: " // valueField // ", Line number: " // str_from_integer(in_out_LineNum)
							errorLevel = vLogger.get_ci_ERROR()
							vLogger.addErrorMessage(  errorLevel, functionName, errorMsg )	
							# Must decrement, or logging will get a subscript violation
							count_layer_2D_IDs(count_temp)  -= 1
					  ELSE					  
						  layer_2D_IDs(count_temp, count_Layer_IDs_temp ) =  vCommon.ID_toInt(valueField)
						  IF ( layer_2D_IDs(count_temp,count_Layer_IDs_temp) < 0 ) THEN
								errorMsg = "Could not convert to a positive non-zero integer, String: " // valueField // ", Line number: " // str_from_integer(in_out_LineNum)
								errorLevel = vLogger.get_ci_ERROR()
								vLogger.addErrorMessage(  errorLevel, functionName, errorMsg )	
						  END IF
					  END IF				
							  
					DEFAULT
							errorMsg = "Unexpected name-value pair: " // buffer // ", Line number: "  // str_from_integer(in_out_LineNum)
							errorLevel = vLogger.get_ci_ERROR()
							vLogger.addErrorMessage(  errorLevel, functionName, errorMsg )									
				END SWITCH
				
				#WRITE ( " in_out_ErrorMessages_current" // str_from_integer(in_out_ErrorMessages_current) )
				
			END IF
		END IF
	END WHILE

	in_out_Buffer = buffer

	WRITE ( "Function: " // functionName  // ", Returned Buffer: " // buffer )	
	
END FUNCTION
################################################################################
FUNCTION logData()

	text_write_string( vLogger.getChannel(), "")
	text_write_string( vLogger.getChannel(), "-------- Begin " // c_Material_Layup_2D // " --------")	
	text_write_string( vLogger.getChannel(), "   Count: " // str_from_integer(count))
	INTEGER i, j
		
	FOR ( i = 1 TO count )
		text_write_string( vLogger.getChannel(), "")	
		text_write_string( vLogger.getChannel(), "   " //vConstants.get_c_ID() 	// " = " // vCommon.ID_toStr (iD(i)) )
		
		FOR ( j = 1 TO count_layer_2D_IDs(i) )
			text_write_string( vLogger.getChannel(), "      " // c_Layer_2D_ID 		// " = " // vCommon.ID_toStr (layer_2D_IDs(i,j)) )
		END FOR
		
		text_write_string( vLogger.getChannel(), "   " // c_NAME_IN_PATRAN_MODEL 	// " = " // inModelMaterialName(i) )

			
	END FOR		

	text_write_string( vLogger.getChannel(), "-------- END " // c_Material_Layup_2D // " --------")			
END FUNCTION

#################################################################################
FUNCTION check()

	INTEGER returnStatus = 0		
		
	STRING  functionName[64] 
	functionName = c_ClassName // ".check"	

	STRING headingName[64]
	
	
	INTEGER i, j

	INTEGER index 
	INTEGER target_index 
	STRING taret_name[64]
	
	
	headingName = c_Material_Layup_2D

	IF ( vCommon.iDsOccurMoreThanOnce(count, iD)) THEN
		errorMsg = " A " // headingName // " entry has an ID that appears more than once.  Make sure each " // headingName  // " entry has a unique ID"
		errorLevel = vLogger.get_ci_ERROR()
		vLogger.addErrorMessage(  errorLevel, functionName, errorMsg )
		returnStatus = -1							
	END IF		
	
	FOR ( i = 1 TO count )
		IF ( count_layer_2D_IDs(i) < 1 ) THEN
				errorMsg = headingName // ", ID: " // str_from_integer(iD(i)) // ", number of Layer_2D_IDs < 1, there must be a least one Layer_2D_ID"
				errorLevel = vLogger.get_ci_ERROR()
				vLogger.addErrorMessage(  errorLevel, functionName, errorMsg )
				returnStatus = -1		
		END IF
	END FOR
	
	FOR ( i = 1 TO count )
		FOR ( j = 1 to count_layer_2D_IDs(i) )	
			index = layer_2D_IDs(i,j)
			target_index =  vLayer_2D.getIndex(index)
			taret_name = c_Layer_2D_ID

			IF ( target_index == vConstants.get_ci_Undefined() ) THEN
				errorMsg = headingName // ", ID: " // str_from_integer(iD(i)) // ", missing " //  taret_name // " with ID: "  // str_from_integer(index)
				errorLevel = vLogger.get_ci_ERROR()
				vLogger.addErrorMessage( errorLevel, functionName, errorMsg )
				returnStatus = -1							
			END IF			
		END FOR
	END FOR
	
	RETURN returnStatus
		
END FUNCTION			
#################################################################################
# This function creates laminates for the case where 
# vMaterial_Layup_2D.count_layer_2D_IDs > 1
# For this case, there is more than one material and thus a laminate must be
# created.  If vMaterial_Layup_2D.count_layer_2D_IDs == 1, then the material would
# have been created per vMaterial.createMaterials().
FUNCTION createLaminateMaterials()
	INTEGER returnStatus = 0
	INTEGER returnStatus_temp = 0	
		
	STRING  functionName[64] 
	functionName = c_ClassName // ".createLaminateMaterials"	

	STRING headingName[64]
	
	INTEGER i, j

	#INTEGER index 
	#INTEGER target_index 
	# STRING taret_name[64]
	
	STRING laminate_material_name[31]
	STRING material_descrip[64]		
	
	headingName = c_Material_Layup_2D	
	
	REAL thickness_real	
	INTEGER layer_2D_index
	INTEGER material_ID
	INTEGER material_index
	
	
	FOR ( i = 1 To count)
		IF ( count_layer_2D_IDs(i) > 1 ) THEN
			
			/*****
				mat_create_lam3( "Laminate_4", "Laminate zzz 1", 1, ["M1_Epoxy_C_G_30_70_Mix", @
				 "M2_Epoxy_C_G_Cloth", "M1_Epoxy_C_G_30_70_Mix", "M2_Epoxy_C_G_Cloth"], [ @
				"7.000000E-002", "1.100000E+000", "7.000000E-002", "1.100000E+000"], [ @
				"0.000000E+000", "3.000000E+001", "6.000000E+001", "9.000000E+001"], ["1", "2" @
				, "3", "4"], 4, "", "Create" )	
			****/
			

			INTEGER stack_sequence
			
			#stack_sequence 	This value specifies the stacking sequence convention:
			#					1=Total; 2=Symmetric; 3=Symmetric/Mid-Ply; 4=Anti-
			#					Symmetric; and 5=Anti-Symmetric/Mid-Ply.	
			# Always set stack_sequence to 1, will always define all the layers
			stack_sequence = 1
			
			laminate_material_name = inModelMaterialName(i)
			material_descrip = "Laminate layup for Surface" 
			
			STRING 	ply_material_names[32](VIRTUAL)
			STRING 	thicknesses[32](VIRTUAL)
			STRING 	angles[32](VIRTUAL)
			STRING 	globalPly_IDs[32](VIRTUAL)
			
			sys_allocate_array ( ply_material_names, 	1,  count_layer_2D_IDs(i) )
			sys_allocate_array ( thicknesses, 			1,  count_layer_2D_IDs(i) )
			sys_allocate_array ( angles, 				1,  count_layer_2D_IDs(i) )	
			sys_allocate_array ( globalPly_IDs, 		1,  count_layer_2D_IDs(i) )	
			
	
			
			totalLaminateThickness(i) = 0.0
			
			#########################################
			# Set material names, thicknesses, angles
			#########################################
			FOR ( j = 1 TO  count_layer_2D_IDs(i) )
				layer_2D_index = vLayer_2D.getIndex(layer_2D_IDs(i,j))
				material_ID = vLayer_2D.get_Material_ID(layer_2D_index)
				material_index = vMaterial.getIndex(material_ID)
				ply_material_names(j) = vMaterial.get_InModelMaterialName(material_index)
				
				thickness_real = vLayer_2D.get_Thickness(layer_2D_index)
				thicknesses(j) = str_from_real(thickness_real)
				angles(j) = str_from_real(vLayer_2D.get_Orientation_Angle(layer_2D_index))
				globalPly_ID_counter += 1
				globalPly_IDs(j) = str_from_integer(globalPly_ID_counter)
				
				totalLaminateThickness(i) +=  thickness_real
			END FOR	
				
				
				
			returnStatus_temp = mat_create_lam3( laminate_material_name, material_descrip, stack_sequence, @
											ply_material_names, thicknesses, angles, globalPly_IDs,   @
											count_layer_2D_IDs(i), "", "Create" )		
			
			IF ( returnStatus_temp != 0 ) THEN
				errorMsg = "mat_create_lam3 returned an error, Return Status: " // str_from_integer(returnStatus_temp)
				errorLevel = vLogger.get_ci_ERROR()
				vLogger.addErrorMessage(  errorLevel, functionName, errorMsg ) 
				returnStatus = -1
			END IF			
			
			sys_free_array ( ply_material_names )
			sys_free_array (thicknesses)	
			sys_free_array (angles)
			sys_free_array (globalPly_IDs)				

		ELSE
			# Just one material in the stackup, Note vMaterial_Layup_2D.check() would varified ate least one  vLayer_2D.getIndex(layer_2D_IDs(i,1))
			layer_2D_index = vLayer_2D.getIndex(layer_2D_IDs(i,1))
			material_ID = vLayer_2D.get_Material_ID(layer_2D_index)
			material_index = vMaterial.getIndex(material_ID)					
			totalLaminateThickness(i) = vLayer_2D.get_Thickness(layer_2D_index)
		END IF

	END FOR

	RETURN returnStatus
END FUNCTION	
#################################################################################

END CLASS