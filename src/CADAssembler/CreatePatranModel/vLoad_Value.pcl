/*****************  Example Input ***************************
Load_Value
	ID = 1
	# Scalar_Value or at least one x_Value, y_Value, z_Value must exist. If Value exists 
	# x_Value, y_Value, z_Value cannot exist.  Vice versa is also true.
	Scalar_Value = .2
	# A ommited value (e.g. z_Value) would be assumed to be zero. 
	#x_Value = 392.0
	#y_Value = 3l3l3.
	#z_Value = 0.0
	
***********************************************************/
###########################
# vLoad_Value Class
###########################
CLASS vLoad_Value

	CLASSWIDE STRING	c_ClassName[32],							@
						c_Load_Value[32],							@
						c_SCALAR_VALUE[32],							@
						c_x_VALUE[32],								@
						c_y_VALUE[32],								@
						c_z_VALUE[32]								
	
						#################
						# Load_Value
						#################	
	CLASSWIDE INTEGER	count,										@
						count_temp,									@
						iD(VIRTUAL)
	CLASSWIDE REAL		load_value_Scalar(VIRTUAL)
					
	CLASSWIDE LOGICAL	load_Value_Scalar_Set(VIRTUAL),				@
						load_Value_Value_Set(VIRTUAL)
	CLASSWIDE REAL		load_Value_x(VIRTUAL),						@
						load_Value_y(VIRTUAL),						@
						load_Value_z(VIRTUAL)
	CLASSWIDE LOGICAL	load_Value_x_Set(VIRTUAL),					@
						load_Value_y_Set(VIRTUAL),					@
						load_Value_z_Set(VIRTUAL)
				
	CLASSWIDE STRING  errorMsg[1024] 
	CLASSWIDE INTEGER errorLevel				
################################################################################
FUNCTION initialize()
	c_ClassName = "vLoad_Value"
	
	c_Load_Value =					"Load_Value"
	
	c_SCALAR_VALUE =				"Scalar_Value"	
	c_x_VALUE =						"x_Value"
	c_y_VALUE =						"y_Value"
	c_z_VALUE =						"z_Value"
	
	count = 0
	count_temp = 0
END FUNCTION
################################################################################
FUNCTION allocateArrays()
	IF ( count > 0 ) THEN
		sys_allocate_array (iD,   						1, 	count )
		sys_allocate_array (load_value_Scalar,   		1, 	count )				
		sys_allocate_array (load_Value_Scalar_Set,   	1, 	count )	
		sys_allocate_array (load_Value_Value_Set,   	1, 	count )	
		sys_allocate_array (load_Value_x,   			1, 	count )	
		sys_allocate_array (load_Value_y,   			1, 	count )	
		sys_allocate_array (load_Value_z,   			1, 	count )	
		sys_allocate_array (load_Value_x_Set,   		1, 	count )	
		sys_allocate_array (load_Value_y_Set,   		1, 	count )	
		sys_allocate_array (load_Value_z_Set,   		1, 	count )	
	END IF		

	INTEGER I
	FOR ( i = 1 TO count )
		load_Value_Scalar_Set(i) =  FALSE
		load_Value_Value_Set(i) =	FALSE
		load_Value_x_Set(i) = 		FALSE
		load_Value_y_Set(i) = 		FALSE
		load_Value_z_Set(i) = 		FALSE
	END FOR
	
END FUNCTION
################################################################################
FUNCTION get_c_Load_Value()
	RETURN c_Load_Value
END FUNCTION
################################################################################
FUNCTION increment_Count()
	count += 1
END FUNCTION
################################################################################
FUNCTION readNameValuePairs( 	modelFile,					@
							in_out_LineNum,					@
							in_out_Buffer)						
	INTEGER modelFile

	INTEGER in_out_LineNum
	STRING	in_out_Buffer[]
	
	STRING  functionName[64] 
	functionName = c_ClassName // ".readNameValuePairs"	

	LOGICAL equalsSignFound = TRUE
	LOGICAL	shouldContinue
	STRING  buffer[2028]	
	
	INTEGER length	

	STRING nameField[128]
	STRING valueField[128]	
	
	INTEGER realStatus = 0
	count_temp += 1	
	
	buffer = ""
	buffer = ""
	WHILE ( equalsSignFound )	

		INTEGER textReadStatus
		textReadStatus = text_read_string( modelFile, buffer, length )
		IF ( textReadStatus != 0 ) THEN
			buffer = ""
			IF ( textReadStatus == -1 ) THEN
				equalsSignFound = FALSE
			ENDIF
		ELSE
			in_out_LineNum += 1
			shouldContinue = FALSE			
			
			buffer = vModelDefinitionReader.getBufferNoComments( in_out_LineNum, buffer, shouldContinue )				
			# shouldContinue == TRUE means that the line was blank or contained only a comment
			If (shouldContinue ) THEN CONTINUE 
			
			IF ( str_index( buffer, "=" ) == 0 ) THEN
				equalsSignFound = FALSE					
			ELSE
				nameField = str_token( buffer,"=", 1, TRUE )		
				valueField = str_token( buffer,"=", 2, TRUE )

				SWITCH ( nameField )					
					CASE (vConstants.get_c_ID())
					  iD(count_temp) =  vCommon.ID_toInt(valueField)
					  IF (  iD(count_temp) < 0 ) THEN
							errorMsg = "Could not convert to a positive non-zero integer, String: " // valueField // ", Line number: " // str_from_integer(in_out_LineNum)
							errorLevel = vLogger.get_ci_ERROR()
							vLogger.addErrorMessage(  errorLevel, functionName, errorMsg ) 
					  END IF  
					  		  							  
					CASE (c_SCALAR_VALUE)  
					  load_value_Scalar(count_temp) =  str_to_real(valueField, realStatus)
					  IF (  realStatus != 0 ) THEN
							errorMsg = "Could not covert value in name-value pair to a floating point number, name-value pair: " // buffer //  ", Line number: " // str_from_integer(in_out_LineNum)
							errorLevel = vLogger.get_ci_ERROR()
							vLogger.addErrorMessage(  errorLevel, functionName, errorMsg )									
					  ELSE
						load_Value_Scalar_Set(count_temp) = TRUE
					  END IF
													
					CASE (c_x_VALUE)  
					  load_Value_x(count_temp) =  str_to_real(valueField, realStatus)
					  IF (  realStatus != 0 ) THEN
							errorMsg = "Could not covert value in name-value pair to a floating point number, name-value pair: " // buffer //  ", Line number: " // str_from_integer(in_out_LineNum)
							errorLevel = vLogger.get_ci_ERROR()
							vLogger.addErrorMessage(  errorLevel, functionName, errorMsg )		
					  ELSE
						load_Value_x_Set(count_temp) = TRUE
					  END IF
					  								
					CASE (c_y_VALUE)  
					  WRITE ( "Function: " // functionName  // ", y_Value: " // valueField )	
					  REAL TestY
					  TestY = str_to_real(valueField, realStatus)
					  load_Value_y(count_temp) =  str_to_real(valueField, realStatus)
					  #WRITE ( "Function: " // functionName  // ", y_Value: " // str_from_real(load_Value_y(count_temp)) )	
					  #WRITE ( "Function: " // functionName  // ", y_Value: " // str_from_real(TestY) )
					  IF (  realStatus != 0 ) THEN
							errorMsg = "Could not covert value in name-value pair to a floating point number, name-value pair: " // buffer //  ", Line number: " // str_from_integer(in_out_LineNum)
							errorLevel = vLogger.get_ci_ERROR()
							vLogger.addErrorMessage(  errorLevel, functionName, errorMsg )
					  ELSE
						load_Value_y_Set(count_temp) = TRUE
					  END IF								

					CASE (c_z_VALUE)  
					  load_Value_z(count_temp) =  str_to_real(valueField, realStatus)
					  IF (  realStatus != 0 ) THEN
							errorMsg = "Could not covert value in name-value pair to a floating point number, name-value pair: " // buffer //  ", Line number: " // str_from_integer(in_out_LineNum)
							errorLevel = vLogger.get_ci_ERROR()
							vLogger.addErrorMessage(  errorLevel, functionName, errorMsg )
					  ELSE
						load_Value_z_Set(count_temp) = TRUE
					  END IF	
											  
					DEFAULT
						errorMsg = "Unexpected name-value pair: " // buffer // ", Line number: "  // str_from_integer(in_out_LineNum)
						errorLevel = vLogger.get_ci_ERROR()
						vLogger.addErrorMessage(  errorLevel, functionName, errorMsg ) 						
				END SWITCH	
				
			END IF
		END IF
	END WHILE
		
	in_out_Buffer = buffer
	
	WRITE ( "Function: " // functionName  // ", Returned Buffer: " // buffer )		
	
END FUNCTION
################################################################################
FUNCTION logData()

	text_write_string( vLogger.getChannel(), "")
	text_write_string( vLogger.getChannel(), "-------- Begin " // c_Load_Value // " --------")	
	text_write_string( vLogger.getChannel(), "   Count: " // str_from_integer(count))
	INTEGER i
		
	FOR ( i = 1 TO count )
		text_write_string( vLogger.getChannel(), "" )	
		text_write_string( vLogger.getChannel(), "   " // vConstants.get_c_ID() 		// " = " // vCommon.ID_toStr(iD(i)) )
		text_write_string( vLogger.getChannel(), "   " // c_SCALAR_VALUE 				// " = " // str_from_real(load_value_Scalar(i)) )
		text_write_string( vLogger.getChannel(), "   " // c_x_VALUE 					// " = " // str_from_real(load_Value_x(i)) )
		text_write_string( vLogger.getChannel(), "   " // c_y_VALUE 					// " = " // str_from_real(load_Value_y(i)) )
		text_write_string( vLogger.getChannel(), "   " // c_z_VALUE 					// " = " // str_from_real(load_Value_z(i)) )
	END FOR		

	text_write_string( vLogger.getChannel(), "-------- END " // c_Load_Value // " --------")			
END FUNCTION
################################################################################
FUNCTION getIndex ( in_ID )

	INTEGER in_ID
	INTEGER I
	FOR ( i = 1 TO count )
		IF ( in_ID == id(i)) THEN Return i
	END FOR
	
	return vConstants.get_ci_Undefined()
END FUNCTION
################################################################################
FUNCTION getLoadScalar ( in_Load_Value_ID, out_Scalar )

	INTEGER in_Load_Value_ID
	REAL	out_Scalar
	
	INTEGER index	
	
	STRING  functionName[64] 
	functionName = c_ClassName // ".getLoadScalar"		
	
	out_Scalar = 0.0
	INTEGER returnStatus = 0
	
	index = vLoad_Value.getIndex(in_Load_Value_ID)
	
	IF ( index == vConstants.get_ci_Undefined() ) THEN
		errorMsg = "Load value not found, Load Value ID " //  str_from_integer(in_Load_Value_ID)
		errorLevel = vLogger.get_ci_ERROR()	
		vLogger.addErrorMessage(  errorLevel, functionName, errorMsg )
		return -1
	END IF
	
	IF ( !load_Value_Scalar_Set(index) ) THEN
		errorMsg = "Load value scalar not defined, Load Value ID " //  str_from_integer(in_Load_Value_ID)
		errorLevel = vLogger.get_ci_ERROR()	
		vLogger.addErrorMessage(  errorLevel, functionName, errorMsg )
		return -1	
	END IF 

	out_Scalar =  load_value_Scalar(index)
	
	RETURN returnStatus
END FUNCTION
################################################################################

END CLASS