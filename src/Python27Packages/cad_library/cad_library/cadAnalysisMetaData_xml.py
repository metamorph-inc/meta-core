#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Tue Feb 10 16:04:03 2015 by generateDS.py version 2.12d.
#
# Command line options:
#   ('-o', 'a.py')
#
# Command line arguments:
#   CADAnalysisMetaData.xsd
#
# Command line:
#   C:\Users\snyako.ISIS\Desktop\generateDS-2.12d\generateDS.py -o "a.py" CADAnalysisMetaData.xsd
#
# Current working directory (os.getcwd()):
#   cad_library
#

import sys
import getopt
import re as re_
import base64
import datetime as datetime_
import six

etree_ = None
Verbose_import_ = False
(
    XMLParser_import_none, XMLParser_import_lxml,
    XMLParser_import_elementtree
) = list(range(3))
XMLParser_import_library = None
try:
    # lxml
    from lxml import etree as etree_
    XMLParser_import_library = XMLParser_import_lxml
    if Verbose_import_:
        print("running with lxml.etree")
except ImportError:
    try:
        # cElementTree from Python 2.5+
        import xml.etree.cElementTree as etree_
        XMLParser_import_library = XMLParser_import_elementtree
        if Verbose_import_:
            print("running with cElementTree on Python 2.5+")
    except ImportError:
        try:
            # ElementTree from Python 2.5+
            import xml.etree.ElementTree as etree_
            XMLParser_import_library = XMLParser_import_elementtree
            if Verbose_import_:
                print("running with ElementTree on Python 2.5+")
        except ImportError:
            try:
                # normal cElementTree install
                import cElementTree as etree_
                XMLParser_import_library = XMLParser_import_elementtree
                if Verbose_import_:
                    print("running with cElementTree")
            except ImportError:
                try:
                    # normal ElementTree install
                    import elementtree.ElementTree as etree_
                    XMLParser_import_library = XMLParser_import_elementtree
                    if Verbose_import_:
                        print("running with ElementTree")
                except ImportError:
                    raise ImportError(
                        "Failed to import ElementTree from any known place")


def parsexml_(*args, **kwargs):
    if (XMLParser_import_library == XMLParser_import_lxml and
            'parser' not in kwargs):
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        kwargs['parser'] = etree_.ETCompatXMLParser()
    doc = etree_.parse(*args, **kwargs)
    return doc

#
# User methods
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError as exp:

    class GeneratedsSuper(object):
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_integer_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integers')
            return input_data
        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')
        def gds_validate_float(self, input_data, node, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_float_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of floats')
            return input_data
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_double_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of doubles')
            return input_data
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_validate_boolean(self, input_data, node, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_boolean_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(
                        node,
                        'Requires sequence of booleans '
                        '("true", "1", "false", "0")')
            return input_data
        def gds_validate_datetime(self, input_data, node, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in six.iteritems(mapping)))


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'ascii'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    if not inStr:
        return ''
    s1 = (isinstance(inStr, six.string_types) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, six.string_types) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    if XMLParser_import_library == XMLParser_import_lxml:
        msg = '%s (element %s/line %d)' % (
            msg, node.tag, node.sourceline, )
    else:
        msg = '%s (element %s)' % (msg, node.tag, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace, pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(outfile, level, namespace, name, pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name, base64.b64encode(self.value), self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type, self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type, self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0):
        self.name = name
        self.data_type = data_type
        self.container = container
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class MetricType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, _desynched_atts=None, _derived=None, _real_archetype=None, _archetype=None, ComponentInstanceID=None, ComponentName=None, ConfigurationID=None, MetricID=None, MetricType=None, _subtype=None, ComponentType=None, _instances=None, Details=None, TopAssemblyComponentInstanceID=None, RequestedValueType=None, _id=None, MetricName=None):
        self.original_tagname_ = None
        self._desynched_atts = _cast(None, _desynched_atts)
        self._derived = _cast(None, _derived)
        self._real_archetype = _cast(bool, _real_archetype)
        self._archetype = _cast(None, _archetype)
        self.ComponentInstanceID = _cast(None, ComponentInstanceID)
        self.ComponentName = _cast(None, ComponentName)
        self.ConfigurationID = _cast(None, ConfigurationID)
        self.MetricID = _cast(None, MetricID)
        self.MetricType = _cast(None, MetricType)
        self._subtype = _cast(bool, _subtype)
        self.ComponentType = _cast(None, ComponentType)
        self._instances = _cast(None, _instances)
        self.Details = _cast(None, Details)
        self.TopAssemblyComponentInstanceID = _cast(None, TopAssemblyComponentInstanceID)
        self.RequestedValueType = _cast(None, RequestedValueType)
        self._id = _cast(None, _id)
        self.MetricName = _cast(None, MetricName)
    def factory(*args_, **kwargs_):
        if MetricType.subclass:
            return MetricType.subclass(*args_, **kwargs_)
        else:
            return MetricType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get__desynched_atts(self): return self._desynched_atts
    def set__desynched_atts(self, _desynched_atts): self._desynched_atts = _desynched_atts
    def get__derived(self): return self._derived
    def set__derived(self, _derived): self._derived = _derived
    def get__real_archetype(self): return self._real_archetype
    def set__real_archetype(self, _real_archetype): self._real_archetype = _real_archetype
    def get__archetype(self): return self._archetype
    def set__archetype(self, _archetype): self._archetype = _archetype
    def get_ComponentInstanceID(self): return self.ComponentInstanceID
    def set_ComponentInstanceID(self, ComponentInstanceID): self.ComponentInstanceID = ComponentInstanceID
    def get_ComponentName(self): return self.ComponentName
    def set_ComponentName(self, ComponentName): self.ComponentName = ComponentName
    def get_ConfigurationID(self): return self.ConfigurationID
    def set_ConfigurationID(self, ConfigurationID): self.ConfigurationID = ConfigurationID
    def get_MetricID(self): return self.MetricID
    def set_MetricID(self, MetricID): self.MetricID = MetricID
    def get_MetricType(self): return self.MetricType
    def set_MetricType(self, MetricType): self.MetricType = MetricType
    def get__subtype(self): return self._subtype
    def set__subtype(self, _subtype): self._subtype = _subtype
    def get_ComponentType(self): return self.ComponentType
    def set_ComponentType(self, ComponentType): self.ComponentType = ComponentType
    def get__instances(self): return self._instances
    def set__instances(self, _instances): self._instances = _instances
    def get_Details(self): return self.Details
    def set_Details(self, Details): self.Details = Details
    def get_TopAssemblyComponentInstanceID(self): return self.TopAssemblyComponentInstanceID
    def set_TopAssemblyComponentInstanceID(self, TopAssemblyComponentInstanceID): self.TopAssemblyComponentInstanceID = TopAssemblyComponentInstanceID
    def get_RequestedValueType(self): return self.RequestedValueType
    def set_RequestedValueType(self, RequestedValueType): self.RequestedValueType = RequestedValueType
    def get__id(self): return self._id
    def set__id(self, _id): self._id = _id
    def get_MetricName(self): return self.MetricName
    def set_MetricName(self, MetricName): self.MetricName = MetricName
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='MetricType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='MetricType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='MetricType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='MetricType'):
        if self._desynched_atts is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            outfile.write(' _desynched_atts=%s' % (self.gds_format_string(quote_attrib(self._desynched_atts).encode(ExternalEncoding), input_name='_desynched_atts'), ))
        if self._derived is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            outfile.write(' _derived=%s' % (self.gds_format_string(quote_attrib(self._derived).encode(ExternalEncoding), input_name='_derived'), ))
        if self._real_archetype is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            outfile.write(' _real_archetype="%s"' % self.gds_format_boolean(self._real_archetype, input_name='_real_archetype'))
        if self._archetype is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            outfile.write(' _archetype=%s' % (self.gds_format_string(quote_attrib(self._archetype).encode(ExternalEncoding), input_name='_archetype'), ))
        if self.ComponentInstanceID is not None and 'ComponentInstanceID' not in already_processed:
            already_processed.add('ComponentInstanceID')
            outfile.write(' ComponentInstanceID=%s' % (self.gds_format_string(quote_attrib(self.ComponentInstanceID).encode(ExternalEncoding), input_name='ComponentInstanceID'), ))
        if self.ComponentName is not None and 'ComponentName' not in already_processed:
            already_processed.add('ComponentName')
            outfile.write(' ComponentName=%s' % (self.gds_format_string(quote_attrib(self.ComponentName).encode(ExternalEncoding), input_name='ComponentName'), ))
        if self.ConfigurationID is not None and 'ConfigurationID' not in already_processed:
            already_processed.add('ConfigurationID')
            outfile.write(' ConfigurationID=%s' % (self.gds_format_string(quote_attrib(self.ConfigurationID).encode(ExternalEncoding), input_name='ConfigurationID'), ))
        if self.MetricID is not None and 'MetricID' not in already_processed:
            already_processed.add('MetricID')
            outfile.write(' MetricID=%s' % (self.gds_format_string(quote_attrib(self.MetricID).encode(ExternalEncoding), input_name='MetricID'), ))
        if self.MetricType is not None and 'MetricType' not in already_processed:
            already_processed.add('MetricType')
            outfile.write(' MetricType=%s' % (self.gds_format_string(quote_attrib(self.MetricType).encode(ExternalEncoding), input_name='MetricType'), ))
        if self._subtype is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            outfile.write(' _subtype="%s"' % self.gds_format_boolean(self._subtype, input_name='_subtype'))
        if self.ComponentType is not None and 'ComponentType' not in already_processed:
            already_processed.add('ComponentType')
            outfile.write(' ComponentType=%s' % (self.gds_format_string(quote_attrib(self.ComponentType).encode(ExternalEncoding), input_name='ComponentType'), ))
        if self._instances is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            outfile.write(' _instances=%s' % (self.gds_format_string(quote_attrib(self._instances).encode(ExternalEncoding), input_name='_instances'), ))
        if self.Details is not None and 'Details' not in already_processed:
            already_processed.add('Details')
            outfile.write(' Details=%s' % (self.gds_format_string(quote_attrib(self.Details).encode(ExternalEncoding), input_name='Details'), ))
        if self.TopAssemblyComponentInstanceID is not None and 'TopAssemblyComponentInstanceID' not in already_processed:
            already_processed.add('TopAssemblyComponentInstanceID')
            outfile.write(' TopAssemblyComponentInstanceID=%s' % (self.gds_format_string(quote_attrib(self.TopAssemblyComponentInstanceID).encode(ExternalEncoding), input_name='TopAssemblyComponentInstanceID'), ))
        if self.RequestedValueType is not None and 'RequestedValueType' not in already_processed:
            already_processed.add('RequestedValueType')
            outfile.write(' RequestedValueType=%s' % (self.gds_format_string(quote_attrib(self.RequestedValueType).encode(ExternalEncoding), input_name='RequestedValueType'), ))
        if self._id is not None and '_id' not in already_processed:
            already_processed.add('_id')
            outfile.write(' _id=%s' % (self.gds_format_string(quote_attrib(self._id).encode(ExternalEncoding), input_name='_id'), ))
        if self.MetricName is not None and 'MetricName' not in already_processed:
            already_processed.add('MetricName')
            outfile.write(' MetricName=%s' % (self.gds_format_string(quote_attrib(self.MetricName).encode(ExternalEncoding), input_name='MetricName'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='MetricType', fromsubclass_=False, pretty_print=True):
        pass
    def exportLiteral(self, outfile, level, name_='MetricType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self._desynched_atts is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            showIndent(outfile, level)
            outfile.write('_desynched_atts="%s",\n' % (self._desynched_atts,))
        if self._derived is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            showIndent(outfile, level)
            outfile.write('_derived="%s",\n' % (self._derived,))
        if self._real_archetype is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            showIndent(outfile, level)
            outfile.write('_real_archetype=%s,\n' % (self._real_archetype,))
        if self._archetype is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            showIndent(outfile, level)
            outfile.write('_archetype="%s",\n' % (self._archetype,))
        if self.ComponentInstanceID is not None and 'ComponentInstanceID' not in already_processed:
            already_processed.add('ComponentInstanceID')
            showIndent(outfile, level)
            outfile.write('ComponentInstanceID="%s",\n' % (self.ComponentInstanceID,))
        if self.ComponentName is not None and 'ComponentName' not in already_processed:
            already_processed.add('ComponentName')
            showIndent(outfile, level)
            outfile.write('ComponentName="%s",\n' % (self.ComponentName,))
        if self.ConfigurationID is not None and 'ConfigurationID' not in already_processed:
            already_processed.add('ConfigurationID')
            showIndent(outfile, level)
            outfile.write('ConfigurationID="%s",\n' % (self.ConfigurationID,))
        if self.MetricID is not None and 'MetricID' not in already_processed:
            already_processed.add('MetricID')
            showIndent(outfile, level)
            outfile.write('MetricID="%s",\n' % (self.MetricID,))
        if self.MetricType is not None and 'MetricType' not in already_processed:
            already_processed.add('MetricType')
            showIndent(outfile, level)
            outfile.write('MetricType="%s",\n' % (self.MetricType,))
        if self._subtype is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            showIndent(outfile, level)
            outfile.write('_subtype=%s,\n' % (self._subtype,))
        if self.ComponentType is not None and 'ComponentType' not in already_processed:
            already_processed.add('ComponentType')
            showIndent(outfile, level)
            outfile.write('ComponentType="%s",\n' % (self.ComponentType,))
        if self._instances is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            showIndent(outfile, level)
            outfile.write('_instances="%s",\n' % (self._instances,))
        if self.Details is not None and 'Details' not in already_processed:
            already_processed.add('Details')
            showIndent(outfile, level)
            outfile.write('Details="%s",\n' % (self.Details,))
        if self.TopAssemblyComponentInstanceID is not None and 'TopAssemblyComponentInstanceID' not in already_processed:
            already_processed.add('TopAssemblyComponentInstanceID')
            showIndent(outfile, level)
            outfile.write('TopAssemblyComponentInstanceID="%s",\n' % (self.TopAssemblyComponentInstanceID,))
        if self.RequestedValueType is not None and 'RequestedValueType' not in already_processed:
            already_processed.add('RequestedValueType')
            showIndent(outfile, level)
            outfile.write('RequestedValueType="%s",\n' % (self.RequestedValueType,))
        if self._id is not None and '_id' not in already_processed:
            already_processed.add('_id')
            showIndent(outfile, level)
            outfile.write('_id="%s",\n' % (self._id,))
        if self.MetricName is not None and 'MetricName' not in already_processed:
            already_processed.add('MetricName')
            showIndent(outfile, level)
            outfile.write('MetricName="%s",\n' % (self.MetricName,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('_desynched_atts', node)
        if value is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            self._desynched_atts = value
        value = find_attr_value_('_derived', node)
        if value is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            self._derived = value
        value = find_attr_value_('_real_archetype', node)
        if value is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            if value in ('true', '1'):
                self._real_archetype = True
            elif value in ('false', '0'):
                self._real_archetype = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('_archetype', node)
        if value is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            self._archetype = value
        value = find_attr_value_('ComponentInstanceID', node)
        if value is not None and 'ComponentInstanceID' not in already_processed:
            already_processed.add('ComponentInstanceID')
            self.ComponentInstanceID = value
        value = find_attr_value_('ComponentName', node)
        if value is not None and 'ComponentName' not in already_processed:
            already_processed.add('ComponentName')
            self.ComponentName = value
        value = find_attr_value_('ConfigurationID', node)
        if value is not None and 'ConfigurationID' not in already_processed:
            already_processed.add('ConfigurationID')
            self.ConfigurationID = value
        value = find_attr_value_('MetricID', node)
        if value is not None and 'MetricID' not in already_processed:
            already_processed.add('MetricID')
            self.MetricID = value
        value = find_attr_value_('MetricType', node)
        if value is not None and 'MetricType' not in already_processed:
            already_processed.add('MetricType')
            self.MetricType = value
        value = find_attr_value_('_subtype', node)
        if value is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            if value in ('true', '1'):
                self._subtype = True
            elif value in ('false', '0'):
                self._subtype = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('ComponentType', node)
        if value is not None and 'ComponentType' not in already_processed:
            already_processed.add('ComponentType')
            self.ComponentType = value
        value = find_attr_value_('_instances', node)
        if value is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            self._instances = value
        value = find_attr_value_('Details', node)
        if value is not None and 'Details' not in already_processed:
            already_processed.add('Details')
            self.Details = value
        value = find_attr_value_('TopAssemblyComponentInstanceID', node)
        if value is not None and 'TopAssemblyComponentInstanceID' not in already_processed:
            already_processed.add('TopAssemblyComponentInstanceID')
            self.TopAssemblyComponentInstanceID = value
        value = find_attr_value_('RequestedValueType', node)
        if value is not None and 'RequestedValueType' not in already_processed:
            already_processed.add('RequestedValueType')
            self.RequestedValueType = value
        value = find_attr_value_('_id', node)
        if value is not None and '_id' not in already_processed:
            already_processed.add('_id')
            self._id = value
        value = find_attr_value_('MetricName', node)
        if value is not None and 'MetricName' not in already_processed:
            already_processed.add('MetricName')
            self.MetricName = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class MetricType


class MetricsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, _derived=None, _real_archetype=None, _archetype=None, _subtype=None, _instances=None, _desynched_atts=None, _id=None, _libname=None, Metric=None, Metrics=None):
        self.original_tagname_ = None
        self._derived = _cast(None, _derived)
        self._real_archetype = _cast(bool, _real_archetype)
        self._archetype = _cast(None, _archetype)
        self._subtype = _cast(bool, _subtype)
        self._instances = _cast(None, _instances)
        self._desynched_atts = _cast(None, _desynched_atts)
        self._id = _cast(None, _id)
        self._libname = _cast(None, _libname)
        if Metric is None:
            self.Metric = []
        else:
            self.Metric = Metric
        if Metrics is None:
            self.Metrics = []
        else:
            self.Metrics = Metrics
    def factory(*args_, **kwargs_):
        if MetricsType.subclass:
            return MetricsType.subclass(*args_, **kwargs_)
        else:
            return MetricsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Metric(self): return self.Metric
    def set_Metric(self, Metric): self.Metric = Metric
    def add_Metric(self, value): self.Metric.append(value)
    def insert_Metric(self, index, value): self.Metric[index] = value
    def get_Metrics(self): return self.Metrics
    def set_Metrics(self, Metrics): self.Metrics = Metrics
    def add_Metrics(self, value): self.Metrics.append(value)
    def insert_Metrics(self, index, value): self.Metrics[index] = value
    def get__derived(self): return self._derived
    def set__derived(self, _derived): self._derived = _derived
    def get__real_archetype(self): return self._real_archetype
    def set__real_archetype(self, _real_archetype): self._real_archetype = _real_archetype
    def get__archetype(self): return self._archetype
    def set__archetype(self, _archetype): self._archetype = _archetype
    def get__subtype(self): return self._subtype
    def set__subtype(self, _subtype): self._subtype = _subtype
    def get__instances(self): return self._instances
    def set__instances(self, _instances): self._instances = _instances
    def get__desynched_atts(self): return self._desynched_atts
    def set__desynched_atts(self, _desynched_atts): self._desynched_atts = _desynched_atts
    def get__id(self): return self._id
    def set__id(self, _id): self._id = _id
    def get__libname(self): return self._libname
    def set__libname(self, _libname): self._libname = _libname
    def hasContent_(self):
        if (
            self.Metric or
            self.Metrics
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='MetricsType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='MetricsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='MetricsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='MetricsType'):
        if self._derived is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            outfile.write(' _derived=%s' % (self.gds_format_string(quote_attrib(self._derived).encode(ExternalEncoding), input_name='_derived'), ))
        if self._real_archetype is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            outfile.write(' _real_archetype="%s"' % self.gds_format_boolean(self._real_archetype, input_name='_real_archetype'))
        if self._archetype is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            outfile.write(' _archetype=%s' % (self.gds_format_string(quote_attrib(self._archetype).encode(ExternalEncoding), input_name='_archetype'), ))
        if self._subtype is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            outfile.write(' _subtype="%s"' % self.gds_format_boolean(self._subtype, input_name='_subtype'))
        if self._instances is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            outfile.write(' _instances=%s' % (self.gds_format_string(quote_attrib(self._instances).encode(ExternalEncoding), input_name='_instances'), ))
        if self._desynched_atts is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            outfile.write(' _desynched_atts=%s' % (self.gds_format_string(quote_attrib(self._desynched_atts).encode(ExternalEncoding), input_name='_desynched_atts'), ))
        if self._id is not None and '_id' not in already_processed:
            already_processed.add('_id')
            outfile.write(' _id=%s' % (self.gds_format_string(quote_attrib(self._id).encode(ExternalEncoding), input_name='_id'), ))
        if self._libname is not None and '_libname' not in already_processed:
            already_processed.add('_libname')
            outfile.write(' _libname=%s' % (self.gds_format_string(quote_attrib(self._libname).encode(ExternalEncoding), input_name='_libname'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='MetricsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Metric_ in self.Metric:
            Metric_.export(outfile, level, namespace_, name_='Metric', pretty_print=pretty_print)
        for Metrics_ in self.Metrics:
            Metrics_.export(outfile, level, namespace_, name_='Metrics', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='MetricsType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self._derived is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            showIndent(outfile, level)
            outfile.write('_derived="%s",\n' % (self._derived,))
        if self._real_archetype is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            showIndent(outfile, level)
            outfile.write('_real_archetype=%s,\n' % (self._real_archetype,))
        if self._archetype is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            showIndent(outfile, level)
            outfile.write('_archetype="%s",\n' % (self._archetype,))
        if self._subtype is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            showIndent(outfile, level)
            outfile.write('_subtype=%s,\n' % (self._subtype,))
        if self._instances is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            showIndent(outfile, level)
            outfile.write('_instances="%s",\n' % (self._instances,))
        if self._desynched_atts is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            showIndent(outfile, level)
            outfile.write('_desynched_atts="%s",\n' % (self._desynched_atts,))
        if self._id is not None and '_id' not in already_processed:
            already_processed.add('_id')
            showIndent(outfile, level)
            outfile.write('_id="%s",\n' % (self._id,))
        if self._libname is not None and '_libname' not in already_processed:
            already_processed.add('_libname')
            showIndent(outfile, level)
            outfile.write('_libname="%s",\n' % (self._libname,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('Metric=[\n')
        level += 1
        for Metric_ in self.Metric:
            showIndent(outfile, level)
            outfile.write('model_.MetricType(\n')
            Metric_.exportLiteral(outfile, level, name_='MetricType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('Metrics=[\n')
        level += 1
        for Metrics_ in self.Metrics:
            showIndent(outfile, level)
            outfile.write('model_.MetricsType(\n')
            Metrics_.exportLiteral(outfile, level, name_='MetricsType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('_derived', node)
        if value is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            self._derived = value
        value = find_attr_value_('_real_archetype', node)
        if value is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            if value in ('true', '1'):
                self._real_archetype = True
            elif value in ('false', '0'):
                self._real_archetype = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('_archetype', node)
        if value is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            self._archetype = value
        value = find_attr_value_('_subtype', node)
        if value is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            if value in ('true', '1'):
                self._subtype = True
            elif value in ('false', '0'):
                self._subtype = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('_instances', node)
        if value is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            self._instances = value
        value = find_attr_value_('_desynched_atts', node)
        if value is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            self._desynched_atts = value
        value = find_attr_value_('_id', node)
        if value is not None and '_id' not in already_processed:
            already_processed.add('_id')
            self._id = value
        value = find_attr_value_('_libname', node)
        if value is not None and '_libname' not in already_processed:
            already_processed.add('_libname')
            self._libname = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Metric':
            obj_ = MetricType.factory()
            obj_.build(child_)
            self.Metric.append(obj_)
            obj_.original_tagname_ = 'Metric'
        elif nodeName_ == 'Metrics':
            obj_ = MetricsType.factory()
            obj_.build(child_)
            self.Metrics.append(obj_)
            obj_.original_tagname_ = 'Metrics'
# end class MetricsType


class AssembliesType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, _derived=None, _real_archetype=None, _archetype=None, _subtype=None, _instances=None, _desynched_atts=None, _id=None, Assembly=None):
        self.original_tagname_ = None
        self._derived = _cast(None, _derived)
        self._real_archetype = _cast(bool, _real_archetype)
        self._archetype = _cast(None, _archetype)
        self._subtype = _cast(bool, _subtype)
        self._instances = _cast(None, _instances)
        self._desynched_atts = _cast(None, _desynched_atts)
        self._id = _cast(None, _id)
        if Assembly is None:
            self.Assembly = []
        else:
            self.Assembly = Assembly
    def factory(*args_, **kwargs_):
        if AssembliesType.subclass:
            return AssembliesType.subclass(*args_, **kwargs_)
        else:
            return AssembliesType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Assembly(self): return self.Assembly
    def set_Assembly(self, Assembly): self.Assembly = Assembly
    def add_Assembly(self, value): self.Assembly.append(value)
    def insert_Assembly(self, index, value): self.Assembly[index] = value
    def get__derived(self): return self._derived
    def set__derived(self, _derived): self._derived = _derived
    def get__real_archetype(self): return self._real_archetype
    def set__real_archetype(self, _real_archetype): self._real_archetype = _real_archetype
    def get__archetype(self): return self._archetype
    def set__archetype(self, _archetype): self._archetype = _archetype
    def get__subtype(self): return self._subtype
    def set__subtype(self, _subtype): self._subtype = _subtype
    def get__instances(self): return self._instances
    def set__instances(self, _instances): self._instances = _instances
    def get__desynched_atts(self): return self._desynched_atts
    def set__desynched_atts(self, _desynched_atts): self._desynched_atts = _desynched_atts
    def get__id(self): return self._id
    def set__id(self, _id): self._id = _id
    def hasContent_(self):
        if (
            self.Assembly
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AssembliesType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AssembliesType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AssembliesType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AssembliesType'):
        if self._derived is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            outfile.write(' _derived=%s' % (self.gds_format_string(quote_attrib(self._derived).encode(ExternalEncoding), input_name='_derived'), ))
        if self._real_archetype is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            outfile.write(' _real_archetype="%s"' % self.gds_format_boolean(self._real_archetype, input_name='_real_archetype'))
        if self._archetype is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            outfile.write(' _archetype=%s' % (self.gds_format_string(quote_attrib(self._archetype).encode(ExternalEncoding), input_name='_archetype'), ))
        if self._subtype is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            outfile.write(' _subtype="%s"' % self.gds_format_boolean(self._subtype, input_name='_subtype'))
        if self._instances is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            outfile.write(' _instances=%s' % (self.gds_format_string(quote_attrib(self._instances).encode(ExternalEncoding), input_name='_instances'), ))
        if self._desynched_atts is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            outfile.write(' _desynched_atts=%s' % (self.gds_format_string(quote_attrib(self._desynched_atts).encode(ExternalEncoding), input_name='_desynched_atts'), ))
        if self._id is not None and '_id' not in already_processed:
            already_processed.add('_id')
            outfile.write(' _id=%s' % (self.gds_format_string(quote_attrib(self._id).encode(ExternalEncoding), input_name='_id'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='AssembliesType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Assembly_ in self.Assembly:
            Assembly_.export(outfile, level, namespace_, name_='Assembly', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='AssembliesType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self._derived is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            showIndent(outfile, level)
            outfile.write('_derived="%s",\n' % (self._derived,))
        if self._real_archetype is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            showIndent(outfile, level)
            outfile.write('_real_archetype=%s,\n' % (self._real_archetype,))
        if self._archetype is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            showIndent(outfile, level)
            outfile.write('_archetype="%s",\n' % (self._archetype,))
        if self._subtype is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            showIndent(outfile, level)
            outfile.write('_subtype=%s,\n' % (self._subtype,))
        if self._instances is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            showIndent(outfile, level)
            outfile.write('_instances="%s",\n' % (self._instances,))
        if self._desynched_atts is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            showIndent(outfile, level)
            outfile.write('_desynched_atts="%s",\n' % (self._desynched_atts,))
        if self._id is not None and '_id' not in already_processed:
            already_processed.add('_id')
            showIndent(outfile, level)
            outfile.write('_id="%s",\n' % (self._id,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('Assembly=[\n')
        level += 1
        for Assembly_ in self.Assembly:
            showIndent(outfile, level)
            outfile.write('model_.AssemblyType(\n')
            Assembly_.exportLiteral(outfile, level, name_='AssemblyType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('_derived', node)
        if value is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            self._derived = value
        value = find_attr_value_('_real_archetype', node)
        if value is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            if value in ('true', '1'):
                self._real_archetype = True
            elif value in ('false', '0'):
                self._real_archetype = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('_archetype', node)
        if value is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            self._archetype = value
        value = find_attr_value_('_subtype', node)
        if value is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            if value in ('true', '1'):
                self._subtype = True
            elif value in ('false', '0'):
                self._subtype = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('_instances', node)
        if value is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            self._instances = value
        value = find_attr_value_('_desynched_atts', node)
        if value is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            self._desynched_atts = value
        value = find_attr_value_('_id', node)
        if value is not None and '_id' not in already_processed:
            already_processed.add('_id')
            self._id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Assembly':
            obj_ = AssemblyType.factory()
            obj_.build(child_)
            self.Assembly.append(obj_)
            obj_.original_tagname_ = 'Assembly'
# end class AssembliesType


class ComponentType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, _desynched_atts=None, _derived=None, _real_archetype=None, Name=None, ComponentInstanceID=None, FEAElementType=None, MaterialID=None, FEAElementID=None, _instances=None, _archetype=None, _subtype=None, _id=None, Type=None, Component=None):
        self.original_tagname_ = None
        self._desynched_atts = _cast(None, _desynched_atts)
        self._derived = _cast(None, _derived)
        self._real_archetype = _cast(bool, _real_archetype)
        self.Name = _cast(None, Name)
        self.ComponentInstanceID = _cast(None, ComponentInstanceID)
        self.FEAElementType = _cast(None, FEAElementType)
        self.MaterialID = _cast(None, MaterialID)
        self.FEAElementID = _cast(None, FEAElementID)
        self._instances = _cast(None, _instances)
        self._archetype = _cast(None, _archetype)
        self._subtype = _cast(bool, _subtype)
        self._id = _cast(None, _id)
        self.Type = _cast(None, Type)
        if Component is None:
            self.Component = []
        else:
            self.Component = Component
    def factory(*args_, **kwargs_):
        if ComponentType.subclass:
            return ComponentType.subclass(*args_, **kwargs_)
        else:
            return ComponentType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Component(self): return self.Component
    def set_Component(self, Component): self.Component = Component
    def add_Component(self, value): self.Component.append(value)
    def insert_Component(self, index, value): self.Component[index] = value
    def get__desynched_atts(self): return self._desynched_atts
    def set__desynched_atts(self, _desynched_atts): self._desynched_atts = _desynched_atts
    def get__derived(self): return self._derived
    def set__derived(self, _derived): self._derived = _derived
    def get__real_archetype(self): return self._real_archetype
    def set__real_archetype(self, _real_archetype): self._real_archetype = _real_archetype
    def get_Name(self): return self.Name
    def set_Name(self, Name): self.Name = Name
    def get_ComponentInstanceID(self): return self.ComponentInstanceID
    def set_ComponentInstanceID(self, ComponentInstanceID): self.ComponentInstanceID = ComponentInstanceID
    def get_FEAElementType(self): return self.FEAElementType
    def set_FEAElementType(self, FEAElementType): self.FEAElementType = FEAElementType
    def get_MaterialID(self): return self.MaterialID
    def set_MaterialID(self, MaterialID): self.MaterialID = MaterialID
    def get_FEAElementID(self): return self.FEAElementID
    def set_FEAElementID(self, FEAElementID): self.FEAElementID = FEAElementID
    def get__instances(self): return self._instances
    def set__instances(self, _instances): self._instances = _instances
    def get__archetype(self): return self._archetype
    def set__archetype(self, _archetype): self._archetype = _archetype
    def get__subtype(self): return self._subtype
    def set__subtype(self, _subtype): self._subtype = _subtype
    def get__id(self): return self._id
    def set__id(self, _id): self._id = _id
    def get_Type(self): return self.Type
    def set_Type(self, Type): self.Type = Type
    def hasContent_(self):
        if (
            self.Component
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ComponentType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ComponentType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ComponentType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ComponentType'):
        if self._desynched_atts is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            outfile.write(' _desynched_atts=%s' % (self.gds_format_string(quote_attrib(self._desynched_atts).encode(ExternalEncoding), input_name='_desynched_atts'), ))
        if self._derived is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            outfile.write(' _derived=%s' % (self.gds_format_string(quote_attrib(self._derived).encode(ExternalEncoding), input_name='_derived'), ))
        if self._real_archetype is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            outfile.write(' _real_archetype="%s"' % self.gds_format_boolean(self._real_archetype, input_name='_real_archetype'))
        if self.Name is not None and 'Name' not in already_processed:
            already_processed.add('Name')
            outfile.write(' Name=%s' % (self.gds_format_string(quote_attrib(self.Name).encode(ExternalEncoding), input_name='Name'), ))
        if self.ComponentInstanceID is not None and 'ComponentInstanceID' not in already_processed:
            already_processed.add('ComponentInstanceID')
            outfile.write(' ComponentInstanceID=%s' % (self.gds_format_string(quote_attrib(self.ComponentInstanceID).encode(ExternalEncoding), input_name='ComponentInstanceID'), ))
        if self.FEAElementType is not None and 'FEAElementType' not in already_processed:
            already_processed.add('FEAElementType')
            outfile.write(' FEAElementType=%s' % (self.gds_format_string(quote_attrib(self.FEAElementType).encode(ExternalEncoding), input_name='FEAElementType'), ))
        if self.MaterialID is not None and 'MaterialID' not in already_processed:
            already_processed.add('MaterialID')
            outfile.write(' MaterialID=%s' % (self.gds_format_string(quote_attrib(self.MaterialID).encode(ExternalEncoding), input_name='MaterialID'), ))
        if self.FEAElementID is not None and 'FEAElementID' not in already_processed:
            already_processed.add('FEAElementID')
            outfile.write(' FEAElementID=%s' % (self.gds_format_string(quote_attrib(self.FEAElementID).encode(ExternalEncoding), input_name='FEAElementID'), ))
        if self._instances is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            outfile.write(' _instances=%s' % (self.gds_format_string(quote_attrib(self._instances).encode(ExternalEncoding), input_name='_instances'), ))
        if self._archetype is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            outfile.write(' _archetype=%s' % (self.gds_format_string(quote_attrib(self._archetype).encode(ExternalEncoding), input_name='_archetype'), ))
        if self._subtype is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            outfile.write(' _subtype="%s"' % self.gds_format_boolean(self._subtype, input_name='_subtype'))
        if self._id is not None and '_id' not in already_processed:
            already_processed.add('_id')
            outfile.write(' _id=%s' % (self.gds_format_string(quote_attrib(self._id).encode(ExternalEncoding), input_name='_id'), ))
        if self.Type is not None and 'Type' not in already_processed:
            already_processed.add('Type')
            outfile.write(' Type=%s' % (self.gds_format_string(quote_attrib(self.Type).encode(ExternalEncoding), input_name='Type'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='ComponentType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Component_ in self.Component:
            Component_.export(outfile, level, namespace_, name_='Component', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='ComponentType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self._desynched_atts is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            showIndent(outfile, level)
            outfile.write('_desynched_atts="%s",\n' % (self._desynched_atts,))
        if self._derived is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            showIndent(outfile, level)
            outfile.write('_derived="%s",\n' % (self._derived,))
        if self._real_archetype is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            showIndent(outfile, level)
            outfile.write('_real_archetype=%s,\n' % (self._real_archetype,))
        if self.Name is not None and 'Name' not in already_processed:
            already_processed.add('Name')
            showIndent(outfile, level)
            outfile.write('Name="%s",\n' % (self.Name,))
        if self.ComponentInstanceID is not None and 'ComponentInstanceID' not in already_processed:
            already_processed.add('ComponentInstanceID')
            showIndent(outfile, level)
            outfile.write('ComponentInstanceID="%s",\n' % (self.ComponentInstanceID,))
        if self.FEAElementType is not None and 'FEAElementType' not in already_processed:
            already_processed.add('FEAElementType')
            showIndent(outfile, level)
            outfile.write('FEAElementType="%s",\n' % (self.FEAElementType,))
        if self.MaterialID is not None and 'MaterialID' not in already_processed:
            already_processed.add('MaterialID')
            showIndent(outfile, level)
            outfile.write('MaterialID="%s",\n' % (self.MaterialID,))
        if self.FEAElementID is not None and 'FEAElementID' not in already_processed:
            already_processed.add('FEAElementID')
            showIndent(outfile, level)
            outfile.write('FEAElementID="%s",\n' % (self.FEAElementID,))
        if self._instances is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            showIndent(outfile, level)
            outfile.write('_instances="%s",\n' % (self._instances,))
        if self._archetype is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            showIndent(outfile, level)
            outfile.write('_archetype="%s",\n' % (self._archetype,))
        if self._subtype is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            showIndent(outfile, level)
            outfile.write('_subtype=%s,\n' % (self._subtype,))
        if self._id is not None and '_id' not in already_processed:
            already_processed.add('_id')
            showIndent(outfile, level)
            outfile.write('_id="%s",\n' % (self._id,))
        if self.Type is not None and 'Type' not in already_processed:
            already_processed.add('Type')
            showIndent(outfile, level)
            outfile.write('Type="%s",\n' % (self.Type,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('Component=[\n')
        level += 1
        for Component_ in self.Component:
            showIndent(outfile, level)
            outfile.write('model_.ComponentType(\n')
            Component_.exportLiteral(outfile, level, name_='ComponentType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('_desynched_atts', node)
        if value is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            self._desynched_atts = value
        value = find_attr_value_('_derived', node)
        if value is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            self._derived = value
        value = find_attr_value_('_real_archetype', node)
        if value is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            if value in ('true', '1'):
                self._real_archetype = True
            elif value in ('false', '0'):
                self._real_archetype = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('Name', node)
        if value is not None and 'Name' not in already_processed:
            already_processed.add('Name')
            self.Name = value
        value = find_attr_value_('ComponentInstanceID', node)
        if value is not None and 'ComponentInstanceID' not in already_processed:
            already_processed.add('ComponentInstanceID')
            self.ComponentInstanceID = value
        value = find_attr_value_('FEAElementType', node)
        if value is not None and 'FEAElementType' not in already_processed:
            already_processed.add('FEAElementType')
            self.FEAElementType = value
        value = find_attr_value_('MaterialID', node)
        if value is not None and 'MaterialID' not in already_processed:
            already_processed.add('MaterialID')
            self.MaterialID = value
        value = find_attr_value_('FEAElementID', node)
        if value is not None and 'FEAElementID' not in already_processed:
            already_processed.add('FEAElementID')
            self.FEAElementID = value
        value = find_attr_value_('_instances', node)
        if value is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            self._instances = value
        value = find_attr_value_('_archetype', node)
        if value is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            self._archetype = value
        value = find_attr_value_('_subtype', node)
        if value is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            if value in ('true', '1'):
                self._subtype = True
            elif value in ('false', '0'):
                self._subtype = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('_id', node)
        if value is not None and '_id' not in already_processed:
            already_processed.add('_id')
            self._id = value
        value = find_attr_value_('Type', node)
        if value is not None and 'Type' not in already_processed:
            already_processed.add('Type')
            self.Type = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Component':
            obj_ = ComponentType.factory()
            obj_.build(child_)
            self.Component.append(obj_)
            obj_.original_tagname_ = 'Component'
# end class ComponentType


class AssemblyType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, _derived=None, _real_archetype=None, _archetype=None, ConfigurationID=None, _subtype=None, _instances=None, _desynched_atts=None, _id=None, Component=None):
        self.original_tagname_ = None
        self._derived = _cast(None, _derived)
        self._real_archetype = _cast(bool, _real_archetype)
        self._archetype = _cast(None, _archetype)
        self.ConfigurationID = _cast(None, ConfigurationID)
        self._subtype = _cast(bool, _subtype)
        self._instances = _cast(None, _instances)
        self._desynched_atts = _cast(None, _desynched_atts)
        self._id = _cast(None, _id)
        if Component is None:
            self.Component = []
        else:
            self.Component = Component
    def factory(*args_, **kwargs_):
        if AssemblyType.subclass:
            return AssemblyType.subclass(*args_, **kwargs_)
        else:
            return AssemblyType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Component(self): return self.Component
    def set_Component(self, Component): self.Component = Component
    def add_Component(self, value): self.Component.append(value)
    def insert_Component(self, index, value): self.Component[index] = value
    def get__derived(self): return self._derived
    def set__derived(self, _derived): self._derived = _derived
    def get__real_archetype(self): return self._real_archetype
    def set__real_archetype(self, _real_archetype): self._real_archetype = _real_archetype
    def get__archetype(self): return self._archetype
    def set__archetype(self, _archetype): self._archetype = _archetype
    def get_ConfigurationID(self): return self.ConfigurationID
    def set_ConfigurationID(self, ConfigurationID): self.ConfigurationID = ConfigurationID
    def get__subtype(self): return self._subtype
    def set__subtype(self, _subtype): self._subtype = _subtype
    def get__instances(self): return self._instances
    def set__instances(self, _instances): self._instances = _instances
    def get__desynched_atts(self): return self._desynched_atts
    def set__desynched_atts(self, _desynched_atts): self._desynched_atts = _desynched_atts
    def get__id(self): return self._id
    def set__id(self, _id): self._id = _id
    def hasContent_(self):
        if (
            self.Component
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AssemblyType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AssemblyType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AssemblyType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AssemblyType'):
        if self._derived is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            outfile.write(' _derived=%s' % (self.gds_format_string(quote_attrib(self._derived).encode(ExternalEncoding), input_name='_derived'), ))
        if self._real_archetype is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            outfile.write(' _real_archetype="%s"' % self.gds_format_boolean(self._real_archetype, input_name='_real_archetype'))
        if self._archetype is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            outfile.write(' _archetype=%s' % (self.gds_format_string(quote_attrib(self._archetype).encode(ExternalEncoding), input_name='_archetype'), ))
        if self.ConfigurationID is not None and 'ConfigurationID' not in already_processed:
            already_processed.add('ConfigurationID')
            outfile.write(' ConfigurationID=%s' % (self.gds_format_string(quote_attrib(self.ConfigurationID).encode(ExternalEncoding), input_name='ConfigurationID'), ))
        if self._subtype is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            outfile.write(' _subtype="%s"' % self.gds_format_boolean(self._subtype, input_name='_subtype'))
        if self._instances is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            outfile.write(' _instances=%s' % (self.gds_format_string(quote_attrib(self._instances).encode(ExternalEncoding), input_name='_instances'), ))
        if self._desynched_atts is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            outfile.write(' _desynched_atts=%s' % (self.gds_format_string(quote_attrib(self._desynched_atts).encode(ExternalEncoding), input_name='_desynched_atts'), ))
        if self._id is not None and '_id' not in already_processed:
            already_processed.add('_id')
            outfile.write(' _id=%s' % (self.gds_format_string(quote_attrib(self._id).encode(ExternalEncoding), input_name='_id'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='AssemblyType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Component_ in self.Component:
            Component_.export(outfile, level, namespace_, name_='Component', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='AssemblyType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self._derived is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            showIndent(outfile, level)
            outfile.write('_derived="%s",\n' % (self._derived,))
        if self._real_archetype is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            showIndent(outfile, level)
            outfile.write('_real_archetype=%s,\n' % (self._real_archetype,))
        if self._archetype is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            showIndent(outfile, level)
            outfile.write('_archetype="%s",\n' % (self._archetype,))
        if self.ConfigurationID is not None and 'ConfigurationID' not in already_processed:
            already_processed.add('ConfigurationID')
            showIndent(outfile, level)
            outfile.write('ConfigurationID="%s",\n' % (self.ConfigurationID,))
        if self._subtype is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            showIndent(outfile, level)
            outfile.write('_subtype=%s,\n' % (self._subtype,))
        if self._instances is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            showIndent(outfile, level)
            outfile.write('_instances="%s",\n' % (self._instances,))
        if self._desynched_atts is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            showIndent(outfile, level)
            outfile.write('_desynched_atts="%s",\n' % (self._desynched_atts,))
        if self._id is not None and '_id' not in already_processed:
            already_processed.add('_id')
            showIndent(outfile, level)
            outfile.write('_id="%s",\n' % (self._id,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('Component=[\n')
        level += 1
        for Component_ in self.Component:
            showIndent(outfile, level)
            outfile.write('model_.ComponentType(\n')
            Component_.exportLiteral(outfile, level, name_='ComponentType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('_derived', node)
        if value is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            self._derived = value
        value = find_attr_value_('_real_archetype', node)
        if value is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            if value in ('true', '1'):
                self._real_archetype = True
            elif value in ('false', '0'):
                self._real_archetype = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('_archetype', node)
        if value is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            self._archetype = value
        value = find_attr_value_('ConfigurationID', node)
        if value is not None and 'ConfigurationID' not in already_processed:
            already_processed.add('ConfigurationID')
            self.ConfigurationID = value
        value = find_attr_value_('_subtype', node)
        if value is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            if value in ('true', '1'):
                self._subtype = True
            elif value in ('false', '0'):
                self._subtype = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('_instances', node)
        if value is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            self._instances = value
        value = find_attr_value_('_desynched_atts', node)
        if value is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            self._desynched_atts = value
        value = find_attr_value_('_id', node)
        if value is not None and '_id' not in already_processed:
            already_processed.add('_id')
            self._id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Component':
            obj_ = ComponentType.factory()
            obj_.build(child_)
            self.Component.append(obj_)
            obj_.original_tagname_ = 'Component'
# end class AssemblyType


class LifeCycleType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, _derived=None, _real_archetype=None, _desynched_atts=None, _subtype=None, _instances=None, _archetype=None, NumberOfCycles=None, Duration=None, _id=None):
        self.original_tagname_ = None
        self._derived = _cast(None, _derived)
        self._real_archetype = _cast(bool, _real_archetype)
        self._desynched_atts = _cast(None, _desynched_atts)
        self._subtype = _cast(bool, _subtype)
        self._instances = _cast(None, _instances)
        self._archetype = _cast(None, _archetype)
        self.NumberOfCycles = _cast(int, NumberOfCycles)
        self.Duration = _cast(None, Duration)
        self._id = _cast(None, _id)
    def factory(*args_, **kwargs_):
        if LifeCycleType.subclass:
            return LifeCycleType.subclass(*args_, **kwargs_)
        else:
            return LifeCycleType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get__derived(self): return self._derived
    def set__derived(self, _derived): self._derived = _derived
    def get__real_archetype(self): return self._real_archetype
    def set__real_archetype(self, _real_archetype): self._real_archetype = _real_archetype
    def get__desynched_atts(self): return self._desynched_atts
    def set__desynched_atts(self, _desynched_atts): self._desynched_atts = _desynched_atts
    def get__subtype(self): return self._subtype
    def set__subtype(self, _subtype): self._subtype = _subtype
    def get__instances(self): return self._instances
    def set__instances(self, _instances): self._instances = _instances
    def get__archetype(self): return self._archetype
    def set__archetype(self, _archetype): self._archetype = _archetype
    def get_NumberOfCycles(self): return self.NumberOfCycles
    def set_NumberOfCycles(self, NumberOfCycles): self.NumberOfCycles = NumberOfCycles
    def get_Duration(self): return self.Duration
    def set_Duration(self, Duration): self.Duration = Duration
    def get__id(self): return self._id
    def set__id(self, _id): self._id = _id
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='LifeCycleType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='LifeCycleType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='LifeCycleType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='LifeCycleType'):
        if self._derived is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            outfile.write(' _derived=%s' % (self.gds_format_string(quote_attrib(self._derived).encode(ExternalEncoding), input_name='_derived'), ))
        if self._real_archetype is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            outfile.write(' _real_archetype="%s"' % self.gds_format_boolean(self._real_archetype, input_name='_real_archetype'))
        if self._desynched_atts is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            outfile.write(' _desynched_atts=%s' % (self.gds_format_string(quote_attrib(self._desynched_atts).encode(ExternalEncoding), input_name='_desynched_atts'), ))
        if self._subtype is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            outfile.write(' _subtype="%s"' % self.gds_format_boolean(self._subtype, input_name='_subtype'))
        if self._instances is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            outfile.write(' _instances=%s' % (self.gds_format_string(quote_attrib(self._instances).encode(ExternalEncoding), input_name='_instances'), ))
        if self._archetype is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            outfile.write(' _archetype=%s' % (self.gds_format_string(quote_attrib(self._archetype).encode(ExternalEncoding), input_name='_archetype'), ))
        if self.NumberOfCycles is not None and 'NumberOfCycles' not in already_processed:
            already_processed.add('NumberOfCycles')
            outfile.write(' NumberOfCycles="%s"' % self.gds_format_integer(self.NumberOfCycles, input_name='NumberOfCycles'))
        if self.Duration is not None and 'Duration' not in already_processed:
            already_processed.add('Duration')
            outfile.write(' Duration=%s' % (self.gds_format_string(quote_attrib(self.Duration).encode(ExternalEncoding), input_name='Duration'), ))
        if self._id is not None and '_id' not in already_processed:
            already_processed.add('_id')
            outfile.write(' _id=%s' % (self.gds_format_string(quote_attrib(self._id).encode(ExternalEncoding), input_name='_id'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='LifeCycleType', fromsubclass_=False, pretty_print=True):
        pass
    def exportLiteral(self, outfile, level, name_='LifeCycleType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self._derived is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            showIndent(outfile, level)
            outfile.write('_derived="%s",\n' % (self._derived,))
        if self._real_archetype is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            showIndent(outfile, level)
            outfile.write('_real_archetype=%s,\n' % (self._real_archetype,))
        if self._desynched_atts is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            showIndent(outfile, level)
            outfile.write('_desynched_atts="%s",\n' % (self._desynched_atts,))
        if self._subtype is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            showIndent(outfile, level)
            outfile.write('_subtype=%s,\n' % (self._subtype,))
        if self._instances is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            showIndent(outfile, level)
            outfile.write('_instances="%s",\n' % (self._instances,))
        if self._archetype is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            showIndent(outfile, level)
            outfile.write('_archetype="%s",\n' % (self._archetype,))
        if self.NumberOfCycles is not None and 'NumberOfCycles' not in already_processed:
            already_processed.add('NumberOfCycles')
            showIndent(outfile, level)
            outfile.write('NumberOfCycles=%d,\n' % (self.NumberOfCycles,))
        if self.Duration is not None and 'Duration' not in already_processed:
            already_processed.add('Duration')
            showIndent(outfile, level)
            outfile.write('Duration="%s",\n' % (self.Duration,))
        if self._id is not None and '_id' not in already_processed:
            already_processed.add('_id')
            showIndent(outfile, level)
            outfile.write('_id="%s",\n' % (self._id,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('_derived', node)
        if value is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            self._derived = value
        value = find_attr_value_('_real_archetype', node)
        if value is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            if value in ('true', '1'):
                self._real_archetype = True
            elif value in ('false', '0'):
                self._real_archetype = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('_desynched_atts', node)
        if value is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            self._desynched_atts = value
        value = find_attr_value_('_subtype', node)
        if value is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            if value in ('true', '1'):
                self._subtype = True
            elif value in ('false', '0'):
                self._subtype = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('_instances', node)
        if value is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            self._instances = value
        value = find_attr_value_('_archetype', node)
        if value is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            self._archetype = value
        value = find_attr_value_('NumberOfCycles', node)
        if value is not None and 'NumberOfCycles' not in already_processed:
            already_processed.add('NumberOfCycles')
            try:
                self.NumberOfCycles = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('Duration', node)
        if value is not None and 'Duration' not in already_processed:
            already_processed.add('Duration')
            self.Duration = value
        value = find_attr_value_('_id', node)
        if value is not None and '_id' not in already_processed:
            already_processed.add('_id')
            self._id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class LifeCycleType


class AnalysisSupportingDataType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, _derived=None, _real_archetype=None, _archetype=None, _subtype=None, _instances=None, _desynched_atts=None, AnalysisType=None, _id=None, LifeCycle=None):
        self.original_tagname_ = None
        self._derived = _cast(None, _derived)
        self._real_archetype = _cast(bool, _real_archetype)
        self._archetype = _cast(None, _archetype)
        self._subtype = _cast(bool, _subtype)
        self._instances = _cast(None, _instances)
        self._desynched_atts = _cast(None, _desynched_atts)
        self.AnalysisType = _cast(None, AnalysisType)
        self._id = _cast(None, _id)
        self.LifeCycle = LifeCycle
    def factory(*args_, **kwargs_):
        if AnalysisSupportingDataType.subclass:
            return AnalysisSupportingDataType.subclass(*args_, **kwargs_)
        else:
            return AnalysisSupportingDataType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_LifeCycle(self): return self.LifeCycle
    def set_LifeCycle(self, LifeCycle): self.LifeCycle = LifeCycle
    def get__derived(self): return self._derived
    def set__derived(self, _derived): self._derived = _derived
    def get__real_archetype(self): return self._real_archetype
    def set__real_archetype(self, _real_archetype): self._real_archetype = _real_archetype
    def get__archetype(self): return self._archetype
    def set__archetype(self, _archetype): self._archetype = _archetype
    def get__subtype(self): return self._subtype
    def set__subtype(self, _subtype): self._subtype = _subtype
    def get__instances(self): return self._instances
    def set__instances(self, _instances): self._instances = _instances
    def get__desynched_atts(self): return self._desynched_atts
    def set__desynched_atts(self, _desynched_atts): self._desynched_atts = _desynched_atts
    def get_AnalysisType(self): return self.AnalysisType
    def set_AnalysisType(self, AnalysisType): self.AnalysisType = AnalysisType
    def get__id(self): return self._id
    def set__id(self, _id): self._id = _id
    def hasContent_(self):
        if (
            self.LifeCycle is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AnalysisSupportingDataType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AnalysisSupportingDataType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AnalysisSupportingDataType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AnalysisSupportingDataType'):
        if self._derived is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            outfile.write(' _derived=%s' % (self.gds_format_string(quote_attrib(self._derived).encode(ExternalEncoding), input_name='_derived'), ))
        if self._real_archetype is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            outfile.write(' _real_archetype="%s"' % self.gds_format_boolean(self._real_archetype, input_name='_real_archetype'))
        if self._archetype is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            outfile.write(' _archetype=%s' % (self.gds_format_string(quote_attrib(self._archetype).encode(ExternalEncoding), input_name='_archetype'), ))
        if self._subtype is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            outfile.write(' _subtype="%s"' % self.gds_format_boolean(self._subtype, input_name='_subtype'))
        if self._instances is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            outfile.write(' _instances=%s' % (self.gds_format_string(quote_attrib(self._instances).encode(ExternalEncoding), input_name='_instances'), ))
        if self._desynched_atts is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            outfile.write(' _desynched_atts=%s' % (self.gds_format_string(quote_attrib(self._desynched_atts).encode(ExternalEncoding), input_name='_desynched_atts'), ))
        if self.AnalysisType is not None and 'AnalysisType' not in already_processed:
            already_processed.add('AnalysisType')
            outfile.write(' AnalysisType=%s' % (self.gds_format_string(quote_attrib(self.AnalysisType).encode(ExternalEncoding), input_name='AnalysisType'), ))
        if self._id is not None and '_id' not in already_processed:
            already_processed.add('_id')
            outfile.write(' _id=%s' % (self.gds_format_string(quote_attrib(self._id).encode(ExternalEncoding), input_name='_id'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='AnalysisSupportingDataType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.LifeCycle is not None:
            self.LifeCycle.export(outfile, level, namespace_, name_='LifeCycle', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='AnalysisSupportingDataType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self._derived is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            showIndent(outfile, level)
            outfile.write('_derived="%s",\n' % (self._derived,))
        if self._real_archetype is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            showIndent(outfile, level)
            outfile.write('_real_archetype=%s,\n' % (self._real_archetype,))
        if self._archetype is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            showIndent(outfile, level)
            outfile.write('_archetype="%s",\n' % (self._archetype,))
        if self._subtype is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            showIndent(outfile, level)
            outfile.write('_subtype=%s,\n' % (self._subtype,))
        if self._instances is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            showIndent(outfile, level)
            outfile.write('_instances="%s",\n' % (self._instances,))
        if self._desynched_atts is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            showIndent(outfile, level)
            outfile.write('_desynched_atts="%s",\n' % (self._desynched_atts,))
        if self.AnalysisType is not None and 'AnalysisType' not in already_processed:
            already_processed.add('AnalysisType')
            showIndent(outfile, level)
            outfile.write('AnalysisType="%s",\n' % (self.AnalysisType,))
        if self._id is not None and '_id' not in already_processed:
            already_processed.add('_id')
            showIndent(outfile, level)
            outfile.write('_id="%s",\n' % (self._id,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.LifeCycle is not None:
            showIndent(outfile, level)
            outfile.write('LifeCycle=model_.LifeCycleType(\n')
            self.LifeCycle.exportLiteral(outfile, level, name_='LifeCycle')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('_derived', node)
        if value is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            self._derived = value
        value = find_attr_value_('_real_archetype', node)
        if value is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            if value in ('true', '1'):
                self._real_archetype = True
            elif value in ('false', '0'):
                self._real_archetype = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('_archetype', node)
        if value is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            self._archetype = value
        value = find_attr_value_('_subtype', node)
        if value is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            if value in ('true', '1'):
                self._subtype = True
            elif value in ('false', '0'):
                self._subtype = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('_instances', node)
        if value is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            self._instances = value
        value = find_attr_value_('_desynched_atts', node)
        if value is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            self._desynched_atts = value
        value = find_attr_value_('AnalysisType', node)
        if value is not None and 'AnalysisType' not in already_processed:
            already_processed.add('AnalysisType')
            self.AnalysisType = value
        value = find_attr_value_('_id', node)
        if value is not None and '_id' not in already_processed:
            already_processed.add('_id')
            self._id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'LifeCycle':
            obj_ = LifeCycleType.factory()
            obj_.build(child_)
            self.LifeCycle = obj_
            obj_.original_tagname_ = 'LifeCycle'
# end class AnalysisSupportingDataType


class AllowableBearingStressType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, _derived=None, _real_archetype=None, _desynched_atts=None, Value=None, _subtype=None, Source=None, _instances=None, _archetype=None, Units=None, _id=None):
        self.original_tagname_ = None
        self._derived = _cast(None, _derived)
        self._real_archetype = _cast(bool, _real_archetype)
        self._desynched_atts = _cast(None, _desynched_atts)
        self.Value = _cast(float, Value)
        self._subtype = _cast(bool, _subtype)
        self.Source = _cast(None, Source)
        self._instances = _cast(None, _instances)
        self._archetype = _cast(None, _archetype)
        self.Units = _cast(None, Units)
        self._id = _cast(None, _id)
    def factory(*args_, **kwargs_):
        if AllowableBearingStressType.subclass:
            return AllowableBearingStressType.subclass(*args_, **kwargs_)
        else:
            return AllowableBearingStressType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get__derived(self): return self._derived
    def set__derived(self, _derived): self._derived = _derived
    def get__real_archetype(self): return self._real_archetype
    def set__real_archetype(self, _real_archetype): self._real_archetype = _real_archetype
    def get__desynched_atts(self): return self._desynched_atts
    def set__desynched_atts(self, _desynched_atts): self._desynched_atts = _desynched_atts
    def get_Value(self): return self.Value
    def set_Value(self, Value): self.Value = Value
    def get__subtype(self): return self._subtype
    def set__subtype(self, _subtype): self._subtype = _subtype
    def get_Source(self): return self.Source
    def set_Source(self, Source): self.Source = Source
    def get__instances(self): return self._instances
    def set__instances(self, _instances): self._instances = _instances
    def get__archetype(self): return self._archetype
    def set__archetype(self, _archetype): self._archetype = _archetype
    def get_Units(self): return self.Units
    def set_Units(self, Units): self.Units = Units
    def get__id(self): return self._id
    def set__id(self, _id): self._id = _id
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AllowableBearingStressType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AllowableBearingStressType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AllowableBearingStressType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AllowableBearingStressType'):
        if self._derived is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            outfile.write(' _derived=%s' % (self.gds_format_string(quote_attrib(self._derived).encode(ExternalEncoding), input_name='_derived'), ))
        if self._real_archetype is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            outfile.write(' _real_archetype="%s"' % self.gds_format_boolean(self._real_archetype, input_name='_real_archetype'))
        if self._desynched_atts is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            outfile.write(' _desynched_atts=%s' % (self.gds_format_string(quote_attrib(self._desynched_atts).encode(ExternalEncoding), input_name='_desynched_atts'), ))
        if self.Value is not None and 'Value' not in already_processed:
            already_processed.add('Value')
            outfile.write(' Value="%s"' % self.gds_format_double(self.Value, input_name='Value'))
        if self._subtype is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            outfile.write(' _subtype="%s"' % self.gds_format_boolean(self._subtype, input_name='_subtype'))
        if self.Source is not None and 'Source' not in already_processed:
            already_processed.add('Source')
            outfile.write(' Source=%s' % (self.gds_format_string(quote_attrib(self.Source).encode(ExternalEncoding), input_name='Source'), ))
        if self._instances is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            outfile.write(' _instances=%s' % (self.gds_format_string(quote_attrib(self._instances).encode(ExternalEncoding), input_name='_instances'), ))
        if self._archetype is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            outfile.write(' _archetype=%s' % (self.gds_format_string(quote_attrib(self._archetype).encode(ExternalEncoding), input_name='_archetype'), ))
        if self.Units is not None and 'Units' not in already_processed:
            already_processed.add('Units')
            outfile.write(' Units=%s' % (self.gds_format_string(quote_attrib(self.Units).encode(ExternalEncoding), input_name='Units'), ))
        if self._id is not None and '_id' not in already_processed:
            already_processed.add('_id')
            outfile.write(' _id=%s' % (self.gds_format_string(quote_attrib(self._id).encode(ExternalEncoding), input_name='_id'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='AllowableBearingStressType', fromsubclass_=False, pretty_print=True):
        pass
    def exportLiteral(self, outfile, level, name_='AllowableBearingStressType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self._derived is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            showIndent(outfile, level)
            outfile.write('_derived="%s",\n' % (self._derived,))
        if self._real_archetype is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            showIndent(outfile, level)
            outfile.write('_real_archetype=%s,\n' % (self._real_archetype,))
        if self._desynched_atts is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            showIndent(outfile, level)
            outfile.write('_desynched_atts="%s",\n' % (self._desynched_atts,))
        if self.Value is not None and 'Value' not in already_processed:
            already_processed.add('Value')
            showIndent(outfile, level)
            outfile.write('Value=%e,\n' % (self.Value,))
        if self._subtype is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            showIndent(outfile, level)
            outfile.write('_subtype=%s,\n' % (self._subtype,))
        if self.Source is not None and 'Source' not in already_processed:
            already_processed.add('Source')
            showIndent(outfile, level)
            outfile.write('Source="%s",\n' % (self.Source,))
        if self._instances is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            showIndent(outfile, level)
            outfile.write('_instances="%s",\n' % (self._instances,))
        if self._archetype is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            showIndent(outfile, level)
            outfile.write('_archetype="%s",\n' % (self._archetype,))
        if self.Units is not None and 'Units' not in already_processed:
            already_processed.add('Units')
            showIndent(outfile, level)
            outfile.write('Units="%s",\n' % (self.Units,))
        if self._id is not None and '_id' not in already_processed:
            already_processed.add('_id')
            showIndent(outfile, level)
            outfile.write('_id="%s",\n' % (self._id,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('_derived', node)
        if value is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            self._derived = value
        value = find_attr_value_('_real_archetype', node)
        if value is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            if value in ('true', '1'):
                self._real_archetype = True
            elif value in ('false', '0'):
                self._real_archetype = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('_desynched_atts', node)
        if value is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            self._desynched_atts = value
        value = find_attr_value_('Value', node)
        if value is not None and 'Value' not in already_processed:
            already_processed.add('Value')
            try:
                self.Value = float(value)
            except ValueError as exp:
                raise ValueError('Bad float/double attribute (Value): %s' % exp)
        value = find_attr_value_('_subtype', node)
        if value is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            if value in ('true', '1'):
                self._subtype = True
            elif value in ('false', '0'):
                self._subtype = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('Source', node)
        if value is not None and 'Source' not in already_processed:
            already_processed.add('Source')
            self.Source = value
        value = find_attr_value_('_instances', node)
        if value is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            self._instances = value
        value = find_attr_value_('_archetype', node)
        if value is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            self._archetype = value
        value = find_attr_value_('Units', node)
        if value is not None and 'Units' not in already_processed:
            already_processed.add('Units')
            self.Units = value
        value = find_attr_value_('_id', node)
        if value is not None and '_id' not in already_processed:
            already_processed.add('_id')
            self._id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class AllowableBearingStressType


class AllowableShearStressType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, _derived=None, _real_archetype=None, _desynched_atts=None, Value=None, _subtype=None, Source=None, _instances=None, _archetype=None, Units=None, _id=None):
        self.original_tagname_ = None
        self._derived = _cast(None, _derived)
        self._real_archetype = _cast(bool, _real_archetype)
        self._desynched_atts = _cast(None, _desynched_atts)
        self.Value = _cast(float, Value)
        self._subtype = _cast(bool, _subtype)
        self.Source = _cast(None, Source)
        self._instances = _cast(None, _instances)
        self._archetype = _cast(None, _archetype)
        self.Units = _cast(None, Units)
        self._id = _cast(None, _id)
    def factory(*args_, **kwargs_):
        if AllowableShearStressType.subclass:
            return AllowableShearStressType.subclass(*args_, **kwargs_)
        else:
            return AllowableShearStressType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get__derived(self): return self._derived
    def set__derived(self, _derived): self._derived = _derived
    def get__real_archetype(self): return self._real_archetype
    def set__real_archetype(self, _real_archetype): self._real_archetype = _real_archetype
    def get__desynched_atts(self): return self._desynched_atts
    def set__desynched_atts(self, _desynched_atts): self._desynched_atts = _desynched_atts
    def get_Value(self): return self.Value
    def set_Value(self, Value): self.Value = Value
    def get__subtype(self): return self._subtype
    def set__subtype(self, _subtype): self._subtype = _subtype
    def get_Source(self): return self.Source
    def set_Source(self, Source): self.Source = Source
    def get__instances(self): return self._instances
    def set__instances(self, _instances): self._instances = _instances
    def get__archetype(self): return self._archetype
    def set__archetype(self, _archetype): self._archetype = _archetype
    def get_Units(self): return self.Units
    def set_Units(self, Units): self.Units = Units
    def get__id(self): return self._id
    def set__id(self, _id): self._id = _id
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AllowableShearStressType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AllowableShearStressType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AllowableShearStressType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AllowableShearStressType'):
        if self._derived is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            outfile.write(' _derived=%s' % (self.gds_format_string(quote_attrib(self._derived).encode(ExternalEncoding), input_name='_derived'), ))
        if self._real_archetype is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            outfile.write(' _real_archetype="%s"' % self.gds_format_boolean(self._real_archetype, input_name='_real_archetype'))
        if self._desynched_atts is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            outfile.write(' _desynched_atts=%s' % (self.gds_format_string(quote_attrib(self._desynched_atts).encode(ExternalEncoding), input_name='_desynched_atts'), ))
        if self.Value is not None and 'Value' not in already_processed:
            already_processed.add('Value')
            outfile.write(' Value="%s"' % self.gds_format_double(self.Value, input_name='Value'))
        if self._subtype is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            outfile.write(' _subtype="%s"' % self.gds_format_boolean(self._subtype, input_name='_subtype'))
        if self.Source is not None and 'Source' not in already_processed:
            already_processed.add('Source')
            outfile.write(' Source=%s' % (self.gds_format_string(quote_attrib(self.Source).encode(ExternalEncoding), input_name='Source'), ))
        if self._instances is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            outfile.write(' _instances=%s' % (self.gds_format_string(quote_attrib(self._instances).encode(ExternalEncoding), input_name='_instances'), ))
        if self._archetype is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            outfile.write(' _archetype=%s' % (self.gds_format_string(quote_attrib(self._archetype).encode(ExternalEncoding), input_name='_archetype'), ))
        if self.Units is not None and 'Units' not in already_processed:
            already_processed.add('Units')
            outfile.write(' Units=%s' % (self.gds_format_string(quote_attrib(self.Units).encode(ExternalEncoding), input_name='Units'), ))
        if self._id is not None and '_id' not in already_processed:
            already_processed.add('_id')
            outfile.write(' _id=%s' % (self.gds_format_string(quote_attrib(self._id).encode(ExternalEncoding), input_name='_id'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='AllowableShearStressType', fromsubclass_=False, pretty_print=True):
        pass
    def exportLiteral(self, outfile, level, name_='AllowableShearStressType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self._derived is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            showIndent(outfile, level)
            outfile.write('_derived="%s",\n' % (self._derived,))
        if self._real_archetype is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            showIndent(outfile, level)
            outfile.write('_real_archetype=%s,\n' % (self._real_archetype,))
        if self._desynched_atts is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            showIndent(outfile, level)
            outfile.write('_desynched_atts="%s",\n' % (self._desynched_atts,))
        if self.Value is not None and 'Value' not in already_processed:
            already_processed.add('Value')
            showIndent(outfile, level)
            outfile.write('Value=%e,\n' % (self.Value,))
        if self._subtype is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            showIndent(outfile, level)
            outfile.write('_subtype=%s,\n' % (self._subtype,))
        if self.Source is not None and 'Source' not in already_processed:
            already_processed.add('Source')
            showIndent(outfile, level)
            outfile.write('Source="%s",\n' % (self.Source,))
        if self._instances is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            showIndent(outfile, level)
            outfile.write('_instances="%s",\n' % (self._instances,))
        if self._archetype is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            showIndent(outfile, level)
            outfile.write('_archetype="%s",\n' % (self._archetype,))
        if self.Units is not None and 'Units' not in already_processed:
            already_processed.add('Units')
            showIndent(outfile, level)
            outfile.write('Units="%s",\n' % (self.Units,))
        if self._id is not None and '_id' not in already_processed:
            already_processed.add('_id')
            showIndent(outfile, level)
            outfile.write('_id="%s",\n' % (self._id,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('_derived', node)
        if value is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            self._derived = value
        value = find_attr_value_('_real_archetype', node)
        if value is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            if value in ('true', '1'):
                self._real_archetype = True
            elif value in ('false', '0'):
                self._real_archetype = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('_desynched_atts', node)
        if value is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            self._desynched_atts = value
        value = find_attr_value_('Value', node)
        if value is not None and 'Value' not in already_processed:
            already_processed.add('Value')
            try:
                self.Value = float(value)
            except ValueError as exp:
                raise ValueError('Bad float/double attribute (Value): %s' % exp)
        value = find_attr_value_('_subtype', node)
        if value is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            if value in ('true', '1'):
                self._subtype = True
            elif value in ('false', '0'):
                self._subtype = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('Source', node)
        if value is not None and 'Source' not in already_processed:
            already_processed.add('Source')
            self.Source = value
        value = find_attr_value_('_instances', node)
        if value is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            self._instances = value
        value = find_attr_value_('_archetype', node)
        if value is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            self._archetype = value
        value = find_attr_value_('Units', node)
        if value is not None and 'Units' not in already_processed:
            already_processed.add('Units')
            self.Units = value
        value = find_attr_value_('_id', node)
        if value is not None and '_id' not in already_processed:
            already_processed.add('_id')
            self._id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class AllowableShearStressType


class AllowableTensileStressType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, _derived=None, _real_archetype=None, _desynched_atts=None, Value=None, _subtype=None, Source=None, _instances=None, _archetype=None, Units=None, _id=None):
        self.original_tagname_ = None
        self._derived = _cast(None, _derived)
        self._real_archetype = _cast(bool, _real_archetype)
        self._desynched_atts = _cast(None, _desynched_atts)
        self.Value = _cast(float, Value)
        self._subtype = _cast(bool, _subtype)
        self.Source = _cast(None, Source)
        self._instances = _cast(None, _instances)
        self._archetype = _cast(None, _archetype)
        self.Units = _cast(None, Units)
        self._id = _cast(None, _id)
    def factory(*args_, **kwargs_):
        if AllowableTensileStressType.subclass:
            return AllowableTensileStressType.subclass(*args_, **kwargs_)
        else:
            return AllowableTensileStressType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get__derived(self): return self._derived
    def set__derived(self, _derived): self._derived = _derived
    def get__real_archetype(self): return self._real_archetype
    def set__real_archetype(self, _real_archetype): self._real_archetype = _real_archetype
    def get__desynched_atts(self): return self._desynched_atts
    def set__desynched_atts(self, _desynched_atts): self._desynched_atts = _desynched_atts
    def get_Value(self): return self.Value
    def set_Value(self, Value): self.Value = Value
    def get__subtype(self): return self._subtype
    def set__subtype(self, _subtype): self._subtype = _subtype
    def get_Source(self): return self.Source
    def set_Source(self, Source): self.Source = Source
    def get__instances(self): return self._instances
    def set__instances(self, _instances): self._instances = _instances
    def get__archetype(self): return self._archetype
    def set__archetype(self, _archetype): self._archetype = _archetype
    def get_Units(self): return self.Units
    def set_Units(self, Units): self.Units = Units
    def get__id(self): return self._id
    def set__id(self, _id): self._id = _id
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AllowableTensileStressType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AllowableTensileStressType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AllowableTensileStressType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AllowableTensileStressType'):
        if self._derived is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            outfile.write(' _derived=%s' % (self.gds_format_string(quote_attrib(self._derived).encode(ExternalEncoding), input_name='_derived'), ))
        if self._real_archetype is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            outfile.write(' _real_archetype="%s"' % self.gds_format_boolean(self._real_archetype, input_name='_real_archetype'))
        if self._desynched_atts is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            outfile.write(' _desynched_atts=%s' % (self.gds_format_string(quote_attrib(self._desynched_atts).encode(ExternalEncoding), input_name='_desynched_atts'), ))
        if self.Value is not None and 'Value' not in already_processed:
            already_processed.add('Value')
            outfile.write(' Value="%s"' % self.gds_format_double(self.Value, input_name='Value'))
        if self._subtype is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            outfile.write(' _subtype="%s"' % self.gds_format_boolean(self._subtype, input_name='_subtype'))
        if self.Source is not None and 'Source' not in already_processed:
            already_processed.add('Source')
            outfile.write(' Source=%s' % (self.gds_format_string(quote_attrib(self.Source).encode(ExternalEncoding), input_name='Source'), ))
        if self._instances is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            outfile.write(' _instances=%s' % (self.gds_format_string(quote_attrib(self._instances).encode(ExternalEncoding), input_name='_instances'), ))
        if self._archetype is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            outfile.write(' _archetype=%s' % (self.gds_format_string(quote_attrib(self._archetype).encode(ExternalEncoding), input_name='_archetype'), ))
        if self.Units is not None and 'Units' not in already_processed:
            already_processed.add('Units')
            outfile.write(' Units=%s' % (self.gds_format_string(quote_attrib(self.Units).encode(ExternalEncoding), input_name='Units'), ))
        if self._id is not None and '_id' not in already_processed:
            already_processed.add('_id')
            outfile.write(' _id=%s' % (self.gds_format_string(quote_attrib(self._id).encode(ExternalEncoding), input_name='_id'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='AllowableTensileStressType', fromsubclass_=False, pretty_print=True):
        pass
    def exportLiteral(self, outfile, level, name_='AllowableTensileStressType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self._derived is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            showIndent(outfile, level)
            outfile.write('_derived="%s",\n' % (self._derived,))
        if self._real_archetype is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            showIndent(outfile, level)
            outfile.write('_real_archetype=%s,\n' % (self._real_archetype,))
        if self._desynched_atts is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            showIndent(outfile, level)
            outfile.write('_desynched_atts="%s",\n' % (self._desynched_atts,))
        if self.Value is not None and 'Value' not in already_processed:
            already_processed.add('Value')
            showIndent(outfile, level)
            outfile.write('Value=%e,\n' % (self.Value,))
        if self._subtype is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            showIndent(outfile, level)
            outfile.write('_subtype=%s,\n' % (self._subtype,))
        if self.Source is not None and 'Source' not in already_processed:
            already_processed.add('Source')
            showIndent(outfile, level)
            outfile.write('Source="%s",\n' % (self.Source,))
        if self._instances is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            showIndent(outfile, level)
            outfile.write('_instances="%s",\n' % (self._instances,))
        if self._archetype is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            showIndent(outfile, level)
            outfile.write('_archetype="%s",\n' % (self._archetype,))
        if self.Units is not None and 'Units' not in already_processed:
            already_processed.add('Units')
            showIndent(outfile, level)
            outfile.write('Units="%s",\n' % (self.Units,))
        if self._id is not None and '_id' not in already_processed:
            already_processed.add('_id')
            showIndent(outfile, level)
            outfile.write('_id="%s",\n' % (self._id,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('_derived', node)
        if value is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            self._derived = value
        value = find_attr_value_('_real_archetype', node)
        if value is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            if value in ('true', '1'):
                self._real_archetype = True
            elif value in ('false', '0'):
                self._real_archetype = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('_desynched_atts', node)
        if value is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            self._desynched_atts = value
        value = find_attr_value_('Value', node)
        if value is not None and 'Value' not in already_processed:
            already_processed.add('Value')
            try:
                self.Value = float(value)
            except ValueError as exp:
                raise ValueError('Bad float/double attribute (Value): %s' % exp)
        value = find_attr_value_('_subtype', node)
        if value is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            if value in ('true', '1'):
                self._subtype = True
            elif value in ('false', '0'):
                self._subtype = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('Source', node)
        if value is not None and 'Source' not in already_processed:
            already_processed.add('Source')
            self.Source = value
        value = find_attr_value_('_instances', node)
        if value is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            self._instances = value
        value = find_attr_value_('_archetype', node)
        if value is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            self._archetype = value
        value = find_attr_value_('Units', node)
        if value is not None and 'Units' not in already_processed:
            already_processed.add('Units')
            self.Units = value
        value = find_attr_value_('_id', node)
        if value is not None and '_id' not in already_processed:
            already_processed.add('_id')
            self._id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class AllowableTensileStressType


class CADAnalysisMetaDataType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, _derived=None, _real_archetype=None, _archetype=None, _subtype=None, _instances=None, _desynched_atts=None, _id=None, _libname=None, AnalysisSupportingData=None, Assemblies=None, Materials=None, CADAnalysisMetaData=None):
        self.original_tagname_ = None
        self._derived = _cast(None, _derived)
        self._real_archetype = _cast(bool, _real_archetype)
        self._archetype = _cast(None, _archetype)
        self._subtype = _cast(bool, _subtype)
        self._instances = _cast(None, _instances)
        self._desynched_atts = _cast(None, _desynched_atts)
        self._id = _cast(None, _id)
        self._libname = _cast(None, _libname)
        self.AnalysisSupportingData = AnalysisSupportingData
        self.Assemblies = Assemblies
        self.Materials = Materials
        if CADAnalysisMetaData is None:
            self.CADAnalysisMetaData = []
        else:
            self.CADAnalysisMetaData = CADAnalysisMetaData
    def factory(*args_, **kwargs_):
        if CADAnalysisMetaDataType.subclass:
            return CADAnalysisMetaDataType.subclass(*args_, **kwargs_)
        else:
            return CADAnalysisMetaDataType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AnalysisSupportingData(self): return self.AnalysisSupportingData
    def set_AnalysisSupportingData(self, AnalysisSupportingData): self.AnalysisSupportingData = AnalysisSupportingData
    def get_Assemblies(self): return self.Assemblies
    def set_Assemblies(self, Assemblies): self.Assemblies = Assemblies
    def get_Materials(self): return self.Materials
    def set_Materials(self, Materials): self.Materials = Materials
    def get_CADAnalysisMetaData(self): return self.CADAnalysisMetaData
    def set_CADAnalysisMetaData(self, CADAnalysisMetaData): self.CADAnalysisMetaData = CADAnalysisMetaData
    def add_CADAnalysisMetaData(self, value): self.CADAnalysisMetaData.append(value)
    def insert_CADAnalysisMetaData(self, index, value): self.CADAnalysisMetaData[index] = value
    def get__derived(self): return self._derived
    def set__derived(self, _derived): self._derived = _derived
    def get__real_archetype(self): return self._real_archetype
    def set__real_archetype(self, _real_archetype): self._real_archetype = _real_archetype
    def get__archetype(self): return self._archetype
    def set__archetype(self, _archetype): self._archetype = _archetype
    def get__subtype(self): return self._subtype
    def set__subtype(self, _subtype): self._subtype = _subtype
    def get__instances(self): return self._instances
    def set__instances(self, _instances): self._instances = _instances
    def get__desynched_atts(self): return self._desynched_atts
    def set__desynched_atts(self, _desynched_atts): self._desynched_atts = _desynched_atts
    def get__id(self): return self._id
    def set__id(self, _id): self._id = _id
    def get__libname(self): return self._libname
    def set__libname(self, _libname): self._libname = _libname
    def hasContent_(self):
        if (
            self.AnalysisSupportingData is not None or
            self.Assemblies is not None or
            self.Materials is not None or
            self.CADAnalysisMetaData
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CADAnalysisMetaDataType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CADAnalysisMetaDataType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CADAnalysisMetaDataType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CADAnalysisMetaDataType'):
        if self._derived is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            outfile.write(' _derived=%s' % (self.gds_format_string(quote_attrib(self._derived).encode(ExternalEncoding), input_name='_derived'), ))
        if self._real_archetype is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            outfile.write(' _real_archetype="%s"' % self.gds_format_boolean(self._real_archetype, input_name='_real_archetype'))
        if self._archetype is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            outfile.write(' _archetype=%s' % (self.gds_format_string(quote_attrib(self._archetype).encode(ExternalEncoding), input_name='_archetype'), ))
        if self._subtype is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            outfile.write(' _subtype="%s"' % self.gds_format_boolean(self._subtype, input_name='_subtype'))
        if self._instances is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            outfile.write(' _instances=%s' % (self.gds_format_string(quote_attrib(self._instances).encode(ExternalEncoding), input_name='_instances'), ))
        if self._desynched_atts is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            outfile.write(' _desynched_atts=%s' % (self.gds_format_string(quote_attrib(self._desynched_atts).encode(ExternalEncoding), input_name='_desynched_atts'), ))
        if self._id is not None and '_id' not in already_processed:
            already_processed.add('_id')
            outfile.write(' _id=%s' % (self.gds_format_string(quote_attrib(self._id).encode(ExternalEncoding), input_name='_id'), ))
        if self._libname is not None and '_libname' not in already_processed:
            already_processed.add('_libname')
            outfile.write(' _libname=%s' % (self.gds_format_string(quote_attrib(self._libname).encode(ExternalEncoding), input_name='_libname'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='CADAnalysisMetaDataType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AnalysisSupportingData is not None:
            self.AnalysisSupportingData.export(outfile, level, namespace_, name_='AnalysisSupportingData', pretty_print=pretty_print)
        if self.Assemblies is not None:
            self.Assemblies.export(outfile, level, namespace_, name_='Assemblies', pretty_print=pretty_print)
        if self.Materials is not None:
            self.Materials.export(outfile, level, namespace_, name_='Materials', pretty_print=pretty_print)
        for CADAnalysisMetaData_ in self.CADAnalysisMetaData:
            CADAnalysisMetaData_.export(outfile, level, namespace_, name_='CADAnalysisMetaData', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='CADAnalysisMetaDataType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self._derived is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            showIndent(outfile, level)
            outfile.write('_derived="%s",\n' % (self._derived,))
        if self._real_archetype is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            showIndent(outfile, level)
            outfile.write('_real_archetype=%s,\n' % (self._real_archetype,))
        if self._archetype is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            showIndent(outfile, level)
            outfile.write('_archetype="%s",\n' % (self._archetype,))
        if self._subtype is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            showIndent(outfile, level)
            outfile.write('_subtype=%s,\n' % (self._subtype,))
        if self._instances is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            showIndent(outfile, level)
            outfile.write('_instances="%s",\n' % (self._instances,))
        if self._desynched_atts is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            showIndent(outfile, level)
            outfile.write('_desynched_atts="%s",\n' % (self._desynched_atts,))
        if self._id is not None and '_id' not in already_processed:
            already_processed.add('_id')
            showIndent(outfile, level)
            outfile.write('_id="%s",\n' % (self._id,))
        if self._libname is not None and '_libname' not in already_processed:
            already_processed.add('_libname')
            showIndent(outfile, level)
            outfile.write('_libname="%s",\n' % (self._libname,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.AnalysisSupportingData is not None:
            showIndent(outfile, level)
            outfile.write('AnalysisSupportingData=model_.AnalysisSupportingDataType(\n')
            self.AnalysisSupportingData.exportLiteral(outfile, level, name_='AnalysisSupportingData')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Assemblies is not None:
            showIndent(outfile, level)
            outfile.write('Assemblies=model_.AssembliesType(\n')
            self.Assemblies.exportLiteral(outfile, level, name_='Assemblies')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Materials is not None:
            showIndent(outfile, level)
            outfile.write('Materials=model_.MaterialsType(\n')
            self.Materials.exportLiteral(outfile, level, name_='Materials')
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('CADAnalysisMetaData=[\n')
        level += 1
        for CADAnalysisMetaData_ in self.CADAnalysisMetaData:
            showIndent(outfile, level)
            outfile.write('model_.CADAnalysisMetaDataType(\n')
            CADAnalysisMetaData_.exportLiteral(outfile, level, name_='CADAnalysisMetaDataType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('_derived', node)
        if value is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            self._derived = value
        value = find_attr_value_('_real_archetype', node)
        if value is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            if value in ('true', '1'):
                self._real_archetype = True
            elif value in ('false', '0'):
                self._real_archetype = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('_archetype', node)
        if value is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            self._archetype = value
        value = find_attr_value_('_subtype', node)
        if value is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            if value in ('true', '1'):
                self._subtype = True
            elif value in ('false', '0'):
                self._subtype = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('_instances', node)
        if value is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            self._instances = value
        value = find_attr_value_('_desynched_atts', node)
        if value is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            self._desynched_atts = value
        value = find_attr_value_('_id', node)
        if value is not None and '_id' not in already_processed:
            already_processed.add('_id')
            self._id = value
        value = find_attr_value_('_libname', node)
        if value is not None and '_libname' not in already_processed:
            already_processed.add('_libname')
            self._libname = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AnalysisSupportingData':
            obj_ = AnalysisSupportingDataType.factory()
            obj_.build(child_)
            self.AnalysisSupportingData = obj_
            obj_.original_tagname_ = 'AnalysisSupportingData'
        elif nodeName_ == 'Assemblies':
            obj_ = AssembliesType.factory()
            obj_.build(child_)
            self.Assemblies = obj_
            obj_.original_tagname_ = 'Assemblies'
        elif nodeName_ == 'Materials':
            obj_ = MaterialsType.factory()
            obj_.build(child_)
            self.Materials = obj_
            obj_.original_tagname_ = 'Materials'
        elif nodeName_ == 'CADAnalysisMetaData':
            obj_ = CADAnalysisMetaDataType.factory()
            obj_.build(child_)
            self.CADAnalysisMetaData.append(obj_)
            obj_.original_tagname_ = 'CADAnalysisMetaData'
# end class CADAnalysisMetaDataType


class MaterialsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, _derived=None, _real_archetype=None, _archetype=None, _subtype=None, _instances=None, _desynched_atts=None, _id=None, Material=None):
        self.original_tagname_ = None
        self._derived = _cast(None, _derived)
        self._real_archetype = _cast(bool, _real_archetype)
        self._archetype = _cast(None, _archetype)
        self._subtype = _cast(bool, _subtype)
        self._instances = _cast(None, _instances)
        self._desynched_atts = _cast(None, _desynched_atts)
        self._id = _cast(None, _id)
        if Material is None:
            self.Material = []
        else:
            self.Material = Material
    def factory(*args_, **kwargs_):
        if MaterialsType.subclass:
            return MaterialsType.subclass(*args_, **kwargs_)
        else:
            return MaterialsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Material(self): return self.Material
    def set_Material(self, Material): self.Material = Material
    def add_Material(self, value): self.Material.append(value)
    def insert_Material(self, index, value): self.Material[index] = value
    def get__derived(self): return self._derived
    def set__derived(self, _derived): self._derived = _derived
    def get__real_archetype(self): return self._real_archetype
    def set__real_archetype(self, _real_archetype): self._real_archetype = _real_archetype
    def get__archetype(self): return self._archetype
    def set__archetype(self, _archetype): self._archetype = _archetype
    def get__subtype(self): return self._subtype
    def set__subtype(self, _subtype): self._subtype = _subtype
    def get__instances(self): return self._instances
    def set__instances(self, _instances): self._instances = _instances
    def get__desynched_atts(self): return self._desynched_atts
    def set__desynched_atts(self, _desynched_atts): self._desynched_atts = _desynched_atts
    def get__id(self): return self._id
    def set__id(self, _id): self._id = _id
    def hasContent_(self):
        if (
            self.Material
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='MaterialsType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='MaterialsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='MaterialsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='MaterialsType'):
        if self._derived is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            outfile.write(' _derived=%s' % (self.gds_format_string(quote_attrib(self._derived).encode(ExternalEncoding), input_name='_derived'), ))
        if self._real_archetype is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            outfile.write(' _real_archetype="%s"' % self.gds_format_boolean(self._real_archetype, input_name='_real_archetype'))
        if self._archetype is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            outfile.write(' _archetype=%s' % (self.gds_format_string(quote_attrib(self._archetype).encode(ExternalEncoding), input_name='_archetype'), ))
        if self._subtype is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            outfile.write(' _subtype="%s"' % self.gds_format_boolean(self._subtype, input_name='_subtype'))
        if self._instances is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            outfile.write(' _instances=%s' % (self.gds_format_string(quote_attrib(self._instances).encode(ExternalEncoding), input_name='_instances'), ))
        if self._desynched_atts is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            outfile.write(' _desynched_atts=%s' % (self.gds_format_string(quote_attrib(self._desynched_atts).encode(ExternalEncoding), input_name='_desynched_atts'), ))
        if self._id is not None and '_id' not in already_processed:
            already_processed.add('_id')
            outfile.write(' _id=%s' % (self.gds_format_string(quote_attrib(self._id).encode(ExternalEncoding), input_name='_id'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='MaterialsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Material_ in self.Material:
            Material_.export(outfile, level, namespace_, name_='Material', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='MaterialsType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self._derived is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            showIndent(outfile, level)
            outfile.write('_derived="%s",\n' % (self._derived,))
        if self._real_archetype is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            showIndent(outfile, level)
            outfile.write('_real_archetype=%s,\n' % (self._real_archetype,))
        if self._archetype is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            showIndent(outfile, level)
            outfile.write('_archetype="%s",\n' % (self._archetype,))
        if self._subtype is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            showIndent(outfile, level)
            outfile.write('_subtype=%s,\n' % (self._subtype,))
        if self._instances is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            showIndent(outfile, level)
            outfile.write('_instances="%s",\n' % (self._instances,))
        if self._desynched_atts is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            showIndent(outfile, level)
            outfile.write('_desynched_atts="%s",\n' % (self._desynched_atts,))
        if self._id is not None and '_id' not in already_processed:
            already_processed.add('_id')
            showIndent(outfile, level)
            outfile.write('_id="%s",\n' % (self._id,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('Material=[\n')
        level += 1
        for Material_ in self.Material:
            showIndent(outfile, level)
            outfile.write('model_.MaterialType(\n')
            Material_.exportLiteral(outfile, level, name_='MaterialType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('_derived', node)
        if value is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            self._derived = value
        value = find_attr_value_('_real_archetype', node)
        if value is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            if value in ('true', '1'):
                self._real_archetype = True
            elif value in ('false', '0'):
                self._real_archetype = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('_archetype', node)
        if value is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            self._archetype = value
        value = find_attr_value_('_subtype', node)
        if value is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            if value in ('true', '1'):
                self._subtype = True
            elif value in ('false', '0'):
                self._subtype = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('_instances', node)
        if value is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            self._instances = value
        value = find_attr_value_('_desynched_atts', node)
        if value is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            self._desynched_atts = value
        value = find_attr_value_('_id', node)
        if value is not None and '_id' not in already_processed:
            already_processed.add('_id')
            self._id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Material':
            obj_ = MaterialType.factory()
            obj_.build(child_)
            self.Material.append(obj_)
            obj_.original_tagname_ = 'Material'
# end class MaterialsType


class MaterialType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, _derived=None, _real_archetype=None, _archetype=None, MaterialID=None, _subtype=None, _instances=None, _desynched_atts=None, _id=None, MaterialProperties=None):
        self.original_tagname_ = None
        self._derived = _cast(None, _derived)
        self._real_archetype = _cast(bool, _real_archetype)
        self._archetype = _cast(None, _archetype)
        self.MaterialID = _cast(None, MaterialID)
        self._subtype = _cast(bool, _subtype)
        self._instances = _cast(None, _instances)
        self._desynched_atts = _cast(None, _desynched_atts)
        self._id = _cast(None, _id)
        if MaterialProperties is None:
            self.MaterialProperties = []
        else:
            self.MaterialProperties = MaterialProperties
    def factory(*args_, **kwargs_):
        if MaterialType.subclass:
            return MaterialType.subclass(*args_, **kwargs_)
        else:
            return MaterialType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_MaterialProperties(self): return self.MaterialProperties
    def set_MaterialProperties(self, MaterialProperties): self.MaterialProperties = MaterialProperties
    def add_MaterialProperties(self, value): self.MaterialProperties.append(value)
    def insert_MaterialProperties(self, index, value): self.MaterialProperties[index] = value
    def get__derived(self): return self._derived
    def set__derived(self, _derived): self._derived = _derived
    def get__real_archetype(self): return self._real_archetype
    def set__real_archetype(self, _real_archetype): self._real_archetype = _real_archetype
    def get__archetype(self): return self._archetype
    def set__archetype(self, _archetype): self._archetype = _archetype
    def get_MaterialID(self): return self.MaterialID
    def set_MaterialID(self, MaterialID): self.MaterialID = MaterialID
    def get__subtype(self): return self._subtype
    def set__subtype(self, _subtype): self._subtype = _subtype
    def get__instances(self): return self._instances
    def set__instances(self, _instances): self._instances = _instances
    def get__desynched_atts(self): return self._desynched_atts
    def set__desynched_atts(self, _desynched_atts): self._desynched_atts = _desynched_atts
    def get__id(self): return self._id
    def set__id(self, _id): self._id = _id
    def hasContent_(self):
        if (
            self.MaterialProperties
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='MaterialType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='MaterialType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='MaterialType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='MaterialType'):
        if self._derived is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            outfile.write(' _derived=%s' % (self.gds_format_string(quote_attrib(self._derived).encode(ExternalEncoding), input_name='_derived'), ))
        if self._real_archetype is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            outfile.write(' _real_archetype="%s"' % self.gds_format_boolean(self._real_archetype, input_name='_real_archetype'))
        if self._archetype is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            outfile.write(' _archetype=%s' % (self.gds_format_string(quote_attrib(self._archetype).encode(ExternalEncoding), input_name='_archetype'), ))
        if self.MaterialID is not None and 'MaterialID' not in already_processed:
            already_processed.add('MaterialID')
            outfile.write(' MaterialID=%s' % (self.gds_format_string(quote_attrib(self.MaterialID).encode(ExternalEncoding), input_name='MaterialID'), ))
        if self._subtype is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            outfile.write(' _subtype="%s"' % self.gds_format_boolean(self._subtype, input_name='_subtype'))
        if self._instances is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            outfile.write(' _instances=%s' % (self.gds_format_string(quote_attrib(self._instances).encode(ExternalEncoding), input_name='_instances'), ))
        if self._desynched_atts is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            outfile.write(' _desynched_atts=%s' % (self.gds_format_string(quote_attrib(self._desynched_atts).encode(ExternalEncoding), input_name='_desynched_atts'), ))
        if self._id is not None and '_id' not in already_processed:
            already_processed.add('_id')
            outfile.write(' _id=%s' % (self.gds_format_string(quote_attrib(self._id).encode(ExternalEncoding), input_name='_id'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='MaterialType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for MaterialProperties_ in self.MaterialProperties:
            MaterialProperties_.export(outfile, level, namespace_, name_='MaterialProperties', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='MaterialType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self._derived is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            showIndent(outfile, level)
            outfile.write('_derived="%s",\n' % (self._derived,))
        if self._real_archetype is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            showIndent(outfile, level)
            outfile.write('_real_archetype=%s,\n' % (self._real_archetype,))
        if self._archetype is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            showIndent(outfile, level)
            outfile.write('_archetype="%s",\n' % (self._archetype,))
        if self.MaterialID is not None and 'MaterialID' not in already_processed:
            already_processed.add('MaterialID')
            showIndent(outfile, level)
            outfile.write('MaterialID="%s",\n' % (self.MaterialID,))
        if self._subtype is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            showIndent(outfile, level)
            outfile.write('_subtype=%s,\n' % (self._subtype,))
        if self._instances is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            showIndent(outfile, level)
            outfile.write('_instances="%s",\n' % (self._instances,))
        if self._desynched_atts is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            showIndent(outfile, level)
            outfile.write('_desynched_atts="%s",\n' % (self._desynched_atts,))
        if self._id is not None and '_id' not in already_processed:
            already_processed.add('_id')
            showIndent(outfile, level)
            outfile.write('_id="%s",\n' % (self._id,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('MaterialProperties=[\n')
        level += 1
        for MaterialProperties_ in self.MaterialProperties:
            showIndent(outfile, level)
            outfile.write('model_.MaterialPropertiesType(\n')
            MaterialProperties_.exportLiteral(outfile, level, name_='MaterialPropertiesType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('_derived', node)
        if value is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            self._derived = value
        value = find_attr_value_('_real_archetype', node)
        if value is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            if value in ('true', '1'):
                self._real_archetype = True
            elif value in ('false', '0'):
                self._real_archetype = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('_archetype', node)
        if value is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            self._archetype = value
        value = find_attr_value_('MaterialID', node)
        if value is not None and 'MaterialID' not in already_processed:
            already_processed.add('MaterialID')
            self.MaterialID = value
        value = find_attr_value_('_subtype', node)
        if value is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            if value in ('true', '1'):
                self._subtype = True
            elif value in ('false', '0'):
                self._subtype = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('_instances', node)
        if value is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            self._instances = value
        value = find_attr_value_('_desynched_atts', node)
        if value is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            self._desynched_atts = value
        value = find_attr_value_('_id', node)
        if value is not None and '_id' not in already_processed:
            already_processed.add('_id')
            self._id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'MaterialProperties':
            obj_ = MaterialPropertiesType.factory()
            obj_.build(child_)
            self.MaterialProperties.append(obj_)
            obj_.original_tagname_ = 'MaterialProperties'
# end class MaterialType


class MaterialPropertiesType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, _derived=None, _real_archetype=None, _archetype=None, _subtype=None, _instances=None, _desynched_atts=None, _id=None, AllowableBearingStress=None, AllowableShearStress=None, AllowableTensileStress=None):
        self.original_tagname_ = None
        self._derived = _cast(None, _derived)
        self._real_archetype = _cast(bool, _real_archetype)
        self._archetype = _cast(None, _archetype)
        self._subtype = _cast(bool, _subtype)
        self._instances = _cast(None, _instances)
        self._desynched_atts = _cast(None, _desynched_atts)
        self._id = _cast(None, _id)
        self.AllowableBearingStress = AllowableBearingStress
        self.AllowableShearStress = AllowableShearStress
        self.AllowableTensileStress = AllowableTensileStress
    def factory(*args_, **kwargs_):
        if MaterialPropertiesType.subclass:
            return MaterialPropertiesType.subclass(*args_, **kwargs_)
        else:
            return MaterialPropertiesType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AllowableBearingStress(self): return self.AllowableBearingStress
    def set_AllowableBearingStress(self, AllowableBearingStress): self.AllowableBearingStress = AllowableBearingStress
    def get_AllowableShearStress(self): return self.AllowableShearStress
    def set_AllowableShearStress(self, AllowableShearStress): self.AllowableShearStress = AllowableShearStress
    def get_AllowableTensileStress(self): return self.AllowableTensileStress
    def set_AllowableTensileStress(self, AllowableTensileStress): self.AllowableTensileStress = AllowableTensileStress
    def get__derived(self): return self._derived
    def set__derived(self, _derived): self._derived = _derived
    def get__real_archetype(self): return self._real_archetype
    def set__real_archetype(self, _real_archetype): self._real_archetype = _real_archetype
    def get__archetype(self): return self._archetype
    def set__archetype(self, _archetype): self._archetype = _archetype
    def get__subtype(self): return self._subtype
    def set__subtype(self, _subtype): self._subtype = _subtype
    def get__instances(self): return self._instances
    def set__instances(self, _instances): self._instances = _instances
    def get__desynched_atts(self): return self._desynched_atts
    def set__desynched_atts(self, _desynched_atts): self._desynched_atts = _desynched_atts
    def get__id(self): return self._id
    def set__id(self, _id): self._id = _id
    def hasContent_(self):
        if (
            self.AllowableBearingStress is not None or
            self.AllowableShearStress is not None or
            self.AllowableTensileStress is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='MaterialPropertiesType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='MaterialPropertiesType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='MaterialPropertiesType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='MaterialPropertiesType'):
        if self._derived is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            outfile.write(' _derived=%s' % (self.gds_format_string(quote_attrib(self._derived).encode(ExternalEncoding), input_name='_derived'), ))
        if self._real_archetype is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            outfile.write(' _real_archetype="%s"' % self.gds_format_boolean(self._real_archetype, input_name='_real_archetype'))
        if self._archetype is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            outfile.write(' _archetype=%s' % (self.gds_format_string(quote_attrib(self._archetype).encode(ExternalEncoding), input_name='_archetype'), ))
        if self._subtype is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            outfile.write(' _subtype="%s"' % self.gds_format_boolean(self._subtype, input_name='_subtype'))
        if self._instances is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            outfile.write(' _instances=%s' % (self.gds_format_string(quote_attrib(self._instances).encode(ExternalEncoding), input_name='_instances'), ))
        if self._desynched_atts is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            outfile.write(' _desynched_atts=%s' % (self.gds_format_string(quote_attrib(self._desynched_atts).encode(ExternalEncoding), input_name='_desynched_atts'), ))
        if self._id is not None and '_id' not in already_processed:
            already_processed.add('_id')
            outfile.write(' _id=%s' % (self.gds_format_string(quote_attrib(self._id).encode(ExternalEncoding), input_name='_id'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='MaterialPropertiesType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AllowableBearingStress is not None:
            self.AllowableBearingStress.export(outfile, level, namespace_, name_='AllowableBearingStress', pretty_print=pretty_print)
        if self.AllowableShearStress is not None:
            self.AllowableShearStress.export(outfile, level, namespace_, name_='AllowableShearStress', pretty_print=pretty_print)
        if self.AllowableTensileStress is not None:
            self.AllowableTensileStress.export(outfile, level, namespace_, name_='AllowableTensileStress', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='MaterialPropertiesType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self._derived is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            showIndent(outfile, level)
            outfile.write('_derived="%s",\n' % (self._derived,))
        if self._real_archetype is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            showIndent(outfile, level)
            outfile.write('_real_archetype=%s,\n' % (self._real_archetype,))
        if self._archetype is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            showIndent(outfile, level)
            outfile.write('_archetype="%s",\n' % (self._archetype,))
        if self._subtype is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            showIndent(outfile, level)
            outfile.write('_subtype=%s,\n' % (self._subtype,))
        if self._instances is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            showIndent(outfile, level)
            outfile.write('_instances="%s",\n' % (self._instances,))
        if self._desynched_atts is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            showIndent(outfile, level)
            outfile.write('_desynched_atts="%s",\n' % (self._desynched_atts,))
        if self._id is not None and '_id' not in already_processed:
            already_processed.add('_id')
            showIndent(outfile, level)
            outfile.write('_id="%s",\n' % (self._id,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.AllowableBearingStress is not None:
            showIndent(outfile, level)
            outfile.write('AllowableBearingStress=model_.AllowableBearingStressType(\n')
            self.AllowableBearingStress.exportLiteral(outfile, level, name_='AllowableBearingStress')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.AllowableShearStress is not None:
            showIndent(outfile, level)
            outfile.write('AllowableShearStress=model_.AllowableShearStressType(\n')
            self.AllowableShearStress.exportLiteral(outfile, level, name_='AllowableShearStress')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.AllowableTensileStress is not None:
            showIndent(outfile, level)
            outfile.write('AllowableTensileStress=model_.AllowableTensileStressType(\n')
            self.AllowableTensileStress.exportLiteral(outfile, level, name_='AllowableTensileStress')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('_derived', node)
        if value is not None and '_derived' not in already_processed:
            already_processed.add('_derived')
            self._derived = value
        value = find_attr_value_('_real_archetype', node)
        if value is not None and '_real_archetype' not in already_processed:
            already_processed.add('_real_archetype')
            if value in ('true', '1'):
                self._real_archetype = True
            elif value in ('false', '0'):
                self._real_archetype = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('_archetype', node)
        if value is not None and '_archetype' not in already_processed:
            already_processed.add('_archetype')
            self._archetype = value
        value = find_attr_value_('_subtype', node)
        if value is not None and '_subtype' not in already_processed:
            already_processed.add('_subtype')
            if value in ('true', '1'):
                self._subtype = True
            elif value in ('false', '0'):
                self._subtype = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('_instances', node)
        if value is not None and '_instances' not in already_processed:
            already_processed.add('_instances')
            self._instances = value
        value = find_attr_value_('_desynched_atts', node)
        if value is not None and '_desynched_atts' not in already_processed:
            already_processed.add('_desynched_atts')
            self._desynched_atts = value
        value = find_attr_value_('_id', node)
        if value is not None and '_id' not in already_processed:
            already_processed.add('_id')
            self._id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AllowableBearingStress':
            obj_ = AllowableBearingStressType.factory()
            obj_.build(child_)
            self.AllowableBearingStress = obj_
            obj_.original_tagname_ = 'AllowableBearingStress'
        elif nodeName_ == 'AllowableShearStress':
            obj_ = AllowableShearStressType.factory()
            obj_.build(child_)
            self.AllowableShearStress = obj_
            obj_.original_tagname_ = 'AllowableShearStress'
        elif nodeName_ == 'AllowableTensileStress':
            obj_ = AllowableTensileStressType.factory()
            obj_.build(child_)
            self.AllowableTensileStress = obj_
            obj_.original_tagname_ = 'AllowableTensileStress'
# end class MaterialPropertiesType


GDSClassesMapping = {
    'CADAnalysisMetaData': CADAnalysisMetaDataType,
    'Assembly': AssemblyType,
    'AllowableShearStress': AllowableShearStressType,
    'AllowableTensileStress': AllowableTensileStressType,
    'Assemblies': AssembliesType,
    'Metric': MetricType,
    'Material': MaterialType,
    'Component': ComponentType,
    'MaterialProperties': MaterialPropertiesType,
    'Metrics': MetricsType,
    'Materials': MaterialsType,
    'AllowableBearingStress': AllowableBearingStressType,
    'AnalysisSupportingData': AnalysisSupportingDataType,
    'LifeCycle': LifeCycleType,
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName, silence=False):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'MetricType'
        rootClass = MetricType
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='',
            pretty_print=True)
    return rootObj


def parseEtree(inFileName, silence=False):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'MetricType'
        rootClass = MetricType
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(content)
        sys.stdout.write('\n')
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False):
    from StringIO import StringIO
    doc = parsexml_(StringIO(inString))
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'MetricType'
        rootClass = MetricType
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='')
    return rootObj


def parseLiteral(inFileName, silence=False):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'MetricType'
        rootClass = MetricType
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('#from a import *\n\n')
        sys.stdout.write('import a as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "AllowableBearingStressType",
    "AllowableShearStressType",
    "AllowableTensileStressType",
    "AnalysisSupportingDataType",
    "AssembliesType",
    "AssemblyType",
    "CADAnalysisMetaDataType",
    "ComponentType",
    "LifeCycleType",
    "MaterialPropertiesType",
    "MaterialType",
    "MaterialsType",
    "MetricType",
    "MetricsType"
]
