// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 14.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace CyPhy2CAD_CSharp.Template
{
    using System;
    using System.IO;
    using System.Diagnostics;
    using System.Linq;
    using System.Collections;
    using System.Collections.Generic;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\kevin\Documents\meta-core\src\CyPhy2CAD_CSharp\Template\zip_to_remote_py.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public partial class zip_to_remote_py : zip_to_remote_pyBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write(" \r\n");
            this.Write("\r\n\r\n# ---------------------------------------------------\r\n# Auto generated by Cy" +
                    "Phy2CAD\r\n# ---------------------------------------------------\r\nimport zipfile\r\n" +
                    "import os\r\nimport os.path\r\nimport shutil\r\nimport subprocess\r\n\r\ncomponents_folder" +
                    " = [ \\\r\n");
            
            #line 23 "C:\Users\kevin\Documents\meta-core\src\CyPhy2CAD_CSharp\Template\zip_to_remote_py.tt"
 foreach (var folder in CadFolders)
	{ 
            
            #line default
            #line hidden
            this.Write("    r\'");
            
            #line 25 "C:\Users\kevin\Documents\meta-core\src\CyPhy2CAD_CSharp\Template\zip_to_remote_py.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CyPhy2CAD_CSharp.TestBenchModel.TestBenchBase.SanitizePythonRawString(folder)));
            
            #line default
            #line hidden
            this.Write("\',\r\n");
            
            #line 26 "C:\Users\kevin\Documents\meta-core\src\CyPhy2CAD_CSharp\Template\zip_to_remote_py.tt"
  } 
            
            #line default
            #line hidden
            this.Write("    ]\r\n\r\n\r\ndef find_python_path():\r\n    import _winreg\r\n    meta_python_path = \"\"" +
                    "\r\n    try:\r\n        uninstall_key = _winreg.OpenKey(_winreg.HKEY_LOCAL_MACHINE, " +
                    "r\"Software\\META\", 0,\r\n                                        _winreg.KEY_READ |" +
                    " _winreg.KEY_WOW64_32KEY)\r\n        val, typ = _winreg.QueryValueEx(uninstall_key" +
                    ", \'META_PATH\')\r\n        meta_python_path = os.path.join(val, r\"bin\\Python311\\" +
                    "Python.exe\")\r\n    except WindowsError as e:\r\n        meta_python_path = None" +
                    "\r\n        \r\n    return meta_python_path\r\n\r\n\r\ndef call_script(meta_python, script" +
                    "name, error_msg):\r\n    return_out = 0\r\n    try:\r\n        script_cmd = \'\"{0}\" \"{1" +
                    "}\"\'\\\r\n                    .format(meta_python, scriptname)\r\n            \r\n      " +
                    "  status = subprocess.check_output(script_cmd, stderr=subprocess.STDOUT, shell=T" +
                    "rue)\r\n    except subprocess.CalledProcessError as err:\r\n        msg = \"Subproces" +
                    "s call failed!\"\r\n        msg += \"\\n  command       : {0}\".format(err.cmd)\r\n     " +
                    "   msg += \"\\n  return-code   : {0}\".format(err.returncode)\r\n        if err.outpu" +
                    "t:\r\n            msg += \"\\n  console output: \\n\\n{0}\".format(err.output)\r\n       " +
                    " if err.message:\r\n            msg +=  \"\\n  error message : {0}\".format(err.messa" +
                    "ge)\r\n        error_msg.append(msg)\r\n        return_out = 1\r\n\r\n    return return_" +
                    "out\r\n\r\n\r\ndef main():\r\n    error_msg = list()\r\n    # call Copy_Parts.bat\r\n    cop" +
                    "y_bat = \'Copy_Parts.py\'\r\n    if os.path.exists(copy_bat):\r\n        try:\r\n       " +
                    "     meta_python = find_python_path()\r\n            if meta_python is not None:\r\n" +
                    "                call_script(meta_python, copy_bat, error_msg) \r\n            else" +
                    ":\r\n                error_msg.append(\'Can not find META Python Package!\')\r\n      " +
                    "  except Exception as msg:\r\n            error_msg.append(str(msg))\r\n            " +
                    "error_msg.append(\'\\nNot able to copy cad files.\')\r\n\r\n    if len(error_msg) > 0:\r" +
                    "\n        with open(\'_FAILED.txt\', \'w\') as f_out:\r\n            for item in error_" +
                    "msg:\r\n                f_out.write(item)\r\n        if os.name == \'nt\':\r\n          " +
                    "  os._exit(3)\r\n        elif os.name == \'posix\':\r\n            os._exit(os.EX_OSFI" +
                    "LE)\r\n\r\n    search_path = \'search_META.pro\'\r\n    if os.path.exists(search_path):\r" +
                    "\n        shutil.copyfile(search_path, search_path + \'.local\')\r\n\r\n    with open (" +
                    "search_path, \'w\') as search_path_file:\r\n        if os.path.exists(\'Cad_Auxiliary" +
                    "_Directory\'):\r\n            search_path_file.write(\'\".\\Cad_Auxiliary_Directory\"\\n" +
                    "\')\r\n\r\n        for folder in components_folder:\r\n            search_path_file.wri" +
                    "te(\'\".\\\\\' + folder + \'\"\\n\')\r\n\r\n    # zip\r\n    output_filename = \'source_data.zip" +
                    "\'\r\n\r\n    if os.path.exists(output_filename):\r\n        os.remove(output_filename)" +
                    "\r\n\r\n    cur_work_dir = os.getcwd()\r\n\r\n    with zipfile.ZipFile(output_filename, " +
                    "\'w\', allowZip64=True) as z:\r\n        parent_dir_name = os.path.basename(os.getcw" +
                    "d())\r\n        os.chdir(\'..\\\\\')\r\n        for dirpath,dirs,files in os.walk(parent" +
                    "_dir_name):\r\n          for f in files:\r\n            if output_filename == f:\r\n  " +
                    "              continue\r\n            fn = os.path.join(dirpath, f)\r\n            z" +
                    ".write(fn, compress_type=zipfile.ZIP_DEFLATED)\r\n            \r\n\r\n    # removes th" +
                    "e copied over components directory after zipping because it won\'t be needed afte" +
                    "r the workspace.zip comes back since\r\n    # paths in search_meta.pro would be sw" +
                    "itched to reference local components directory in /project_dir/components etc \r\n" +
                    "    for folder in (os.path.normpath(f) for f in components_folder):\r\n        pat" +
                    "h_list = folder.split(os.sep)\r\n        if len(path_list) > 0:\r\n            compo" +
                    "nents_root_dir = os.path.join(cur_work_dir, path_list[0])\r\n            if os.pat" +
                    "h.exists(components_root_dir):\r\n                shutil.rmtree(os.path.join(cur_w" +
                    "ork_dir, components_root_dir))\r\n\r\nif __name__ == \'__main__\':\r\n    main()\r\n\r\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 131 "C:\Users\kevin\Documents\meta-core\src\CyPhy2CAD_CSharp\Template\zip_to_remote_py.tt"

public List<string> CadFolders{get;set;}

        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public class zip_to_remote_pyBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
