<?xml version='1.0' encoding='UTF-8'?>
<project>
    <actions/>
    <description>{0}</description>
    <keepDependencies>false</keepDependencies>
    <properties>
        <hudson.model.ParametersDefinitionProperty>
            <parameterDefinitions>
              <hudson.model.StringParameterDefinition>
                <name>resultsPutUrl</name>
                <description/>
                <defaultValue/>
              </hudson.model.StringParameterDefinition>
              <hudson.model.StringParameterDefinition>
                <name>resultsGetUrl</name>
                <description/>
                <defaultValue/>
              </hudson.model.StringParameterDefinition>
              <hudson.model.StringParameterDefinition>
                <name>sourceGetUrl</name>
                <description/>
                <defaultValue/>
              </hudson.model.StringParameterDefinition>
            </parameterDefinitions>
        </hudson.model.ParametersDefinitionProperty>
    </properties>
    <scm class="hudson.scm.NullSCM"/>
    <assignedNode>{3}</assignedNode>
    <canRoam>false</canRoam>
    <disabled>false</disabled>
    <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
    <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
    <triggers class="vector"/>
    <concurrentBuild>false</concurrentBuild>
    <builders>
        <org.jvnet.hudson.plugins.Jython plugin="jython@1.9">
            <command>
from __future__ import with_statement
import os
with open(&apos;unzip.py&apos;, &apos;w&apos;) as fp:
    fp.write(
&apos;&apos;&apos;#!/usr/bin/python
import os
import sys
import zipfile
import urllib
class URLopener(urllib.FancyURLopener):
    def http_error_default(self, url, fp, errcode, errmsg, headers):
        raise Exception(&quot;GET %s failed: %d&quot; % (url, errcode))
URLopener().retrieve({4}, &apos;data.zip&apos;)
zip = zipfile.ZipFile(&apos;data.zip&apos;)
if sys.platform == 'win32':
    zip.extractall(&apos;\\\\\\\\?\\\\&apos; + os.getcwd() + &apos;\\\\&apos;)
else:
    zip.extractall()
&apos;&apos;&apos;)

import os
import subprocess
import traceback

if os.pathsep == ';': # if windows (even on Jython)
    os.environ['PATH'] = os.environ['PATH'] + os.pathsep + r'C:\Python311'

# Windows or Unix
subprocess.check_call(&apos;python unzip.py&apos;, shell=True)
os.chdir(&apos;{1}&apos;)
analysis_exception = None
try:
    subprocess.check_call(&apos;{2}&apos;, shell=True)
except Exception, analysis_exception:
    traceback.print_exc()
os.chdir(&apos;..&apos;)

with open(&apos;zip.py&apos;, &apos;w&apos;) as fp:
    fp.write(&apos;&apos;&apos;
{5}
&apos;&apos;&apos;)

with open(&apos;upload_results.py&apos;, &apos;w&apos;) as fp:
    fp.write(&apos;&apos;&apos;
import os
import urllib2

output_filename = &apos;{6}&apos;

opener = urllib2.build_opener(urllib2.HTTPHandler)
request = urllib2.Request(os.environ[&apos;resultsPutUrl&apos;], data=open(output_filename, &apos;rb&apos;))
request.add_header(&apos;Content-type&apos;, &apos;application/zip&apos;)
request.add_header(&apos;Content-length&apos;, os.path.getsize(output_filename))
request.get_method = lambda: &apos;PUT&apos;
url = opener.open(request)
&apos;&apos;&apos;)

try:
    subprocess.check_call(&apos;python zip.py&apos;, shell=True)
    subprocess.check_call(&apos;python upload_results.py&apos;, shell=True)
except Exception, e:
    traceback.print_exc()
    raise
finally:
    if analysis_exception:
        raise analysis_exception
            </command>
        </org.jvnet.hudson.plugins.Jython>
    </builders>
    <publishers/>
    <buildWrappers/>
</project>