// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MetaLinkMsg.proto

#ifndef PROTOBUF_MetaLinkMsg_2eproto__INCLUDED
#define PROTOBUF_MetaLinkMsg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "AssemblyInterface.pb.h"
// @@protoc_insertion_point(includes)

namespace edu {
namespace vanderbilt {
namespace isis {
namespace meta {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_MetaLinkMsg_2eproto();
void protobuf_AssignDesc_MetaLinkMsg_2eproto();
void protobuf_ShutdownFile_MetaLinkMsg_2eproto();

class Edit;
class Action;
class Interest;
class Alien;
class Payload;
class DatumType;
class Environment;
class Notice;
class ComponentManifestNode;

enum Edit_EditMode {
  Edit_EditMode_INTEREST = 1,
  Edit_EditMode_DISINTEREST = 2,
  Edit_EditMode_POST = 3,
  Edit_EditMode_NOTICE = 4
};
bool Edit_EditMode_IsValid(int value);
const Edit_EditMode Edit_EditMode_EditMode_MIN = Edit_EditMode_INTEREST;
const Edit_EditMode Edit_EditMode_EditMode_MAX = Edit_EditMode_NOTICE;
const int Edit_EditMode_EditMode_ARRAYSIZE = Edit_EditMode_EditMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* Edit_EditMode_descriptor();
inline const ::std::string& Edit_EditMode_Name(Edit_EditMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    Edit_EditMode_descriptor(), value);
}
inline bool Edit_EditMode_Parse(
    const ::std::string& name, Edit_EditMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Edit_EditMode>(
    Edit_EditMode_descriptor(), name, value);
}
enum Action_ActionMode {
  Action_ActionMode_INSERT = 1,
  Action_ActionMode_REPLACE = 2,
  Action_ActionMode_UPDATE = 3,
  Action_ActionMode_SELECT = 4,
  Action_ActionMode_CLEAR = 5,
  Action_ActionMode_SWITCH = 6,
  Action_ActionMode_UPDATE_CAD_COMPONENT = 7,
  Action_ActionMode_CREATE_CYPHY_COMPONENT = 8,
  Action_ActionMode_UPDATE_CYPHY_COMPONENT = 9,
  Action_ActionMode_CREATE_ANALYSIS_POINTS = 10,
  Action_ActionMode_ADD_COMPONENT_TO_CYPHY_DESIGN = 11,
  Action_ActionMode_SELECT_CYPHY_COMPONENT = 12,
  Action_ActionMode_REMOVE_CYPHY_DESIGN_COMPONENT = 13,
  Action_ActionMode_REQUEST_COMPONENT_LIST = 14,
  Action_ActionMode_RESYNC = 15,
  Action_ActionMode_ADD_CONNECTOR_TO_COMPONENT = 16,
  Action_ActionMode_CREATE_CYPHY_DESIGN = 17,
  Action_ActionMode_UPDATE_CYPHY_DESIGN = 18,
  Action_ActionMode_ADD_COMPONENT_TO_CAD_DESIGN = 19,
  Action_ActionMode_CONSTRAIN_COMPONENTS_CAD = 20,
  Action_ActionMode_CONNECT_COMPONENTS_CYPHY = 21
};
bool Action_ActionMode_IsValid(int value);
const Action_ActionMode Action_ActionMode_ActionMode_MIN = Action_ActionMode_INSERT;
const Action_ActionMode Action_ActionMode_ActionMode_MAX = Action_ActionMode_CONNECT_COMPONENTS_CYPHY;
const int Action_ActionMode_ActionMode_ARRAYSIZE = Action_ActionMode_ActionMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* Action_ActionMode_descriptor();
inline const ::std::string& Action_ActionMode_Name(Action_ActionMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    Action_ActionMode_descriptor(), value);
}
inline bool Action_ActionMode_Parse(
    const ::std::string& name, Action_ActionMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Action_ActionMode>(
    Action_ActionMode_descriptor(), name, value);
}
enum Alien_EncodingMode {
  Alien_EncodingMode_XML = 1,
  Alien_EncodingMode_JSON = 2
};
bool Alien_EncodingMode_IsValid(int value);
const Alien_EncodingMode Alien_EncodingMode_EncodingMode_MIN = Alien_EncodingMode_XML;
const Alien_EncodingMode Alien_EncodingMode_EncodingMode_MAX = Alien_EncodingMode_JSON;
const int Alien_EncodingMode_EncodingMode_ARRAYSIZE = Alien_EncodingMode_EncodingMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* Alien_EncodingMode_descriptor();
inline const ::std::string& Alien_EncodingMode_Name(Alien_EncodingMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    Alien_EncodingMode_descriptor(), value);
}
inline bool Alien_EncodingMode_Parse(
    const ::std::string& name, Alien_EncodingMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Alien_EncodingMode>(
    Alien_EncodingMode_descriptor(), name, value);
}
enum Notice_NoticeMode {
  Notice_NoticeMode_ACK = 0,
  Notice_NoticeMode_DONE = 1,
  Notice_NoticeMode_WARN = 3,
  Notice_NoticeMode_FAULT = 4,
  Notice_NoticeMode_FAIL = 6
};
bool Notice_NoticeMode_IsValid(int value);
const Notice_NoticeMode Notice_NoticeMode_NoticeMode_MIN = Notice_NoticeMode_ACK;
const Notice_NoticeMode Notice_NoticeMode_NoticeMode_MAX = Notice_NoticeMode_FAIL;
const int Notice_NoticeMode_NoticeMode_ARRAYSIZE = Notice_NoticeMode_NoticeMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* Notice_NoticeMode_descriptor();
inline const ::std::string& Notice_NoticeMode_Name(Notice_NoticeMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    Notice_NoticeMode_descriptor(), value);
}
inline bool Notice_NoticeMode_Parse(
    const ::std::string& name, Notice_NoticeMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Notice_NoticeMode>(
    Notice_NoticeMode_descriptor(), name, value);
}
enum ComponentManifestNode_NodeMode {
  ComponentManifestNode_NodeMode_FOLDER = 0,
  ComponentManifestNode_NodeMode_COMPONENT = 1
};
bool ComponentManifestNode_NodeMode_IsValid(int value);
const ComponentManifestNode_NodeMode ComponentManifestNode_NodeMode_NodeMode_MIN = ComponentManifestNode_NodeMode_FOLDER;
const ComponentManifestNode_NodeMode ComponentManifestNode_NodeMode_NodeMode_MAX = ComponentManifestNode_NodeMode_COMPONENT;
const int ComponentManifestNode_NodeMode_NodeMode_ARRAYSIZE = ComponentManifestNode_NodeMode_NodeMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ComponentManifestNode_NodeMode_descriptor();
inline const ::std::string& ComponentManifestNode_NodeMode_Name(ComponentManifestNode_NodeMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ComponentManifestNode_NodeMode_descriptor(), value);
}
inline bool ComponentManifestNode_NodeMode_Parse(
    const ::std::string& name, ComponentManifestNode_NodeMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ComponentManifestNode_NodeMode>(
    ComponentManifestNode_NodeMode_descriptor(), name, value);
}
// ===================================================================

class Edit : public ::google::protobuf::Message {
 public:
  Edit();
  virtual ~Edit();

  Edit(const Edit& from);

  inline Edit& operator=(const Edit& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Edit& default_instance();

  void Swap(Edit* other);

  // implements Message ----------------------------------------------

  Edit* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Edit& from);
  void MergeFrom(const Edit& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Edit_EditMode EditMode;
  static const EditMode INTEREST = Edit_EditMode_INTEREST;
  static const EditMode DISINTEREST = Edit_EditMode_DISINTEREST;
  static const EditMode POST = Edit_EditMode_POST;
  static const EditMode NOTICE = Edit_EditMode_NOTICE;
  static inline bool EditMode_IsValid(int value) {
    return Edit_EditMode_IsValid(value);
  }
  static const EditMode EditMode_MIN =
    Edit_EditMode_EditMode_MIN;
  static const EditMode EditMode_MAX =
    Edit_EditMode_EditMode_MAX;
  static const int EditMode_ARRAYSIZE =
    Edit_EditMode_EditMode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EditMode_descriptor() {
    return Edit_EditMode_descriptor();
  }
  static inline const ::std::string& EditMode_Name(EditMode value) {
    return Edit_EditMode_Name(value);
  }
  static inline bool EditMode_Parse(const ::std::string& name,
      EditMode* value) {
    return Edit_EditMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .edu.vanderbilt.isis.meta.Edit.EditMode mode = 1;
  inline int mode_size() const;
  inline void clear_mode();
  static const int kModeFieldNumber = 1;
  inline ::edu::vanderbilt::isis::meta::Edit_EditMode mode(int index) const;
  inline void set_mode(int index, ::edu::vanderbilt::isis::meta::Edit_EditMode value);
  inline void add_mode(::edu::vanderbilt::isis::meta::Edit_EditMode value);
  inline const ::google::protobuf::RepeatedField<int>& mode() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_mode();

  // optional .edu.vanderbilt.isis.meta.Edit.EditMode editMode = 2 [default = POST];
  inline bool has_editmode() const;
  inline void clear_editmode();
  static const int kEditModeFieldNumber = 2;
  inline ::edu::vanderbilt::isis::meta::Edit_EditMode editmode() const;
  inline void set_editmode(::edu::vanderbilt::isis::meta::Edit_EditMode value);

  // optional string guid = 5;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 5;
  inline const ::std::string& guid() const;
  inline void set_guid(const ::std::string& value);
  inline void set_guid(const char* value);
  inline void set_guid(const char* value, size_t size);
  inline ::std::string* mutable_guid();
  inline ::std::string* release_guid();
  inline void set_allocated_guid(::std::string* guid);

  // repeated string topic = 6;
  inline int topic_size() const;
  inline void clear_topic();
  static const int kTopicFieldNumber = 6;
  inline const ::std::string& topic(int index) const;
  inline ::std::string* mutable_topic(int index);
  inline void set_topic(int index, const ::std::string& value);
  inline void set_topic(int index, const char* value);
  inline void set_topic(int index, const char* value, size_t size);
  inline ::std::string* add_topic();
  inline void add_topic(const ::std::string& value);
  inline void add_topic(const char* value);
  inline void add_topic(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& topic() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_topic();

  // repeated string origin = 10;
  inline int origin_size() const;
  inline void clear_origin();
  static const int kOriginFieldNumber = 10;
  inline const ::std::string& origin(int index) const;
  inline ::std::string* mutable_origin(int index);
  inline void set_origin(int index, const ::std::string& value);
  inline void set_origin(int index, const char* value);
  inline void set_origin(int index, const char* value, size_t size);
  inline ::std::string* add_origin();
  inline void add_origin(const ::std::string& value);
  inline void add_origin(const char* value);
  inline void add_origin(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& origin() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_origin();

  // optional uint32 sequence = 11;
  inline bool has_sequence() const;
  inline void clear_sequence();
  static const int kSequenceFieldNumber = 11;
  inline ::google::protobuf::uint32 sequence() const;
  inline void set_sequence(::google::protobuf::uint32 value);

  // repeated .edu.vanderbilt.isis.meta.Notice notices = 20;
  inline int notices_size() const;
  inline void clear_notices();
  static const int kNoticesFieldNumber = 20;
  inline const ::edu::vanderbilt::isis::meta::Notice& notices(int index) const;
  inline ::edu::vanderbilt::isis::meta::Notice* mutable_notices(int index);
  inline ::edu::vanderbilt::isis::meta::Notice* add_notices();
  inline const ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::Notice >&
      notices() const;
  inline ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::Notice >*
      mutable_notices();

  // repeated .edu.vanderbilt.isis.meta.Action actions = 21;
  inline int actions_size() const;
  inline void clear_actions();
  static const int kActionsFieldNumber = 21;
  inline const ::edu::vanderbilt::isis::meta::Action& actions(int index) const;
  inline ::edu::vanderbilt::isis::meta::Action* mutable_actions(int index);
  inline ::edu::vanderbilt::isis::meta::Action* add_actions();
  inline const ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::Action >&
      actions() const;
  inline ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::Action >*
      mutable_actions();

  // @@protoc_insertion_point(class_scope:edu.vanderbilt.isis.meta.Edit)
 private:
  inline void set_has_editmode();
  inline void clear_has_editmode();
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_sequence();
  inline void clear_has_sequence();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField<int> mode_;
  ::std::string* guid_;
  ::google::protobuf::RepeatedPtrField< ::std::string> topic_;
  int editmode_;
  ::google::protobuf::uint32 sequence_;
  ::google::protobuf::RepeatedPtrField< ::std::string> origin_;
  ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::Notice > notices_;
  ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::Action > actions_;
  friend void  protobuf_AddDesc_MetaLinkMsg_2eproto();
  friend void protobuf_AssignDesc_MetaLinkMsg_2eproto();
  friend void protobuf_ShutdownFile_MetaLinkMsg_2eproto();

  void InitAsDefaultInstance();
  static Edit* default_instance_;
};
// -------------------------------------------------------------------

class Action : public ::google::protobuf::Message {
 public:
  Action();
  virtual ~Action();

  Action(const Action& from);

  inline Action& operator=(const Action& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Action& default_instance();

  void Swap(Action* other);

  // implements Message ----------------------------------------------

  Action* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Action& from);
  void MergeFrom(const Action& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Action_ActionMode ActionMode;
  static const ActionMode INSERT = Action_ActionMode_INSERT;
  static const ActionMode REPLACE = Action_ActionMode_REPLACE;
  static const ActionMode UPDATE = Action_ActionMode_UPDATE;
  static const ActionMode SELECT = Action_ActionMode_SELECT;
  static const ActionMode CLEAR = Action_ActionMode_CLEAR;
  static const ActionMode SWITCH = Action_ActionMode_SWITCH;
  static const ActionMode UPDATE_CAD_COMPONENT = Action_ActionMode_UPDATE_CAD_COMPONENT;
  static const ActionMode CREATE_CYPHY_COMPONENT = Action_ActionMode_CREATE_CYPHY_COMPONENT;
  static const ActionMode UPDATE_CYPHY_COMPONENT = Action_ActionMode_UPDATE_CYPHY_COMPONENT;
  static const ActionMode CREATE_ANALYSIS_POINTS = Action_ActionMode_CREATE_ANALYSIS_POINTS;
  static const ActionMode ADD_COMPONENT_TO_CYPHY_DESIGN = Action_ActionMode_ADD_COMPONENT_TO_CYPHY_DESIGN;
  static const ActionMode SELECT_CYPHY_COMPONENT = Action_ActionMode_SELECT_CYPHY_COMPONENT;
  static const ActionMode REMOVE_CYPHY_DESIGN_COMPONENT = Action_ActionMode_REMOVE_CYPHY_DESIGN_COMPONENT;
  static const ActionMode REQUEST_COMPONENT_LIST = Action_ActionMode_REQUEST_COMPONENT_LIST;
  static const ActionMode RESYNC = Action_ActionMode_RESYNC;
  static const ActionMode ADD_CONNECTOR_TO_COMPONENT = Action_ActionMode_ADD_CONNECTOR_TO_COMPONENT;
  static const ActionMode CREATE_CYPHY_DESIGN = Action_ActionMode_CREATE_CYPHY_DESIGN;
  static const ActionMode UPDATE_CYPHY_DESIGN = Action_ActionMode_UPDATE_CYPHY_DESIGN;
  static const ActionMode ADD_COMPONENT_TO_CAD_DESIGN = Action_ActionMode_ADD_COMPONENT_TO_CAD_DESIGN;
  static const ActionMode CONSTRAIN_COMPONENTS_CAD = Action_ActionMode_CONSTRAIN_COMPONENTS_CAD;
  static const ActionMode CONNECT_COMPONENTS_CYPHY = Action_ActionMode_CONNECT_COMPONENTS_CYPHY;
  static inline bool ActionMode_IsValid(int value) {
    return Action_ActionMode_IsValid(value);
  }
  static const ActionMode ActionMode_MIN =
    Action_ActionMode_ActionMode_MIN;
  static const ActionMode ActionMode_MAX =
    Action_ActionMode_ActionMode_MAX;
  static const int ActionMode_ARRAYSIZE =
    Action_ActionMode_ActionMode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ActionMode_descriptor() {
    return Action_ActionMode_descriptor();
  }
  static inline const ::std::string& ActionMode_Name(ActionMode value) {
    return Action_ActionMode_Name(value);
  }
  static inline bool ActionMode_Parse(const ::std::string& name,
      ActionMode* value) {
    return Action_ActionMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .edu.vanderbilt.isis.meta.Action.ActionMode actionMode = 1 [default = REPLACE];
  inline bool has_actionmode() const;
  inline void clear_actionmode();
  static const int kActionModeFieldNumber = 1;
  inline ::edu::vanderbilt::isis::meta::Action_ActionMode actionmode() const;
  inline void set_actionmode(::edu::vanderbilt::isis::meta::Action_ActionMode value);

  // optional string guid = 2;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 2;
  inline const ::std::string& guid() const;
  inline void set_guid(const ::std::string& value);
  inline void set_guid(const char* value);
  inline void set_guid(const char* value, size_t size);
  inline ::std::string* mutable_guid();
  inline ::std::string* release_guid();
  inline void set_allocated_guid(::std::string* guid);

  // optional .edu.vanderbilt.isis.meta.Alien alien = 3;
  inline bool has_alien() const;
  inline void clear_alien();
  static const int kAlienFieldNumber = 3;
  inline const ::edu::vanderbilt::isis::meta::Alien& alien() const;
  inline ::edu::vanderbilt::isis::meta::Alien* mutable_alien();
  inline ::edu::vanderbilt::isis::meta::Alien* release_alien();
  inline void set_allocated_alien(::edu::vanderbilt::isis::meta::Alien* alien);

  // optional .edu.vanderbilt.isis.meta.Payload payload = 4;
  inline bool has_payload() const;
  inline void clear_payload();
  static const int kPayloadFieldNumber = 4;
  inline const ::edu::vanderbilt::isis::meta::Payload& payload() const;
  inline ::edu::vanderbilt::isis::meta::Payload* mutable_payload();
  inline ::edu::vanderbilt::isis::meta::Payload* release_payload();
  inline void set_allocated_payload(::edu::vanderbilt::isis::meta::Payload* payload);

  // repeated .edu.vanderbilt.isis.meta.Environment environment = 5;
  inline int environment_size() const;
  inline void clear_environment();
  static const int kEnvironmentFieldNumber = 5;
  inline const ::edu::vanderbilt::isis::meta::Environment& environment(int index) const;
  inline ::edu::vanderbilt::isis::meta::Environment* mutable_environment(int index);
  inline ::edu::vanderbilt::isis::meta::Environment* add_environment();
  inline const ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::Environment >&
      environment() const;
  inline ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::Environment >*
      mutable_environment();

  // repeated .edu.vanderbilt.isis.meta.Notice notices = 6;
  inline int notices_size() const;
  inline void clear_notices();
  static const int kNoticesFieldNumber = 6;
  inline const ::edu::vanderbilt::isis::meta::Notice& notices(int index) const;
  inline ::edu::vanderbilt::isis::meta::Notice* mutable_notices(int index);
  inline ::edu::vanderbilt::isis::meta::Notice* add_notices();
  inline const ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::Notice >&
      notices() const;
  inline ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::Notice >*
      mutable_notices();

  // repeated .edu.vanderbilt.isis.meta.ComponentManifestNode manifest = 7;
  inline int manifest_size() const;
  inline void clear_manifest();
  static const int kManifestFieldNumber = 7;
  inline const ::edu::vanderbilt::isis::meta::ComponentManifestNode& manifest(int index) const;
  inline ::edu::vanderbilt::isis::meta::ComponentManifestNode* mutable_manifest(int index);
  inline ::edu::vanderbilt::isis::meta::ComponentManifestNode* add_manifest();
  inline const ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::ComponentManifestNode >&
      manifest() const;
  inline ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::ComponentManifestNode >*
      mutable_manifest();

  // optional string subjectID = 9;
  inline bool has_subjectid() const;
  inline void clear_subjectid();
  static const int kSubjectIDFieldNumber = 9;
  inline const ::std::string& subjectid() const;
  inline void set_subjectid(const ::std::string& value);
  inline void set_subjectid(const char* value);
  inline void set_subjectid(const char* value, size_t size);
  inline ::std::string* mutable_subjectid();
  inline ::std::string* release_subjectid();
  inline void set_allocated_subjectid(::std::string* subjectid);

  // @@protoc_insertion_point(class_scope:edu.vanderbilt.isis.meta.Action)
 private:
  inline void set_has_actionmode();
  inline void clear_has_actionmode();
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_alien();
  inline void clear_has_alien();
  inline void set_has_payload();
  inline void clear_has_payload();
  inline void set_has_subjectid();
  inline void clear_has_subjectid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* guid_;
  ::edu::vanderbilt::isis::meta::Alien* alien_;
  ::edu::vanderbilt::isis::meta::Payload* payload_;
  ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::Environment > environment_;
  ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::Notice > notices_;
  ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::ComponentManifestNode > manifest_;
  ::std::string* subjectid_;
  int actionmode_;
  friend void  protobuf_AddDesc_MetaLinkMsg_2eproto();
  friend void protobuf_AssignDesc_MetaLinkMsg_2eproto();
  friend void protobuf_ShutdownFile_MetaLinkMsg_2eproto();

  void InitAsDefaultInstance();
  static Action* default_instance_;
};
// -------------------------------------------------------------------

class Interest : public ::google::protobuf::Message {
 public:
  Interest();
  virtual ~Interest();

  Interest(const Interest& from);

  inline Interest& operator=(const Interest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Interest& default_instance();

  void Swap(Interest* other);

  // implements Message ----------------------------------------------

  Interest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Interest& from);
  void MergeFrom(const Interest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string topic = 1;
  inline int topic_size() const;
  inline void clear_topic();
  static const int kTopicFieldNumber = 1;
  inline const ::std::string& topic(int index) const;
  inline ::std::string* mutable_topic(int index);
  inline void set_topic(int index, const ::std::string& value);
  inline void set_topic(int index, const char* value);
  inline void set_topic(int index, const char* value, size_t size);
  inline ::std::string* add_topic();
  inline void add_topic(const ::std::string& value);
  inline void add_topic(const char* value);
  inline void add_topic(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& topic() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_topic();

  // repeated string uid = 2;
  inline int uid_size() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 2;
  inline const ::std::string& uid(int index) const;
  inline ::std::string* mutable_uid(int index);
  inline void set_uid(int index, const ::std::string& value);
  inline void set_uid(int index, const char* value);
  inline void set_uid(int index, const char* value, size_t size);
  inline ::std::string* add_uid();
  inline void add_uid(const ::std::string& value);
  inline void add_uid(const char* value);
  inline void add_uid(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& uid() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_uid();

  // @@protoc_insertion_point(class_scope:edu.vanderbilt.isis.meta.Interest)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> topic_;
  ::google::protobuf::RepeatedPtrField< ::std::string> uid_;
  friend void  protobuf_AddDesc_MetaLinkMsg_2eproto();
  friend void protobuf_AssignDesc_MetaLinkMsg_2eproto();
  friend void protobuf_ShutdownFile_MetaLinkMsg_2eproto();

  void InitAsDefaultInstance();
  static Interest* default_instance_;
};
// -------------------------------------------------------------------

class Alien : public ::google::protobuf::Message {
 public:
  Alien();
  virtual ~Alien();

  Alien(const Alien& from);

  inline Alien& operator=(const Alien& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Alien& default_instance();

  void Swap(Alien* other);

  // implements Message ----------------------------------------------

  Alien* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Alien& from);
  void MergeFrom(const Alien& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Alien_EncodingMode EncodingMode;
  static const EncodingMode XML = Alien_EncodingMode_XML;
  static const EncodingMode JSON = Alien_EncodingMode_JSON;
  static inline bool EncodingMode_IsValid(int value) {
    return Alien_EncodingMode_IsValid(value);
  }
  static const EncodingMode EncodingMode_MIN =
    Alien_EncodingMode_EncodingMode_MIN;
  static const EncodingMode EncodingMode_MAX =
    Alien_EncodingMode_EncodingMode_MAX;
  static const int EncodingMode_ARRAYSIZE =
    Alien_EncodingMode_EncodingMode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EncodingMode_descriptor() {
    return Alien_EncodingMode_descriptor();
  }
  static inline const ::std::string& EncodingMode_Name(EncodingMode value) {
    return Alien_EncodingMode_Name(value);
  }
  static inline bool EncodingMode_Parse(const ::std::string& name,
      EncodingMode* value) {
    return Alien_EncodingMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .edu.vanderbilt.isis.meta.Alien.EncodingMode encodingMode = 1 [default = XML];
  inline bool has_encodingmode() const;
  inline void clear_encodingmode();
  static const int kEncodingModeFieldNumber = 1;
  inline ::edu::vanderbilt::isis::meta::Alien_EncodingMode encodingmode() const;
  inline void set_encodingmode(::edu::vanderbilt::isis::meta::Alien_EncodingMode value);

  // required bytes encoded = 2;
  inline bool has_encoded() const;
  inline void clear_encoded();
  static const int kEncodedFieldNumber = 2;
  inline const ::std::string& encoded() const;
  inline void set_encoded(const ::std::string& value);
  inline void set_encoded(const char* value);
  inline void set_encoded(const void* value, size_t size);
  inline ::std::string* mutable_encoded();
  inline ::std::string* release_encoded();
  inline void set_allocated_encoded(::std::string* encoded);

  // @@protoc_insertion_point(class_scope:edu.vanderbilt.isis.meta.Alien)
 private:
  inline void set_has_encodingmode();
  inline void clear_has_encodingmode();
  inline void set_has_encoded();
  inline void clear_has_encoded();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* encoded_;
  int encodingmode_;
  friend void  protobuf_AddDesc_MetaLinkMsg_2eproto();
  friend void protobuf_AssignDesc_MetaLinkMsg_2eproto();
  friend void protobuf_ShutdownFile_MetaLinkMsg_2eproto();

  void InitAsDefaultInstance();
  static Alien* default_instance_;
};
// -------------------------------------------------------------------

class Payload : public ::google::protobuf::Message {
 public:
  Payload();
  virtual ~Payload();

  Payload(const Payload& from);

  inline Payload& operator=(const Payload& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Payload& default_instance();

  void Swap(Payload* other);

  // implements Message ----------------------------------------------

  Payload* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Payload& from);
  void MergeFrom(const Payload& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .edu.vanderbilt.isis.meta.AssembliesType assemblies = 1;
  inline bool has_assemblies() const;
  inline void clear_assemblies();
  static const int kAssembliesFieldNumber = 1;
  inline const ::edu::vanderbilt::isis::meta::AssembliesType& assemblies() const;
  inline ::edu::vanderbilt::isis::meta::AssembliesType* mutable_assemblies();
  inline ::edu::vanderbilt::isis::meta::AssembliesType* release_assemblies();
  inline void set_allocated_assemblies(::edu::vanderbilt::isis::meta::AssembliesType* assemblies);

  // repeated .edu.vanderbilt.isis.meta.CADComponentType components = 2;
  inline int components_size() const;
  inline void clear_components();
  static const int kComponentsFieldNumber = 2;
  inline const ::edu::vanderbilt::isis::meta::CADComponentType& components(int index) const;
  inline ::edu::vanderbilt::isis::meta::CADComponentType* mutable_components(int index);
  inline ::edu::vanderbilt::isis::meta::CADComponentType* add_components();
  inline const ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::CADComponentType >&
      components() const;
  inline ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::CADComponentType >*
      mutable_components();

  // repeated .edu.vanderbilt.isis.meta.ConstraintType constraints = 3;
  inline int constraints_size() const;
  inline void clear_constraints();
  static const int kConstraintsFieldNumber = 3;
  inline const ::edu::vanderbilt::isis::meta::ConstraintType& constraints(int index) const;
  inline ::edu::vanderbilt::isis::meta::ConstraintType* mutable_constraints(int index);
  inline ::edu::vanderbilt::isis::meta::ConstraintType* add_constraints();
  inline const ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::ConstraintType >&
      constraints() const;
  inline ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::ConstraintType >*
      mutable_constraints();

  // repeated .edu.vanderbilt.isis.meta.ParametricParametersType parameters = 4;
  inline int parameters_size() const;
  inline void clear_parameters();
  static const int kParametersFieldNumber = 4;
  inline const ::edu::vanderbilt::isis::meta::ParametricParametersType& parameters(int index) const;
  inline ::edu::vanderbilt::isis::meta::ParametricParametersType* mutable_parameters(int index);
  inline ::edu::vanderbilt::isis::meta::ParametricParametersType* add_parameters();
  inline const ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::ParametricParametersType >&
      parameters() const;
  inline ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::ParametricParametersType >*
      mutable_parameters();

  // repeated .edu.vanderbilt.isis.meta.DatumType datums = 5;
  inline int datums_size() const;
  inline void clear_datums();
  static const int kDatumsFieldNumber = 5;
  inline const ::edu::vanderbilt::isis::meta::DatumType& datums(int index) const;
  inline ::edu::vanderbilt::isis::meta::DatumType* mutable_datums(int index);
  inline ::edu::vanderbilt::isis::meta::DatumType* add_datums();
  inline const ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::DatumType >&
      datums() const;
  inline ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::DatumType >*
      mutable_datums();

  // repeated .edu.vanderbilt.isis.meta.ConnectorType connectors = 6;
  inline int connectors_size() const;
  inline void clear_connectors();
  static const int kConnectorsFieldNumber = 6;
  inline const ::edu::vanderbilt::isis::meta::ConnectorType& connectors(int index) const;
  inline ::edu::vanderbilt::isis::meta::ConnectorType* mutable_connectors(int index);
  inline ::edu::vanderbilt::isis::meta::ConnectorType* add_connectors();
  inline const ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::ConnectorType >&
      connectors() const;
  inline ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::ConnectorType >*
      mutable_connectors();

  // @@protoc_insertion_point(class_scope:edu.vanderbilt.isis.meta.Payload)
 private:
  inline void set_has_assemblies();
  inline void clear_has_assemblies();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::edu::vanderbilt::isis::meta::AssembliesType* assemblies_;
  ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::CADComponentType > components_;
  ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::ConstraintType > constraints_;
  ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::ParametricParametersType > parameters_;
  ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::DatumType > datums_;
  ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::ConnectorType > connectors_;
  friend void  protobuf_AddDesc_MetaLinkMsg_2eproto();
  friend void protobuf_AssignDesc_MetaLinkMsg_2eproto();
  friend void protobuf_ShutdownFile_MetaLinkMsg_2eproto();

  void InitAsDefaultInstance();
  static Payload* default_instance_;
};
// -------------------------------------------------------------------

class DatumType : public ::google::protobuf::Message {
 public:
  DatumType();
  virtual ~DatumType();

  DatumType(const DatumType& from);

  inline DatumType& operator=(const DatumType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DatumType& default_instance();

  void Swap(DatumType* other);

  // implements Message ----------------------------------------------

  DatumType* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DatumType& from);
  void MergeFrom(const DatumType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string componentId = 1;
  inline bool has_componentid() const;
  inline void clear_componentid();
  static const int kComponentIdFieldNumber = 1;
  inline const ::std::string& componentid() const;
  inline void set_componentid(const ::std::string& value);
  inline void set_componentid(const char* value);
  inline void set_componentid(const char* value, size_t size);
  inline ::std::string* mutable_componentid();
  inline ::std::string* release_componentid();
  inline void set_allocated_componentid(::std::string* componentid);

  // optional string type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:edu.vanderbilt.isis.meta.DatumType)
 private:
  inline void set_has_componentid();
  inline void clear_has_componentid();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* componentid_;
  ::std::string* type_;
  ::std::string* name_;
  friend void  protobuf_AddDesc_MetaLinkMsg_2eproto();
  friend void protobuf_AssignDesc_MetaLinkMsg_2eproto();
  friend void protobuf_ShutdownFile_MetaLinkMsg_2eproto();

  void InitAsDefaultInstance();
  static DatumType* default_instance_;
};
// -------------------------------------------------------------------

class Environment : public ::google::protobuf::Message {
 public:
  Environment();
  virtual ~Environment();

  Environment(const Environment& from);

  inline Environment& operator=(const Environment& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Environment& default_instance();

  void Swap(Environment* other);

  // implements Message ----------------------------------------------

  Environment* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Environment& from);
  void MergeFrom(const Environment& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated string value = 2;
  inline int value_size() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value(int index) const;
  inline ::std::string* mutable_value(int index);
  inline void set_value(int index, const ::std::string& value);
  inline void set_value(int index, const char* value);
  inline void set_value(int index, const char* value, size_t size);
  inline ::std::string* add_value();
  inline void add_value(const ::std::string& value);
  inline void add_value(const char* value);
  inline void add_value(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& value() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_value();

  // @@protoc_insertion_point(class_scope:edu.vanderbilt.isis.meta.Environment)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> value_;
  friend void  protobuf_AddDesc_MetaLinkMsg_2eproto();
  friend void protobuf_AssignDesc_MetaLinkMsg_2eproto();
  friend void protobuf_ShutdownFile_MetaLinkMsg_2eproto();

  void InitAsDefaultInstance();
  static Environment* default_instance_;
};
// -------------------------------------------------------------------

class Notice : public ::google::protobuf::Message {
 public:
  Notice();
  virtual ~Notice();

  Notice(const Notice& from);

  inline Notice& operator=(const Notice& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Notice& default_instance();

  void Swap(Notice* other);

  // implements Message ----------------------------------------------

  Notice* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Notice& from);
  void MergeFrom(const Notice& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Notice_NoticeMode NoticeMode;
  static const NoticeMode ACK = Notice_NoticeMode_ACK;
  static const NoticeMode DONE = Notice_NoticeMode_DONE;
  static const NoticeMode WARN = Notice_NoticeMode_WARN;
  static const NoticeMode FAULT = Notice_NoticeMode_FAULT;
  static const NoticeMode FAIL = Notice_NoticeMode_FAIL;
  static inline bool NoticeMode_IsValid(int value) {
    return Notice_NoticeMode_IsValid(value);
  }
  static const NoticeMode NoticeMode_MIN =
    Notice_NoticeMode_NoticeMode_MIN;
  static const NoticeMode NoticeMode_MAX =
    Notice_NoticeMode_NoticeMode_MAX;
  static const int NoticeMode_ARRAYSIZE =
    Notice_NoticeMode_NoticeMode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  NoticeMode_descriptor() {
    return Notice_NoticeMode_descriptor();
  }
  static inline const ::std::string& NoticeMode_Name(NoticeMode value) {
    return Notice_NoticeMode_Name(value);
  }
  static inline bool NoticeMode_Parse(const ::std::string& name,
      NoticeMode* value) {
    return Notice_NoticeMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .edu.vanderbilt.isis.meta.Notice.NoticeMode noticeMode = 1 [default = ACK];
  inline bool has_noticemode() const;
  inline void clear_noticemode();
  static const int kNoticeModeFieldNumber = 1;
  inline ::edu::vanderbilt::isis::meta::Notice_NoticeMode noticemode() const;
  inline void set_noticemode(::edu::vanderbilt::isis::meta::Notice_NoticeMode value);

  // optional string id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // optional string msg = 3;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 3;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // optional bytes code = 4;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 4;
  inline const ::std::string& code() const;
  inline void set_code(const ::std::string& value);
  inline void set_code(const char* value);
  inline void set_code(const void* value, size_t size);
  inline ::std::string* mutable_code();
  inline ::std::string* release_code();
  inline void set_allocated_code(::std::string* code);

  // @@protoc_insertion_point(class_scope:edu.vanderbilt.isis.meta.Notice)
 private:
  inline void set_has_noticemode();
  inline void clear_has_noticemode();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_msg();
  inline void clear_has_msg();
  inline void set_has_code();
  inline void clear_has_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* id_;
  ::std::string* msg_;
  ::std::string* code_;
  int noticemode_;
  friend void  protobuf_AddDesc_MetaLinkMsg_2eproto();
  friend void protobuf_AssignDesc_MetaLinkMsg_2eproto();
  friend void protobuf_ShutdownFile_MetaLinkMsg_2eproto();

  void InitAsDefaultInstance();
  static Notice* default_instance_;
};
// -------------------------------------------------------------------

class ComponentManifestNode : public ::google::protobuf::Message {
 public:
  ComponentManifestNode();
  virtual ~ComponentManifestNode();

  ComponentManifestNode(const ComponentManifestNode& from);

  inline ComponentManifestNode& operator=(const ComponentManifestNode& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ComponentManifestNode& default_instance();

  void Swap(ComponentManifestNode* other);

  // implements Message ----------------------------------------------

  ComponentManifestNode* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ComponentManifestNode& from);
  void MergeFrom(const ComponentManifestNode& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ComponentManifestNode_NodeMode NodeMode;
  static const NodeMode FOLDER = ComponentManifestNode_NodeMode_FOLDER;
  static const NodeMode COMPONENT = ComponentManifestNode_NodeMode_COMPONENT;
  static inline bool NodeMode_IsValid(int value) {
    return ComponentManifestNode_NodeMode_IsValid(value);
  }
  static const NodeMode NodeMode_MIN =
    ComponentManifestNode_NodeMode_NodeMode_MIN;
  static const NodeMode NodeMode_MAX =
    ComponentManifestNode_NodeMode_NodeMode_MAX;
  static const int NodeMode_ARRAYSIZE =
    ComponentManifestNode_NodeMode_NodeMode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  NodeMode_descriptor() {
    return ComponentManifestNode_NodeMode_descriptor();
  }
  static inline const ::std::string& NodeMode_Name(NodeMode value) {
    return ComponentManifestNode_NodeMode_Name(value);
  }
  static inline bool NodeMode_Parse(const ::std::string& name,
      NodeMode* value) {
    return ComponentManifestNode_NodeMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .edu.vanderbilt.isis.meta.ComponentManifestNode.NodeMode nodeMode = 1 [default = COMPONENT];
  inline bool has_nodemode() const;
  inline void clear_nodemode();
  static const int kNodeModeFieldNumber = 1;
  inline ::edu::vanderbilt::isis::meta::ComponentManifestNode_NodeMode nodemode() const;
  inline void set_nodemode(::edu::vanderbilt::isis::meta::ComponentManifestNode_NodeMode value);

  // optional string guid = 2;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 2;
  inline const ::std::string& guid() const;
  inline void set_guid(const ::std::string& value);
  inline void set_guid(const char* value);
  inline void set_guid(const char* value, size_t size);
  inline ::std::string* mutable_guid();
  inline ::std::string* release_guid();
  inline void set_allocated_guid(::std::string* guid);

  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string cyphyParentId = 4;
  inline bool has_cyphyparentid() const;
  inline void clear_cyphyparentid();
  static const int kCyphyParentIdFieldNumber = 4;
  inline const ::std::string& cyphyparentid() const;
  inline void set_cyphyparentid(const ::std::string& value);
  inline void set_cyphyparentid(const char* value);
  inline void set_cyphyparentid(const char* value, size_t size);
  inline ::std::string* mutable_cyphyparentid();
  inline ::std::string* release_cyphyparentid();
  inline void set_allocated_cyphyparentid(::std::string* cyphyparentid);

  // repeated string componentGroup = 5;
  inline int componentgroup_size() const;
  inline void clear_componentgroup();
  static const int kComponentGroupFieldNumber = 5;
  inline const ::std::string& componentgroup(int index) const;
  inline ::std::string* mutable_componentgroup(int index);
  inline void set_componentgroup(int index, const ::std::string& value);
  inline void set_componentgroup(int index, const char* value);
  inline void set_componentgroup(int index, const char* value, size_t size);
  inline ::std::string* add_componentgroup();
  inline void add_componentgroup(const ::std::string& value);
  inline void add_componentgroup(const char* value);
  inline void add_componentgroup(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& componentgroup() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_componentgroup();

  // @@protoc_insertion_point(class_scope:edu.vanderbilt.isis.meta.ComponentManifestNode)
 private:
  inline void set_has_nodemode();
  inline void clear_has_nodemode();
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_cyphyparentid();
  inline void clear_has_cyphyparentid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* guid_;
  ::std::string* name_;
  ::std::string* cyphyparentid_;
  ::google::protobuf::RepeatedPtrField< ::std::string> componentgroup_;
  int nodemode_;
  friend void  protobuf_AddDesc_MetaLinkMsg_2eproto();
  friend void protobuf_AssignDesc_MetaLinkMsg_2eproto();
  friend void protobuf_ShutdownFile_MetaLinkMsg_2eproto();

  void InitAsDefaultInstance();
  static ComponentManifestNode* default_instance_;
};
// ===================================================================


// ===================================================================

// Edit

// repeated .edu.vanderbilt.isis.meta.Edit.EditMode mode = 1;
inline int Edit::mode_size() const {
  return mode_.size();
}
inline void Edit::clear_mode() {
  mode_.Clear();
}
inline ::edu::vanderbilt::isis::meta::Edit_EditMode Edit::mode(int index) const {
  // @@protoc_insertion_point(field_get:edu.vanderbilt.isis.meta.Edit.mode)
  return static_cast< ::edu::vanderbilt::isis::meta::Edit_EditMode >(mode_.Get(index));
}
inline void Edit::set_mode(int index, ::edu::vanderbilt::isis::meta::Edit_EditMode value) {
  assert(::edu::vanderbilt::isis::meta::Edit_EditMode_IsValid(value));
  mode_.Set(index, value);
  // @@protoc_insertion_point(field_set:edu.vanderbilt.isis.meta.Edit.mode)
}
inline void Edit::add_mode(::edu::vanderbilt::isis::meta::Edit_EditMode value) {
  assert(::edu::vanderbilt::isis::meta::Edit_EditMode_IsValid(value));
  mode_.Add(value);
  // @@protoc_insertion_point(field_add:edu.vanderbilt.isis.meta.Edit.mode)
}
inline const ::google::protobuf::RepeatedField<int>&
Edit::mode() const {
  // @@protoc_insertion_point(field_list:edu.vanderbilt.isis.meta.Edit.mode)
  return mode_;
}
inline ::google::protobuf::RepeatedField<int>*
Edit::mutable_mode() {
  // @@protoc_insertion_point(field_mutable_list:edu.vanderbilt.isis.meta.Edit.mode)
  return &mode_;
}

// optional .edu.vanderbilt.isis.meta.Edit.EditMode editMode = 2 [default = POST];
inline bool Edit::has_editmode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Edit::set_has_editmode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Edit::clear_has_editmode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Edit::clear_editmode() {
  editmode_ = 3;
  clear_has_editmode();
}
inline ::edu::vanderbilt::isis::meta::Edit_EditMode Edit::editmode() const {
  // @@protoc_insertion_point(field_get:edu.vanderbilt.isis.meta.Edit.editMode)
  return static_cast< ::edu::vanderbilt::isis::meta::Edit_EditMode >(editmode_);
}
inline void Edit::set_editmode(::edu::vanderbilt::isis::meta::Edit_EditMode value) {
  assert(::edu::vanderbilt::isis::meta::Edit_EditMode_IsValid(value));
  set_has_editmode();
  editmode_ = value;
  // @@protoc_insertion_point(field_set:edu.vanderbilt.isis.meta.Edit.editMode)
}

// optional string guid = 5;
inline bool Edit::has_guid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Edit::set_has_guid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Edit::clear_has_guid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Edit::clear_guid() {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_->clear();
  }
  clear_has_guid();
}
inline const ::std::string& Edit::guid() const {
  // @@protoc_insertion_point(field_get:edu.vanderbilt.isis.meta.Edit.guid)
  return *guid_;
}
inline void Edit::set_guid(const ::std::string& value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
  // @@protoc_insertion_point(field_set:edu.vanderbilt.isis.meta.Edit.guid)
}
inline void Edit::set_guid(const char* value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
  // @@protoc_insertion_point(field_set_char:edu.vanderbilt.isis.meta.Edit.guid)
}
inline void Edit::set_guid(const char* value, size_t size) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:edu.vanderbilt.isis.meta.Edit.guid)
}
inline ::std::string* Edit::mutable_guid() {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:edu.vanderbilt.isis.meta.Edit.guid)
  return guid_;
}
inline ::std::string* Edit::release_guid() {
  clear_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = guid_;
    guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Edit::set_allocated_guid(::std::string* guid) {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guid_;
  }
  if (guid) {
    set_has_guid();
    guid_ = guid;
  } else {
    clear_has_guid();
    guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:edu.vanderbilt.isis.meta.Edit.guid)
}

// repeated string topic = 6;
inline int Edit::topic_size() const {
  return topic_.size();
}
inline void Edit::clear_topic() {
  topic_.Clear();
}
inline const ::std::string& Edit::topic(int index) const {
  // @@protoc_insertion_point(field_get:edu.vanderbilt.isis.meta.Edit.topic)
  return topic_.Get(index);
}
inline ::std::string* Edit::mutable_topic(int index) {
  // @@protoc_insertion_point(field_mutable:edu.vanderbilt.isis.meta.Edit.topic)
  return topic_.Mutable(index);
}
inline void Edit::set_topic(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:edu.vanderbilt.isis.meta.Edit.topic)
  topic_.Mutable(index)->assign(value);
}
inline void Edit::set_topic(int index, const char* value) {
  topic_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:edu.vanderbilt.isis.meta.Edit.topic)
}
inline void Edit::set_topic(int index, const char* value, size_t size) {
  topic_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:edu.vanderbilt.isis.meta.Edit.topic)
}
inline ::std::string* Edit::add_topic() {
  return topic_.Add();
}
inline void Edit::add_topic(const ::std::string& value) {
  topic_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:edu.vanderbilt.isis.meta.Edit.topic)
}
inline void Edit::add_topic(const char* value) {
  topic_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:edu.vanderbilt.isis.meta.Edit.topic)
}
inline void Edit::add_topic(const char* value, size_t size) {
  topic_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:edu.vanderbilt.isis.meta.Edit.topic)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Edit::topic() const {
  // @@protoc_insertion_point(field_list:edu.vanderbilt.isis.meta.Edit.topic)
  return topic_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Edit::mutable_topic() {
  // @@protoc_insertion_point(field_mutable_list:edu.vanderbilt.isis.meta.Edit.topic)
  return &topic_;
}

// repeated string origin = 10;
inline int Edit::origin_size() const {
  return origin_.size();
}
inline void Edit::clear_origin() {
  origin_.Clear();
}
inline const ::std::string& Edit::origin(int index) const {
  // @@protoc_insertion_point(field_get:edu.vanderbilt.isis.meta.Edit.origin)
  return origin_.Get(index);
}
inline ::std::string* Edit::mutable_origin(int index) {
  // @@protoc_insertion_point(field_mutable:edu.vanderbilt.isis.meta.Edit.origin)
  return origin_.Mutable(index);
}
inline void Edit::set_origin(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:edu.vanderbilt.isis.meta.Edit.origin)
  origin_.Mutable(index)->assign(value);
}
inline void Edit::set_origin(int index, const char* value) {
  origin_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:edu.vanderbilt.isis.meta.Edit.origin)
}
inline void Edit::set_origin(int index, const char* value, size_t size) {
  origin_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:edu.vanderbilt.isis.meta.Edit.origin)
}
inline ::std::string* Edit::add_origin() {
  return origin_.Add();
}
inline void Edit::add_origin(const ::std::string& value) {
  origin_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:edu.vanderbilt.isis.meta.Edit.origin)
}
inline void Edit::add_origin(const char* value) {
  origin_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:edu.vanderbilt.isis.meta.Edit.origin)
}
inline void Edit::add_origin(const char* value, size_t size) {
  origin_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:edu.vanderbilt.isis.meta.Edit.origin)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Edit::origin() const {
  // @@protoc_insertion_point(field_list:edu.vanderbilt.isis.meta.Edit.origin)
  return origin_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Edit::mutable_origin() {
  // @@protoc_insertion_point(field_mutable_list:edu.vanderbilt.isis.meta.Edit.origin)
  return &origin_;
}

// optional uint32 sequence = 11;
inline bool Edit::has_sequence() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Edit::set_has_sequence() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Edit::clear_has_sequence() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Edit::clear_sequence() {
  sequence_ = 0u;
  clear_has_sequence();
}
inline ::google::protobuf::uint32 Edit::sequence() const {
  // @@protoc_insertion_point(field_get:edu.vanderbilt.isis.meta.Edit.sequence)
  return sequence_;
}
inline void Edit::set_sequence(::google::protobuf::uint32 value) {
  set_has_sequence();
  sequence_ = value;
  // @@protoc_insertion_point(field_set:edu.vanderbilt.isis.meta.Edit.sequence)
}

// repeated .edu.vanderbilt.isis.meta.Notice notices = 20;
inline int Edit::notices_size() const {
  return notices_.size();
}
inline void Edit::clear_notices() {
  notices_.Clear();
}
inline const ::edu::vanderbilt::isis::meta::Notice& Edit::notices(int index) const {
  // @@protoc_insertion_point(field_get:edu.vanderbilt.isis.meta.Edit.notices)
  return notices_.Get(index);
}
inline ::edu::vanderbilt::isis::meta::Notice* Edit::mutable_notices(int index) {
  // @@protoc_insertion_point(field_mutable:edu.vanderbilt.isis.meta.Edit.notices)
  return notices_.Mutable(index);
}
inline ::edu::vanderbilt::isis::meta::Notice* Edit::add_notices() {
  // @@protoc_insertion_point(field_add:edu.vanderbilt.isis.meta.Edit.notices)
  return notices_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::Notice >&
Edit::notices() const {
  // @@protoc_insertion_point(field_list:edu.vanderbilt.isis.meta.Edit.notices)
  return notices_;
}
inline ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::Notice >*
Edit::mutable_notices() {
  // @@protoc_insertion_point(field_mutable_list:edu.vanderbilt.isis.meta.Edit.notices)
  return &notices_;
}

// repeated .edu.vanderbilt.isis.meta.Action actions = 21;
inline int Edit::actions_size() const {
  return actions_.size();
}
inline void Edit::clear_actions() {
  actions_.Clear();
}
inline const ::edu::vanderbilt::isis::meta::Action& Edit::actions(int index) const {
  // @@protoc_insertion_point(field_get:edu.vanderbilt.isis.meta.Edit.actions)
  return actions_.Get(index);
}
inline ::edu::vanderbilt::isis::meta::Action* Edit::mutable_actions(int index) {
  // @@protoc_insertion_point(field_mutable:edu.vanderbilt.isis.meta.Edit.actions)
  return actions_.Mutable(index);
}
inline ::edu::vanderbilt::isis::meta::Action* Edit::add_actions() {
  // @@protoc_insertion_point(field_add:edu.vanderbilt.isis.meta.Edit.actions)
  return actions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::Action >&
Edit::actions() const {
  // @@protoc_insertion_point(field_list:edu.vanderbilt.isis.meta.Edit.actions)
  return actions_;
}
inline ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::Action >*
Edit::mutable_actions() {
  // @@protoc_insertion_point(field_mutable_list:edu.vanderbilt.isis.meta.Edit.actions)
  return &actions_;
}

// -------------------------------------------------------------------

// Action

// required .edu.vanderbilt.isis.meta.Action.ActionMode actionMode = 1 [default = REPLACE];
inline bool Action::has_actionmode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Action::set_has_actionmode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Action::clear_has_actionmode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Action::clear_actionmode() {
  actionmode_ = 2;
  clear_has_actionmode();
}
inline ::edu::vanderbilt::isis::meta::Action_ActionMode Action::actionmode() const {
  // @@protoc_insertion_point(field_get:edu.vanderbilt.isis.meta.Action.actionMode)
  return static_cast< ::edu::vanderbilt::isis::meta::Action_ActionMode >(actionmode_);
}
inline void Action::set_actionmode(::edu::vanderbilt::isis::meta::Action_ActionMode value) {
  assert(::edu::vanderbilt::isis::meta::Action_ActionMode_IsValid(value));
  set_has_actionmode();
  actionmode_ = value;
  // @@protoc_insertion_point(field_set:edu.vanderbilt.isis.meta.Action.actionMode)
}

// optional string guid = 2;
inline bool Action::has_guid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Action::set_has_guid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Action::clear_has_guid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Action::clear_guid() {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_->clear();
  }
  clear_has_guid();
}
inline const ::std::string& Action::guid() const {
  // @@protoc_insertion_point(field_get:edu.vanderbilt.isis.meta.Action.guid)
  return *guid_;
}
inline void Action::set_guid(const ::std::string& value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
  // @@protoc_insertion_point(field_set:edu.vanderbilt.isis.meta.Action.guid)
}
inline void Action::set_guid(const char* value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
  // @@protoc_insertion_point(field_set_char:edu.vanderbilt.isis.meta.Action.guid)
}
inline void Action::set_guid(const char* value, size_t size) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:edu.vanderbilt.isis.meta.Action.guid)
}
inline ::std::string* Action::mutable_guid() {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:edu.vanderbilt.isis.meta.Action.guid)
  return guid_;
}
inline ::std::string* Action::release_guid() {
  clear_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = guid_;
    guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Action::set_allocated_guid(::std::string* guid) {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guid_;
  }
  if (guid) {
    set_has_guid();
    guid_ = guid;
  } else {
    clear_has_guid();
    guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:edu.vanderbilt.isis.meta.Action.guid)
}

// optional .edu.vanderbilt.isis.meta.Alien alien = 3;
inline bool Action::has_alien() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Action::set_has_alien() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Action::clear_has_alien() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Action::clear_alien() {
  if (alien_ != NULL) alien_->::edu::vanderbilt::isis::meta::Alien::Clear();
  clear_has_alien();
}
inline const ::edu::vanderbilt::isis::meta::Alien& Action::alien() const {
  // @@protoc_insertion_point(field_get:edu.vanderbilt.isis.meta.Action.alien)
  return alien_ != NULL ? *alien_ : *default_instance_->alien_;
}
inline ::edu::vanderbilt::isis::meta::Alien* Action::mutable_alien() {
  set_has_alien();
  if (alien_ == NULL) alien_ = new ::edu::vanderbilt::isis::meta::Alien;
  // @@protoc_insertion_point(field_mutable:edu.vanderbilt.isis.meta.Action.alien)
  return alien_;
}
inline ::edu::vanderbilt::isis::meta::Alien* Action::release_alien() {
  clear_has_alien();
  ::edu::vanderbilt::isis::meta::Alien* temp = alien_;
  alien_ = NULL;
  return temp;
}
inline void Action::set_allocated_alien(::edu::vanderbilt::isis::meta::Alien* alien) {
  delete alien_;
  alien_ = alien;
  if (alien) {
    set_has_alien();
  } else {
    clear_has_alien();
  }
  // @@protoc_insertion_point(field_set_allocated:edu.vanderbilt.isis.meta.Action.alien)
}

// optional .edu.vanderbilt.isis.meta.Payload payload = 4;
inline bool Action::has_payload() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Action::set_has_payload() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Action::clear_has_payload() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Action::clear_payload() {
  if (payload_ != NULL) payload_->::edu::vanderbilt::isis::meta::Payload::Clear();
  clear_has_payload();
}
inline const ::edu::vanderbilt::isis::meta::Payload& Action::payload() const {
  // @@protoc_insertion_point(field_get:edu.vanderbilt.isis.meta.Action.payload)
  return payload_ != NULL ? *payload_ : *default_instance_->payload_;
}
inline ::edu::vanderbilt::isis::meta::Payload* Action::mutable_payload() {
  set_has_payload();
  if (payload_ == NULL) payload_ = new ::edu::vanderbilt::isis::meta::Payload;
  // @@protoc_insertion_point(field_mutable:edu.vanderbilt.isis.meta.Action.payload)
  return payload_;
}
inline ::edu::vanderbilt::isis::meta::Payload* Action::release_payload() {
  clear_has_payload();
  ::edu::vanderbilt::isis::meta::Payload* temp = payload_;
  payload_ = NULL;
  return temp;
}
inline void Action::set_allocated_payload(::edu::vanderbilt::isis::meta::Payload* payload) {
  delete payload_;
  payload_ = payload;
  if (payload) {
    set_has_payload();
  } else {
    clear_has_payload();
  }
  // @@protoc_insertion_point(field_set_allocated:edu.vanderbilt.isis.meta.Action.payload)
}

// repeated .edu.vanderbilt.isis.meta.Environment environment = 5;
inline int Action::environment_size() const {
  return environment_.size();
}
inline void Action::clear_environment() {
  environment_.Clear();
}
inline const ::edu::vanderbilt::isis::meta::Environment& Action::environment(int index) const {
  // @@protoc_insertion_point(field_get:edu.vanderbilt.isis.meta.Action.environment)
  return environment_.Get(index);
}
inline ::edu::vanderbilt::isis::meta::Environment* Action::mutable_environment(int index) {
  // @@protoc_insertion_point(field_mutable:edu.vanderbilt.isis.meta.Action.environment)
  return environment_.Mutable(index);
}
inline ::edu::vanderbilt::isis::meta::Environment* Action::add_environment() {
  // @@protoc_insertion_point(field_add:edu.vanderbilt.isis.meta.Action.environment)
  return environment_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::Environment >&
Action::environment() const {
  // @@protoc_insertion_point(field_list:edu.vanderbilt.isis.meta.Action.environment)
  return environment_;
}
inline ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::Environment >*
Action::mutable_environment() {
  // @@protoc_insertion_point(field_mutable_list:edu.vanderbilt.isis.meta.Action.environment)
  return &environment_;
}

// repeated .edu.vanderbilt.isis.meta.Notice notices = 6;
inline int Action::notices_size() const {
  return notices_.size();
}
inline void Action::clear_notices() {
  notices_.Clear();
}
inline const ::edu::vanderbilt::isis::meta::Notice& Action::notices(int index) const {
  // @@protoc_insertion_point(field_get:edu.vanderbilt.isis.meta.Action.notices)
  return notices_.Get(index);
}
inline ::edu::vanderbilt::isis::meta::Notice* Action::mutable_notices(int index) {
  // @@protoc_insertion_point(field_mutable:edu.vanderbilt.isis.meta.Action.notices)
  return notices_.Mutable(index);
}
inline ::edu::vanderbilt::isis::meta::Notice* Action::add_notices() {
  // @@protoc_insertion_point(field_add:edu.vanderbilt.isis.meta.Action.notices)
  return notices_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::Notice >&
Action::notices() const {
  // @@protoc_insertion_point(field_list:edu.vanderbilt.isis.meta.Action.notices)
  return notices_;
}
inline ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::Notice >*
Action::mutable_notices() {
  // @@protoc_insertion_point(field_mutable_list:edu.vanderbilt.isis.meta.Action.notices)
  return &notices_;
}

// repeated .edu.vanderbilt.isis.meta.ComponentManifestNode manifest = 7;
inline int Action::manifest_size() const {
  return manifest_.size();
}
inline void Action::clear_manifest() {
  manifest_.Clear();
}
inline const ::edu::vanderbilt::isis::meta::ComponentManifestNode& Action::manifest(int index) const {
  // @@protoc_insertion_point(field_get:edu.vanderbilt.isis.meta.Action.manifest)
  return manifest_.Get(index);
}
inline ::edu::vanderbilt::isis::meta::ComponentManifestNode* Action::mutable_manifest(int index) {
  // @@protoc_insertion_point(field_mutable:edu.vanderbilt.isis.meta.Action.manifest)
  return manifest_.Mutable(index);
}
inline ::edu::vanderbilt::isis::meta::ComponentManifestNode* Action::add_manifest() {
  // @@protoc_insertion_point(field_add:edu.vanderbilt.isis.meta.Action.manifest)
  return manifest_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::ComponentManifestNode >&
Action::manifest() const {
  // @@protoc_insertion_point(field_list:edu.vanderbilt.isis.meta.Action.manifest)
  return manifest_;
}
inline ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::ComponentManifestNode >*
Action::mutable_manifest() {
  // @@protoc_insertion_point(field_mutable_list:edu.vanderbilt.isis.meta.Action.manifest)
  return &manifest_;
}

// optional string subjectID = 9;
inline bool Action::has_subjectid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Action::set_has_subjectid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Action::clear_has_subjectid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Action::clear_subjectid() {
  if (subjectid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    subjectid_->clear();
  }
  clear_has_subjectid();
}
inline const ::std::string& Action::subjectid() const {
  // @@protoc_insertion_point(field_get:edu.vanderbilt.isis.meta.Action.subjectID)
  return *subjectid_;
}
inline void Action::set_subjectid(const ::std::string& value) {
  set_has_subjectid();
  if (subjectid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    subjectid_ = new ::std::string;
  }
  subjectid_->assign(value);
  // @@protoc_insertion_point(field_set:edu.vanderbilt.isis.meta.Action.subjectID)
}
inline void Action::set_subjectid(const char* value) {
  set_has_subjectid();
  if (subjectid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    subjectid_ = new ::std::string;
  }
  subjectid_->assign(value);
  // @@protoc_insertion_point(field_set_char:edu.vanderbilt.isis.meta.Action.subjectID)
}
inline void Action::set_subjectid(const char* value, size_t size) {
  set_has_subjectid();
  if (subjectid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    subjectid_ = new ::std::string;
  }
  subjectid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:edu.vanderbilt.isis.meta.Action.subjectID)
}
inline ::std::string* Action::mutable_subjectid() {
  set_has_subjectid();
  if (subjectid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    subjectid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:edu.vanderbilt.isis.meta.Action.subjectID)
  return subjectid_;
}
inline ::std::string* Action::release_subjectid() {
  clear_has_subjectid();
  if (subjectid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = subjectid_;
    subjectid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Action::set_allocated_subjectid(::std::string* subjectid) {
  if (subjectid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete subjectid_;
  }
  if (subjectid) {
    set_has_subjectid();
    subjectid_ = subjectid;
  } else {
    clear_has_subjectid();
    subjectid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:edu.vanderbilt.isis.meta.Action.subjectID)
}

// -------------------------------------------------------------------

// Interest

// repeated string topic = 1;
inline int Interest::topic_size() const {
  return topic_.size();
}
inline void Interest::clear_topic() {
  topic_.Clear();
}
inline const ::std::string& Interest::topic(int index) const {
  // @@protoc_insertion_point(field_get:edu.vanderbilt.isis.meta.Interest.topic)
  return topic_.Get(index);
}
inline ::std::string* Interest::mutable_topic(int index) {
  // @@protoc_insertion_point(field_mutable:edu.vanderbilt.isis.meta.Interest.topic)
  return topic_.Mutable(index);
}
inline void Interest::set_topic(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:edu.vanderbilt.isis.meta.Interest.topic)
  topic_.Mutable(index)->assign(value);
}
inline void Interest::set_topic(int index, const char* value) {
  topic_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:edu.vanderbilt.isis.meta.Interest.topic)
}
inline void Interest::set_topic(int index, const char* value, size_t size) {
  topic_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:edu.vanderbilt.isis.meta.Interest.topic)
}
inline ::std::string* Interest::add_topic() {
  return topic_.Add();
}
inline void Interest::add_topic(const ::std::string& value) {
  topic_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:edu.vanderbilt.isis.meta.Interest.topic)
}
inline void Interest::add_topic(const char* value) {
  topic_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:edu.vanderbilt.isis.meta.Interest.topic)
}
inline void Interest::add_topic(const char* value, size_t size) {
  topic_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:edu.vanderbilt.isis.meta.Interest.topic)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Interest::topic() const {
  // @@protoc_insertion_point(field_list:edu.vanderbilt.isis.meta.Interest.topic)
  return topic_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Interest::mutable_topic() {
  // @@protoc_insertion_point(field_mutable_list:edu.vanderbilt.isis.meta.Interest.topic)
  return &topic_;
}

// repeated string uid = 2;
inline int Interest::uid_size() const {
  return uid_.size();
}
inline void Interest::clear_uid() {
  uid_.Clear();
}
inline const ::std::string& Interest::uid(int index) const {
  // @@protoc_insertion_point(field_get:edu.vanderbilt.isis.meta.Interest.uid)
  return uid_.Get(index);
}
inline ::std::string* Interest::mutable_uid(int index) {
  // @@protoc_insertion_point(field_mutable:edu.vanderbilt.isis.meta.Interest.uid)
  return uid_.Mutable(index);
}
inline void Interest::set_uid(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:edu.vanderbilt.isis.meta.Interest.uid)
  uid_.Mutable(index)->assign(value);
}
inline void Interest::set_uid(int index, const char* value) {
  uid_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:edu.vanderbilt.isis.meta.Interest.uid)
}
inline void Interest::set_uid(int index, const char* value, size_t size) {
  uid_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:edu.vanderbilt.isis.meta.Interest.uid)
}
inline ::std::string* Interest::add_uid() {
  return uid_.Add();
}
inline void Interest::add_uid(const ::std::string& value) {
  uid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:edu.vanderbilt.isis.meta.Interest.uid)
}
inline void Interest::add_uid(const char* value) {
  uid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:edu.vanderbilt.isis.meta.Interest.uid)
}
inline void Interest::add_uid(const char* value, size_t size) {
  uid_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:edu.vanderbilt.isis.meta.Interest.uid)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Interest::uid() const {
  // @@protoc_insertion_point(field_list:edu.vanderbilt.isis.meta.Interest.uid)
  return uid_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Interest::mutable_uid() {
  // @@protoc_insertion_point(field_mutable_list:edu.vanderbilt.isis.meta.Interest.uid)
  return &uid_;
}

// -------------------------------------------------------------------

// Alien

// required .edu.vanderbilt.isis.meta.Alien.EncodingMode encodingMode = 1 [default = XML];
inline bool Alien::has_encodingmode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Alien::set_has_encodingmode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Alien::clear_has_encodingmode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Alien::clear_encodingmode() {
  encodingmode_ = 1;
  clear_has_encodingmode();
}
inline ::edu::vanderbilt::isis::meta::Alien_EncodingMode Alien::encodingmode() const {
  // @@protoc_insertion_point(field_get:edu.vanderbilt.isis.meta.Alien.encodingMode)
  return static_cast< ::edu::vanderbilt::isis::meta::Alien_EncodingMode >(encodingmode_);
}
inline void Alien::set_encodingmode(::edu::vanderbilt::isis::meta::Alien_EncodingMode value) {
  assert(::edu::vanderbilt::isis::meta::Alien_EncodingMode_IsValid(value));
  set_has_encodingmode();
  encodingmode_ = value;
  // @@protoc_insertion_point(field_set:edu.vanderbilt.isis.meta.Alien.encodingMode)
}

// required bytes encoded = 2;
inline bool Alien::has_encoded() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Alien::set_has_encoded() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Alien::clear_has_encoded() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Alien::clear_encoded() {
  if (encoded_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    encoded_->clear();
  }
  clear_has_encoded();
}
inline const ::std::string& Alien::encoded() const {
  // @@protoc_insertion_point(field_get:edu.vanderbilt.isis.meta.Alien.encoded)
  return *encoded_;
}
inline void Alien::set_encoded(const ::std::string& value) {
  set_has_encoded();
  if (encoded_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    encoded_ = new ::std::string;
  }
  encoded_->assign(value);
  // @@protoc_insertion_point(field_set:edu.vanderbilt.isis.meta.Alien.encoded)
}
inline void Alien::set_encoded(const char* value) {
  set_has_encoded();
  if (encoded_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    encoded_ = new ::std::string;
  }
  encoded_->assign(value);
  // @@protoc_insertion_point(field_set_char:edu.vanderbilt.isis.meta.Alien.encoded)
}
inline void Alien::set_encoded(const void* value, size_t size) {
  set_has_encoded();
  if (encoded_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    encoded_ = new ::std::string;
  }
  encoded_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:edu.vanderbilt.isis.meta.Alien.encoded)
}
inline ::std::string* Alien::mutable_encoded() {
  set_has_encoded();
  if (encoded_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    encoded_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:edu.vanderbilt.isis.meta.Alien.encoded)
  return encoded_;
}
inline ::std::string* Alien::release_encoded() {
  clear_has_encoded();
  if (encoded_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = encoded_;
    encoded_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Alien::set_allocated_encoded(::std::string* encoded) {
  if (encoded_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete encoded_;
  }
  if (encoded) {
    set_has_encoded();
    encoded_ = encoded;
  } else {
    clear_has_encoded();
    encoded_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:edu.vanderbilt.isis.meta.Alien.encoded)
}

// -------------------------------------------------------------------

// Payload

// optional .edu.vanderbilt.isis.meta.AssembliesType assemblies = 1;
inline bool Payload::has_assemblies() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Payload::set_has_assemblies() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Payload::clear_has_assemblies() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Payload::clear_assemblies() {
  if (assemblies_ != NULL) assemblies_->::edu::vanderbilt::isis::meta::AssembliesType::Clear();
  clear_has_assemblies();
}
inline const ::edu::vanderbilt::isis::meta::AssembliesType& Payload::assemblies() const {
  // @@protoc_insertion_point(field_get:edu.vanderbilt.isis.meta.Payload.assemblies)
  return assemblies_ != NULL ? *assemblies_ : *default_instance_->assemblies_;
}
inline ::edu::vanderbilt::isis::meta::AssembliesType* Payload::mutable_assemblies() {
  set_has_assemblies();
  if (assemblies_ == NULL) assemblies_ = new ::edu::vanderbilt::isis::meta::AssembliesType;
  // @@protoc_insertion_point(field_mutable:edu.vanderbilt.isis.meta.Payload.assemblies)
  return assemblies_;
}
inline ::edu::vanderbilt::isis::meta::AssembliesType* Payload::release_assemblies() {
  clear_has_assemblies();
  ::edu::vanderbilt::isis::meta::AssembliesType* temp = assemblies_;
  assemblies_ = NULL;
  return temp;
}
inline void Payload::set_allocated_assemblies(::edu::vanderbilt::isis::meta::AssembliesType* assemblies) {
  delete assemblies_;
  assemblies_ = assemblies;
  if (assemblies) {
    set_has_assemblies();
  } else {
    clear_has_assemblies();
  }
  // @@protoc_insertion_point(field_set_allocated:edu.vanderbilt.isis.meta.Payload.assemblies)
}

// repeated .edu.vanderbilt.isis.meta.CADComponentType components = 2;
inline int Payload::components_size() const {
  return components_.size();
}
inline void Payload::clear_components() {
  components_.Clear();
}
inline const ::edu::vanderbilt::isis::meta::CADComponentType& Payload::components(int index) const {
  // @@protoc_insertion_point(field_get:edu.vanderbilt.isis.meta.Payload.components)
  return components_.Get(index);
}
inline ::edu::vanderbilt::isis::meta::CADComponentType* Payload::mutable_components(int index) {
  // @@protoc_insertion_point(field_mutable:edu.vanderbilt.isis.meta.Payload.components)
  return components_.Mutable(index);
}
inline ::edu::vanderbilt::isis::meta::CADComponentType* Payload::add_components() {
  // @@protoc_insertion_point(field_add:edu.vanderbilt.isis.meta.Payload.components)
  return components_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::CADComponentType >&
Payload::components() const {
  // @@protoc_insertion_point(field_list:edu.vanderbilt.isis.meta.Payload.components)
  return components_;
}
inline ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::CADComponentType >*
Payload::mutable_components() {
  // @@protoc_insertion_point(field_mutable_list:edu.vanderbilt.isis.meta.Payload.components)
  return &components_;
}

// repeated .edu.vanderbilt.isis.meta.ConstraintType constraints = 3;
inline int Payload::constraints_size() const {
  return constraints_.size();
}
inline void Payload::clear_constraints() {
  constraints_.Clear();
}
inline const ::edu::vanderbilt::isis::meta::ConstraintType& Payload::constraints(int index) const {
  // @@protoc_insertion_point(field_get:edu.vanderbilt.isis.meta.Payload.constraints)
  return constraints_.Get(index);
}
inline ::edu::vanderbilt::isis::meta::ConstraintType* Payload::mutable_constraints(int index) {
  // @@protoc_insertion_point(field_mutable:edu.vanderbilt.isis.meta.Payload.constraints)
  return constraints_.Mutable(index);
}
inline ::edu::vanderbilt::isis::meta::ConstraintType* Payload::add_constraints() {
  // @@protoc_insertion_point(field_add:edu.vanderbilt.isis.meta.Payload.constraints)
  return constraints_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::ConstraintType >&
Payload::constraints() const {
  // @@protoc_insertion_point(field_list:edu.vanderbilt.isis.meta.Payload.constraints)
  return constraints_;
}
inline ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::ConstraintType >*
Payload::mutable_constraints() {
  // @@protoc_insertion_point(field_mutable_list:edu.vanderbilt.isis.meta.Payload.constraints)
  return &constraints_;
}

// repeated .edu.vanderbilt.isis.meta.ParametricParametersType parameters = 4;
inline int Payload::parameters_size() const {
  return parameters_.size();
}
inline void Payload::clear_parameters() {
  parameters_.Clear();
}
inline const ::edu::vanderbilt::isis::meta::ParametricParametersType& Payload::parameters(int index) const {
  // @@protoc_insertion_point(field_get:edu.vanderbilt.isis.meta.Payload.parameters)
  return parameters_.Get(index);
}
inline ::edu::vanderbilt::isis::meta::ParametricParametersType* Payload::mutable_parameters(int index) {
  // @@protoc_insertion_point(field_mutable:edu.vanderbilt.isis.meta.Payload.parameters)
  return parameters_.Mutable(index);
}
inline ::edu::vanderbilt::isis::meta::ParametricParametersType* Payload::add_parameters() {
  // @@protoc_insertion_point(field_add:edu.vanderbilt.isis.meta.Payload.parameters)
  return parameters_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::ParametricParametersType >&
Payload::parameters() const {
  // @@protoc_insertion_point(field_list:edu.vanderbilt.isis.meta.Payload.parameters)
  return parameters_;
}
inline ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::ParametricParametersType >*
Payload::mutable_parameters() {
  // @@protoc_insertion_point(field_mutable_list:edu.vanderbilt.isis.meta.Payload.parameters)
  return &parameters_;
}

// repeated .edu.vanderbilt.isis.meta.DatumType datums = 5;
inline int Payload::datums_size() const {
  return datums_.size();
}
inline void Payload::clear_datums() {
  datums_.Clear();
}
inline const ::edu::vanderbilt::isis::meta::DatumType& Payload::datums(int index) const {
  // @@protoc_insertion_point(field_get:edu.vanderbilt.isis.meta.Payload.datums)
  return datums_.Get(index);
}
inline ::edu::vanderbilt::isis::meta::DatumType* Payload::mutable_datums(int index) {
  // @@protoc_insertion_point(field_mutable:edu.vanderbilt.isis.meta.Payload.datums)
  return datums_.Mutable(index);
}
inline ::edu::vanderbilt::isis::meta::DatumType* Payload::add_datums() {
  // @@protoc_insertion_point(field_add:edu.vanderbilt.isis.meta.Payload.datums)
  return datums_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::DatumType >&
Payload::datums() const {
  // @@protoc_insertion_point(field_list:edu.vanderbilt.isis.meta.Payload.datums)
  return datums_;
}
inline ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::DatumType >*
Payload::mutable_datums() {
  // @@protoc_insertion_point(field_mutable_list:edu.vanderbilt.isis.meta.Payload.datums)
  return &datums_;
}

// repeated .edu.vanderbilt.isis.meta.ConnectorType connectors = 6;
inline int Payload::connectors_size() const {
  return connectors_.size();
}
inline void Payload::clear_connectors() {
  connectors_.Clear();
}
inline const ::edu::vanderbilt::isis::meta::ConnectorType& Payload::connectors(int index) const {
  // @@protoc_insertion_point(field_get:edu.vanderbilt.isis.meta.Payload.connectors)
  return connectors_.Get(index);
}
inline ::edu::vanderbilt::isis::meta::ConnectorType* Payload::mutable_connectors(int index) {
  // @@protoc_insertion_point(field_mutable:edu.vanderbilt.isis.meta.Payload.connectors)
  return connectors_.Mutable(index);
}
inline ::edu::vanderbilt::isis::meta::ConnectorType* Payload::add_connectors() {
  // @@protoc_insertion_point(field_add:edu.vanderbilt.isis.meta.Payload.connectors)
  return connectors_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::ConnectorType >&
Payload::connectors() const {
  // @@protoc_insertion_point(field_list:edu.vanderbilt.isis.meta.Payload.connectors)
  return connectors_;
}
inline ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::ConnectorType >*
Payload::mutable_connectors() {
  // @@protoc_insertion_point(field_mutable_list:edu.vanderbilt.isis.meta.Payload.connectors)
  return &connectors_;
}

// -------------------------------------------------------------------

// DatumType

// optional string componentId = 1;
inline bool DatumType::has_componentid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DatumType::set_has_componentid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DatumType::clear_has_componentid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DatumType::clear_componentid() {
  if (componentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    componentid_->clear();
  }
  clear_has_componentid();
}
inline const ::std::string& DatumType::componentid() const {
  // @@protoc_insertion_point(field_get:edu.vanderbilt.isis.meta.DatumType.componentId)
  return *componentid_;
}
inline void DatumType::set_componentid(const ::std::string& value) {
  set_has_componentid();
  if (componentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    componentid_ = new ::std::string;
  }
  componentid_->assign(value);
  // @@protoc_insertion_point(field_set:edu.vanderbilt.isis.meta.DatumType.componentId)
}
inline void DatumType::set_componentid(const char* value) {
  set_has_componentid();
  if (componentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    componentid_ = new ::std::string;
  }
  componentid_->assign(value);
  // @@protoc_insertion_point(field_set_char:edu.vanderbilt.isis.meta.DatumType.componentId)
}
inline void DatumType::set_componentid(const char* value, size_t size) {
  set_has_componentid();
  if (componentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    componentid_ = new ::std::string;
  }
  componentid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:edu.vanderbilt.isis.meta.DatumType.componentId)
}
inline ::std::string* DatumType::mutable_componentid() {
  set_has_componentid();
  if (componentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    componentid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:edu.vanderbilt.isis.meta.DatumType.componentId)
  return componentid_;
}
inline ::std::string* DatumType::release_componentid() {
  clear_has_componentid();
  if (componentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = componentid_;
    componentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DatumType::set_allocated_componentid(::std::string* componentid) {
  if (componentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete componentid_;
  }
  if (componentid) {
    set_has_componentid();
    componentid_ = componentid;
  } else {
    clear_has_componentid();
    componentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:edu.vanderbilt.isis.meta.DatumType.componentId)
}

// optional string type = 2;
inline bool DatumType::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DatumType::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DatumType::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DatumType::clear_type() {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& DatumType::type() const {
  // @@protoc_insertion_point(field_get:edu.vanderbilt.isis.meta.DatumType.type)
  return *type_;
}
inline void DatumType::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set:edu.vanderbilt.isis.meta.DatumType.type)
}
inline void DatumType::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set_char:edu.vanderbilt.isis.meta.DatumType.type)
}
inline void DatumType::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:edu.vanderbilt.isis.meta.DatumType.type)
}
inline ::std::string* DatumType::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:edu.vanderbilt.isis.meta.DatumType.type)
  return type_;
}
inline ::std::string* DatumType::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DatumType::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:edu.vanderbilt.isis.meta.DatumType.type)
}

// optional string name = 3;
inline bool DatumType::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DatumType::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DatumType::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DatumType::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& DatumType::name() const {
  // @@protoc_insertion_point(field_get:edu.vanderbilt.isis.meta.DatumType.name)
  return *name_;
}
inline void DatumType::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:edu.vanderbilt.isis.meta.DatumType.name)
}
inline void DatumType::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:edu.vanderbilt.isis.meta.DatumType.name)
}
inline void DatumType::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:edu.vanderbilt.isis.meta.DatumType.name)
}
inline ::std::string* DatumType::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:edu.vanderbilt.isis.meta.DatumType.name)
  return name_;
}
inline ::std::string* DatumType::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DatumType::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:edu.vanderbilt.isis.meta.DatumType.name)
}

// -------------------------------------------------------------------

// Environment

// required string name = 1;
inline bool Environment::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Environment::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Environment::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Environment::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Environment::name() const {
  // @@protoc_insertion_point(field_get:edu.vanderbilt.isis.meta.Environment.name)
  return *name_;
}
inline void Environment::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:edu.vanderbilt.isis.meta.Environment.name)
}
inline void Environment::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:edu.vanderbilt.isis.meta.Environment.name)
}
inline void Environment::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:edu.vanderbilt.isis.meta.Environment.name)
}
inline ::std::string* Environment::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:edu.vanderbilt.isis.meta.Environment.name)
  return name_;
}
inline ::std::string* Environment::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Environment::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:edu.vanderbilt.isis.meta.Environment.name)
}

// repeated string value = 2;
inline int Environment::value_size() const {
  return value_.size();
}
inline void Environment::clear_value() {
  value_.Clear();
}
inline const ::std::string& Environment::value(int index) const {
  // @@protoc_insertion_point(field_get:edu.vanderbilt.isis.meta.Environment.value)
  return value_.Get(index);
}
inline ::std::string* Environment::mutable_value(int index) {
  // @@protoc_insertion_point(field_mutable:edu.vanderbilt.isis.meta.Environment.value)
  return value_.Mutable(index);
}
inline void Environment::set_value(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:edu.vanderbilt.isis.meta.Environment.value)
  value_.Mutable(index)->assign(value);
}
inline void Environment::set_value(int index, const char* value) {
  value_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:edu.vanderbilt.isis.meta.Environment.value)
}
inline void Environment::set_value(int index, const char* value, size_t size) {
  value_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:edu.vanderbilt.isis.meta.Environment.value)
}
inline ::std::string* Environment::add_value() {
  return value_.Add();
}
inline void Environment::add_value(const ::std::string& value) {
  value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:edu.vanderbilt.isis.meta.Environment.value)
}
inline void Environment::add_value(const char* value) {
  value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:edu.vanderbilt.isis.meta.Environment.value)
}
inline void Environment::add_value(const char* value, size_t size) {
  value_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:edu.vanderbilt.isis.meta.Environment.value)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Environment::value() const {
  // @@protoc_insertion_point(field_list:edu.vanderbilt.isis.meta.Environment.value)
  return value_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Environment::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:edu.vanderbilt.isis.meta.Environment.value)
  return &value_;
}

// -------------------------------------------------------------------

// Notice

// required .edu.vanderbilt.isis.meta.Notice.NoticeMode noticeMode = 1 [default = ACK];
inline bool Notice::has_noticemode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Notice::set_has_noticemode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Notice::clear_has_noticemode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Notice::clear_noticemode() {
  noticemode_ = 0;
  clear_has_noticemode();
}
inline ::edu::vanderbilt::isis::meta::Notice_NoticeMode Notice::noticemode() const {
  // @@protoc_insertion_point(field_get:edu.vanderbilt.isis.meta.Notice.noticeMode)
  return static_cast< ::edu::vanderbilt::isis::meta::Notice_NoticeMode >(noticemode_);
}
inline void Notice::set_noticemode(::edu::vanderbilt::isis::meta::Notice_NoticeMode value) {
  assert(::edu::vanderbilt::isis::meta::Notice_NoticeMode_IsValid(value));
  set_has_noticemode();
  noticemode_ = value;
  // @@protoc_insertion_point(field_set:edu.vanderbilt.isis.meta.Notice.noticeMode)
}

// optional string id = 2;
inline bool Notice::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Notice::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Notice::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Notice::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& Notice::id() const {
  // @@protoc_insertion_point(field_get:edu.vanderbilt.isis.meta.Notice.id)
  return *id_;
}
inline void Notice::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:edu.vanderbilt.isis.meta.Notice.id)
}
inline void Notice::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:edu.vanderbilt.isis.meta.Notice.id)
}
inline void Notice::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:edu.vanderbilt.isis.meta.Notice.id)
}
inline ::std::string* Notice::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:edu.vanderbilt.isis.meta.Notice.id)
  return id_;
}
inline ::std::string* Notice::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Notice::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:edu.vanderbilt.isis.meta.Notice.id)
}

// optional string msg = 3;
inline bool Notice::has_msg() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Notice::set_has_msg() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Notice::clear_has_msg() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Notice::clear_msg() {
  if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& Notice::msg() const {
  // @@protoc_insertion_point(field_get:edu.vanderbilt.isis.meta.Notice.msg)
  return *msg_;
}
inline void Notice::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
  // @@protoc_insertion_point(field_set:edu.vanderbilt.isis.meta.Notice.msg)
}
inline void Notice::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
  // @@protoc_insertion_point(field_set_char:edu.vanderbilt.isis.meta.Notice.msg)
}
inline void Notice::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:edu.vanderbilt.isis.meta.Notice.msg)
}
inline ::std::string* Notice::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:edu.vanderbilt.isis.meta.Notice.msg)
  return msg_;
}
inline ::std::string* Notice::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Notice::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:edu.vanderbilt.isis.meta.Notice.msg)
}

// optional bytes code = 4;
inline bool Notice::has_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Notice::set_has_code() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Notice::clear_has_code() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Notice::clear_code() {
  if (code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    code_->clear();
  }
  clear_has_code();
}
inline const ::std::string& Notice::code() const {
  // @@protoc_insertion_point(field_get:edu.vanderbilt.isis.meta.Notice.code)
  return *code_;
}
inline void Notice::set_code(const ::std::string& value) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    code_ = new ::std::string;
  }
  code_->assign(value);
  // @@protoc_insertion_point(field_set:edu.vanderbilt.isis.meta.Notice.code)
}
inline void Notice::set_code(const char* value) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    code_ = new ::std::string;
  }
  code_->assign(value);
  // @@protoc_insertion_point(field_set_char:edu.vanderbilt.isis.meta.Notice.code)
}
inline void Notice::set_code(const void* value, size_t size) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    code_ = new ::std::string;
  }
  code_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:edu.vanderbilt.isis.meta.Notice.code)
}
inline ::std::string* Notice::mutable_code() {
  set_has_code();
  if (code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    code_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:edu.vanderbilt.isis.meta.Notice.code)
  return code_;
}
inline ::std::string* Notice::release_code() {
  clear_has_code();
  if (code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = code_;
    code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Notice::set_allocated_code(::std::string* code) {
  if (code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete code_;
  }
  if (code) {
    set_has_code();
    code_ = code;
  } else {
    clear_has_code();
    code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:edu.vanderbilt.isis.meta.Notice.code)
}

// -------------------------------------------------------------------

// ComponentManifestNode

// required .edu.vanderbilt.isis.meta.ComponentManifestNode.NodeMode nodeMode = 1 [default = COMPONENT];
inline bool ComponentManifestNode::has_nodemode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ComponentManifestNode::set_has_nodemode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ComponentManifestNode::clear_has_nodemode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ComponentManifestNode::clear_nodemode() {
  nodemode_ = 1;
  clear_has_nodemode();
}
inline ::edu::vanderbilt::isis::meta::ComponentManifestNode_NodeMode ComponentManifestNode::nodemode() const {
  // @@protoc_insertion_point(field_get:edu.vanderbilt.isis.meta.ComponentManifestNode.nodeMode)
  return static_cast< ::edu::vanderbilt::isis::meta::ComponentManifestNode_NodeMode >(nodemode_);
}
inline void ComponentManifestNode::set_nodemode(::edu::vanderbilt::isis::meta::ComponentManifestNode_NodeMode value) {
  assert(::edu::vanderbilt::isis::meta::ComponentManifestNode_NodeMode_IsValid(value));
  set_has_nodemode();
  nodemode_ = value;
  // @@protoc_insertion_point(field_set:edu.vanderbilt.isis.meta.ComponentManifestNode.nodeMode)
}

// optional string guid = 2;
inline bool ComponentManifestNode::has_guid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ComponentManifestNode::set_has_guid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ComponentManifestNode::clear_has_guid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ComponentManifestNode::clear_guid() {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_->clear();
  }
  clear_has_guid();
}
inline const ::std::string& ComponentManifestNode::guid() const {
  // @@protoc_insertion_point(field_get:edu.vanderbilt.isis.meta.ComponentManifestNode.guid)
  return *guid_;
}
inline void ComponentManifestNode::set_guid(const ::std::string& value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
  // @@protoc_insertion_point(field_set:edu.vanderbilt.isis.meta.ComponentManifestNode.guid)
}
inline void ComponentManifestNode::set_guid(const char* value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
  // @@protoc_insertion_point(field_set_char:edu.vanderbilt.isis.meta.ComponentManifestNode.guid)
}
inline void ComponentManifestNode::set_guid(const char* value, size_t size) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:edu.vanderbilt.isis.meta.ComponentManifestNode.guid)
}
inline ::std::string* ComponentManifestNode::mutable_guid() {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:edu.vanderbilt.isis.meta.ComponentManifestNode.guid)
  return guid_;
}
inline ::std::string* ComponentManifestNode::release_guid() {
  clear_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = guid_;
    guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ComponentManifestNode::set_allocated_guid(::std::string* guid) {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guid_;
  }
  if (guid) {
    set_has_guid();
    guid_ = guid;
  } else {
    clear_has_guid();
    guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:edu.vanderbilt.isis.meta.ComponentManifestNode.guid)
}

// optional string name = 3;
inline bool ComponentManifestNode::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ComponentManifestNode::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ComponentManifestNode::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ComponentManifestNode::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ComponentManifestNode::name() const {
  // @@protoc_insertion_point(field_get:edu.vanderbilt.isis.meta.ComponentManifestNode.name)
  return *name_;
}
inline void ComponentManifestNode::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:edu.vanderbilt.isis.meta.ComponentManifestNode.name)
}
inline void ComponentManifestNode::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:edu.vanderbilt.isis.meta.ComponentManifestNode.name)
}
inline void ComponentManifestNode::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:edu.vanderbilt.isis.meta.ComponentManifestNode.name)
}
inline ::std::string* ComponentManifestNode::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:edu.vanderbilt.isis.meta.ComponentManifestNode.name)
  return name_;
}
inline ::std::string* ComponentManifestNode::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ComponentManifestNode::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:edu.vanderbilt.isis.meta.ComponentManifestNode.name)
}

// optional string cyphyParentId = 4;
inline bool ComponentManifestNode::has_cyphyparentid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ComponentManifestNode::set_has_cyphyparentid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ComponentManifestNode::clear_has_cyphyparentid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ComponentManifestNode::clear_cyphyparentid() {
  if (cyphyparentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cyphyparentid_->clear();
  }
  clear_has_cyphyparentid();
}
inline const ::std::string& ComponentManifestNode::cyphyparentid() const {
  // @@protoc_insertion_point(field_get:edu.vanderbilt.isis.meta.ComponentManifestNode.cyphyParentId)
  return *cyphyparentid_;
}
inline void ComponentManifestNode::set_cyphyparentid(const ::std::string& value) {
  set_has_cyphyparentid();
  if (cyphyparentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cyphyparentid_ = new ::std::string;
  }
  cyphyparentid_->assign(value);
  // @@protoc_insertion_point(field_set:edu.vanderbilt.isis.meta.ComponentManifestNode.cyphyParentId)
}
inline void ComponentManifestNode::set_cyphyparentid(const char* value) {
  set_has_cyphyparentid();
  if (cyphyparentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cyphyparentid_ = new ::std::string;
  }
  cyphyparentid_->assign(value);
  // @@protoc_insertion_point(field_set_char:edu.vanderbilt.isis.meta.ComponentManifestNode.cyphyParentId)
}
inline void ComponentManifestNode::set_cyphyparentid(const char* value, size_t size) {
  set_has_cyphyparentid();
  if (cyphyparentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cyphyparentid_ = new ::std::string;
  }
  cyphyparentid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:edu.vanderbilt.isis.meta.ComponentManifestNode.cyphyParentId)
}
inline ::std::string* ComponentManifestNode::mutable_cyphyparentid() {
  set_has_cyphyparentid();
  if (cyphyparentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cyphyparentid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:edu.vanderbilt.isis.meta.ComponentManifestNode.cyphyParentId)
  return cyphyparentid_;
}
inline ::std::string* ComponentManifestNode::release_cyphyparentid() {
  clear_has_cyphyparentid();
  if (cyphyparentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = cyphyparentid_;
    cyphyparentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ComponentManifestNode::set_allocated_cyphyparentid(::std::string* cyphyparentid) {
  if (cyphyparentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cyphyparentid_;
  }
  if (cyphyparentid) {
    set_has_cyphyparentid();
    cyphyparentid_ = cyphyparentid;
  } else {
    clear_has_cyphyparentid();
    cyphyparentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:edu.vanderbilt.isis.meta.ComponentManifestNode.cyphyParentId)
}

// repeated string componentGroup = 5;
inline int ComponentManifestNode::componentgroup_size() const {
  return componentgroup_.size();
}
inline void ComponentManifestNode::clear_componentgroup() {
  componentgroup_.Clear();
}
inline const ::std::string& ComponentManifestNode::componentgroup(int index) const {
  // @@protoc_insertion_point(field_get:edu.vanderbilt.isis.meta.ComponentManifestNode.componentGroup)
  return componentgroup_.Get(index);
}
inline ::std::string* ComponentManifestNode::mutable_componentgroup(int index) {
  // @@protoc_insertion_point(field_mutable:edu.vanderbilt.isis.meta.ComponentManifestNode.componentGroup)
  return componentgroup_.Mutable(index);
}
inline void ComponentManifestNode::set_componentgroup(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:edu.vanderbilt.isis.meta.ComponentManifestNode.componentGroup)
  componentgroup_.Mutable(index)->assign(value);
}
inline void ComponentManifestNode::set_componentgroup(int index, const char* value) {
  componentgroup_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:edu.vanderbilt.isis.meta.ComponentManifestNode.componentGroup)
}
inline void ComponentManifestNode::set_componentgroup(int index, const char* value, size_t size) {
  componentgroup_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:edu.vanderbilt.isis.meta.ComponentManifestNode.componentGroup)
}
inline ::std::string* ComponentManifestNode::add_componentgroup() {
  return componentgroup_.Add();
}
inline void ComponentManifestNode::add_componentgroup(const ::std::string& value) {
  componentgroup_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:edu.vanderbilt.isis.meta.ComponentManifestNode.componentGroup)
}
inline void ComponentManifestNode::add_componentgroup(const char* value) {
  componentgroup_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:edu.vanderbilt.isis.meta.ComponentManifestNode.componentGroup)
}
inline void ComponentManifestNode::add_componentgroup(const char* value, size_t size) {
  componentgroup_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:edu.vanderbilt.isis.meta.ComponentManifestNode.componentGroup)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ComponentManifestNode::componentgroup() const {
  // @@protoc_insertion_point(field_list:edu.vanderbilt.isis.meta.ComponentManifestNode.componentGroup)
  return componentgroup_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ComponentManifestNode::mutable_componentgroup() {
  // @@protoc_insertion_point(field_mutable_list:edu.vanderbilt.isis.meta.ComponentManifestNode.componentGroup)
  return &componentgroup_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace meta
}  // namespace isis
}  // namespace vanderbilt
}  // namespace edu

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::edu::vanderbilt::isis::meta::Edit_EditMode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::edu::vanderbilt::isis::meta::Edit_EditMode>() {
  return ::edu::vanderbilt::isis::meta::Edit_EditMode_descriptor();
}
template <> struct is_proto_enum< ::edu::vanderbilt::isis::meta::Action_ActionMode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::edu::vanderbilt::isis::meta::Action_ActionMode>() {
  return ::edu::vanderbilt::isis::meta::Action_ActionMode_descriptor();
}
template <> struct is_proto_enum< ::edu::vanderbilt::isis::meta::Alien_EncodingMode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::edu::vanderbilt::isis::meta::Alien_EncodingMode>() {
  return ::edu::vanderbilt::isis::meta::Alien_EncodingMode_descriptor();
}
template <> struct is_proto_enum< ::edu::vanderbilt::isis::meta::Notice_NoticeMode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::edu::vanderbilt::isis::meta::Notice_NoticeMode>() {
  return ::edu::vanderbilt::isis::meta::Notice_NoticeMode_descriptor();
}
template <> struct is_proto_enum< ::edu::vanderbilt::isis::meta::ComponentManifestNode_NodeMode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::edu::vanderbilt::isis::meta::ComponentManifestNode_NodeMode>() {
  return ::edu::vanderbilt::isis::meta::ComponentManifestNode_NodeMode_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MetaLinkMsg_2eproto__INCLUDED
