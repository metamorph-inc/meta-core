// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AssemblyInterface.proto

#ifndef PROTOBUF_AssemblyInterface_2eproto__INCLUDED
#define PROTOBUF_AssemblyInterface_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace edu {
namespace vanderbilt {
namespace isis {
namespace meta {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_AssemblyInterface_2eproto();
void protobuf_AssignDesc_AssemblyInterface_2eproto();
void protobuf_ShutdownFile_AssemblyInterface_2eproto();

class AnalysisComponentsType;
class AssembliesType;
class AssemblyType;
class CADComponentType;
class CADParameterType;
class ComponentType;
class ConnectorDatumType;
class ConnectorType;
class ConstraintFeatureType;
class ConstraintOffsetType;
class ConstraintType;
class DataExchangeType;
class FeatureType;
class FeaturesType;
class GeometryType;
class PairType;
class ParametricParametersType;
class PropertiesType;
class STEPFormatType;
class UnassembledComponentsType;
class UnitsType;

enum ConnectorDatumType_AlignType {
  ConnectorDatumType_AlignType_MATE = 0,
  ConnectorDatumType_AlignType_ALIGN = 1
};
bool ConnectorDatumType_AlignType_IsValid(int value);
const ConnectorDatumType_AlignType ConnectorDatumType_AlignType_AlignType_MIN = ConnectorDatumType_AlignType_MATE;
const ConnectorDatumType_AlignType ConnectorDatumType_AlignType_AlignType_MAX = ConnectorDatumType_AlignType_ALIGN;
const int ConnectorDatumType_AlignType_AlignType_ARRAYSIZE = ConnectorDatumType_AlignType_AlignType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ConnectorDatumType_AlignType_descriptor();
inline const ::std::string& ConnectorDatumType_AlignType_Name(ConnectorDatumType_AlignType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ConnectorDatumType_AlignType_descriptor(), value);
}
inline bool ConnectorDatumType_AlignType_Parse(
    const ::std::string& name, ConnectorDatumType_AlignType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ConnectorDatumType_AlignType>(
    ConnectorDatumType_AlignType_descriptor(), name, value);
}
// ===================================================================

class AnalysisComponentsType : public ::google::protobuf::Message {
 public:
  AnalysisComponentsType();
  virtual ~AnalysisComponentsType();

  AnalysisComponentsType(const AnalysisComponentsType& from);

  inline AnalysisComponentsType& operator=(const AnalysisComponentsType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AnalysisComponentsType& default_instance();

  void Swap(AnalysisComponentsType* other);

  // implements Message ----------------------------------------------

  AnalysisComponentsType* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AnalysisComponentsType& from);
  void MergeFrom(const AnalysisComponentsType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .edu.vanderbilt.isis.meta.ComponentType Component = 1;
  inline int component_size() const;
  inline void clear_component();
  static const int kComponentFieldNumber = 1;
  inline const ::edu::vanderbilt::isis::meta::ComponentType& component(int index) const;
  inline ::edu::vanderbilt::isis::meta::ComponentType* mutable_component(int index);
  inline ::edu::vanderbilt::isis::meta::ComponentType* add_component();
  inline const ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::ComponentType >&
      component() const;
  inline ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::ComponentType >*
      mutable_component();

  // @@protoc_insertion_point(class_scope:edu.vanderbilt.isis.meta.AnalysisComponentsType)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::ComponentType > component_;
  friend void  protobuf_AddDesc_AssemblyInterface_2eproto();
  friend void protobuf_AssignDesc_AssemblyInterface_2eproto();
  friend void protobuf_ShutdownFile_AssemblyInterface_2eproto();

  void InitAsDefaultInstance();
  static AnalysisComponentsType* default_instance_;
};
// -------------------------------------------------------------------

class AssembliesType : public ::google::protobuf::Message {
 public:
  AssembliesType();
  virtual ~AssembliesType();

  AssembliesType(const AssembliesType& from);

  inline AssembliesType& operator=(const AssembliesType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AssembliesType& default_instance();

  void Swap(AssembliesType* other);

  // implements Message ----------------------------------------------

  AssembliesType* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AssembliesType& from);
  void MergeFrom(const AssembliesType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .edu.vanderbilt.isis.meta.AssemblyType Assembly = 1;
  inline int assembly_size() const;
  inline void clear_assembly();
  static const int kAssemblyFieldNumber = 1;
  inline const ::edu::vanderbilt::isis::meta::AssemblyType& assembly(int index) const;
  inline ::edu::vanderbilt::isis::meta::AssemblyType* mutable_assembly(int index);
  inline ::edu::vanderbilt::isis::meta::AssemblyType* add_assembly();
  inline const ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::AssemblyType >&
      assembly() const;
  inline ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::AssemblyType >*
      mutable_assembly();

  // optional .edu.vanderbilt.isis.meta.DataExchangeType DataExchange = 2;
  inline bool has_dataexchange() const;
  inline void clear_dataexchange();
  static const int kDataExchangeFieldNumber = 2;
  inline const ::edu::vanderbilt::isis::meta::DataExchangeType& dataexchange() const;
  inline ::edu::vanderbilt::isis::meta::DataExchangeType* mutable_dataexchange();
  inline ::edu::vanderbilt::isis::meta::DataExchangeType* release_dataexchange();
  inline void set_allocated_dataexchange(::edu::vanderbilt::isis::meta::DataExchangeType* dataexchange);

  // optional .edu.vanderbilt.isis.meta.UnassembledComponentsType UnassembledComponents = 4;
  inline bool has_unassembledcomponents() const;
  inline void clear_unassembledcomponents();
  static const int kUnassembledComponentsFieldNumber = 4;
  inline const ::edu::vanderbilt::isis::meta::UnassembledComponentsType& unassembledcomponents() const;
  inline ::edu::vanderbilt::isis::meta::UnassembledComponentsType* mutable_unassembledcomponents();
  inline ::edu::vanderbilt::isis::meta::UnassembledComponentsType* release_unassembledcomponents();
  inline void set_allocated_unassembledcomponents(::edu::vanderbilt::isis::meta::UnassembledComponentsType* unassembledcomponents);

  // repeated .edu.vanderbilt.isis.meta.AssembliesType Assemblies = 5;
  inline int assemblies_size() const;
  inline void clear_assemblies();
  static const int kAssembliesFieldNumber = 5;
  inline const ::edu::vanderbilt::isis::meta::AssembliesType& assemblies(int index) const;
  inline ::edu::vanderbilt::isis::meta::AssembliesType* mutable_assemblies(int index);
  inline ::edu::vanderbilt::isis::meta::AssembliesType* add_assemblies();
  inline const ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::AssembliesType >&
      assemblies() const;
  inline ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::AssembliesType >*
      mutable_assemblies();

  // required string VersionInfo = 6;
  inline bool has_versioninfo() const;
  inline void clear_versioninfo();
  static const int kVersionInfoFieldNumber = 6;
  inline const ::std::string& versioninfo() const;
  inline void set_versioninfo(const ::std::string& value);
  inline void set_versioninfo(const char* value);
  inline void set_versioninfo(const char* value, size_t size);
  inline ::std::string* mutable_versioninfo();
  inline ::std::string* release_versioninfo();
  inline void set_allocated_versioninfo(::std::string* versioninfo);

  // @@protoc_insertion_point(class_scope:edu.vanderbilt.isis.meta.AssembliesType)
 private:
  inline void set_has_dataexchange();
  inline void clear_has_dataexchange();
  inline void set_has_unassembledcomponents();
  inline void clear_has_unassembledcomponents();
  inline void set_has_versioninfo();
  inline void clear_has_versioninfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::AssemblyType > assembly_;
  ::edu::vanderbilt::isis::meta::DataExchangeType* dataexchange_;
  ::edu::vanderbilt::isis::meta::UnassembledComponentsType* unassembledcomponents_;
  ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::AssembliesType > assemblies_;
  ::std::string* versioninfo_;
  friend void  protobuf_AddDesc_AssemblyInterface_2eproto();
  friend void protobuf_AssignDesc_AssemblyInterface_2eproto();
  friend void protobuf_ShutdownFile_AssemblyInterface_2eproto();

  void InitAsDefaultInstance();
  static AssembliesType* default_instance_;
};
// -------------------------------------------------------------------

class AssemblyType : public ::google::protobuf::Message {
 public:
  AssemblyType();
  virtual ~AssemblyType();

  AssemblyType(const AssemblyType& from);

  inline AssemblyType& operator=(const AssemblyType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AssemblyType& default_instance();

  void Swap(AssemblyType* other);

  // implements Message ----------------------------------------------

  AssemblyType* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AssemblyType& from);
  void MergeFrom(const AssemblyType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .edu.vanderbilt.isis.meta.CADComponentType CADComponent = 2;
  inline bool has_cadcomponent() const;
  inline void clear_cadcomponent();
  static const int kCADComponentFieldNumber = 2;
  inline const ::edu::vanderbilt::isis::meta::CADComponentType& cadcomponent() const;
  inline ::edu::vanderbilt::isis::meta::CADComponentType* mutable_cadcomponent();
  inline ::edu::vanderbilt::isis::meta::CADComponentType* release_cadcomponent();
  inline void set_allocated_cadcomponent(::edu::vanderbilt::isis::meta::CADComponentType* cadcomponent);

  // required .edu.vanderbilt.isis.meta.PropertiesType Properties = 4;
  inline bool has_properties() const;
  inline void clear_properties();
  static const int kPropertiesFieldNumber = 4;
  inline const ::edu::vanderbilt::isis::meta::PropertiesType& properties() const;
  inline ::edu::vanderbilt::isis::meta::PropertiesType* mutable_properties();
  inline ::edu::vanderbilt::isis::meta::PropertiesType* release_properties();
  inline void set_allocated_properties(::edu::vanderbilt::isis::meta::PropertiesType* properties);

  // required string ConfigurationID = 5;
  inline bool has_configurationid() const;
  inline void clear_configurationid();
  static const int kConfigurationIDFieldNumber = 5;
  inline const ::std::string& configurationid() const;
  inline void set_configurationid(const ::std::string& value);
  inline void set_configurationid(const char* value);
  inline void set_configurationid(const char* value, size_t size);
  inline ::std::string* mutable_configurationid();
  inline ::std::string* release_configurationid();
  inline void set_allocated_configurationid(::std::string* configurationid);

  // @@protoc_insertion_point(class_scope:edu.vanderbilt.isis.meta.AssemblyType)
 private:
  inline void set_has_cadcomponent();
  inline void clear_has_cadcomponent();
  inline void set_has_properties();
  inline void clear_has_properties();
  inline void set_has_configurationid();
  inline void clear_has_configurationid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::edu::vanderbilt::isis::meta::CADComponentType* cadcomponent_;
  ::edu::vanderbilt::isis::meta::PropertiesType* properties_;
  ::std::string* configurationid_;
  friend void  protobuf_AddDesc_AssemblyInterface_2eproto();
  friend void protobuf_AssignDesc_AssemblyInterface_2eproto();
  friend void protobuf_ShutdownFile_AssemblyInterface_2eproto();

  void InitAsDefaultInstance();
  static AssemblyType* default_instance_;
};
// -------------------------------------------------------------------

class CADComponentType : public ::google::protobuf::Message {
 public:
  CADComponentType();
  virtual ~CADComponentType();

  CADComponentType(const CADComponentType& from);

  inline CADComponentType& operator=(const CADComponentType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CADComponentType& default_instance();

  void Swap(CADComponentType* other);

  // implements Message ----------------------------------------------

  CADComponentType* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CADComponentType& from);
  void MergeFrom(const CADComponentType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .edu.vanderbilt.isis.meta.CADComponentType CADComponent = 1;
  inline int cadcomponent_size() const;
  inline void clear_cadcomponent();
  static const int kCADComponentFieldNumber = 1;
  inline const ::edu::vanderbilt::isis::meta::CADComponentType& cadcomponent(int index) const;
  inline ::edu::vanderbilt::isis::meta::CADComponentType* mutable_cadcomponent(int index);
  inline ::edu::vanderbilt::isis::meta::CADComponentType* add_cadcomponent();
  inline const ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::CADComponentType >&
      cadcomponent() const;
  inline ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::CADComponentType >*
      mutable_cadcomponent();

  // optional .edu.vanderbilt.isis.meta.ParametricParametersType ParametricParameters = 4;
  inline bool has_parametricparameters() const;
  inline void clear_parametricparameters();
  static const int kParametricParametersFieldNumber = 4;
  inline const ::edu::vanderbilt::isis::meta::ParametricParametersType& parametricparameters() const;
  inline ::edu::vanderbilt::isis::meta::ParametricParametersType* mutable_parametricparameters();
  inline ::edu::vanderbilt::isis::meta::ParametricParametersType* release_parametricparameters();
  inline void set_allocated_parametricparameters(::edu::vanderbilt::isis::meta::ParametricParametersType* parametricparameters);

  // repeated .edu.vanderbilt.isis.meta.ConnectorType Connectors = 14;
  inline int connectors_size() const;
  inline void clear_connectors();
  static const int kConnectorsFieldNumber = 14;
  inline const ::edu::vanderbilt::isis::meta::ConnectorType& connectors(int index) const;
  inline ::edu::vanderbilt::isis::meta::ConnectorType* mutable_connectors(int index);
  inline ::edu::vanderbilt::isis::meta::ConnectorType* add_connectors();
  inline const ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::ConnectorType >&
      connectors() const;
  inline ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::ConnectorType >*
      mutable_connectors();

  // repeated .edu.vanderbilt.isis.meta.ConnectorDatumType Datums = 15;
  inline int datums_size() const;
  inline void clear_datums();
  static const int kDatumsFieldNumber = 15;
  inline const ::edu::vanderbilt::isis::meta::ConnectorDatumType& datums(int index) const;
  inline ::edu::vanderbilt::isis::meta::ConnectorDatumType* mutable_datums(int index);
  inline ::edu::vanderbilt::isis::meta::ConnectorDatumType* add_datums();
  inline const ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::ConnectorDatumType >&
      datums() const;
  inline ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::ConnectorDatumType >*
      mutable_datums();

  // optional string ComponentID = 5;
  inline bool has_componentid() const;
  inline void clear_componentid();
  static const int kComponentIDFieldNumber = 5;
  inline const ::std::string& componentid() const;
  inline void set_componentid(const ::std::string& value);
  inline void set_componentid(const char* value);
  inline void set_componentid(const char* value, size_t size);
  inline ::std::string* mutable_componentid();
  inline ::std::string* release_componentid();
  inline void set_allocated_componentid(::std::string* componentid);

  // optional string AvmComponentID = 11;
  inline bool has_avmcomponentid() const;
  inline void clear_avmcomponentid();
  static const int kAvmComponentIDFieldNumber = 11;
  inline const ::std::string& avmcomponentid() const;
  inline void set_avmcomponentid(const ::std::string& value);
  inline void set_avmcomponentid(const char* value);
  inline void set_avmcomponentid(const char* value, size_t size);
  inline ::std::string* mutable_avmcomponentid();
  inline ::std::string* release_avmcomponentid();
  inline void set_allocated_avmcomponentid(::std::string* avmcomponentid);

  // optional string MaterialID = 6;
  inline bool has_materialid() const;
  inline void clear_materialid();
  static const int kMaterialIDFieldNumber = 6;
  inline const ::std::string& materialid() const;
  inline void set_materialid(const ::std::string& value);
  inline void set_materialid(const char* value);
  inline void set_materialid(const char* value, size_t size);
  inline ::std::string* mutable_materialid();
  inline ::std::string* release_materialid();
  inline void set_allocated_materialid(::std::string* materialid);

  // optional string Name = 7;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 7;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string SpecialInstruction = 8;
  inline bool has_specialinstruction() const;
  inline void clear_specialinstruction();
  static const int kSpecialInstructionFieldNumber = 8;
  inline const ::std::string& specialinstruction() const;
  inline void set_specialinstruction(const ::std::string& value);
  inline void set_specialinstruction(const char* value);
  inline void set_specialinstruction(const char* value, size_t size);
  inline ::std::string* mutable_specialinstruction();
  inline ::std::string* release_specialinstruction();
  inline void set_allocated_specialinstruction(::std::string* specialinstruction);

  // optional bool Standalone = 9;
  inline bool has_standalone() const;
  inline void clear_standalone();
  static const int kStandaloneFieldNumber = 9;
  inline bool standalone() const;
  inline void set_standalone(bool value);

  // optional string Type = 10;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 10;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // optional string CADModelID = 12;
  inline bool has_cadmodelid() const;
  inline void clear_cadmodelid();
  static const int kCADModelIDFieldNumber = 12;
  inline const ::std::string& cadmodelid() const;
  inline void set_cadmodelid(const ::std::string& value);
  inline void set_cadmodelid(const char* value);
  inline void set_cadmodelid(const char* value, size_t size);
  inline ::std::string* mutable_cadmodelid();
  inline ::std::string* release_cadmodelid();
  inline void set_allocated_cadmodelid(::std::string* cadmodelid);

  // optional string DisplayName = 13;
  inline bool has_displayname() const;
  inline void clear_displayname();
  static const int kDisplayNameFieldNumber = 13;
  inline const ::std::string& displayname() const;
  inline void set_displayname(const ::std::string& value);
  inline void set_displayname(const char* value);
  inline void set_displayname(const char* value, size_t size);
  inline ::std::string* mutable_displayname();
  inline ::std::string* release_displayname();
  inline void set_allocated_displayname(::std::string* displayname);

  // @@protoc_insertion_point(class_scope:edu.vanderbilt.isis.meta.CADComponentType)
 private:
  inline void set_has_parametricparameters();
  inline void clear_has_parametricparameters();
  inline void set_has_componentid();
  inline void clear_has_componentid();
  inline void set_has_avmcomponentid();
  inline void clear_has_avmcomponentid();
  inline void set_has_materialid();
  inline void clear_has_materialid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_specialinstruction();
  inline void clear_has_specialinstruction();
  inline void set_has_standalone();
  inline void clear_has_standalone();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_cadmodelid();
  inline void clear_has_cadmodelid();
  inline void set_has_displayname();
  inline void clear_has_displayname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::CADComponentType > cadcomponent_;
  ::edu::vanderbilt::isis::meta::ParametricParametersType* parametricparameters_;
  ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::ConnectorType > connectors_;
  ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::ConnectorDatumType > datums_;
  ::std::string* componentid_;
  ::std::string* avmcomponentid_;
  ::std::string* materialid_;
  ::std::string* name_;
  ::std::string* specialinstruction_;
  ::std::string* type_;
  ::std::string* cadmodelid_;
  ::std::string* displayname_;
  bool standalone_;
  friend void  protobuf_AddDesc_AssemblyInterface_2eproto();
  friend void protobuf_AssignDesc_AssemblyInterface_2eproto();
  friend void protobuf_ShutdownFile_AssemblyInterface_2eproto();

  void InitAsDefaultInstance();
  static CADComponentType* default_instance_;
};
// -------------------------------------------------------------------

class CADParameterType : public ::google::protobuf::Message {
 public:
  CADParameterType();
  virtual ~CADParameterType();

  CADParameterType(const CADParameterType& from);

  inline CADParameterType& operator=(const CADParameterType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CADParameterType& default_instance();

  void Swap(CADParameterType* other);

  // implements Message ----------------------------------------------

  CADParameterType* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CADParameterType& from);
  void MergeFrom(const CADParameterType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .edu.vanderbilt.isis.meta.UnitsType Units = 1;
  inline bool has_units() const;
  inline void clear_units();
  static const int kUnitsFieldNumber = 1;
  inline const ::edu::vanderbilt::isis::meta::UnitsType& units() const;
  inline ::edu::vanderbilt::isis::meta::UnitsType* mutable_units();
  inline ::edu::vanderbilt::isis::meta::UnitsType* release_units();
  inline void set_allocated_units(::edu::vanderbilt::isis::meta::UnitsType* units);

  // required string Name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required string Type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // required string Value = 4;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 4;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:edu.vanderbilt.isis.meta.CADParameterType)
 private:
  inline void set_has_units();
  inline void clear_has_units();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::edu::vanderbilt::isis::meta::UnitsType* units_;
  ::std::string* name_;
  ::std::string* type_;
  ::std::string* value_;
  friend void  protobuf_AddDesc_AssemblyInterface_2eproto();
  friend void protobuf_AssignDesc_AssemblyInterface_2eproto();
  friend void protobuf_ShutdownFile_AssemblyInterface_2eproto();

  void InitAsDefaultInstance();
  static CADParameterType* default_instance_;
};
// -------------------------------------------------------------------

class ComponentType : public ::google::protobuf::Message {
 public:
  ComponentType();
  virtual ~ComponentType();

  ComponentType(const ComponentType& from);

  inline ComponentType& operator=(const ComponentType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ComponentType& default_instance();

  void Swap(ComponentType* other);

  // implements Message ----------------------------------------------

  ComponentType* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ComponentType& from);
  void MergeFrom(const ComponentType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string ComponentID = 2;
  inline bool has_componentid() const;
  inline void clear_componentid();
  static const int kComponentIDFieldNumber = 2;
  inline const ::std::string& componentid() const;
  inline void set_componentid(const ::std::string& value);
  inline void set_componentid(const char* value);
  inline void set_componentid(const char* value, size_t size);
  inline ::std::string* mutable_componentid();
  inline ::std::string* release_componentid();
  inline void set_allocated_componentid(::std::string* componentid);

  // required bool InfiniteCycle = 3;
  inline bool has_infinitecycle() const;
  inline void clear_infinitecycle();
  static const int kInfiniteCycleFieldNumber = 3;
  inline bool infinitecycle() const;
  inline void set_infinitecycle(bool value);

  // @@protoc_insertion_point(class_scope:edu.vanderbilt.isis.meta.ComponentType)
 private:
  inline void set_has_componentid();
  inline void clear_has_componentid();
  inline void set_has_infinitecycle();
  inline void clear_has_infinitecycle();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* componentid_;
  bool infinitecycle_;
  friend void  protobuf_AddDesc_AssemblyInterface_2eproto();
  friend void protobuf_AssignDesc_AssemblyInterface_2eproto();
  friend void protobuf_ShutdownFile_AssemblyInterface_2eproto();

  void InitAsDefaultInstance();
  static ComponentType* default_instance_;
};
// -------------------------------------------------------------------

class ConnectorDatumType : public ::google::protobuf::Message {
 public:
  ConnectorDatumType();
  virtual ~ConnectorDatumType();

  ConnectorDatumType(const ConnectorDatumType& from);

  inline ConnectorDatumType& operator=(const ConnectorDatumType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConnectorDatumType& default_instance();

  void Swap(ConnectorDatumType* other);

  // implements Message ----------------------------------------------

  ConnectorDatumType* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConnectorDatumType& from);
  void MergeFrom(const ConnectorDatumType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ConnectorDatumType_AlignType AlignType;
  static const AlignType MATE = ConnectorDatumType_AlignType_MATE;
  static const AlignType ALIGN = ConnectorDatumType_AlignType_ALIGN;
  static inline bool AlignType_IsValid(int value) {
    return ConnectorDatumType_AlignType_IsValid(value);
  }
  static const AlignType AlignType_MIN =
    ConnectorDatumType_AlignType_AlignType_MIN;
  static const AlignType AlignType_MAX =
    ConnectorDatumType_AlignType_AlignType_MAX;
  static const int AlignType_ARRAYSIZE =
    ConnectorDatumType_AlignType_AlignType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  AlignType_descriptor() {
    return ConnectorDatumType_AlignType_descriptor();
  }
  static inline const ::std::string& AlignType_Name(AlignType value) {
    return ConnectorDatumType_AlignType_Name(value);
  }
  static inline bool AlignType_Parse(const ::std::string& name,
      AlignType* value) {
    return ConnectorDatumType_AlignType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .edu.vanderbilt.isis.meta.ConnectorDatumType.AlignType Alignment = 3;
  inline bool has_alignment() const;
  inline void clear_alignment();
  static const int kAlignmentFieldNumber = 3;
  inline ::edu::vanderbilt::isis::meta::ConnectorDatumType_AlignType alignment() const;
  inline void set_alignment(::edu::vanderbilt::isis::meta::ConnectorDatumType_AlignType value);

  // optional string ID = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIDFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // required string DisplayName = 2;
  inline bool has_displayname() const;
  inline void clear_displayname();
  static const int kDisplayNameFieldNumber = 2;
  inline const ::std::string& displayname() const;
  inline void set_displayname(const ::std::string& value);
  inline void set_displayname(const char* value);
  inline void set_displayname(const char* value, size_t size);
  inline ::std::string* mutable_displayname();
  inline ::std::string* release_displayname();
  inline void set_allocated_displayname(::std::string* displayname);

  // @@protoc_insertion_point(class_scope:edu.vanderbilt.isis.meta.ConnectorDatumType)
 private:
  inline void set_has_alignment();
  inline void clear_has_alignment();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_displayname();
  inline void clear_has_displayname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* id_;
  ::std::string* displayname_;
  int alignment_;
  friend void  protobuf_AddDesc_AssemblyInterface_2eproto();
  friend void protobuf_AssignDesc_AssemblyInterface_2eproto();
  friend void protobuf_ShutdownFile_AssemblyInterface_2eproto();

  void InitAsDefaultInstance();
  static ConnectorDatumType* default_instance_;
};
// -------------------------------------------------------------------

class ConnectorType : public ::google::protobuf::Message {
 public:
  ConnectorType();
  virtual ~ConnectorType();

  ConnectorType(const ConnectorType& from);

  inline ConnectorType& operator=(const ConnectorType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConnectorType& default_instance();

  void Swap(ConnectorType* other);

  // implements Message ----------------------------------------------

  ConnectorType* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConnectorType& from);
  void MergeFrom(const ConnectorType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string ID = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIDFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // required string DisplayName = 2;
  inline bool has_displayname() const;
  inline void clear_displayname();
  static const int kDisplayNameFieldNumber = 2;
  inline const ::std::string& displayname() const;
  inline void set_displayname(const ::std::string& value);
  inline void set_displayname(const char* value);
  inline void set_displayname(const char* value, size_t size);
  inline ::std::string* mutable_displayname();
  inline ::std::string* release_displayname();
  inline void set_allocated_displayname(::std::string* displayname);

  // repeated .edu.vanderbilt.isis.meta.ConnectorDatumType Datums = 3;
  inline int datums_size() const;
  inline void clear_datums();
  static const int kDatumsFieldNumber = 3;
  inline const ::edu::vanderbilt::isis::meta::ConnectorDatumType& datums(int index) const;
  inline ::edu::vanderbilt::isis::meta::ConnectorDatumType* mutable_datums(int index);
  inline ::edu::vanderbilt::isis::meta::ConnectorDatumType* add_datums();
  inline const ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::ConnectorDatumType >&
      datums() const;
  inline ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::ConnectorDatumType >*
      mutable_datums();

  // @@protoc_insertion_point(class_scope:edu.vanderbilt.isis.meta.ConnectorType)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_displayname();
  inline void clear_has_displayname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* id_;
  ::std::string* displayname_;
  ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::ConnectorDatumType > datums_;
  friend void  protobuf_AddDesc_AssemblyInterface_2eproto();
  friend void protobuf_AssignDesc_AssemblyInterface_2eproto();
  friend void protobuf_ShutdownFile_AssemblyInterface_2eproto();

  void InitAsDefaultInstance();
  static ConnectorType* default_instance_;
};
// -------------------------------------------------------------------

class ConstraintFeatureType : public ::google::protobuf::Message {
 public:
  ConstraintFeatureType();
  virtual ~ConstraintFeatureType();

  ConstraintFeatureType(const ConstraintFeatureType& from);

  inline ConstraintFeatureType& operator=(const ConstraintFeatureType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConstraintFeatureType& default_instance();

  void Swap(ConstraintFeatureType* other);

  // implements Message ----------------------------------------------

  ConstraintFeatureType* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConstraintFeatureType& from);
  void MergeFrom(const ConstraintFeatureType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string ComponentID = 1;
  inline bool has_componentid() const;
  inline void clear_componentid();
  static const int kComponentIDFieldNumber = 1;
  inline const ::std::string& componentid() const;
  inline void set_componentid(const ::std::string& value);
  inline void set_componentid(const char* value);
  inline void set_componentid(const char* value, size_t size);
  inline ::std::string* mutable_componentid();
  inline ::std::string* release_componentid();
  inline void set_allocated_componentid(::std::string* componentid);

  // required string FeatureName = 2;
  inline bool has_featurename() const;
  inline void clear_featurename();
  static const int kFeatureNameFieldNumber = 2;
  inline const ::std::string& featurename() const;
  inline void set_featurename(const ::std::string& value);
  inline void set_featurename(const char* value);
  inline void set_featurename(const char* value, size_t size);
  inline ::std::string* mutable_featurename();
  inline ::std::string* release_featurename();
  inline void set_allocated_featurename(::std::string* featurename);

  // required string FeatureOrientationType = 3;
  inline bool has_featureorientationtype() const;
  inline void clear_featureorientationtype();
  static const int kFeatureOrientationTypeFieldNumber = 3;
  inline const ::std::string& featureorientationtype() const;
  inline void set_featureorientationtype(const ::std::string& value);
  inline void set_featureorientationtype(const char* value);
  inline void set_featureorientationtype(const char* value, size_t size);
  inline ::std::string* mutable_featureorientationtype();
  inline ::std::string* release_featureorientationtype();
  inline void set_allocated_featureorientationtype(::std::string* featureorientationtype);

  // @@protoc_insertion_point(class_scope:edu.vanderbilt.isis.meta.ConstraintFeatureType)
 private:
  inline void set_has_componentid();
  inline void clear_has_componentid();
  inline void set_has_featurename();
  inline void clear_has_featurename();
  inline void set_has_featureorientationtype();
  inline void clear_has_featureorientationtype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* componentid_;
  ::std::string* featurename_;
  ::std::string* featureorientationtype_;
  friend void  protobuf_AddDesc_AssemblyInterface_2eproto();
  friend void protobuf_AssignDesc_AssemblyInterface_2eproto();
  friend void protobuf_ShutdownFile_AssemblyInterface_2eproto();

  void InitAsDefaultInstance();
  static ConstraintFeatureType* default_instance_;
};
// -------------------------------------------------------------------

class ConstraintOffsetType : public ::google::protobuf::Message {
 public:
  ConstraintOffsetType();
  virtual ~ConstraintOffsetType();

  ConstraintOffsetType(const ConstraintOffsetType& from);

  inline ConstraintOffsetType& operator=(const ConstraintOffsetType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConstraintOffsetType& default_instance();

  void Swap(ConstraintOffsetType* other);

  // implements Message ----------------------------------------------

  ConstraintOffsetType* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConstraintOffsetType& from);
  void MergeFrom(const ConstraintOffsetType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .edu.vanderbilt.isis.meta.UnitsType Units = 1;
  inline bool has_units() const;
  inline void clear_units();
  static const int kUnitsFieldNumber = 1;
  inline const ::edu::vanderbilt::isis::meta::UnitsType& units() const;
  inline ::edu::vanderbilt::isis::meta::UnitsType* mutable_units();
  inline ::edu::vanderbilt::isis::meta::UnitsType* release_units();
  inline void set_allocated_units(::edu::vanderbilt::isis::meta::UnitsType* units);

  // required string OffsetAlignmentType = 2;
  inline bool has_offsetalignmenttype() const;
  inline void clear_offsetalignmenttype();
  static const int kOffsetAlignmentTypeFieldNumber = 2;
  inline const ::std::string& offsetalignmenttype() const;
  inline void set_offsetalignmenttype(const ::std::string& value);
  inline void set_offsetalignmenttype(const char* value);
  inline void set_offsetalignmenttype(const char* value, size_t size);
  inline ::std::string* mutable_offsetalignmenttype();
  inline ::std::string* release_offsetalignmenttype();
  inline void set_allocated_offsetalignmenttype(::std::string* offsetalignmenttype);

  // required double Value = 3;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 3;
  inline double value() const;
  inline void set_value(double value);

  // @@protoc_insertion_point(class_scope:edu.vanderbilt.isis.meta.ConstraintOffsetType)
 private:
  inline void set_has_units();
  inline void clear_has_units();
  inline void set_has_offsetalignmenttype();
  inline void clear_has_offsetalignmenttype();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::edu::vanderbilt::isis::meta::UnitsType* units_;
  ::std::string* offsetalignmenttype_;
  double value_;
  friend void  protobuf_AddDesc_AssemblyInterface_2eproto();
  friend void protobuf_AssignDesc_AssemblyInterface_2eproto();
  friend void protobuf_ShutdownFile_AssemblyInterface_2eproto();

  void InitAsDefaultInstance();
  static ConstraintOffsetType* default_instance_;
};
// -------------------------------------------------------------------

class ConstraintType : public ::google::protobuf::Message {
 public:
  ConstraintType();
  virtual ~ConstraintType();

  ConstraintType(const ConstraintType& from);

  inline ConstraintType& operator=(const ConstraintType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConstraintType& default_instance();

  void Swap(ConstraintType* other);

  // implements Message ----------------------------------------------

  ConstraintType* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConstraintType& from);
  void MergeFrom(const ConstraintType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .edu.vanderbilt.isis.meta.PairType Pair = 1;
  inline int pair_size() const;
  inline void clear_pair();
  static const int kPairFieldNumber = 1;
  inline const ::edu::vanderbilt::isis::meta::PairType& pair(int index) const;
  inline ::edu::vanderbilt::isis::meta::PairType* mutable_pair(int index);
  inline ::edu::vanderbilt::isis::meta::PairType* add_pair();
  inline const ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::PairType >&
      pair() const;
  inline ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::PairType >*
      mutable_pair();

  // optional string ComponentID = 2;
  inline bool has_componentid() const;
  inline void clear_componentid();
  static const int kComponentIDFieldNumber = 2;
  inline const ::std::string& componentid() const;
  inline void set_componentid(const ::std::string& value);
  inline void set_componentid(const char* value);
  inline void set_componentid(const char* value, size_t size);
  inline ::std::string* mutable_componentid();
  inline ::std::string* release_componentid();
  inline void set_allocated_componentid(::std::string* componentid);

  // @@protoc_insertion_point(class_scope:edu.vanderbilt.isis.meta.ConstraintType)
 private:
  inline void set_has_componentid();
  inline void clear_has_componentid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::PairType > pair_;
  ::std::string* componentid_;
  friend void  protobuf_AddDesc_AssemblyInterface_2eproto();
  friend void protobuf_AssignDesc_AssemblyInterface_2eproto();
  friend void protobuf_ShutdownFile_AssemblyInterface_2eproto();

  void InitAsDefaultInstance();
  static ConstraintType* default_instance_;
};
// -------------------------------------------------------------------

class DataExchangeType : public ::google::protobuf::Message {
 public:
  DataExchangeType();
  virtual ~DataExchangeType();

  DataExchangeType(const DataExchangeType& from);

  inline DataExchangeType& operator=(const DataExchangeType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DataExchangeType& default_instance();

  void Swap(DataExchangeType* other);

  // implements Message ----------------------------------------------

  DataExchangeType* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DataExchangeType& from);
  void MergeFrom(const DataExchangeType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .edu.vanderbilt.isis.meta.STEPFormatType STEPFormat = 1;
  inline int stepformat_size() const;
  inline void clear_stepformat();
  static const int kSTEPFormatFieldNumber = 1;
  inline const ::edu::vanderbilt::isis::meta::STEPFormatType& stepformat(int index) const;
  inline ::edu::vanderbilt::isis::meta::STEPFormatType* mutable_stepformat(int index);
  inline ::edu::vanderbilt::isis::meta::STEPFormatType* add_stepformat();
  inline const ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::STEPFormatType >&
      stepformat() const;
  inline ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::STEPFormatType >*
      mutable_stepformat();

  // @@protoc_insertion_point(class_scope:edu.vanderbilt.isis.meta.DataExchangeType)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::STEPFormatType > stepformat_;
  friend void  protobuf_AddDesc_AssemblyInterface_2eproto();
  friend void protobuf_AssignDesc_AssemblyInterface_2eproto();
  friend void protobuf_ShutdownFile_AssemblyInterface_2eproto();

  void InitAsDefaultInstance();
  static DataExchangeType* default_instance_;
};
// -------------------------------------------------------------------

class FeatureType : public ::google::protobuf::Message {
 public:
  FeatureType();
  virtual ~FeatureType();

  FeatureType(const FeatureType& from);

  inline FeatureType& operator=(const FeatureType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FeatureType& default_instance();

  void Swap(FeatureType* other);

  // implements Message ----------------------------------------------

  FeatureType* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FeatureType& from);
  void MergeFrom(const FeatureType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string ComponentID = 1;
  inline bool has_componentid() const;
  inline void clear_componentid();
  static const int kComponentIDFieldNumber = 1;
  inline const ::std::string& componentid() const;
  inline void set_componentid(const ::std::string& value);
  inline void set_componentid(const char* value);
  inline void set_componentid(const char* value, size_t size);
  inline ::std::string* mutable_componentid();
  inline ::std::string* release_componentid();
  inline void set_allocated_componentid(::std::string* componentid);

  // required string Name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:edu.vanderbilt.isis.meta.FeatureType)
 private:
  inline void set_has_componentid();
  inline void clear_has_componentid();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* componentid_;
  ::std::string* name_;
  friend void  protobuf_AddDesc_AssemblyInterface_2eproto();
  friend void protobuf_AssignDesc_AssemblyInterface_2eproto();
  friend void protobuf_ShutdownFile_AssemblyInterface_2eproto();

  void InitAsDefaultInstance();
  static FeatureType* default_instance_;
};
// -------------------------------------------------------------------

class FeaturesType : public ::google::protobuf::Message {
 public:
  FeaturesType();
  virtual ~FeaturesType();

  FeaturesType(const FeaturesType& from);

  inline FeaturesType& operator=(const FeaturesType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FeaturesType& default_instance();

  void Swap(FeaturesType* other);

  // implements Message ----------------------------------------------

  FeaturesType* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FeaturesType& from);
  void MergeFrom(const FeaturesType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .edu.vanderbilt.isis.meta.FeatureType Feature = 1;
  inline int feature_size() const;
  inline void clear_feature();
  static const int kFeatureFieldNumber = 1;
  inline const ::edu::vanderbilt::isis::meta::FeatureType& feature(int index) const;
  inline ::edu::vanderbilt::isis::meta::FeatureType* mutable_feature(int index);
  inline ::edu::vanderbilt::isis::meta::FeatureType* add_feature();
  inline const ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::FeatureType >&
      feature() const;
  inline ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::FeatureType >*
      mutable_feature();

  // required string FeatureGeometryType = 2;
  inline bool has_featuregeometrytype() const;
  inline void clear_featuregeometrytype();
  static const int kFeatureGeometryTypeFieldNumber = 2;
  inline const ::std::string& featuregeometrytype() const;
  inline void set_featuregeometrytype(const ::std::string& value);
  inline void set_featuregeometrytype(const char* value);
  inline void set_featuregeometrytype(const char* value, size_t size);
  inline ::std::string* mutable_featuregeometrytype();
  inline ::std::string* release_featuregeometrytype();
  inline void set_allocated_featuregeometrytype(::std::string* featuregeometrytype);

  // required string FeatureID = 3;
  inline bool has_featureid() const;
  inline void clear_featureid();
  static const int kFeatureIDFieldNumber = 3;
  inline const ::std::string& featureid() const;
  inline void set_featureid(const ::std::string& value);
  inline void set_featureid(const char* value);
  inline void set_featureid(const char* value, size_t size);
  inline ::std::string* mutable_featureid();
  inline ::std::string* release_featureid();
  inline void set_allocated_featureid(::std::string* featureid);

  // required string FeatureInterfaceType = 4;
  inline bool has_featureinterfacetype() const;
  inline void clear_featureinterfacetype();
  static const int kFeatureInterfaceTypeFieldNumber = 4;
  inline const ::std::string& featureinterfacetype() const;
  inline void set_featureinterfacetype(const ::std::string& value);
  inline void set_featureinterfacetype(const char* value);
  inline void set_featureinterfacetype(const char* value, size_t size);
  inline ::std::string* mutable_featureinterfacetype();
  inline ::std::string* release_featureinterfacetype();
  inline void set_allocated_featureinterfacetype(::std::string* featureinterfacetype);

  // required string GeometryType = 5;
  inline bool has_geometrytype() const;
  inline void clear_geometrytype();
  static const int kGeometryTypeFieldNumber = 5;
  inline const ::std::string& geometrytype() const;
  inline void set_geometrytype(const ::std::string& value);
  inline void set_geometrytype(const char* value);
  inline void set_geometrytype(const char* value, size_t size);
  inline ::std::string* mutable_geometrytype();
  inline ::std::string* release_geometrytype();
  inline void set_allocated_geometrytype(::std::string* geometrytype);

  // required string PrimaryGeometryQualifier = 6;
  inline bool has_primarygeometryqualifier() const;
  inline void clear_primarygeometryqualifier();
  static const int kPrimaryGeometryQualifierFieldNumber = 6;
  inline const ::std::string& primarygeometryqualifier() const;
  inline void set_primarygeometryqualifier(const ::std::string& value);
  inline void set_primarygeometryqualifier(const char* value);
  inline void set_primarygeometryqualifier(const char* value, size_t size);
  inline ::std::string* mutable_primarygeometryqualifier();
  inline ::std::string* release_primarygeometryqualifier();
  inline void set_allocated_primarygeometryqualifier(::std::string* primarygeometryqualifier);

  // required string SecondaryGeometryQualifier = 7;
  inline bool has_secondarygeometryqualifier() const;
  inline void clear_secondarygeometryqualifier();
  static const int kSecondaryGeometryQualifierFieldNumber = 7;
  inline const ::std::string& secondarygeometryqualifier() const;
  inline void set_secondarygeometryqualifier(const ::std::string& value);
  inline void set_secondarygeometryqualifier(const char* value);
  inline void set_secondarygeometryqualifier(const char* value, size_t size);
  inline ::std::string* mutable_secondarygeometryqualifier();
  inline ::std::string* release_secondarygeometryqualifier();
  inline void set_allocated_secondarygeometryqualifier(::std::string* secondarygeometryqualifier);

  // @@protoc_insertion_point(class_scope:edu.vanderbilt.isis.meta.FeaturesType)
 private:
  inline void set_has_featuregeometrytype();
  inline void clear_has_featuregeometrytype();
  inline void set_has_featureid();
  inline void clear_has_featureid();
  inline void set_has_featureinterfacetype();
  inline void clear_has_featureinterfacetype();
  inline void set_has_geometrytype();
  inline void clear_has_geometrytype();
  inline void set_has_primarygeometryqualifier();
  inline void clear_has_primarygeometryqualifier();
  inline void set_has_secondarygeometryqualifier();
  inline void clear_has_secondarygeometryqualifier();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::FeatureType > feature_;
  ::std::string* featuregeometrytype_;
  ::std::string* featureid_;
  ::std::string* featureinterfacetype_;
  ::std::string* geometrytype_;
  ::std::string* primarygeometryqualifier_;
  ::std::string* secondarygeometryqualifier_;
  friend void  protobuf_AddDesc_AssemblyInterface_2eproto();
  friend void protobuf_AssignDesc_AssemblyInterface_2eproto();
  friend void protobuf_ShutdownFile_AssemblyInterface_2eproto();

  void InitAsDefaultInstance();
  static FeaturesType* default_instance_;
};
// -------------------------------------------------------------------

class GeometryType : public ::google::protobuf::Message {
 public:
  GeometryType();
  virtual ~GeometryType();

  GeometryType(const GeometryType& from);

  inline GeometryType& operator=(const GeometryType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GeometryType& default_instance();

  void Swap(GeometryType* other);

  // implements Message ----------------------------------------------

  GeometryType* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GeometryType& from);
  void MergeFrom(const GeometryType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .edu.vanderbilt.isis.meta.FeaturesType Features = 1;
  inline int features_size() const;
  inline void clear_features();
  static const int kFeaturesFieldNumber = 1;
  inline const ::edu::vanderbilt::isis::meta::FeaturesType& features(int index) const;
  inline ::edu::vanderbilt::isis::meta::FeaturesType* mutable_features(int index);
  inline ::edu::vanderbilt::isis::meta::FeaturesType* add_features();
  inline const ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::FeaturesType >&
      features() const;
  inline ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::FeaturesType >*
      mutable_features();

  // @@protoc_insertion_point(class_scope:edu.vanderbilt.isis.meta.GeometryType)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::FeaturesType > features_;
  friend void  protobuf_AddDesc_AssemblyInterface_2eproto();
  friend void protobuf_AssignDesc_AssemblyInterface_2eproto();
  friend void protobuf_ShutdownFile_AssemblyInterface_2eproto();

  void InitAsDefaultInstance();
  static GeometryType* default_instance_;
};
// -------------------------------------------------------------------

class PairType : public ::google::protobuf::Message {
 public:
  PairType();
  virtual ~PairType();

  PairType(const PairType& from);

  inline PairType& operator=(const PairType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PairType& default_instance();

  void Swap(PairType* other);

  // implements Message ----------------------------------------------

  PairType* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PairType& from);
  void MergeFrom(const PairType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .edu.vanderbilt.isis.meta.ConstraintFeatureType ConstraintFeatureA = 1;
  inline bool has_constraintfeaturea() const;
  inline void clear_constraintfeaturea();
  static const int kConstraintFeatureAFieldNumber = 1;
  inline const ::edu::vanderbilt::isis::meta::ConstraintFeatureType& constraintfeaturea() const;
  inline ::edu::vanderbilt::isis::meta::ConstraintFeatureType* mutable_constraintfeaturea();
  inline ::edu::vanderbilt::isis::meta::ConstraintFeatureType* release_constraintfeaturea();
  inline void set_allocated_constraintfeaturea(::edu::vanderbilt::isis::meta::ConstraintFeatureType* constraintfeaturea);

  // required .edu.vanderbilt.isis.meta.ConstraintFeatureType ConstraintFeatureB = 2;
  inline bool has_constraintfeatureb() const;
  inline void clear_constraintfeatureb();
  static const int kConstraintFeatureBFieldNumber = 2;
  inline const ::edu::vanderbilt::isis::meta::ConstraintFeatureType& constraintfeatureb() const;
  inline ::edu::vanderbilt::isis::meta::ConstraintFeatureType* mutable_constraintfeatureb();
  inline ::edu::vanderbilt::isis::meta::ConstraintFeatureType* release_constraintfeatureb();
  inline void set_allocated_constraintfeatureb(::edu::vanderbilt::isis::meta::ConstraintFeatureType* constraintfeatureb);

  // optional .edu.vanderbilt.isis.meta.ConstraintOffsetType ConstraintOffset = 3;
  inline bool has_constraintoffset() const;
  inline void clear_constraintoffset();
  static const int kConstraintOffsetFieldNumber = 3;
  inline const ::edu::vanderbilt::isis::meta::ConstraintOffsetType& constraintoffset() const;
  inline ::edu::vanderbilt::isis::meta::ConstraintOffsetType* mutable_constraintoffset();
  inline ::edu::vanderbilt::isis::meta::ConstraintOffsetType* release_constraintoffset();
  inline void set_allocated_constraintoffset(::edu::vanderbilt::isis::meta::ConstraintOffsetType* constraintoffset);

  // required string FeatureAlignmentType = 4;
  inline bool has_featurealignmenttype() const;
  inline void clear_featurealignmenttype();
  static const int kFeatureAlignmentTypeFieldNumber = 4;
  inline const ::std::string& featurealignmenttype() const;
  inline void set_featurealignmenttype(const ::std::string& value);
  inline void set_featurealignmenttype(const char* value);
  inline void set_featurealignmenttype(const char* value, size_t size);
  inline ::std::string* mutable_featurealignmenttype();
  inline ::std::string* release_featurealignmenttype();
  inline void set_allocated_featurealignmenttype(::std::string* featurealignmenttype);

  // required string FeatureGeometryType = 5;
  inline bool has_featuregeometrytype() const;
  inline void clear_featuregeometrytype();
  static const int kFeatureGeometryTypeFieldNumber = 5;
  inline const ::std::string& featuregeometrytype() const;
  inline void set_featuregeometrytype(const ::std::string& value);
  inline void set_featuregeometrytype(const char* value);
  inline void set_featuregeometrytype(const char* value, size_t size);
  inline ::std::string* mutable_featuregeometrytype();
  inline ::std::string* release_featuregeometrytype();
  inline void set_allocated_featuregeometrytype(::std::string* featuregeometrytype);

  // required string FeatureInterfaceType = 6;
  inline bool has_featureinterfacetype() const;
  inline void clear_featureinterfacetype();
  static const int kFeatureInterfaceTypeFieldNumber = 6;
  inline const ::std::string& featureinterfacetype() const;
  inline void set_featureinterfacetype(const ::std::string& value);
  inline void set_featureinterfacetype(const char* value);
  inline void set_featureinterfacetype(const char* value, size_t size);
  inline ::std::string* mutable_featureinterfacetype();
  inline ::std::string* release_featureinterfacetype();
  inline void set_allocated_featureinterfacetype(::std::string* featureinterfacetype);

  // @@protoc_insertion_point(class_scope:edu.vanderbilt.isis.meta.PairType)
 private:
  inline void set_has_constraintfeaturea();
  inline void clear_has_constraintfeaturea();
  inline void set_has_constraintfeatureb();
  inline void clear_has_constraintfeatureb();
  inline void set_has_constraintoffset();
  inline void clear_has_constraintoffset();
  inline void set_has_featurealignmenttype();
  inline void clear_has_featurealignmenttype();
  inline void set_has_featuregeometrytype();
  inline void clear_has_featuregeometrytype();
  inline void set_has_featureinterfacetype();
  inline void clear_has_featureinterfacetype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::edu::vanderbilt::isis::meta::ConstraintFeatureType* constraintfeaturea_;
  ::edu::vanderbilt::isis::meta::ConstraintFeatureType* constraintfeatureb_;
  ::edu::vanderbilt::isis::meta::ConstraintOffsetType* constraintoffset_;
  ::std::string* featurealignmenttype_;
  ::std::string* featuregeometrytype_;
  ::std::string* featureinterfacetype_;
  friend void  protobuf_AddDesc_AssemblyInterface_2eproto();
  friend void protobuf_AssignDesc_AssemblyInterface_2eproto();
  friend void protobuf_ShutdownFile_AssemblyInterface_2eproto();

  void InitAsDefaultInstance();
  static PairType* default_instance_;
};
// -------------------------------------------------------------------

class ParametricParametersType : public ::google::protobuf::Message {
 public:
  ParametricParametersType();
  virtual ~ParametricParametersType();

  ParametricParametersType(const ParametricParametersType& from);

  inline ParametricParametersType& operator=(const ParametricParametersType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ParametricParametersType& default_instance();

  void Swap(ParametricParametersType* other);

  // implements Message ----------------------------------------------

  ParametricParametersType* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ParametricParametersType& from);
  void MergeFrom(const ParametricParametersType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .edu.vanderbilt.isis.meta.CADParameterType CADParameter = 1;
  inline int cadparameter_size() const;
  inline void clear_cadparameter();
  static const int kCADParameterFieldNumber = 1;
  inline const ::edu::vanderbilt::isis::meta::CADParameterType& cadparameter(int index) const;
  inline ::edu::vanderbilt::isis::meta::CADParameterType* mutable_cadparameter(int index);
  inline ::edu::vanderbilt::isis::meta::CADParameterType* add_cadparameter();
  inline const ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::CADParameterType >&
      cadparameter() const;
  inline ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::CADParameterType >*
      mutable_cadparameter();

  // optional string ComponentID = 2;
  inline bool has_componentid() const;
  inline void clear_componentid();
  static const int kComponentIDFieldNumber = 2;
  inline const ::std::string& componentid() const;
  inline void set_componentid(const ::std::string& value);
  inline void set_componentid(const char* value);
  inline void set_componentid(const char* value, size_t size);
  inline ::std::string* mutable_componentid();
  inline ::std::string* release_componentid();
  inline void set_allocated_componentid(::std::string* componentid);

  // @@protoc_insertion_point(class_scope:edu.vanderbilt.isis.meta.ParametricParametersType)
 private:
  inline void set_has_componentid();
  inline void clear_has_componentid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::CADParameterType > cadparameter_;
  ::std::string* componentid_;
  friend void  protobuf_AddDesc_AssemblyInterface_2eproto();
  friend void protobuf_AssignDesc_AssemblyInterface_2eproto();
  friend void protobuf_ShutdownFile_AssemblyInterface_2eproto();

  void InitAsDefaultInstance();
  static ParametricParametersType* default_instance_;
};
// -------------------------------------------------------------------

class PropertiesType : public ::google::protobuf::Message {
 public:
  PropertiesType();
  virtual ~PropertiesType();

  PropertiesType(const PropertiesType& from);

  inline PropertiesType& operator=(const PropertiesType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PropertiesType& default_instance();

  void Swap(PropertiesType* other);

  // implements Message ----------------------------------------------

  PropertiesType* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PropertiesType& from);
  void MergeFrom(const PropertiesType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .edu.vanderbilt.isis.meta.UnitsType Units = 1;
  inline bool has_units() const;
  inline void clear_units();
  static const int kUnitsFieldNumber = 1;
  inline const ::edu::vanderbilt::isis::meta::UnitsType& units() const;
  inline ::edu::vanderbilt::isis::meta::UnitsType* mutable_units();
  inline ::edu::vanderbilt::isis::meta::UnitsType* release_units();
  inline void set_allocated_units(::edu::vanderbilt::isis::meta::UnitsType* units);

  // @@protoc_insertion_point(class_scope:edu.vanderbilt.isis.meta.PropertiesType)
 private:
  inline void set_has_units();
  inline void clear_has_units();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::edu::vanderbilt::isis::meta::UnitsType* units_;
  friend void  protobuf_AddDesc_AssemblyInterface_2eproto();
  friend void protobuf_AssignDesc_AssemblyInterface_2eproto();
  friend void protobuf_ShutdownFile_AssemblyInterface_2eproto();

  void InitAsDefaultInstance();
  static PropertiesType* default_instance_;
};
// -------------------------------------------------------------------

class STEPFormatType : public ::google::protobuf::Message {
 public:
  STEPFormatType();
  virtual ~STEPFormatType();

  STEPFormatType(const STEPFormatType& from);

  inline STEPFormatType& operator=(const STEPFormatType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const STEPFormatType& default_instance();

  void Swap(STEPFormatType* other);

  // implements Message ----------------------------------------------

  STEPFormatType* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const STEPFormatType& from);
  void MergeFrom(const STEPFormatType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string Name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:edu.vanderbilt.isis.meta.STEPFormatType)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  friend void  protobuf_AddDesc_AssemblyInterface_2eproto();
  friend void protobuf_AssignDesc_AssemblyInterface_2eproto();
  friend void protobuf_ShutdownFile_AssemblyInterface_2eproto();

  void InitAsDefaultInstance();
  static STEPFormatType* default_instance_;
};
// -------------------------------------------------------------------

class UnassembledComponentsType : public ::google::protobuf::Message {
 public:
  UnassembledComponentsType();
  virtual ~UnassembledComponentsType();

  UnassembledComponentsType(const UnassembledComponentsType& from);

  inline UnassembledComponentsType& operator=(const UnassembledComponentsType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UnassembledComponentsType& default_instance();

  void Swap(UnassembledComponentsType* other);

  // implements Message ----------------------------------------------

  UnassembledComponentsType* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UnassembledComponentsType& from);
  void MergeFrom(const UnassembledComponentsType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .edu.vanderbilt.isis.meta.CADComponentType CADComponent = 1;
  inline int cadcomponent_size() const;
  inline void clear_cadcomponent();
  static const int kCADComponentFieldNumber = 1;
  inline const ::edu::vanderbilt::isis::meta::CADComponentType& cadcomponent(int index) const;
  inline ::edu::vanderbilt::isis::meta::CADComponentType* mutable_cadcomponent(int index);
  inline ::edu::vanderbilt::isis::meta::CADComponentType* add_cadcomponent();
  inline const ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::CADComponentType >&
      cadcomponent() const;
  inline ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::CADComponentType >*
      mutable_cadcomponent();

  // @@protoc_insertion_point(class_scope:edu.vanderbilt.isis.meta.UnassembledComponentsType)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::CADComponentType > cadcomponent_;
  friend void  protobuf_AddDesc_AssemblyInterface_2eproto();
  friend void protobuf_AssignDesc_AssemblyInterface_2eproto();
  friend void protobuf_ShutdownFile_AssemblyInterface_2eproto();

  void InitAsDefaultInstance();
  static UnassembledComponentsType* default_instance_;
};
// -------------------------------------------------------------------

class UnitsType : public ::google::protobuf::Message {
 public:
  UnitsType();
  virtual ~UnitsType();

  UnitsType(const UnitsType& from);

  inline UnitsType& operator=(const UnitsType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UnitsType& default_instance();

  void Swap(UnitsType* other);

  // implements Message ----------------------------------------------

  UnitsType* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UnitsType& from);
  void MergeFrom(const UnitsType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string Value = 1;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 1;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:edu.vanderbilt.isis.meta.UnitsType)
 private:
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* value_;
  friend void  protobuf_AddDesc_AssemblyInterface_2eproto();
  friend void protobuf_AssignDesc_AssemblyInterface_2eproto();
  friend void protobuf_ShutdownFile_AssemblyInterface_2eproto();

  void InitAsDefaultInstance();
  static UnitsType* default_instance_;
};
// ===================================================================


// ===================================================================

// AnalysisComponentsType

// repeated .edu.vanderbilt.isis.meta.ComponentType Component = 1;
inline int AnalysisComponentsType::component_size() const {
  return component_.size();
}
inline void AnalysisComponentsType::clear_component() {
  component_.Clear();
}
inline const ::edu::vanderbilt::isis::meta::ComponentType& AnalysisComponentsType::component(int index) const {
  // @@protoc_insertion_point(field_get:edu.vanderbilt.isis.meta.AnalysisComponentsType.Component)
  return component_.Get(index);
}
inline ::edu::vanderbilt::isis::meta::ComponentType* AnalysisComponentsType::mutable_component(int index) {
  // @@protoc_insertion_point(field_mutable:edu.vanderbilt.isis.meta.AnalysisComponentsType.Component)
  return component_.Mutable(index);
}
inline ::edu::vanderbilt::isis::meta::ComponentType* AnalysisComponentsType::add_component() {
  // @@protoc_insertion_point(field_add:edu.vanderbilt.isis.meta.AnalysisComponentsType.Component)
  return component_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::ComponentType >&
AnalysisComponentsType::component() const {
  // @@protoc_insertion_point(field_list:edu.vanderbilt.isis.meta.AnalysisComponentsType.Component)
  return component_;
}
inline ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::ComponentType >*
AnalysisComponentsType::mutable_component() {
  // @@protoc_insertion_point(field_mutable_list:edu.vanderbilt.isis.meta.AnalysisComponentsType.Component)
  return &component_;
}

// -------------------------------------------------------------------

// AssembliesType

// repeated .edu.vanderbilt.isis.meta.AssemblyType Assembly = 1;
inline int AssembliesType::assembly_size() const {
  return assembly_.size();
}
inline void AssembliesType::clear_assembly() {
  assembly_.Clear();
}
inline const ::edu::vanderbilt::isis::meta::AssemblyType& AssembliesType::assembly(int index) const {
  // @@protoc_insertion_point(field_get:edu.vanderbilt.isis.meta.AssembliesType.Assembly)
  return assembly_.Get(index);
}
inline ::edu::vanderbilt::isis::meta::AssemblyType* AssembliesType::mutable_assembly(int index) {
  // @@protoc_insertion_point(field_mutable:edu.vanderbilt.isis.meta.AssembliesType.Assembly)
  return assembly_.Mutable(index);
}
inline ::edu::vanderbilt::isis::meta::AssemblyType* AssembliesType::add_assembly() {
  // @@protoc_insertion_point(field_add:edu.vanderbilt.isis.meta.AssembliesType.Assembly)
  return assembly_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::AssemblyType >&
AssembliesType::assembly() const {
  // @@protoc_insertion_point(field_list:edu.vanderbilt.isis.meta.AssembliesType.Assembly)
  return assembly_;
}
inline ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::AssemblyType >*
AssembliesType::mutable_assembly() {
  // @@protoc_insertion_point(field_mutable_list:edu.vanderbilt.isis.meta.AssembliesType.Assembly)
  return &assembly_;
}

// optional .edu.vanderbilt.isis.meta.DataExchangeType DataExchange = 2;
inline bool AssembliesType::has_dataexchange() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AssembliesType::set_has_dataexchange() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AssembliesType::clear_has_dataexchange() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AssembliesType::clear_dataexchange() {
  if (dataexchange_ != NULL) dataexchange_->::edu::vanderbilt::isis::meta::DataExchangeType::Clear();
  clear_has_dataexchange();
}
inline const ::edu::vanderbilt::isis::meta::DataExchangeType& AssembliesType::dataexchange() const {
  // @@protoc_insertion_point(field_get:edu.vanderbilt.isis.meta.AssembliesType.DataExchange)
  return dataexchange_ != NULL ? *dataexchange_ : *default_instance_->dataexchange_;
}
inline ::edu::vanderbilt::isis::meta::DataExchangeType* AssembliesType::mutable_dataexchange() {
  set_has_dataexchange();
  if (dataexchange_ == NULL) dataexchange_ = new ::edu::vanderbilt::isis::meta::DataExchangeType;
  // @@protoc_insertion_point(field_mutable:edu.vanderbilt.isis.meta.AssembliesType.DataExchange)
  return dataexchange_;
}
inline ::edu::vanderbilt::isis::meta::DataExchangeType* AssembliesType::release_dataexchange() {
  clear_has_dataexchange();
  ::edu::vanderbilt::isis::meta::DataExchangeType* temp = dataexchange_;
  dataexchange_ = NULL;
  return temp;
}
inline void AssembliesType::set_allocated_dataexchange(::edu::vanderbilt::isis::meta::DataExchangeType* dataexchange) {
  delete dataexchange_;
  dataexchange_ = dataexchange;
  if (dataexchange) {
    set_has_dataexchange();
  } else {
    clear_has_dataexchange();
  }
  // @@protoc_insertion_point(field_set_allocated:edu.vanderbilt.isis.meta.AssembliesType.DataExchange)
}

// optional .edu.vanderbilt.isis.meta.UnassembledComponentsType UnassembledComponents = 4;
inline bool AssembliesType::has_unassembledcomponents() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AssembliesType::set_has_unassembledcomponents() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AssembliesType::clear_has_unassembledcomponents() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AssembliesType::clear_unassembledcomponents() {
  if (unassembledcomponents_ != NULL) unassembledcomponents_->::edu::vanderbilt::isis::meta::UnassembledComponentsType::Clear();
  clear_has_unassembledcomponents();
}
inline const ::edu::vanderbilt::isis::meta::UnassembledComponentsType& AssembliesType::unassembledcomponents() const {
  // @@protoc_insertion_point(field_get:edu.vanderbilt.isis.meta.AssembliesType.UnassembledComponents)
  return unassembledcomponents_ != NULL ? *unassembledcomponents_ : *default_instance_->unassembledcomponents_;
}
inline ::edu::vanderbilt::isis::meta::UnassembledComponentsType* AssembliesType::mutable_unassembledcomponents() {
  set_has_unassembledcomponents();
  if (unassembledcomponents_ == NULL) unassembledcomponents_ = new ::edu::vanderbilt::isis::meta::UnassembledComponentsType;
  // @@protoc_insertion_point(field_mutable:edu.vanderbilt.isis.meta.AssembliesType.UnassembledComponents)
  return unassembledcomponents_;
}
inline ::edu::vanderbilt::isis::meta::UnassembledComponentsType* AssembliesType::release_unassembledcomponents() {
  clear_has_unassembledcomponents();
  ::edu::vanderbilt::isis::meta::UnassembledComponentsType* temp = unassembledcomponents_;
  unassembledcomponents_ = NULL;
  return temp;
}
inline void AssembliesType::set_allocated_unassembledcomponents(::edu::vanderbilt::isis::meta::UnassembledComponentsType* unassembledcomponents) {
  delete unassembledcomponents_;
  unassembledcomponents_ = unassembledcomponents;
  if (unassembledcomponents) {
    set_has_unassembledcomponents();
  } else {
    clear_has_unassembledcomponents();
  }
  // @@protoc_insertion_point(field_set_allocated:edu.vanderbilt.isis.meta.AssembliesType.UnassembledComponents)
}

// repeated .edu.vanderbilt.isis.meta.AssembliesType Assemblies = 5;
inline int AssembliesType::assemblies_size() const {
  return assemblies_.size();
}
inline void AssembliesType::clear_assemblies() {
  assemblies_.Clear();
}
inline const ::edu::vanderbilt::isis::meta::AssembliesType& AssembliesType::assemblies(int index) const {
  // @@protoc_insertion_point(field_get:edu.vanderbilt.isis.meta.AssembliesType.Assemblies)
  return assemblies_.Get(index);
}
inline ::edu::vanderbilt::isis::meta::AssembliesType* AssembliesType::mutable_assemblies(int index) {
  // @@protoc_insertion_point(field_mutable:edu.vanderbilt.isis.meta.AssembliesType.Assemblies)
  return assemblies_.Mutable(index);
}
inline ::edu::vanderbilt::isis::meta::AssembliesType* AssembliesType::add_assemblies() {
  // @@protoc_insertion_point(field_add:edu.vanderbilt.isis.meta.AssembliesType.Assemblies)
  return assemblies_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::AssembliesType >&
AssembliesType::assemblies() const {
  // @@protoc_insertion_point(field_list:edu.vanderbilt.isis.meta.AssembliesType.Assemblies)
  return assemblies_;
}
inline ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::AssembliesType >*
AssembliesType::mutable_assemblies() {
  // @@protoc_insertion_point(field_mutable_list:edu.vanderbilt.isis.meta.AssembliesType.Assemblies)
  return &assemblies_;
}

// required string VersionInfo = 6;
inline bool AssembliesType::has_versioninfo() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AssembliesType::set_has_versioninfo() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AssembliesType::clear_has_versioninfo() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AssembliesType::clear_versioninfo() {
  if (versioninfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    versioninfo_->clear();
  }
  clear_has_versioninfo();
}
inline const ::std::string& AssembliesType::versioninfo() const {
  // @@protoc_insertion_point(field_get:edu.vanderbilt.isis.meta.AssembliesType.VersionInfo)
  return *versioninfo_;
}
inline void AssembliesType::set_versioninfo(const ::std::string& value) {
  set_has_versioninfo();
  if (versioninfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    versioninfo_ = new ::std::string;
  }
  versioninfo_->assign(value);
  // @@protoc_insertion_point(field_set:edu.vanderbilt.isis.meta.AssembliesType.VersionInfo)
}
inline void AssembliesType::set_versioninfo(const char* value) {
  set_has_versioninfo();
  if (versioninfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    versioninfo_ = new ::std::string;
  }
  versioninfo_->assign(value);
  // @@protoc_insertion_point(field_set_char:edu.vanderbilt.isis.meta.AssembliesType.VersionInfo)
}
inline void AssembliesType::set_versioninfo(const char* value, size_t size) {
  set_has_versioninfo();
  if (versioninfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    versioninfo_ = new ::std::string;
  }
  versioninfo_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:edu.vanderbilt.isis.meta.AssembliesType.VersionInfo)
}
inline ::std::string* AssembliesType::mutable_versioninfo() {
  set_has_versioninfo();
  if (versioninfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    versioninfo_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:edu.vanderbilt.isis.meta.AssembliesType.VersionInfo)
  return versioninfo_;
}
inline ::std::string* AssembliesType::release_versioninfo() {
  clear_has_versioninfo();
  if (versioninfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = versioninfo_;
    versioninfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AssembliesType::set_allocated_versioninfo(::std::string* versioninfo) {
  if (versioninfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete versioninfo_;
  }
  if (versioninfo) {
    set_has_versioninfo();
    versioninfo_ = versioninfo;
  } else {
    clear_has_versioninfo();
    versioninfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:edu.vanderbilt.isis.meta.AssembliesType.VersionInfo)
}

// -------------------------------------------------------------------

// AssemblyType

// optional .edu.vanderbilt.isis.meta.CADComponentType CADComponent = 2;
inline bool AssemblyType::has_cadcomponent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AssemblyType::set_has_cadcomponent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AssemblyType::clear_has_cadcomponent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AssemblyType::clear_cadcomponent() {
  if (cadcomponent_ != NULL) cadcomponent_->::edu::vanderbilt::isis::meta::CADComponentType::Clear();
  clear_has_cadcomponent();
}
inline const ::edu::vanderbilt::isis::meta::CADComponentType& AssemblyType::cadcomponent() const {
  // @@protoc_insertion_point(field_get:edu.vanderbilt.isis.meta.AssemblyType.CADComponent)
  return cadcomponent_ != NULL ? *cadcomponent_ : *default_instance_->cadcomponent_;
}
inline ::edu::vanderbilt::isis::meta::CADComponentType* AssemblyType::mutable_cadcomponent() {
  set_has_cadcomponent();
  if (cadcomponent_ == NULL) cadcomponent_ = new ::edu::vanderbilt::isis::meta::CADComponentType;
  // @@protoc_insertion_point(field_mutable:edu.vanderbilt.isis.meta.AssemblyType.CADComponent)
  return cadcomponent_;
}
inline ::edu::vanderbilt::isis::meta::CADComponentType* AssemblyType::release_cadcomponent() {
  clear_has_cadcomponent();
  ::edu::vanderbilt::isis::meta::CADComponentType* temp = cadcomponent_;
  cadcomponent_ = NULL;
  return temp;
}
inline void AssemblyType::set_allocated_cadcomponent(::edu::vanderbilt::isis::meta::CADComponentType* cadcomponent) {
  delete cadcomponent_;
  cadcomponent_ = cadcomponent;
  if (cadcomponent) {
    set_has_cadcomponent();
  } else {
    clear_has_cadcomponent();
  }
  // @@protoc_insertion_point(field_set_allocated:edu.vanderbilt.isis.meta.AssemblyType.CADComponent)
}

// required .edu.vanderbilt.isis.meta.PropertiesType Properties = 4;
inline bool AssemblyType::has_properties() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AssemblyType::set_has_properties() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AssemblyType::clear_has_properties() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AssemblyType::clear_properties() {
  if (properties_ != NULL) properties_->::edu::vanderbilt::isis::meta::PropertiesType::Clear();
  clear_has_properties();
}
inline const ::edu::vanderbilt::isis::meta::PropertiesType& AssemblyType::properties() const {
  // @@protoc_insertion_point(field_get:edu.vanderbilt.isis.meta.AssemblyType.Properties)
  return properties_ != NULL ? *properties_ : *default_instance_->properties_;
}
inline ::edu::vanderbilt::isis::meta::PropertiesType* AssemblyType::mutable_properties() {
  set_has_properties();
  if (properties_ == NULL) properties_ = new ::edu::vanderbilt::isis::meta::PropertiesType;
  // @@protoc_insertion_point(field_mutable:edu.vanderbilt.isis.meta.AssemblyType.Properties)
  return properties_;
}
inline ::edu::vanderbilt::isis::meta::PropertiesType* AssemblyType::release_properties() {
  clear_has_properties();
  ::edu::vanderbilt::isis::meta::PropertiesType* temp = properties_;
  properties_ = NULL;
  return temp;
}
inline void AssemblyType::set_allocated_properties(::edu::vanderbilt::isis::meta::PropertiesType* properties) {
  delete properties_;
  properties_ = properties;
  if (properties) {
    set_has_properties();
  } else {
    clear_has_properties();
  }
  // @@protoc_insertion_point(field_set_allocated:edu.vanderbilt.isis.meta.AssemblyType.Properties)
}

// required string ConfigurationID = 5;
inline bool AssemblyType::has_configurationid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AssemblyType::set_has_configurationid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AssemblyType::clear_has_configurationid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AssemblyType::clear_configurationid() {
  if (configurationid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    configurationid_->clear();
  }
  clear_has_configurationid();
}
inline const ::std::string& AssemblyType::configurationid() const {
  // @@protoc_insertion_point(field_get:edu.vanderbilt.isis.meta.AssemblyType.ConfigurationID)
  return *configurationid_;
}
inline void AssemblyType::set_configurationid(const ::std::string& value) {
  set_has_configurationid();
  if (configurationid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    configurationid_ = new ::std::string;
  }
  configurationid_->assign(value);
  // @@protoc_insertion_point(field_set:edu.vanderbilt.isis.meta.AssemblyType.ConfigurationID)
}
inline void AssemblyType::set_configurationid(const char* value) {
  set_has_configurationid();
  if (configurationid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    configurationid_ = new ::std::string;
  }
  configurationid_->assign(value);
  // @@protoc_insertion_point(field_set_char:edu.vanderbilt.isis.meta.AssemblyType.ConfigurationID)
}
inline void AssemblyType::set_configurationid(const char* value, size_t size) {
  set_has_configurationid();
  if (configurationid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    configurationid_ = new ::std::string;
  }
  configurationid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:edu.vanderbilt.isis.meta.AssemblyType.ConfigurationID)
}
inline ::std::string* AssemblyType::mutable_configurationid() {
  set_has_configurationid();
  if (configurationid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    configurationid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:edu.vanderbilt.isis.meta.AssemblyType.ConfigurationID)
  return configurationid_;
}
inline ::std::string* AssemblyType::release_configurationid() {
  clear_has_configurationid();
  if (configurationid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = configurationid_;
    configurationid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AssemblyType::set_allocated_configurationid(::std::string* configurationid) {
  if (configurationid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete configurationid_;
  }
  if (configurationid) {
    set_has_configurationid();
    configurationid_ = configurationid;
  } else {
    clear_has_configurationid();
    configurationid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:edu.vanderbilt.isis.meta.AssemblyType.ConfigurationID)
}

// -------------------------------------------------------------------

// CADComponentType

// repeated .edu.vanderbilt.isis.meta.CADComponentType CADComponent = 1;
inline int CADComponentType::cadcomponent_size() const {
  return cadcomponent_.size();
}
inline void CADComponentType::clear_cadcomponent() {
  cadcomponent_.Clear();
}
inline const ::edu::vanderbilt::isis::meta::CADComponentType& CADComponentType::cadcomponent(int index) const {
  // @@protoc_insertion_point(field_get:edu.vanderbilt.isis.meta.CADComponentType.CADComponent)
  return cadcomponent_.Get(index);
}
inline ::edu::vanderbilt::isis::meta::CADComponentType* CADComponentType::mutable_cadcomponent(int index) {
  // @@protoc_insertion_point(field_mutable:edu.vanderbilt.isis.meta.CADComponentType.CADComponent)
  return cadcomponent_.Mutable(index);
}
inline ::edu::vanderbilt::isis::meta::CADComponentType* CADComponentType::add_cadcomponent() {
  // @@protoc_insertion_point(field_add:edu.vanderbilt.isis.meta.CADComponentType.CADComponent)
  return cadcomponent_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::CADComponentType >&
CADComponentType::cadcomponent() const {
  // @@protoc_insertion_point(field_list:edu.vanderbilt.isis.meta.CADComponentType.CADComponent)
  return cadcomponent_;
}
inline ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::CADComponentType >*
CADComponentType::mutable_cadcomponent() {
  // @@protoc_insertion_point(field_mutable_list:edu.vanderbilt.isis.meta.CADComponentType.CADComponent)
  return &cadcomponent_;
}

// optional .edu.vanderbilt.isis.meta.ParametricParametersType ParametricParameters = 4;
inline bool CADComponentType::has_parametricparameters() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CADComponentType::set_has_parametricparameters() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CADComponentType::clear_has_parametricparameters() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CADComponentType::clear_parametricparameters() {
  if (parametricparameters_ != NULL) parametricparameters_->::edu::vanderbilt::isis::meta::ParametricParametersType::Clear();
  clear_has_parametricparameters();
}
inline const ::edu::vanderbilt::isis::meta::ParametricParametersType& CADComponentType::parametricparameters() const {
  // @@protoc_insertion_point(field_get:edu.vanderbilt.isis.meta.CADComponentType.ParametricParameters)
  return parametricparameters_ != NULL ? *parametricparameters_ : *default_instance_->parametricparameters_;
}
inline ::edu::vanderbilt::isis::meta::ParametricParametersType* CADComponentType::mutable_parametricparameters() {
  set_has_parametricparameters();
  if (parametricparameters_ == NULL) parametricparameters_ = new ::edu::vanderbilt::isis::meta::ParametricParametersType;
  // @@protoc_insertion_point(field_mutable:edu.vanderbilt.isis.meta.CADComponentType.ParametricParameters)
  return parametricparameters_;
}
inline ::edu::vanderbilt::isis::meta::ParametricParametersType* CADComponentType::release_parametricparameters() {
  clear_has_parametricparameters();
  ::edu::vanderbilt::isis::meta::ParametricParametersType* temp = parametricparameters_;
  parametricparameters_ = NULL;
  return temp;
}
inline void CADComponentType::set_allocated_parametricparameters(::edu::vanderbilt::isis::meta::ParametricParametersType* parametricparameters) {
  delete parametricparameters_;
  parametricparameters_ = parametricparameters;
  if (parametricparameters) {
    set_has_parametricparameters();
  } else {
    clear_has_parametricparameters();
  }
  // @@protoc_insertion_point(field_set_allocated:edu.vanderbilt.isis.meta.CADComponentType.ParametricParameters)
}

// repeated .edu.vanderbilt.isis.meta.ConnectorType Connectors = 14;
inline int CADComponentType::connectors_size() const {
  return connectors_.size();
}
inline void CADComponentType::clear_connectors() {
  connectors_.Clear();
}
inline const ::edu::vanderbilt::isis::meta::ConnectorType& CADComponentType::connectors(int index) const {
  // @@protoc_insertion_point(field_get:edu.vanderbilt.isis.meta.CADComponentType.Connectors)
  return connectors_.Get(index);
}
inline ::edu::vanderbilt::isis::meta::ConnectorType* CADComponentType::mutable_connectors(int index) {
  // @@protoc_insertion_point(field_mutable:edu.vanderbilt.isis.meta.CADComponentType.Connectors)
  return connectors_.Mutable(index);
}
inline ::edu::vanderbilt::isis::meta::ConnectorType* CADComponentType::add_connectors() {
  // @@protoc_insertion_point(field_add:edu.vanderbilt.isis.meta.CADComponentType.Connectors)
  return connectors_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::ConnectorType >&
CADComponentType::connectors() const {
  // @@protoc_insertion_point(field_list:edu.vanderbilt.isis.meta.CADComponentType.Connectors)
  return connectors_;
}
inline ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::ConnectorType >*
CADComponentType::mutable_connectors() {
  // @@protoc_insertion_point(field_mutable_list:edu.vanderbilt.isis.meta.CADComponentType.Connectors)
  return &connectors_;
}

// repeated .edu.vanderbilt.isis.meta.ConnectorDatumType Datums = 15;
inline int CADComponentType::datums_size() const {
  return datums_.size();
}
inline void CADComponentType::clear_datums() {
  datums_.Clear();
}
inline const ::edu::vanderbilt::isis::meta::ConnectorDatumType& CADComponentType::datums(int index) const {
  // @@protoc_insertion_point(field_get:edu.vanderbilt.isis.meta.CADComponentType.Datums)
  return datums_.Get(index);
}
inline ::edu::vanderbilt::isis::meta::ConnectorDatumType* CADComponentType::mutable_datums(int index) {
  // @@protoc_insertion_point(field_mutable:edu.vanderbilt.isis.meta.CADComponentType.Datums)
  return datums_.Mutable(index);
}
inline ::edu::vanderbilt::isis::meta::ConnectorDatumType* CADComponentType::add_datums() {
  // @@protoc_insertion_point(field_add:edu.vanderbilt.isis.meta.CADComponentType.Datums)
  return datums_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::ConnectorDatumType >&
CADComponentType::datums() const {
  // @@protoc_insertion_point(field_list:edu.vanderbilt.isis.meta.CADComponentType.Datums)
  return datums_;
}
inline ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::ConnectorDatumType >*
CADComponentType::mutable_datums() {
  // @@protoc_insertion_point(field_mutable_list:edu.vanderbilt.isis.meta.CADComponentType.Datums)
  return &datums_;
}

// optional string ComponentID = 5;
inline bool CADComponentType::has_componentid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CADComponentType::set_has_componentid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CADComponentType::clear_has_componentid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CADComponentType::clear_componentid() {
  if (componentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    componentid_->clear();
  }
  clear_has_componentid();
}
inline const ::std::string& CADComponentType::componentid() const {
  // @@protoc_insertion_point(field_get:edu.vanderbilt.isis.meta.CADComponentType.ComponentID)
  return *componentid_;
}
inline void CADComponentType::set_componentid(const ::std::string& value) {
  set_has_componentid();
  if (componentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    componentid_ = new ::std::string;
  }
  componentid_->assign(value);
  // @@protoc_insertion_point(field_set:edu.vanderbilt.isis.meta.CADComponentType.ComponentID)
}
inline void CADComponentType::set_componentid(const char* value) {
  set_has_componentid();
  if (componentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    componentid_ = new ::std::string;
  }
  componentid_->assign(value);
  // @@protoc_insertion_point(field_set_char:edu.vanderbilt.isis.meta.CADComponentType.ComponentID)
}
inline void CADComponentType::set_componentid(const char* value, size_t size) {
  set_has_componentid();
  if (componentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    componentid_ = new ::std::string;
  }
  componentid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:edu.vanderbilt.isis.meta.CADComponentType.ComponentID)
}
inline ::std::string* CADComponentType::mutable_componentid() {
  set_has_componentid();
  if (componentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    componentid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:edu.vanderbilt.isis.meta.CADComponentType.ComponentID)
  return componentid_;
}
inline ::std::string* CADComponentType::release_componentid() {
  clear_has_componentid();
  if (componentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = componentid_;
    componentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CADComponentType::set_allocated_componentid(::std::string* componentid) {
  if (componentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete componentid_;
  }
  if (componentid) {
    set_has_componentid();
    componentid_ = componentid;
  } else {
    clear_has_componentid();
    componentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:edu.vanderbilt.isis.meta.CADComponentType.ComponentID)
}

// optional string AvmComponentID = 11;
inline bool CADComponentType::has_avmcomponentid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CADComponentType::set_has_avmcomponentid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CADComponentType::clear_has_avmcomponentid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CADComponentType::clear_avmcomponentid() {
  if (avmcomponentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avmcomponentid_->clear();
  }
  clear_has_avmcomponentid();
}
inline const ::std::string& CADComponentType::avmcomponentid() const {
  // @@protoc_insertion_point(field_get:edu.vanderbilt.isis.meta.CADComponentType.AvmComponentID)
  return *avmcomponentid_;
}
inline void CADComponentType::set_avmcomponentid(const ::std::string& value) {
  set_has_avmcomponentid();
  if (avmcomponentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avmcomponentid_ = new ::std::string;
  }
  avmcomponentid_->assign(value);
  // @@protoc_insertion_point(field_set:edu.vanderbilt.isis.meta.CADComponentType.AvmComponentID)
}
inline void CADComponentType::set_avmcomponentid(const char* value) {
  set_has_avmcomponentid();
  if (avmcomponentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avmcomponentid_ = new ::std::string;
  }
  avmcomponentid_->assign(value);
  // @@protoc_insertion_point(field_set_char:edu.vanderbilt.isis.meta.CADComponentType.AvmComponentID)
}
inline void CADComponentType::set_avmcomponentid(const char* value, size_t size) {
  set_has_avmcomponentid();
  if (avmcomponentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avmcomponentid_ = new ::std::string;
  }
  avmcomponentid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:edu.vanderbilt.isis.meta.CADComponentType.AvmComponentID)
}
inline ::std::string* CADComponentType::mutable_avmcomponentid() {
  set_has_avmcomponentid();
  if (avmcomponentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avmcomponentid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:edu.vanderbilt.isis.meta.CADComponentType.AvmComponentID)
  return avmcomponentid_;
}
inline ::std::string* CADComponentType::release_avmcomponentid() {
  clear_has_avmcomponentid();
  if (avmcomponentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = avmcomponentid_;
    avmcomponentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CADComponentType::set_allocated_avmcomponentid(::std::string* avmcomponentid) {
  if (avmcomponentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete avmcomponentid_;
  }
  if (avmcomponentid) {
    set_has_avmcomponentid();
    avmcomponentid_ = avmcomponentid;
  } else {
    clear_has_avmcomponentid();
    avmcomponentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:edu.vanderbilt.isis.meta.CADComponentType.AvmComponentID)
}

// optional string MaterialID = 6;
inline bool CADComponentType::has_materialid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CADComponentType::set_has_materialid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CADComponentType::clear_has_materialid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CADComponentType::clear_materialid() {
  if (materialid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    materialid_->clear();
  }
  clear_has_materialid();
}
inline const ::std::string& CADComponentType::materialid() const {
  // @@protoc_insertion_point(field_get:edu.vanderbilt.isis.meta.CADComponentType.MaterialID)
  return *materialid_;
}
inline void CADComponentType::set_materialid(const ::std::string& value) {
  set_has_materialid();
  if (materialid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    materialid_ = new ::std::string;
  }
  materialid_->assign(value);
  // @@protoc_insertion_point(field_set:edu.vanderbilt.isis.meta.CADComponentType.MaterialID)
}
inline void CADComponentType::set_materialid(const char* value) {
  set_has_materialid();
  if (materialid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    materialid_ = new ::std::string;
  }
  materialid_->assign(value);
  // @@protoc_insertion_point(field_set_char:edu.vanderbilt.isis.meta.CADComponentType.MaterialID)
}
inline void CADComponentType::set_materialid(const char* value, size_t size) {
  set_has_materialid();
  if (materialid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    materialid_ = new ::std::string;
  }
  materialid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:edu.vanderbilt.isis.meta.CADComponentType.MaterialID)
}
inline ::std::string* CADComponentType::mutable_materialid() {
  set_has_materialid();
  if (materialid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    materialid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:edu.vanderbilt.isis.meta.CADComponentType.MaterialID)
  return materialid_;
}
inline ::std::string* CADComponentType::release_materialid() {
  clear_has_materialid();
  if (materialid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = materialid_;
    materialid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CADComponentType::set_allocated_materialid(::std::string* materialid) {
  if (materialid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete materialid_;
  }
  if (materialid) {
    set_has_materialid();
    materialid_ = materialid;
  } else {
    clear_has_materialid();
    materialid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:edu.vanderbilt.isis.meta.CADComponentType.MaterialID)
}

// optional string Name = 7;
inline bool CADComponentType::has_name() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CADComponentType::set_has_name() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CADComponentType::clear_has_name() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CADComponentType::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CADComponentType::name() const {
  // @@protoc_insertion_point(field_get:edu.vanderbilt.isis.meta.CADComponentType.Name)
  return *name_;
}
inline void CADComponentType::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:edu.vanderbilt.isis.meta.CADComponentType.Name)
}
inline void CADComponentType::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:edu.vanderbilt.isis.meta.CADComponentType.Name)
}
inline void CADComponentType::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:edu.vanderbilt.isis.meta.CADComponentType.Name)
}
inline ::std::string* CADComponentType::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:edu.vanderbilt.isis.meta.CADComponentType.Name)
  return name_;
}
inline ::std::string* CADComponentType::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CADComponentType::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:edu.vanderbilt.isis.meta.CADComponentType.Name)
}

// optional string SpecialInstruction = 8;
inline bool CADComponentType::has_specialinstruction() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CADComponentType::set_has_specialinstruction() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CADComponentType::clear_has_specialinstruction() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CADComponentType::clear_specialinstruction() {
  if (specialinstruction_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    specialinstruction_->clear();
  }
  clear_has_specialinstruction();
}
inline const ::std::string& CADComponentType::specialinstruction() const {
  // @@protoc_insertion_point(field_get:edu.vanderbilt.isis.meta.CADComponentType.SpecialInstruction)
  return *specialinstruction_;
}
inline void CADComponentType::set_specialinstruction(const ::std::string& value) {
  set_has_specialinstruction();
  if (specialinstruction_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    specialinstruction_ = new ::std::string;
  }
  specialinstruction_->assign(value);
  // @@protoc_insertion_point(field_set:edu.vanderbilt.isis.meta.CADComponentType.SpecialInstruction)
}
inline void CADComponentType::set_specialinstruction(const char* value) {
  set_has_specialinstruction();
  if (specialinstruction_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    specialinstruction_ = new ::std::string;
  }
  specialinstruction_->assign(value);
  // @@protoc_insertion_point(field_set_char:edu.vanderbilt.isis.meta.CADComponentType.SpecialInstruction)
}
inline void CADComponentType::set_specialinstruction(const char* value, size_t size) {
  set_has_specialinstruction();
  if (specialinstruction_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    specialinstruction_ = new ::std::string;
  }
  specialinstruction_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:edu.vanderbilt.isis.meta.CADComponentType.SpecialInstruction)
}
inline ::std::string* CADComponentType::mutable_specialinstruction() {
  set_has_specialinstruction();
  if (specialinstruction_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    specialinstruction_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:edu.vanderbilt.isis.meta.CADComponentType.SpecialInstruction)
  return specialinstruction_;
}
inline ::std::string* CADComponentType::release_specialinstruction() {
  clear_has_specialinstruction();
  if (specialinstruction_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = specialinstruction_;
    specialinstruction_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CADComponentType::set_allocated_specialinstruction(::std::string* specialinstruction) {
  if (specialinstruction_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete specialinstruction_;
  }
  if (specialinstruction) {
    set_has_specialinstruction();
    specialinstruction_ = specialinstruction;
  } else {
    clear_has_specialinstruction();
    specialinstruction_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:edu.vanderbilt.isis.meta.CADComponentType.SpecialInstruction)
}

// optional bool Standalone = 9;
inline bool CADComponentType::has_standalone() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CADComponentType::set_has_standalone() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CADComponentType::clear_has_standalone() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CADComponentType::clear_standalone() {
  standalone_ = false;
  clear_has_standalone();
}
inline bool CADComponentType::standalone() const {
  // @@protoc_insertion_point(field_get:edu.vanderbilt.isis.meta.CADComponentType.Standalone)
  return standalone_;
}
inline void CADComponentType::set_standalone(bool value) {
  set_has_standalone();
  standalone_ = value;
  // @@protoc_insertion_point(field_set:edu.vanderbilt.isis.meta.CADComponentType.Standalone)
}

// optional string Type = 10;
inline bool CADComponentType::has_type() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CADComponentType::set_has_type() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CADComponentType::clear_has_type() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CADComponentType::clear_type() {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& CADComponentType::type() const {
  // @@protoc_insertion_point(field_get:edu.vanderbilt.isis.meta.CADComponentType.Type)
  return *type_;
}
inline void CADComponentType::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set:edu.vanderbilt.isis.meta.CADComponentType.Type)
}
inline void CADComponentType::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set_char:edu.vanderbilt.isis.meta.CADComponentType.Type)
}
inline void CADComponentType::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:edu.vanderbilt.isis.meta.CADComponentType.Type)
}
inline ::std::string* CADComponentType::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:edu.vanderbilt.isis.meta.CADComponentType.Type)
  return type_;
}
inline ::std::string* CADComponentType::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CADComponentType::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:edu.vanderbilt.isis.meta.CADComponentType.Type)
}

// optional string CADModelID = 12;
inline bool CADComponentType::has_cadmodelid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CADComponentType::set_has_cadmodelid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CADComponentType::clear_has_cadmodelid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CADComponentType::clear_cadmodelid() {
  if (cadmodelid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cadmodelid_->clear();
  }
  clear_has_cadmodelid();
}
inline const ::std::string& CADComponentType::cadmodelid() const {
  // @@protoc_insertion_point(field_get:edu.vanderbilt.isis.meta.CADComponentType.CADModelID)
  return *cadmodelid_;
}
inline void CADComponentType::set_cadmodelid(const ::std::string& value) {
  set_has_cadmodelid();
  if (cadmodelid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cadmodelid_ = new ::std::string;
  }
  cadmodelid_->assign(value);
  // @@protoc_insertion_point(field_set:edu.vanderbilt.isis.meta.CADComponentType.CADModelID)
}
inline void CADComponentType::set_cadmodelid(const char* value) {
  set_has_cadmodelid();
  if (cadmodelid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cadmodelid_ = new ::std::string;
  }
  cadmodelid_->assign(value);
  // @@protoc_insertion_point(field_set_char:edu.vanderbilt.isis.meta.CADComponentType.CADModelID)
}
inline void CADComponentType::set_cadmodelid(const char* value, size_t size) {
  set_has_cadmodelid();
  if (cadmodelid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cadmodelid_ = new ::std::string;
  }
  cadmodelid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:edu.vanderbilt.isis.meta.CADComponentType.CADModelID)
}
inline ::std::string* CADComponentType::mutable_cadmodelid() {
  set_has_cadmodelid();
  if (cadmodelid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cadmodelid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:edu.vanderbilt.isis.meta.CADComponentType.CADModelID)
  return cadmodelid_;
}
inline ::std::string* CADComponentType::release_cadmodelid() {
  clear_has_cadmodelid();
  if (cadmodelid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = cadmodelid_;
    cadmodelid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CADComponentType::set_allocated_cadmodelid(::std::string* cadmodelid) {
  if (cadmodelid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cadmodelid_;
  }
  if (cadmodelid) {
    set_has_cadmodelid();
    cadmodelid_ = cadmodelid;
  } else {
    clear_has_cadmodelid();
    cadmodelid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:edu.vanderbilt.isis.meta.CADComponentType.CADModelID)
}

// optional string DisplayName = 13;
inline bool CADComponentType::has_displayname() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CADComponentType::set_has_displayname() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CADComponentType::clear_has_displayname() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CADComponentType::clear_displayname() {
  if (displayname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    displayname_->clear();
  }
  clear_has_displayname();
}
inline const ::std::string& CADComponentType::displayname() const {
  // @@protoc_insertion_point(field_get:edu.vanderbilt.isis.meta.CADComponentType.DisplayName)
  return *displayname_;
}
inline void CADComponentType::set_displayname(const ::std::string& value) {
  set_has_displayname();
  if (displayname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    displayname_ = new ::std::string;
  }
  displayname_->assign(value);
  // @@protoc_insertion_point(field_set:edu.vanderbilt.isis.meta.CADComponentType.DisplayName)
}
inline void CADComponentType::set_displayname(const char* value) {
  set_has_displayname();
  if (displayname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    displayname_ = new ::std::string;
  }
  displayname_->assign(value);
  // @@protoc_insertion_point(field_set_char:edu.vanderbilt.isis.meta.CADComponentType.DisplayName)
}
inline void CADComponentType::set_displayname(const char* value, size_t size) {
  set_has_displayname();
  if (displayname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    displayname_ = new ::std::string;
  }
  displayname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:edu.vanderbilt.isis.meta.CADComponentType.DisplayName)
}
inline ::std::string* CADComponentType::mutable_displayname() {
  set_has_displayname();
  if (displayname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    displayname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:edu.vanderbilt.isis.meta.CADComponentType.DisplayName)
  return displayname_;
}
inline ::std::string* CADComponentType::release_displayname() {
  clear_has_displayname();
  if (displayname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = displayname_;
    displayname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CADComponentType::set_allocated_displayname(::std::string* displayname) {
  if (displayname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete displayname_;
  }
  if (displayname) {
    set_has_displayname();
    displayname_ = displayname;
  } else {
    clear_has_displayname();
    displayname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:edu.vanderbilt.isis.meta.CADComponentType.DisplayName)
}

// -------------------------------------------------------------------

// CADParameterType

// optional .edu.vanderbilt.isis.meta.UnitsType Units = 1;
inline bool CADParameterType::has_units() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CADParameterType::set_has_units() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CADParameterType::clear_has_units() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CADParameterType::clear_units() {
  if (units_ != NULL) units_->::edu::vanderbilt::isis::meta::UnitsType::Clear();
  clear_has_units();
}
inline const ::edu::vanderbilt::isis::meta::UnitsType& CADParameterType::units() const {
  // @@protoc_insertion_point(field_get:edu.vanderbilt.isis.meta.CADParameterType.Units)
  return units_ != NULL ? *units_ : *default_instance_->units_;
}
inline ::edu::vanderbilt::isis::meta::UnitsType* CADParameterType::mutable_units() {
  set_has_units();
  if (units_ == NULL) units_ = new ::edu::vanderbilt::isis::meta::UnitsType;
  // @@protoc_insertion_point(field_mutable:edu.vanderbilt.isis.meta.CADParameterType.Units)
  return units_;
}
inline ::edu::vanderbilt::isis::meta::UnitsType* CADParameterType::release_units() {
  clear_has_units();
  ::edu::vanderbilt::isis::meta::UnitsType* temp = units_;
  units_ = NULL;
  return temp;
}
inline void CADParameterType::set_allocated_units(::edu::vanderbilt::isis::meta::UnitsType* units) {
  delete units_;
  units_ = units;
  if (units) {
    set_has_units();
  } else {
    clear_has_units();
  }
  // @@protoc_insertion_point(field_set_allocated:edu.vanderbilt.isis.meta.CADParameterType.Units)
}

// required string Name = 2;
inline bool CADParameterType::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CADParameterType::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CADParameterType::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CADParameterType::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CADParameterType::name() const {
  // @@protoc_insertion_point(field_get:edu.vanderbilt.isis.meta.CADParameterType.Name)
  return *name_;
}
inline void CADParameterType::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:edu.vanderbilt.isis.meta.CADParameterType.Name)
}
inline void CADParameterType::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:edu.vanderbilt.isis.meta.CADParameterType.Name)
}
inline void CADParameterType::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:edu.vanderbilt.isis.meta.CADParameterType.Name)
}
inline ::std::string* CADParameterType::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:edu.vanderbilt.isis.meta.CADParameterType.Name)
  return name_;
}
inline ::std::string* CADParameterType::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CADParameterType::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:edu.vanderbilt.isis.meta.CADParameterType.Name)
}

// required string Type = 3;
inline bool CADParameterType::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CADParameterType::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CADParameterType::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CADParameterType::clear_type() {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& CADParameterType::type() const {
  // @@protoc_insertion_point(field_get:edu.vanderbilt.isis.meta.CADParameterType.Type)
  return *type_;
}
inline void CADParameterType::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set:edu.vanderbilt.isis.meta.CADParameterType.Type)
}
inline void CADParameterType::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set_char:edu.vanderbilt.isis.meta.CADParameterType.Type)
}
inline void CADParameterType::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:edu.vanderbilt.isis.meta.CADParameterType.Type)
}
inline ::std::string* CADParameterType::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:edu.vanderbilt.isis.meta.CADParameterType.Type)
  return type_;
}
inline ::std::string* CADParameterType::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CADParameterType::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:edu.vanderbilt.isis.meta.CADParameterType.Type)
}

// required string Value = 4;
inline bool CADParameterType::has_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CADParameterType::set_has_value() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CADParameterType::clear_has_value() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CADParameterType::clear_value() {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& CADParameterType::value() const {
  // @@protoc_insertion_point(field_get:edu.vanderbilt.isis.meta.CADParameterType.Value)
  return *value_;
}
inline void CADParameterType::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set:edu.vanderbilt.isis.meta.CADParameterType.Value)
}
inline void CADParameterType::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set_char:edu.vanderbilt.isis.meta.CADParameterType.Value)
}
inline void CADParameterType::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:edu.vanderbilt.isis.meta.CADParameterType.Value)
}
inline ::std::string* CADParameterType::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:edu.vanderbilt.isis.meta.CADParameterType.Value)
  return value_;
}
inline ::std::string* CADParameterType::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CADParameterType::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:edu.vanderbilt.isis.meta.CADParameterType.Value)
}

// -------------------------------------------------------------------

// ComponentType

// required string ComponentID = 2;
inline bool ComponentType::has_componentid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ComponentType::set_has_componentid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ComponentType::clear_has_componentid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ComponentType::clear_componentid() {
  if (componentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    componentid_->clear();
  }
  clear_has_componentid();
}
inline const ::std::string& ComponentType::componentid() const {
  // @@protoc_insertion_point(field_get:edu.vanderbilt.isis.meta.ComponentType.ComponentID)
  return *componentid_;
}
inline void ComponentType::set_componentid(const ::std::string& value) {
  set_has_componentid();
  if (componentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    componentid_ = new ::std::string;
  }
  componentid_->assign(value);
  // @@protoc_insertion_point(field_set:edu.vanderbilt.isis.meta.ComponentType.ComponentID)
}
inline void ComponentType::set_componentid(const char* value) {
  set_has_componentid();
  if (componentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    componentid_ = new ::std::string;
  }
  componentid_->assign(value);
  // @@protoc_insertion_point(field_set_char:edu.vanderbilt.isis.meta.ComponentType.ComponentID)
}
inline void ComponentType::set_componentid(const char* value, size_t size) {
  set_has_componentid();
  if (componentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    componentid_ = new ::std::string;
  }
  componentid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:edu.vanderbilt.isis.meta.ComponentType.ComponentID)
}
inline ::std::string* ComponentType::mutable_componentid() {
  set_has_componentid();
  if (componentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    componentid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:edu.vanderbilt.isis.meta.ComponentType.ComponentID)
  return componentid_;
}
inline ::std::string* ComponentType::release_componentid() {
  clear_has_componentid();
  if (componentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = componentid_;
    componentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ComponentType::set_allocated_componentid(::std::string* componentid) {
  if (componentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete componentid_;
  }
  if (componentid) {
    set_has_componentid();
    componentid_ = componentid;
  } else {
    clear_has_componentid();
    componentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:edu.vanderbilt.isis.meta.ComponentType.ComponentID)
}

// required bool InfiniteCycle = 3;
inline bool ComponentType::has_infinitecycle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ComponentType::set_has_infinitecycle() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ComponentType::clear_has_infinitecycle() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ComponentType::clear_infinitecycle() {
  infinitecycle_ = false;
  clear_has_infinitecycle();
}
inline bool ComponentType::infinitecycle() const {
  // @@protoc_insertion_point(field_get:edu.vanderbilt.isis.meta.ComponentType.InfiniteCycle)
  return infinitecycle_;
}
inline void ComponentType::set_infinitecycle(bool value) {
  set_has_infinitecycle();
  infinitecycle_ = value;
  // @@protoc_insertion_point(field_set:edu.vanderbilt.isis.meta.ComponentType.InfiniteCycle)
}

// -------------------------------------------------------------------

// ConnectorDatumType

// optional .edu.vanderbilt.isis.meta.ConnectorDatumType.AlignType Alignment = 3;
inline bool ConnectorDatumType::has_alignment() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConnectorDatumType::set_has_alignment() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConnectorDatumType::clear_has_alignment() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConnectorDatumType::clear_alignment() {
  alignment_ = 0;
  clear_has_alignment();
}
inline ::edu::vanderbilt::isis::meta::ConnectorDatumType_AlignType ConnectorDatumType::alignment() const {
  // @@protoc_insertion_point(field_get:edu.vanderbilt.isis.meta.ConnectorDatumType.Alignment)
  return static_cast< ::edu::vanderbilt::isis::meta::ConnectorDatumType_AlignType >(alignment_);
}
inline void ConnectorDatumType::set_alignment(::edu::vanderbilt::isis::meta::ConnectorDatumType_AlignType value) {
  assert(::edu::vanderbilt::isis::meta::ConnectorDatumType_AlignType_IsValid(value));
  set_has_alignment();
  alignment_ = value;
  // @@protoc_insertion_point(field_set:edu.vanderbilt.isis.meta.ConnectorDatumType.Alignment)
}

// optional string ID = 1;
inline bool ConnectorDatumType::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConnectorDatumType::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConnectorDatumType::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConnectorDatumType::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& ConnectorDatumType::id() const {
  // @@protoc_insertion_point(field_get:edu.vanderbilt.isis.meta.ConnectorDatumType.ID)
  return *id_;
}
inline void ConnectorDatumType::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:edu.vanderbilt.isis.meta.ConnectorDatumType.ID)
}
inline void ConnectorDatumType::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:edu.vanderbilt.isis.meta.ConnectorDatumType.ID)
}
inline void ConnectorDatumType::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:edu.vanderbilt.isis.meta.ConnectorDatumType.ID)
}
inline ::std::string* ConnectorDatumType::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:edu.vanderbilt.isis.meta.ConnectorDatumType.ID)
  return id_;
}
inline ::std::string* ConnectorDatumType::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ConnectorDatumType::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:edu.vanderbilt.isis.meta.ConnectorDatumType.ID)
}

// required string DisplayName = 2;
inline bool ConnectorDatumType::has_displayname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConnectorDatumType::set_has_displayname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConnectorDatumType::clear_has_displayname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConnectorDatumType::clear_displayname() {
  if (displayname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    displayname_->clear();
  }
  clear_has_displayname();
}
inline const ::std::string& ConnectorDatumType::displayname() const {
  // @@protoc_insertion_point(field_get:edu.vanderbilt.isis.meta.ConnectorDatumType.DisplayName)
  return *displayname_;
}
inline void ConnectorDatumType::set_displayname(const ::std::string& value) {
  set_has_displayname();
  if (displayname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    displayname_ = new ::std::string;
  }
  displayname_->assign(value);
  // @@protoc_insertion_point(field_set:edu.vanderbilt.isis.meta.ConnectorDatumType.DisplayName)
}
inline void ConnectorDatumType::set_displayname(const char* value) {
  set_has_displayname();
  if (displayname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    displayname_ = new ::std::string;
  }
  displayname_->assign(value);
  // @@protoc_insertion_point(field_set_char:edu.vanderbilt.isis.meta.ConnectorDatumType.DisplayName)
}
inline void ConnectorDatumType::set_displayname(const char* value, size_t size) {
  set_has_displayname();
  if (displayname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    displayname_ = new ::std::string;
  }
  displayname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:edu.vanderbilt.isis.meta.ConnectorDatumType.DisplayName)
}
inline ::std::string* ConnectorDatumType::mutable_displayname() {
  set_has_displayname();
  if (displayname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    displayname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:edu.vanderbilt.isis.meta.ConnectorDatumType.DisplayName)
  return displayname_;
}
inline ::std::string* ConnectorDatumType::release_displayname() {
  clear_has_displayname();
  if (displayname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = displayname_;
    displayname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ConnectorDatumType::set_allocated_displayname(::std::string* displayname) {
  if (displayname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete displayname_;
  }
  if (displayname) {
    set_has_displayname();
    displayname_ = displayname;
  } else {
    clear_has_displayname();
    displayname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:edu.vanderbilt.isis.meta.ConnectorDatumType.DisplayName)
}

// -------------------------------------------------------------------

// ConnectorType

// required string ID = 1;
inline bool ConnectorType::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConnectorType::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConnectorType::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConnectorType::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& ConnectorType::id() const {
  // @@protoc_insertion_point(field_get:edu.vanderbilt.isis.meta.ConnectorType.ID)
  return *id_;
}
inline void ConnectorType::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:edu.vanderbilt.isis.meta.ConnectorType.ID)
}
inline void ConnectorType::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:edu.vanderbilt.isis.meta.ConnectorType.ID)
}
inline void ConnectorType::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:edu.vanderbilt.isis.meta.ConnectorType.ID)
}
inline ::std::string* ConnectorType::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:edu.vanderbilt.isis.meta.ConnectorType.ID)
  return id_;
}
inline ::std::string* ConnectorType::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ConnectorType::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:edu.vanderbilt.isis.meta.ConnectorType.ID)
}

// required string DisplayName = 2;
inline bool ConnectorType::has_displayname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConnectorType::set_has_displayname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConnectorType::clear_has_displayname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConnectorType::clear_displayname() {
  if (displayname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    displayname_->clear();
  }
  clear_has_displayname();
}
inline const ::std::string& ConnectorType::displayname() const {
  // @@protoc_insertion_point(field_get:edu.vanderbilt.isis.meta.ConnectorType.DisplayName)
  return *displayname_;
}
inline void ConnectorType::set_displayname(const ::std::string& value) {
  set_has_displayname();
  if (displayname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    displayname_ = new ::std::string;
  }
  displayname_->assign(value);
  // @@protoc_insertion_point(field_set:edu.vanderbilt.isis.meta.ConnectorType.DisplayName)
}
inline void ConnectorType::set_displayname(const char* value) {
  set_has_displayname();
  if (displayname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    displayname_ = new ::std::string;
  }
  displayname_->assign(value);
  // @@protoc_insertion_point(field_set_char:edu.vanderbilt.isis.meta.ConnectorType.DisplayName)
}
inline void ConnectorType::set_displayname(const char* value, size_t size) {
  set_has_displayname();
  if (displayname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    displayname_ = new ::std::string;
  }
  displayname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:edu.vanderbilt.isis.meta.ConnectorType.DisplayName)
}
inline ::std::string* ConnectorType::mutable_displayname() {
  set_has_displayname();
  if (displayname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    displayname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:edu.vanderbilt.isis.meta.ConnectorType.DisplayName)
  return displayname_;
}
inline ::std::string* ConnectorType::release_displayname() {
  clear_has_displayname();
  if (displayname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = displayname_;
    displayname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ConnectorType::set_allocated_displayname(::std::string* displayname) {
  if (displayname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete displayname_;
  }
  if (displayname) {
    set_has_displayname();
    displayname_ = displayname;
  } else {
    clear_has_displayname();
    displayname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:edu.vanderbilt.isis.meta.ConnectorType.DisplayName)
}

// repeated .edu.vanderbilt.isis.meta.ConnectorDatumType Datums = 3;
inline int ConnectorType::datums_size() const {
  return datums_.size();
}
inline void ConnectorType::clear_datums() {
  datums_.Clear();
}
inline const ::edu::vanderbilt::isis::meta::ConnectorDatumType& ConnectorType::datums(int index) const {
  // @@protoc_insertion_point(field_get:edu.vanderbilt.isis.meta.ConnectorType.Datums)
  return datums_.Get(index);
}
inline ::edu::vanderbilt::isis::meta::ConnectorDatumType* ConnectorType::mutable_datums(int index) {
  // @@protoc_insertion_point(field_mutable:edu.vanderbilt.isis.meta.ConnectorType.Datums)
  return datums_.Mutable(index);
}
inline ::edu::vanderbilt::isis::meta::ConnectorDatumType* ConnectorType::add_datums() {
  // @@protoc_insertion_point(field_add:edu.vanderbilt.isis.meta.ConnectorType.Datums)
  return datums_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::ConnectorDatumType >&
ConnectorType::datums() const {
  // @@protoc_insertion_point(field_list:edu.vanderbilt.isis.meta.ConnectorType.Datums)
  return datums_;
}
inline ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::ConnectorDatumType >*
ConnectorType::mutable_datums() {
  // @@protoc_insertion_point(field_mutable_list:edu.vanderbilt.isis.meta.ConnectorType.Datums)
  return &datums_;
}

// -------------------------------------------------------------------

// ConstraintFeatureType

// required string ComponentID = 1;
inline bool ConstraintFeatureType::has_componentid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConstraintFeatureType::set_has_componentid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConstraintFeatureType::clear_has_componentid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConstraintFeatureType::clear_componentid() {
  if (componentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    componentid_->clear();
  }
  clear_has_componentid();
}
inline const ::std::string& ConstraintFeatureType::componentid() const {
  // @@protoc_insertion_point(field_get:edu.vanderbilt.isis.meta.ConstraintFeatureType.ComponentID)
  return *componentid_;
}
inline void ConstraintFeatureType::set_componentid(const ::std::string& value) {
  set_has_componentid();
  if (componentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    componentid_ = new ::std::string;
  }
  componentid_->assign(value);
  // @@protoc_insertion_point(field_set:edu.vanderbilt.isis.meta.ConstraintFeatureType.ComponentID)
}
inline void ConstraintFeatureType::set_componentid(const char* value) {
  set_has_componentid();
  if (componentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    componentid_ = new ::std::string;
  }
  componentid_->assign(value);
  // @@protoc_insertion_point(field_set_char:edu.vanderbilt.isis.meta.ConstraintFeatureType.ComponentID)
}
inline void ConstraintFeatureType::set_componentid(const char* value, size_t size) {
  set_has_componentid();
  if (componentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    componentid_ = new ::std::string;
  }
  componentid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:edu.vanderbilt.isis.meta.ConstraintFeatureType.ComponentID)
}
inline ::std::string* ConstraintFeatureType::mutable_componentid() {
  set_has_componentid();
  if (componentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    componentid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:edu.vanderbilt.isis.meta.ConstraintFeatureType.ComponentID)
  return componentid_;
}
inline ::std::string* ConstraintFeatureType::release_componentid() {
  clear_has_componentid();
  if (componentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = componentid_;
    componentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ConstraintFeatureType::set_allocated_componentid(::std::string* componentid) {
  if (componentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete componentid_;
  }
  if (componentid) {
    set_has_componentid();
    componentid_ = componentid;
  } else {
    clear_has_componentid();
    componentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:edu.vanderbilt.isis.meta.ConstraintFeatureType.ComponentID)
}

// required string FeatureName = 2;
inline bool ConstraintFeatureType::has_featurename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConstraintFeatureType::set_has_featurename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConstraintFeatureType::clear_has_featurename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConstraintFeatureType::clear_featurename() {
  if (featurename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    featurename_->clear();
  }
  clear_has_featurename();
}
inline const ::std::string& ConstraintFeatureType::featurename() const {
  // @@protoc_insertion_point(field_get:edu.vanderbilt.isis.meta.ConstraintFeatureType.FeatureName)
  return *featurename_;
}
inline void ConstraintFeatureType::set_featurename(const ::std::string& value) {
  set_has_featurename();
  if (featurename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    featurename_ = new ::std::string;
  }
  featurename_->assign(value);
  // @@protoc_insertion_point(field_set:edu.vanderbilt.isis.meta.ConstraintFeatureType.FeatureName)
}
inline void ConstraintFeatureType::set_featurename(const char* value) {
  set_has_featurename();
  if (featurename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    featurename_ = new ::std::string;
  }
  featurename_->assign(value);
  // @@protoc_insertion_point(field_set_char:edu.vanderbilt.isis.meta.ConstraintFeatureType.FeatureName)
}
inline void ConstraintFeatureType::set_featurename(const char* value, size_t size) {
  set_has_featurename();
  if (featurename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    featurename_ = new ::std::string;
  }
  featurename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:edu.vanderbilt.isis.meta.ConstraintFeatureType.FeatureName)
}
inline ::std::string* ConstraintFeatureType::mutable_featurename() {
  set_has_featurename();
  if (featurename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    featurename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:edu.vanderbilt.isis.meta.ConstraintFeatureType.FeatureName)
  return featurename_;
}
inline ::std::string* ConstraintFeatureType::release_featurename() {
  clear_has_featurename();
  if (featurename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = featurename_;
    featurename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ConstraintFeatureType::set_allocated_featurename(::std::string* featurename) {
  if (featurename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete featurename_;
  }
  if (featurename) {
    set_has_featurename();
    featurename_ = featurename;
  } else {
    clear_has_featurename();
    featurename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:edu.vanderbilt.isis.meta.ConstraintFeatureType.FeatureName)
}

// required string FeatureOrientationType = 3;
inline bool ConstraintFeatureType::has_featureorientationtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConstraintFeatureType::set_has_featureorientationtype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConstraintFeatureType::clear_has_featureorientationtype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConstraintFeatureType::clear_featureorientationtype() {
  if (featureorientationtype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    featureorientationtype_->clear();
  }
  clear_has_featureorientationtype();
}
inline const ::std::string& ConstraintFeatureType::featureorientationtype() const {
  // @@protoc_insertion_point(field_get:edu.vanderbilt.isis.meta.ConstraintFeatureType.FeatureOrientationType)
  return *featureorientationtype_;
}
inline void ConstraintFeatureType::set_featureorientationtype(const ::std::string& value) {
  set_has_featureorientationtype();
  if (featureorientationtype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    featureorientationtype_ = new ::std::string;
  }
  featureorientationtype_->assign(value);
  // @@protoc_insertion_point(field_set:edu.vanderbilt.isis.meta.ConstraintFeatureType.FeatureOrientationType)
}
inline void ConstraintFeatureType::set_featureorientationtype(const char* value) {
  set_has_featureorientationtype();
  if (featureorientationtype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    featureorientationtype_ = new ::std::string;
  }
  featureorientationtype_->assign(value);
  // @@protoc_insertion_point(field_set_char:edu.vanderbilt.isis.meta.ConstraintFeatureType.FeatureOrientationType)
}
inline void ConstraintFeatureType::set_featureorientationtype(const char* value, size_t size) {
  set_has_featureorientationtype();
  if (featureorientationtype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    featureorientationtype_ = new ::std::string;
  }
  featureorientationtype_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:edu.vanderbilt.isis.meta.ConstraintFeatureType.FeatureOrientationType)
}
inline ::std::string* ConstraintFeatureType::mutable_featureorientationtype() {
  set_has_featureorientationtype();
  if (featureorientationtype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    featureorientationtype_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:edu.vanderbilt.isis.meta.ConstraintFeatureType.FeatureOrientationType)
  return featureorientationtype_;
}
inline ::std::string* ConstraintFeatureType::release_featureorientationtype() {
  clear_has_featureorientationtype();
  if (featureorientationtype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = featureorientationtype_;
    featureorientationtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ConstraintFeatureType::set_allocated_featureorientationtype(::std::string* featureorientationtype) {
  if (featureorientationtype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete featureorientationtype_;
  }
  if (featureorientationtype) {
    set_has_featureorientationtype();
    featureorientationtype_ = featureorientationtype;
  } else {
    clear_has_featureorientationtype();
    featureorientationtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:edu.vanderbilt.isis.meta.ConstraintFeatureType.FeatureOrientationType)
}

// -------------------------------------------------------------------

// ConstraintOffsetType

// optional .edu.vanderbilt.isis.meta.UnitsType Units = 1;
inline bool ConstraintOffsetType::has_units() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConstraintOffsetType::set_has_units() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConstraintOffsetType::clear_has_units() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConstraintOffsetType::clear_units() {
  if (units_ != NULL) units_->::edu::vanderbilt::isis::meta::UnitsType::Clear();
  clear_has_units();
}
inline const ::edu::vanderbilt::isis::meta::UnitsType& ConstraintOffsetType::units() const {
  // @@protoc_insertion_point(field_get:edu.vanderbilt.isis.meta.ConstraintOffsetType.Units)
  return units_ != NULL ? *units_ : *default_instance_->units_;
}
inline ::edu::vanderbilt::isis::meta::UnitsType* ConstraintOffsetType::mutable_units() {
  set_has_units();
  if (units_ == NULL) units_ = new ::edu::vanderbilt::isis::meta::UnitsType;
  // @@protoc_insertion_point(field_mutable:edu.vanderbilt.isis.meta.ConstraintOffsetType.Units)
  return units_;
}
inline ::edu::vanderbilt::isis::meta::UnitsType* ConstraintOffsetType::release_units() {
  clear_has_units();
  ::edu::vanderbilt::isis::meta::UnitsType* temp = units_;
  units_ = NULL;
  return temp;
}
inline void ConstraintOffsetType::set_allocated_units(::edu::vanderbilt::isis::meta::UnitsType* units) {
  delete units_;
  units_ = units;
  if (units) {
    set_has_units();
  } else {
    clear_has_units();
  }
  // @@protoc_insertion_point(field_set_allocated:edu.vanderbilt.isis.meta.ConstraintOffsetType.Units)
}

// required string OffsetAlignmentType = 2;
inline bool ConstraintOffsetType::has_offsetalignmenttype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConstraintOffsetType::set_has_offsetalignmenttype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConstraintOffsetType::clear_has_offsetalignmenttype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConstraintOffsetType::clear_offsetalignmenttype() {
  if (offsetalignmenttype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    offsetalignmenttype_->clear();
  }
  clear_has_offsetalignmenttype();
}
inline const ::std::string& ConstraintOffsetType::offsetalignmenttype() const {
  // @@protoc_insertion_point(field_get:edu.vanderbilt.isis.meta.ConstraintOffsetType.OffsetAlignmentType)
  return *offsetalignmenttype_;
}
inline void ConstraintOffsetType::set_offsetalignmenttype(const ::std::string& value) {
  set_has_offsetalignmenttype();
  if (offsetalignmenttype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    offsetalignmenttype_ = new ::std::string;
  }
  offsetalignmenttype_->assign(value);
  // @@protoc_insertion_point(field_set:edu.vanderbilt.isis.meta.ConstraintOffsetType.OffsetAlignmentType)
}
inline void ConstraintOffsetType::set_offsetalignmenttype(const char* value) {
  set_has_offsetalignmenttype();
  if (offsetalignmenttype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    offsetalignmenttype_ = new ::std::string;
  }
  offsetalignmenttype_->assign(value);
  // @@protoc_insertion_point(field_set_char:edu.vanderbilt.isis.meta.ConstraintOffsetType.OffsetAlignmentType)
}
inline void ConstraintOffsetType::set_offsetalignmenttype(const char* value, size_t size) {
  set_has_offsetalignmenttype();
  if (offsetalignmenttype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    offsetalignmenttype_ = new ::std::string;
  }
  offsetalignmenttype_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:edu.vanderbilt.isis.meta.ConstraintOffsetType.OffsetAlignmentType)
}
inline ::std::string* ConstraintOffsetType::mutable_offsetalignmenttype() {
  set_has_offsetalignmenttype();
  if (offsetalignmenttype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    offsetalignmenttype_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:edu.vanderbilt.isis.meta.ConstraintOffsetType.OffsetAlignmentType)
  return offsetalignmenttype_;
}
inline ::std::string* ConstraintOffsetType::release_offsetalignmenttype() {
  clear_has_offsetalignmenttype();
  if (offsetalignmenttype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = offsetalignmenttype_;
    offsetalignmenttype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ConstraintOffsetType::set_allocated_offsetalignmenttype(::std::string* offsetalignmenttype) {
  if (offsetalignmenttype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete offsetalignmenttype_;
  }
  if (offsetalignmenttype) {
    set_has_offsetalignmenttype();
    offsetalignmenttype_ = offsetalignmenttype;
  } else {
    clear_has_offsetalignmenttype();
    offsetalignmenttype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:edu.vanderbilt.isis.meta.ConstraintOffsetType.OffsetAlignmentType)
}

// required double Value = 3;
inline bool ConstraintOffsetType::has_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConstraintOffsetType::set_has_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConstraintOffsetType::clear_has_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConstraintOffsetType::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline double ConstraintOffsetType::value() const {
  // @@protoc_insertion_point(field_get:edu.vanderbilt.isis.meta.ConstraintOffsetType.Value)
  return value_;
}
inline void ConstraintOffsetType::set_value(double value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:edu.vanderbilt.isis.meta.ConstraintOffsetType.Value)
}

// -------------------------------------------------------------------

// ConstraintType

// repeated .edu.vanderbilt.isis.meta.PairType Pair = 1;
inline int ConstraintType::pair_size() const {
  return pair_.size();
}
inline void ConstraintType::clear_pair() {
  pair_.Clear();
}
inline const ::edu::vanderbilt::isis::meta::PairType& ConstraintType::pair(int index) const {
  // @@protoc_insertion_point(field_get:edu.vanderbilt.isis.meta.ConstraintType.Pair)
  return pair_.Get(index);
}
inline ::edu::vanderbilt::isis::meta::PairType* ConstraintType::mutable_pair(int index) {
  // @@protoc_insertion_point(field_mutable:edu.vanderbilt.isis.meta.ConstraintType.Pair)
  return pair_.Mutable(index);
}
inline ::edu::vanderbilt::isis::meta::PairType* ConstraintType::add_pair() {
  // @@protoc_insertion_point(field_add:edu.vanderbilt.isis.meta.ConstraintType.Pair)
  return pair_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::PairType >&
ConstraintType::pair() const {
  // @@protoc_insertion_point(field_list:edu.vanderbilt.isis.meta.ConstraintType.Pair)
  return pair_;
}
inline ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::PairType >*
ConstraintType::mutable_pair() {
  // @@protoc_insertion_point(field_mutable_list:edu.vanderbilt.isis.meta.ConstraintType.Pair)
  return &pair_;
}

// optional string ComponentID = 2;
inline bool ConstraintType::has_componentid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConstraintType::set_has_componentid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConstraintType::clear_has_componentid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConstraintType::clear_componentid() {
  if (componentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    componentid_->clear();
  }
  clear_has_componentid();
}
inline const ::std::string& ConstraintType::componentid() const {
  // @@protoc_insertion_point(field_get:edu.vanderbilt.isis.meta.ConstraintType.ComponentID)
  return *componentid_;
}
inline void ConstraintType::set_componentid(const ::std::string& value) {
  set_has_componentid();
  if (componentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    componentid_ = new ::std::string;
  }
  componentid_->assign(value);
  // @@protoc_insertion_point(field_set:edu.vanderbilt.isis.meta.ConstraintType.ComponentID)
}
inline void ConstraintType::set_componentid(const char* value) {
  set_has_componentid();
  if (componentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    componentid_ = new ::std::string;
  }
  componentid_->assign(value);
  // @@protoc_insertion_point(field_set_char:edu.vanderbilt.isis.meta.ConstraintType.ComponentID)
}
inline void ConstraintType::set_componentid(const char* value, size_t size) {
  set_has_componentid();
  if (componentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    componentid_ = new ::std::string;
  }
  componentid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:edu.vanderbilt.isis.meta.ConstraintType.ComponentID)
}
inline ::std::string* ConstraintType::mutable_componentid() {
  set_has_componentid();
  if (componentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    componentid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:edu.vanderbilt.isis.meta.ConstraintType.ComponentID)
  return componentid_;
}
inline ::std::string* ConstraintType::release_componentid() {
  clear_has_componentid();
  if (componentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = componentid_;
    componentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ConstraintType::set_allocated_componentid(::std::string* componentid) {
  if (componentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete componentid_;
  }
  if (componentid) {
    set_has_componentid();
    componentid_ = componentid;
  } else {
    clear_has_componentid();
    componentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:edu.vanderbilt.isis.meta.ConstraintType.ComponentID)
}

// -------------------------------------------------------------------

// DataExchangeType

// repeated .edu.vanderbilt.isis.meta.STEPFormatType STEPFormat = 1;
inline int DataExchangeType::stepformat_size() const {
  return stepformat_.size();
}
inline void DataExchangeType::clear_stepformat() {
  stepformat_.Clear();
}
inline const ::edu::vanderbilt::isis::meta::STEPFormatType& DataExchangeType::stepformat(int index) const {
  // @@protoc_insertion_point(field_get:edu.vanderbilt.isis.meta.DataExchangeType.STEPFormat)
  return stepformat_.Get(index);
}
inline ::edu::vanderbilt::isis::meta::STEPFormatType* DataExchangeType::mutable_stepformat(int index) {
  // @@protoc_insertion_point(field_mutable:edu.vanderbilt.isis.meta.DataExchangeType.STEPFormat)
  return stepformat_.Mutable(index);
}
inline ::edu::vanderbilt::isis::meta::STEPFormatType* DataExchangeType::add_stepformat() {
  // @@protoc_insertion_point(field_add:edu.vanderbilt.isis.meta.DataExchangeType.STEPFormat)
  return stepformat_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::STEPFormatType >&
DataExchangeType::stepformat() const {
  // @@protoc_insertion_point(field_list:edu.vanderbilt.isis.meta.DataExchangeType.STEPFormat)
  return stepformat_;
}
inline ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::STEPFormatType >*
DataExchangeType::mutable_stepformat() {
  // @@protoc_insertion_point(field_mutable_list:edu.vanderbilt.isis.meta.DataExchangeType.STEPFormat)
  return &stepformat_;
}

// -------------------------------------------------------------------

// FeatureType

// required string ComponentID = 1;
inline bool FeatureType::has_componentid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FeatureType::set_has_componentid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FeatureType::clear_has_componentid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FeatureType::clear_componentid() {
  if (componentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    componentid_->clear();
  }
  clear_has_componentid();
}
inline const ::std::string& FeatureType::componentid() const {
  // @@protoc_insertion_point(field_get:edu.vanderbilt.isis.meta.FeatureType.ComponentID)
  return *componentid_;
}
inline void FeatureType::set_componentid(const ::std::string& value) {
  set_has_componentid();
  if (componentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    componentid_ = new ::std::string;
  }
  componentid_->assign(value);
  // @@protoc_insertion_point(field_set:edu.vanderbilt.isis.meta.FeatureType.ComponentID)
}
inline void FeatureType::set_componentid(const char* value) {
  set_has_componentid();
  if (componentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    componentid_ = new ::std::string;
  }
  componentid_->assign(value);
  // @@protoc_insertion_point(field_set_char:edu.vanderbilt.isis.meta.FeatureType.ComponentID)
}
inline void FeatureType::set_componentid(const char* value, size_t size) {
  set_has_componentid();
  if (componentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    componentid_ = new ::std::string;
  }
  componentid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:edu.vanderbilt.isis.meta.FeatureType.ComponentID)
}
inline ::std::string* FeatureType::mutable_componentid() {
  set_has_componentid();
  if (componentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    componentid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:edu.vanderbilt.isis.meta.FeatureType.ComponentID)
  return componentid_;
}
inline ::std::string* FeatureType::release_componentid() {
  clear_has_componentid();
  if (componentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = componentid_;
    componentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FeatureType::set_allocated_componentid(::std::string* componentid) {
  if (componentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete componentid_;
  }
  if (componentid) {
    set_has_componentid();
    componentid_ = componentid;
  } else {
    clear_has_componentid();
    componentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:edu.vanderbilt.isis.meta.FeatureType.ComponentID)
}

// required string Name = 2;
inline bool FeatureType::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FeatureType::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FeatureType::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FeatureType::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& FeatureType::name() const {
  // @@protoc_insertion_point(field_get:edu.vanderbilt.isis.meta.FeatureType.Name)
  return *name_;
}
inline void FeatureType::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:edu.vanderbilt.isis.meta.FeatureType.Name)
}
inline void FeatureType::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:edu.vanderbilt.isis.meta.FeatureType.Name)
}
inline void FeatureType::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:edu.vanderbilt.isis.meta.FeatureType.Name)
}
inline ::std::string* FeatureType::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:edu.vanderbilt.isis.meta.FeatureType.Name)
  return name_;
}
inline ::std::string* FeatureType::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FeatureType::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:edu.vanderbilt.isis.meta.FeatureType.Name)
}

// -------------------------------------------------------------------

// FeaturesType

// repeated .edu.vanderbilt.isis.meta.FeatureType Feature = 1;
inline int FeaturesType::feature_size() const {
  return feature_.size();
}
inline void FeaturesType::clear_feature() {
  feature_.Clear();
}
inline const ::edu::vanderbilt::isis::meta::FeatureType& FeaturesType::feature(int index) const {
  // @@protoc_insertion_point(field_get:edu.vanderbilt.isis.meta.FeaturesType.Feature)
  return feature_.Get(index);
}
inline ::edu::vanderbilt::isis::meta::FeatureType* FeaturesType::mutable_feature(int index) {
  // @@protoc_insertion_point(field_mutable:edu.vanderbilt.isis.meta.FeaturesType.Feature)
  return feature_.Mutable(index);
}
inline ::edu::vanderbilt::isis::meta::FeatureType* FeaturesType::add_feature() {
  // @@protoc_insertion_point(field_add:edu.vanderbilt.isis.meta.FeaturesType.Feature)
  return feature_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::FeatureType >&
FeaturesType::feature() const {
  // @@protoc_insertion_point(field_list:edu.vanderbilt.isis.meta.FeaturesType.Feature)
  return feature_;
}
inline ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::FeatureType >*
FeaturesType::mutable_feature() {
  // @@protoc_insertion_point(field_mutable_list:edu.vanderbilt.isis.meta.FeaturesType.Feature)
  return &feature_;
}

// required string FeatureGeometryType = 2;
inline bool FeaturesType::has_featuregeometrytype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FeaturesType::set_has_featuregeometrytype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FeaturesType::clear_has_featuregeometrytype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FeaturesType::clear_featuregeometrytype() {
  if (featuregeometrytype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    featuregeometrytype_->clear();
  }
  clear_has_featuregeometrytype();
}
inline const ::std::string& FeaturesType::featuregeometrytype() const {
  // @@protoc_insertion_point(field_get:edu.vanderbilt.isis.meta.FeaturesType.FeatureGeometryType)
  return *featuregeometrytype_;
}
inline void FeaturesType::set_featuregeometrytype(const ::std::string& value) {
  set_has_featuregeometrytype();
  if (featuregeometrytype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    featuregeometrytype_ = new ::std::string;
  }
  featuregeometrytype_->assign(value);
  // @@protoc_insertion_point(field_set:edu.vanderbilt.isis.meta.FeaturesType.FeatureGeometryType)
}
inline void FeaturesType::set_featuregeometrytype(const char* value) {
  set_has_featuregeometrytype();
  if (featuregeometrytype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    featuregeometrytype_ = new ::std::string;
  }
  featuregeometrytype_->assign(value);
  // @@protoc_insertion_point(field_set_char:edu.vanderbilt.isis.meta.FeaturesType.FeatureGeometryType)
}
inline void FeaturesType::set_featuregeometrytype(const char* value, size_t size) {
  set_has_featuregeometrytype();
  if (featuregeometrytype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    featuregeometrytype_ = new ::std::string;
  }
  featuregeometrytype_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:edu.vanderbilt.isis.meta.FeaturesType.FeatureGeometryType)
}
inline ::std::string* FeaturesType::mutable_featuregeometrytype() {
  set_has_featuregeometrytype();
  if (featuregeometrytype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    featuregeometrytype_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:edu.vanderbilt.isis.meta.FeaturesType.FeatureGeometryType)
  return featuregeometrytype_;
}
inline ::std::string* FeaturesType::release_featuregeometrytype() {
  clear_has_featuregeometrytype();
  if (featuregeometrytype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = featuregeometrytype_;
    featuregeometrytype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FeaturesType::set_allocated_featuregeometrytype(::std::string* featuregeometrytype) {
  if (featuregeometrytype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete featuregeometrytype_;
  }
  if (featuregeometrytype) {
    set_has_featuregeometrytype();
    featuregeometrytype_ = featuregeometrytype;
  } else {
    clear_has_featuregeometrytype();
    featuregeometrytype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:edu.vanderbilt.isis.meta.FeaturesType.FeatureGeometryType)
}

// required string FeatureID = 3;
inline bool FeaturesType::has_featureid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FeaturesType::set_has_featureid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FeaturesType::clear_has_featureid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FeaturesType::clear_featureid() {
  if (featureid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    featureid_->clear();
  }
  clear_has_featureid();
}
inline const ::std::string& FeaturesType::featureid() const {
  // @@protoc_insertion_point(field_get:edu.vanderbilt.isis.meta.FeaturesType.FeatureID)
  return *featureid_;
}
inline void FeaturesType::set_featureid(const ::std::string& value) {
  set_has_featureid();
  if (featureid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    featureid_ = new ::std::string;
  }
  featureid_->assign(value);
  // @@protoc_insertion_point(field_set:edu.vanderbilt.isis.meta.FeaturesType.FeatureID)
}
inline void FeaturesType::set_featureid(const char* value) {
  set_has_featureid();
  if (featureid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    featureid_ = new ::std::string;
  }
  featureid_->assign(value);
  // @@protoc_insertion_point(field_set_char:edu.vanderbilt.isis.meta.FeaturesType.FeatureID)
}
inline void FeaturesType::set_featureid(const char* value, size_t size) {
  set_has_featureid();
  if (featureid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    featureid_ = new ::std::string;
  }
  featureid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:edu.vanderbilt.isis.meta.FeaturesType.FeatureID)
}
inline ::std::string* FeaturesType::mutable_featureid() {
  set_has_featureid();
  if (featureid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    featureid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:edu.vanderbilt.isis.meta.FeaturesType.FeatureID)
  return featureid_;
}
inline ::std::string* FeaturesType::release_featureid() {
  clear_has_featureid();
  if (featureid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = featureid_;
    featureid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FeaturesType::set_allocated_featureid(::std::string* featureid) {
  if (featureid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete featureid_;
  }
  if (featureid) {
    set_has_featureid();
    featureid_ = featureid;
  } else {
    clear_has_featureid();
    featureid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:edu.vanderbilt.isis.meta.FeaturesType.FeatureID)
}

// required string FeatureInterfaceType = 4;
inline bool FeaturesType::has_featureinterfacetype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FeaturesType::set_has_featureinterfacetype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FeaturesType::clear_has_featureinterfacetype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FeaturesType::clear_featureinterfacetype() {
  if (featureinterfacetype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    featureinterfacetype_->clear();
  }
  clear_has_featureinterfacetype();
}
inline const ::std::string& FeaturesType::featureinterfacetype() const {
  // @@protoc_insertion_point(field_get:edu.vanderbilt.isis.meta.FeaturesType.FeatureInterfaceType)
  return *featureinterfacetype_;
}
inline void FeaturesType::set_featureinterfacetype(const ::std::string& value) {
  set_has_featureinterfacetype();
  if (featureinterfacetype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    featureinterfacetype_ = new ::std::string;
  }
  featureinterfacetype_->assign(value);
  // @@protoc_insertion_point(field_set:edu.vanderbilt.isis.meta.FeaturesType.FeatureInterfaceType)
}
inline void FeaturesType::set_featureinterfacetype(const char* value) {
  set_has_featureinterfacetype();
  if (featureinterfacetype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    featureinterfacetype_ = new ::std::string;
  }
  featureinterfacetype_->assign(value);
  // @@protoc_insertion_point(field_set_char:edu.vanderbilt.isis.meta.FeaturesType.FeatureInterfaceType)
}
inline void FeaturesType::set_featureinterfacetype(const char* value, size_t size) {
  set_has_featureinterfacetype();
  if (featureinterfacetype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    featureinterfacetype_ = new ::std::string;
  }
  featureinterfacetype_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:edu.vanderbilt.isis.meta.FeaturesType.FeatureInterfaceType)
}
inline ::std::string* FeaturesType::mutable_featureinterfacetype() {
  set_has_featureinterfacetype();
  if (featureinterfacetype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    featureinterfacetype_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:edu.vanderbilt.isis.meta.FeaturesType.FeatureInterfaceType)
  return featureinterfacetype_;
}
inline ::std::string* FeaturesType::release_featureinterfacetype() {
  clear_has_featureinterfacetype();
  if (featureinterfacetype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = featureinterfacetype_;
    featureinterfacetype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FeaturesType::set_allocated_featureinterfacetype(::std::string* featureinterfacetype) {
  if (featureinterfacetype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete featureinterfacetype_;
  }
  if (featureinterfacetype) {
    set_has_featureinterfacetype();
    featureinterfacetype_ = featureinterfacetype;
  } else {
    clear_has_featureinterfacetype();
    featureinterfacetype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:edu.vanderbilt.isis.meta.FeaturesType.FeatureInterfaceType)
}

// required string GeometryType = 5;
inline bool FeaturesType::has_geometrytype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FeaturesType::set_has_geometrytype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FeaturesType::clear_has_geometrytype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FeaturesType::clear_geometrytype() {
  if (geometrytype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    geometrytype_->clear();
  }
  clear_has_geometrytype();
}
inline const ::std::string& FeaturesType::geometrytype() const {
  // @@protoc_insertion_point(field_get:edu.vanderbilt.isis.meta.FeaturesType.GeometryType)
  return *geometrytype_;
}
inline void FeaturesType::set_geometrytype(const ::std::string& value) {
  set_has_geometrytype();
  if (geometrytype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    geometrytype_ = new ::std::string;
  }
  geometrytype_->assign(value);
  // @@protoc_insertion_point(field_set:edu.vanderbilt.isis.meta.FeaturesType.GeometryType)
}
inline void FeaturesType::set_geometrytype(const char* value) {
  set_has_geometrytype();
  if (geometrytype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    geometrytype_ = new ::std::string;
  }
  geometrytype_->assign(value);
  // @@protoc_insertion_point(field_set_char:edu.vanderbilt.isis.meta.FeaturesType.GeometryType)
}
inline void FeaturesType::set_geometrytype(const char* value, size_t size) {
  set_has_geometrytype();
  if (geometrytype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    geometrytype_ = new ::std::string;
  }
  geometrytype_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:edu.vanderbilt.isis.meta.FeaturesType.GeometryType)
}
inline ::std::string* FeaturesType::mutable_geometrytype() {
  set_has_geometrytype();
  if (geometrytype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    geometrytype_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:edu.vanderbilt.isis.meta.FeaturesType.GeometryType)
  return geometrytype_;
}
inline ::std::string* FeaturesType::release_geometrytype() {
  clear_has_geometrytype();
  if (geometrytype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = geometrytype_;
    geometrytype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FeaturesType::set_allocated_geometrytype(::std::string* geometrytype) {
  if (geometrytype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete geometrytype_;
  }
  if (geometrytype) {
    set_has_geometrytype();
    geometrytype_ = geometrytype;
  } else {
    clear_has_geometrytype();
    geometrytype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:edu.vanderbilt.isis.meta.FeaturesType.GeometryType)
}

// required string PrimaryGeometryQualifier = 6;
inline bool FeaturesType::has_primarygeometryqualifier() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FeaturesType::set_has_primarygeometryqualifier() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FeaturesType::clear_has_primarygeometryqualifier() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FeaturesType::clear_primarygeometryqualifier() {
  if (primarygeometryqualifier_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    primarygeometryqualifier_->clear();
  }
  clear_has_primarygeometryqualifier();
}
inline const ::std::string& FeaturesType::primarygeometryqualifier() const {
  // @@protoc_insertion_point(field_get:edu.vanderbilt.isis.meta.FeaturesType.PrimaryGeometryQualifier)
  return *primarygeometryqualifier_;
}
inline void FeaturesType::set_primarygeometryqualifier(const ::std::string& value) {
  set_has_primarygeometryqualifier();
  if (primarygeometryqualifier_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    primarygeometryqualifier_ = new ::std::string;
  }
  primarygeometryqualifier_->assign(value);
  // @@protoc_insertion_point(field_set:edu.vanderbilt.isis.meta.FeaturesType.PrimaryGeometryQualifier)
}
inline void FeaturesType::set_primarygeometryqualifier(const char* value) {
  set_has_primarygeometryqualifier();
  if (primarygeometryqualifier_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    primarygeometryqualifier_ = new ::std::string;
  }
  primarygeometryqualifier_->assign(value);
  // @@protoc_insertion_point(field_set_char:edu.vanderbilt.isis.meta.FeaturesType.PrimaryGeometryQualifier)
}
inline void FeaturesType::set_primarygeometryqualifier(const char* value, size_t size) {
  set_has_primarygeometryqualifier();
  if (primarygeometryqualifier_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    primarygeometryqualifier_ = new ::std::string;
  }
  primarygeometryqualifier_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:edu.vanderbilt.isis.meta.FeaturesType.PrimaryGeometryQualifier)
}
inline ::std::string* FeaturesType::mutable_primarygeometryqualifier() {
  set_has_primarygeometryqualifier();
  if (primarygeometryqualifier_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    primarygeometryqualifier_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:edu.vanderbilt.isis.meta.FeaturesType.PrimaryGeometryQualifier)
  return primarygeometryqualifier_;
}
inline ::std::string* FeaturesType::release_primarygeometryqualifier() {
  clear_has_primarygeometryqualifier();
  if (primarygeometryqualifier_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = primarygeometryqualifier_;
    primarygeometryqualifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FeaturesType::set_allocated_primarygeometryqualifier(::std::string* primarygeometryqualifier) {
  if (primarygeometryqualifier_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete primarygeometryqualifier_;
  }
  if (primarygeometryqualifier) {
    set_has_primarygeometryqualifier();
    primarygeometryqualifier_ = primarygeometryqualifier;
  } else {
    clear_has_primarygeometryqualifier();
    primarygeometryqualifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:edu.vanderbilt.isis.meta.FeaturesType.PrimaryGeometryQualifier)
}

// required string SecondaryGeometryQualifier = 7;
inline bool FeaturesType::has_secondarygeometryqualifier() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FeaturesType::set_has_secondarygeometryqualifier() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FeaturesType::clear_has_secondarygeometryqualifier() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FeaturesType::clear_secondarygeometryqualifier() {
  if (secondarygeometryqualifier_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    secondarygeometryqualifier_->clear();
  }
  clear_has_secondarygeometryqualifier();
}
inline const ::std::string& FeaturesType::secondarygeometryqualifier() const {
  // @@protoc_insertion_point(field_get:edu.vanderbilt.isis.meta.FeaturesType.SecondaryGeometryQualifier)
  return *secondarygeometryqualifier_;
}
inline void FeaturesType::set_secondarygeometryqualifier(const ::std::string& value) {
  set_has_secondarygeometryqualifier();
  if (secondarygeometryqualifier_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    secondarygeometryqualifier_ = new ::std::string;
  }
  secondarygeometryqualifier_->assign(value);
  // @@protoc_insertion_point(field_set:edu.vanderbilt.isis.meta.FeaturesType.SecondaryGeometryQualifier)
}
inline void FeaturesType::set_secondarygeometryqualifier(const char* value) {
  set_has_secondarygeometryqualifier();
  if (secondarygeometryqualifier_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    secondarygeometryqualifier_ = new ::std::string;
  }
  secondarygeometryqualifier_->assign(value);
  // @@protoc_insertion_point(field_set_char:edu.vanderbilt.isis.meta.FeaturesType.SecondaryGeometryQualifier)
}
inline void FeaturesType::set_secondarygeometryqualifier(const char* value, size_t size) {
  set_has_secondarygeometryqualifier();
  if (secondarygeometryqualifier_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    secondarygeometryqualifier_ = new ::std::string;
  }
  secondarygeometryqualifier_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:edu.vanderbilt.isis.meta.FeaturesType.SecondaryGeometryQualifier)
}
inline ::std::string* FeaturesType::mutable_secondarygeometryqualifier() {
  set_has_secondarygeometryqualifier();
  if (secondarygeometryqualifier_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    secondarygeometryqualifier_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:edu.vanderbilt.isis.meta.FeaturesType.SecondaryGeometryQualifier)
  return secondarygeometryqualifier_;
}
inline ::std::string* FeaturesType::release_secondarygeometryqualifier() {
  clear_has_secondarygeometryqualifier();
  if (secondarygeometryqualifier_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = secondarygeometryqualifier_;
    secondarygeometryqualifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FeaturesType::set_allocated_secondarygeometryqualifier(::std::string* secondarygeometryqualifier) {
  if (secondarygeometryqualifier_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete secondarygeometryqualifier_;
  }
  if (secondarygeometryqualifier) {
    set_has_secondarygeometryqualifier();
    secondarygeometryqualifier_ = secondarygeometryqualifier;
  } else {
    clear_has_secondarygeometryqualifier();
    secondarygeometryqualifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:edu.vanderbilt.isis.meta.FeaturesType.SecondaryGeometryQualifier)
}

// -------------------------------------------------------------------

// GeometryType

// repeated .edu.vanderbilt.isis.meta.FeaturesType Features = 1;
inline int GeometryType::features_size() const {
  return features_.size();
}
inline void GeometryType::clear_features() {
  features_.Clear();
}
inline const ::edu::vanderbilt::isis::meta::FeaturesType& GeometryType::features(int index) const {
  // @@protoc_insertion_point(field_get:edu.vanderbilt.isis.meta.GeometryType.Features)
  return features_.Get(index);
}
inline ::edu::vanderbilt::isis::meta::FeaturesType* GeometryType::mutable_features(int index) {
  // @@protoc_insertion_point(field_mutable:edu.vanderbilt.isis.meta.GeometryType.Features)
  return features_.Mutable(index);
}
inline ::edu::vanderbilt::isis::meta::FeaturesType* GeometryType::add_features() {
  // @@protoc_insertion_point(field_add:edu.vanderbilt.isis.meta.GeometryType.Features)
  return features_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::FeaturesType >&
GeometryType::features() const {
  // @@protoc_insertion_point(field_list:edu.vanderbilt.isis.meta.GeometryType.Features)
  return features_;
}
inline ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::FeaturesType >*
GeometryType::mutable_features() {
  // @@protoc_insertion_point(field_mutable_list:edu.vanderbilt.isis.meta.GeometryType.Features)
  return &features_;
}

// -------------------------------------------------------------------

// PairType

// required .edu.vanderbilt.isis.meta.ConstraintFeatureType ConstraintFeatureA = 1;
inline bool PairType::has_constraintfeaturea() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PairType::set_has_constraintfeaturea() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PairType::clear_has_constraintfeaturea() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PairType::clear_constraintfeaturea() {
  if (constraintfeaturea_ != NULL) constraintfeaturea_->::edu::vanderbilt::isis::meta::ConstraintFeatureType::Clear();
  clear_has_constraintfeaturea();
}
inline const ::edu::vanderbilt::isis::meta::ConstraintFeatureType& PairType::constraintfeaturea() const {
  // @@protoc_insertion_point(field_get:edu.vanderbilt.isis.meta.PairType.ConstraintFeatureA)
  return constraintfeaturea_ != NULL ? *constraintfeaturea_ : *default_instance_->constraintfeaturea_;
}
inline ::edu::vanderbilt::isis::meta::ConstraintFeatureType* PairType::mutable_constraintfeaturea() {
  set_has_constraintfeaturea();
  if (constraintfeaturea_ == NULL) constraintfeaturea_ = new ::edu::vanderbilt::isis::meta::ConstraintFeatureType;
  // @@protoc_insertion_point(field_mutable:edu.vanderbilt.isis.meta.PairType.ConstraintFeatureA)
  return constraintfeaturea_;
}
inline ::edu::vanderbilt::isis::meta::ConstraintFeatureType* PairType::release_constraintfeaturea() {
  clear_has_constraintfeaturea();
  ::edu::vanderbilt::isis::meta::ConstraintFeatureType* temp = constraintfeaturea_;
  constraintfeaturea_ = NULL;
  return temp;
}
inline void PairType::set_allocated_constraintfeaturea(::edu::vanderbilt::isis::meta::ConstraintFeatureType* constraintfeaturea) {
  delete constraintfeaturea_;
  constraintfeaturea_ = constraintfeaturea;
  if (constraintfeaturea) {
    set_has_constraintfeaturea();
  } else {
    clear_has_constraintfeaturea();
  }
  // @@protoc_insertion_point(field_set_allocated:edu.vanderbilt.isis.meta.PairType.ConstraintFeatureA)
}

// required .edu.vanderbilt.isis.meta.ConstraintFeatureType ConstraintFeatureB = 2;
inline bool PairType::has_constraintfeatureb() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PairType::set_has_constraintfeatureb() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PairType::clear_has_constraintfeatureb() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PairType::clear_constraintfeatureb() {
  if (constraintfeatureb_ != NULL) constraintfeatureb_->::edu::vanderbilt::isis::meta::ConstraintFeatureType::Clear();
  clear_has_constraintfeatureb();
}
inline const ::edu::vanderbilt::isis::meta::ConstraintFeatureType& PairType::constraintfeatureb() const {
  // @@protoc_insertion_point(field_get:edu.vanderbilt.isis.meta.PairType.ConstraintFeatureB)
  return constraintfeatureb_ != NULL ? *constraintfeatureb_ : *default_instance_->constraintfeatureb_;
}
inline ::edu::vanderbilt::isis::meta::ConstraintFeatureType* PairType::mutable_constraintfeatureb() {
  set_has_constraintfeatureb();
  if (constraintfeatureb_ == NULL) constraintfeatureb_ = new ::edu::vanderbilt::isis::meta::ConstraintFeatureType;
  // @@protoc_insertion_point(field_mutable:edu.vanderbilt.isis.meta.PairType.ConstraintFeatureB)
  return constraintfeatureb_;
}
inline ::edu::vanderbilt::isis::meta::ConstraintFeatureType* PairType::release_constraintfeatureb() {
  clear_has_constraintfeatureb();
  ::edu::vanderbilt::isis::meta::ConstraintFeatureType* temp = constraintfeatureb_;
  constraintfeatureb_ = NULL;
  return temp;
}
inline void PairType::set_allocated_constraintfeatureb(::edu::vanderbilt::isis::meta::ConstraintFeatureType* constraintfeatureb) {
  delete constraintfeatureb_;
  constraintfeatureb_ = constraintfeatureb;
  if (constraintfeatureb) {
    set_has_constraintfeatureb();
  } else {
    clear_has_constraintfeatureb();
  }
  // @@protoc_insertion_point(field_set_allocated:edu.vanderbilt.isis.meta.PairType.ConstraintFeatureB)
}

// optional .edu.vanderbilt.isis.meta.ConstraintOffsetType ConstraintOffset = 3;
inline bool PairType::has_constraintoffset() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PairType::set_has_constraintoffset() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PairType::clear_has_constraintoffset() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PairType::clear_constraintoffset() {
  if (constraintoffset_ != NULL) constraintoffset_->::edu::vanderbilt::isis::meta::ConstraintOffsetType::Clear();
  clear_has_constraintoffset();
}
inline const ::edu::vanderbilt::isis::meta::ConstraintOffsetType& PairType::constraintoffset() const {
  // @@protoc_insertion_point(field_get:edu.vanderbilt.isis.meta.PairType.ConstraintOffset)
  return constraintoffset_ != NULL ? *constraintoffset_ : *default_instance_->constraintoffset_;
}
inline ::edu::vanderbilt::isis::meta::ConstraintOffsetType* PairType::mutable_constraintoffset() {
  set_has_constraintoffset();
  if (constraintoffset_ == NULL) constraintoffset_ = new ::edu::vanderbilt::isis::meta::ConstraintOffsetType;
  // @@protoc_insertion_point(field_mutable:edu.vanderbilt.isis.meta.PairType.ConstraintOffset)
  return constraintoffset_;
}
inline ::edu::vanderbilt::isis::meta::ConstraintOffsetType* PairType::release_constraintoffset() {
  clear_has_constraintoffset();
  ::edu::vanderbilt::isis::meta::ConstraintOffsetType* temp = constraintoffset_;
  constraintoffset_ = NULL;
  return temp;
}
inline void PairType::set_allocated_constraintoffset(::edu::vanderbilt::isis::meta::ConstraintOffsetType* constraintoffset) {
  delete constraintoffset_;
  constraintoffset_ = constraintoffset;
  if (constraintoffset) {
    set_has_constraintoffset();
  } else {
    clear_has_constraintoffset();
  }
  // @@protoc_insertion_point(field_set_allocated:edu.vanderbilt.isis.meta.PairType.ConstraintOffset)
}

// required string FeatureAlignmentType = 4;
inline bool PairType::has_featurealignmenttype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PairType::set_has_featurealignmenttype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PairType::clear_has_featurealignmenttype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PairType::clear_featurealignmenttype() {
  if (featurealignmenttype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    featurealignmenttype_->clear();
  }
  clear_has_featurealignmenttype();
}
inline const ::std::string& PairType::featurealignmenttype() const {
  // @@protoc_insertion_point(field_get:edu.vanderbilt.isis.meta.PairType.FeatureAlignmentType)
  return *featurealignmenttype_;
}
inline void PairType::set_featurealignmenttype(const ::std::string& value) {
  set_has_featurealignmenttype();
  if (featurealignmenttype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    featurealignmenttype_ = new ::std::string;
  }
  featurealignmenttype_->assign(value);
  // @@protoc_insertion_point(field_set:edu.vanderbilt.isis.meta.PairType.FeatureAlignmentType)
}
inline void PairType::set_featurealignmenttype(const char* value) {
  set_has_featurealignmenttype();
  if (featurealignmenttype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    featurealignmenttype_ = new ::std::string;
  }
  featurealignmenttype_->assign(value);
  // @@protoc_insertion_point(field_set_char:edu.vanderbilt.isis.meta.PairType.FeatureAlignmentType)
}
inline void PairType::set_featurealignmenttype(const char* value, size_t size) {
  set_has_featurealignmenttype();
  if (featurealignmenttype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    featurealignmenttype_ = new ::std::string;
  }
  featurealignmenttype_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:edu.vanderbilt.isis.meta.PairType.FeatureAlignmentType)
}
inline ::std::string* PairType::mutable_featurealignmenttype() {
  set_has_featurealignmenttype();
  if (featurealignmenttype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    featurealignmenttype_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:edu.vanderbilt.isis.meta.PairType.FeatureAlignmentType)
  return featurealignmenttype_;
}
inline ::std::string* PairType::release_featurealignmenttype() {
  clear_has_featurealignmenttype();
  if (featurealignmenttype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = featurealignmenttype_;
    featurealignmenttype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PairType::set_allocated_featurealignmenttype(::std::string* featurealignmenttype) {
  if (featurealignmenttype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete featurealignmenttype_;
  }
  if (featurealignmenttype) {
    set_has_featurealignmenttype();
    featurealignmenttype_ = featurealignmenttype;
  } else {
    clear_has_featurealignmenttype();
    featurealignmenttype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:edu.vanderbilt.isis.meta.PairType.FeatureAlignmentType)
}

// required string FeatureGeometryType = 5;
inline bool PairType::has_featuregeometrytype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PairType::set_has_featuregeometrytype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PairType::clear_has_featuregeometrytype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PairType::clear_featuregeometrytype() {
  if (featuregeometrytype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    featuregeometrytype_->clear();
  }
  clear_has_featuregeometrytype();
}
inline const ::std::string& PairType::featuregeometrytype() const {
  // @@protoc_insertion_point(field_get:edu.vanderbilt.isis.meta.PairType.FeatureGeometryType)
  return *featuregeometrytype_;
}
inline void PairType::set_featuregeometrytype(const ::std::string& value) {
  set_has_featuregeometrytype();
  if (featuregeometrytype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    featuregeometrytype_ = new ::std::string;
  }
  featuregeometrytype_->assign(value);
  // @@protoc_insertion_point(field_set:edu.vanderbilt.isis.meta.PairType.FeatureGeometryType)
}
inline void PairType::set_featuregeometrytype(const char* value) {
  set_has_featuregeometrytype();
  if (featuregeometrytype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    featuregeometrytype_ = new ::std::string;
  }
  featuregeometrytype_->assign(value);
  // @@protoc_insertion_point(field_set_char:edu.vanderbilt.isis.meta.PairType.FeatureGeometryType)
}
inline void PairType::set_featuregeometrytype(const char* value, size_t size) {
  set_has_featuregeometrytype();
  if (featuregeometrytype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    featuregeometrytype_ = new ::std::string;
  }
  featuregeometrytype_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:edu.vanderbilt.isis.meta.PairType.FeatureGeometryType)
}
inline ::std::string* PairType::mutable_featuregeometrytype() {
  set_has_featuregeometrytype();
  if (featuregeometrytype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    featuregeometrytype_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:edu.vanderbilt.isis.meta.PairType.FeatureGeometryType)
  return featuregeometrytype_;
}
inline ::std::string* PairType::release_featuregeometrytype() {
  clear_has_featuregeometrytype();
  if (featuregeometrytype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = featuregeometrytype_;
    featuregeometrytype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PairType::set_allocated_featuregeometrytype(::std::string* featuregeometrytype) {
  if (featuregeometrytype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete featuregeometrytype_;
  }
  if (featuregeometrytype) {
    set_has_featuregeometrytype();
    featuregeometrytype_ = featuregeometrytype;
  } else {
    clear_has_featuregeometrytype();
    featuregeometrytype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:edu.vanderbilt.isis.meta.PairType.FeatureGeometryType)
}

// required string FeatureInterfaceType = 6;
inline bool PairType::has_featureinterfacetype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PairType::set_has_featureinterfacetype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PairType::clear_has_featureinterfacetype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PairType::clear_featureinterfacetype() {
  if (featureinterfacetype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    featureinterfacetype_->clear();
  }
  clear_has_featureinterfacetype();
}
inline const ::std::string& PairType::featureinterfacetype() const {
  // @@protoc_insertion_point(field_get:edu.vanderbilt.isis.meta.PairType.FeatureInterfaceType)
  return *featureinterfacetype_;
}
inline void PairType::set_featureinterfacetype(const ::std::string& value) {
  set_has_featureinterfacetype();
  if (featureinterfacetype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    featureinterfacetype_ = new ::std::string;
  }
  featureinterfacetype_->assign(value);
  // @@protoc_insertion_point(field_set:edu.vanderbilt.isis.meta.PairType.FeatureInterfaceType)
}
inline void PairType::set_featureinterfacetype(const char* value) {
  set_has_featureinterfacetype();
  if (featureinterfacetype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    featureinterfacetype_ = new ::std::string;
  }
  featureinterfacetype_->assign(value);
  // @@protoc_insertion_point(field_set_char:edu.vanderbilt.isis.meta.PairType.FeatureInterfaceType)
}
inline void PairType::set_featureinterfacetype(const char* value, size_t size) {
  set_has_featureinterfacetype();
  if (featureinterfacetype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    featureinterfacetype_ = new ::std::string;
  }
  featureinterfacetype_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:edu.vanderbilt.isis.meta.PairType.FeatureInterfaceType)
}
inline ::std::string* PairType::mutable_featureinterfacetype() {
  set_has_featureinterfacetype();
  if (featureinterfacetype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    featureinterfacetype_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:edu.vanderbilt.isis.meta.PairType.FeatureInterfaceType)
  return featureinterfacetype_;
}
inline ::std::string* PairType::release_featureinterfacetype() {
  clear_has_featureinterfacetype();
  if (featureinterfacetype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = featureinterfacetype_;
    featureinterfacetype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PairType::set_allocated_featureinterfacetype(::std::string* featureinterfacetype) {
  if (featureinterfacetype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete featureinterfacetype_;
  }
  if (featureinterfacetype) {
    set_has_featureinterfacetype();
    featureinterfacetype_ = featureinterfacetype;
  } else {
    clear_has_featureinterfacetype();
    featureinterfacetype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:edu.vanderbilt.isis.meta.PairType.FeatureInterfaceType)
}

// -------------------------------------------------------------------

// ParametricParametersType

// repeated .edu.vanderbilt.isis.meta.CADParameterType CADParameter = 1;
inline int ParametricParametersType::cadparameter_size() const {
  return cadparameter_.size();
}
inline void ParametricParametersType::clear_cadparameter() {
  cadparameter_.Clear();
}
inline const ::edu::vanderbilt::isis::meta::CADParameterType& ParametricParametersType::cadparameter(int index) const {
  // @@protoc_insertion_point(field_get:edu.vanderbilt.isis.meta.ParametricParametersType.CADParameter)
  return cadparameter_.Get(index);
}
inline ::edu::vanderbilt::isis::meta::CADParameterType* ParametricParametersType::mutable_cadparameter(int index) {
  // @@protoc_insertion_point(field_mutable:edu.vanderbilt.isis.meta.ParametricParametersType.CADParameter)
  return cadparameter_.Mutable(index);
}
inline ::edu::vanderbilt::isis::meta::CADParameterType* ParametricParametersType::add_cadparameter() {
  // @@protoc_insertion_point(field_add:edu.vanderbilt.isis.meta.ParametricParametersType.CADParameter)
  return cadparameter_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::CADParameterType >&
ParametricParametersType::cadparameter() const {
  // @@protoc_insertion_point(field_list:edu.vanderbilt.isis.meta.ParametricParametersType.CADParameter)
  return cadparameter_;
}
inline ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::CADParameterType >*
ParametricParametersType::mutable_cadparameter() {
  // @@protoc_insertion_point(field_mutable_list:edu.vanderbilt.isis.meta.ParametricParametersType.CADParameter)
  return &cadparameter_;
}

// optional string ComponentID = 2;
inline bool ParametricParametersType::has_componentid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ParametricParametersType::set_has_componentid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ParametricParametersType::clear_has_componentid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ParametricParametersType::clear_componentid() {
  if (componentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    componentid_->clear();
  }
  clear_has_componentid();
}
inline const ::std::string& ParametricParametersType::componentid() const {
  // @@protoc_insertion_point(field_get:edu.vanderbilt.isis.meta.ParametricParametersType.ComponentID)
  return *componentid_;
}
inline void ParametricParametersType::set_componentid(const ::std::string& value) {
  set_has_componentid();
  if (componentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    componentid_ = new ::std::string;
  }
  componentid_->assign(value);
  // @@protoc_insertion_point(field_set:edu.vanderbilt.isis.meta.ParametricParametersType.ComponentID)
}
inline void ParametricParametersType::set_componentid(const char* value) {
  set_has_componentid();
  if (componentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    componentid_ = new ::std::string;
  }
  componentid_->assign(value);
  // @@protoc_insertion_point(field_set_char:edu.vanderbilt.isis.meta.ParametricParametersType.ComponentID)
}
inline void ParametricParametersType::set_componentid(const char* value, size_t size) {
  set_has_componentid();
  if (componentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    componentid_ = new ::std::string;
  }
  componentid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:edu.vanderbilt.isis.meta.ParametricParametersType.ComponentID)
}
inline ::std::string* ParametricParametersType::mutable_componentid() {
  set_has_componentid();
  if (componentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    componentid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:edu.vanderbilt.isis.meta.ParametricParametersType.ComponentID)
  return componentid_;
}
inline ::std::string* ParametricParametersType::release_componentid() {
  clear_has_componentid();
  if (componentid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = componentid_;
    componentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ParametricParametersType::set_allocated_componentid(::std::string* componentid) {
  if (componentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete componentid_;
  }
  if (componentid) {
    set_has_componentid();
    componentid_ = componentid;
  } else {
    clear_has_componentid();
    componentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:edu.vanderbilt.isis.meta.ParametricParametersType.ComponentID)
}

// -------------------------------------------------------------------

// PropertiesType

// optional .edu.vanderbilt.isis.meta.UnitsType Units = 1;
inline bool PropertiesType::has_units() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PropertiesType::set_has_units() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PropertiesType::clear_has_units() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PropertiesType::clear_units() {
  if (units_ != NULL) units_->::edu::vanderbilt::isis::meta::UnitsType::Clear();
  clear_has_units();
}
inline const ::edu::vanderbilt::isis::meta::UnitsType& PropertiesType::units() const {
  // @@protoc_insertion_point(field_get:edu.vanderbilt.isis.meta.PropertiesType.Units)
  return units_ != NULL ? *units_ : *default_instance_->units_;
}
inline ::edu::vanderbilt::isis::meta::UnitsType* PropertiesType::mutable_units() {
  set_has_units();
  if (units_ == NULL) units_ = new ::edu::vanderbilt::isis::meta::UnitsType;
  // @@protoc_insertion_point(field_mutable:edu.vanderbilt.isis.meta.PropertiesType.Units)
  return units_;
}
inline ::edu::vanderbilt::isis::meta::UnitsType* PropertiesType::release_units() {
  clear_has_units();
  ::edu::vanderbilt::isis::meta::UnitsType* temp = units_;
  units_ = NULL;
  return temp;
}
inline void PropertiesType::set_allocated_units(::edu::vanderbilt::isis::meta::UnitsType* units) {
  delete units_;
  units_ = units;
  if (units) {
    set_has_units();
  } else {
    clear_has_units();
  }
  // @@protoc_insertion_point(field_set_allocated:edu.vanderbilt.isis.meta.PropertiesType.Units)
}

// -------------------------------------------------------------------

// STEPFormatType

// required string Name = 1;
inline bool STEPFormatType::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void STEPFormatType::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void STEPFormatType::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void STEPFormatType::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& STEPFormatType::name() const {
  // @@protoc_insertion_point(field_get:edu.vanderbilt.isis.meta.STEPFormatType.Name)
  return *name_;
}
inline void STEPFormatType::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:edu.vanderbilt.isis.meta.STEPFormatType.Name)
}
inline void STEPFormatType::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:edu.vanderbilt.isis.meta.STEPFormatType.Name)
}
inline void STEPFormatType::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:edu.vanderbilt.isis.meta.STEPFormatType.Name)
}
inline ::std::string* STEPFormatType::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:edu.vanderbilt.isis.meta.STEPFormatType.Name)
  return name_;
}
inline ::std::string* STEPFormatType::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void STEPFormatType::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:edu.vanderbilt.isis.meta.STEPFormatType.Name)
}

// -------------------------------------------------------------------

// UnassembledComponentsType

// repeated .edu.vanderbilt.isis.meta.CADComponentType CADComponent = 1;
inline int UnassembledComponentsType::cadcomponent_size() const {
  return cadcomponent_.size();
}
inline void UnassembledComponentsType::clear_cadcomponent() {
  cadcomponent_.Clear();
}
inline const ::edu::vanderbilt::isis::meta::CADComponentType& UnassembledComponentsType::cadcomponent(int index) const {
  // @@protoc_insertion_point(field_get:edu.vanderbilt.isis.meta.UnassembledComponentsType.CADComponent)
  return cadcomponent_.Get(index);
}
inline ::edu::vanderbilt::isis::meta::CADComponentType* UnassembledComponentsType::mutable_cadcomponent(int index) {
  // @@protoc_insertion_point(field_mutable:edu.vanderbilt.isis.meta.UnassembledComponentsType.CADComponent)
  return cadcomponent_.Mutable(index);
}
inline ::edu::vanderbilt::isis::meta::CADComponentType* UnassembledComponentsType::add_cadcomponent() {
  // @@protoc_insertion_point(field_add:edu.vanderbilt.isis.meta.UnassembledComponentsType.CADComponent)
  return cadcomponent_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::CADComponentType >&
UnassembledComponentsType::cadcomponent() const {
  // @@protoc_insertion_point(field_list:edu.vanderbilt.isis.meta.UnassembledComponentsType.CADComponent)
  return cadcomponent_;
}
inline ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::CADComponentType >*
UnassembledComponentsType::mutable_cadcomponent() {
  // @@protoc_insertion_point(field_mutable_list:edu.vanderbilt.isis.meta.UnassembledComponentsType.CADComponent)
  return &cadcomponent_;
}

// -------------------------------------------------------------------

// UnitsType

// required string Value = 1;
inline bool UnitsType::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UnitsType::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UnitsType::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UnitsType::clear_value() {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& UnitsType::value() const {
  // @@protoc_insertion_point(field_get:edu.vanderbilt.isis.meta.UnitsType.Value)
  return *value_;
}
inline void UnitsType::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set:edu.vanderbilt.isis.meta.UnitsType.Value)
}
inline void UnitsType::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set_char:edu.vanderbilt.isis.meta.UnitsType.Value)
}
inline void UnitsType::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:edu.vanderbilt.isis.meta.UnitsType.Value)
}
inline ::std::string* UnitsType::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:edu.vanderbilt.isis.meta.UnitsType.Value)
  return value_;
}
inline ::std::string* UnitsType::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UnitsType::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:edu.vanderbilt.isis.meta.UnitsType.Value)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace meta
}  // namespace isis
}  // namespace vanderbilt
}  // namespace edu

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::edu::vanderbilt::isis::meta::ConnectorDatumType_AlignType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::edu::vanderbilt::isis::meta::ConnectorDatumType_AlignType>() {
  return ::edu::vanderbilt::isis::meta::ConnectorDatumType_AlignType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_AssemblyInterface_2eproto__INCLUDED
